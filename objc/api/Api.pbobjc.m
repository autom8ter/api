// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Api.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ApiRoot

@implementation ApiRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ApiRoot_FileDescriptor

static GPBFileDescriptor *ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GetByEmail

@implementation GetByEmail

@dynamic email;

typedef struct GetByEmail__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
} GetByEmail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = GetByEmail_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetByEmail__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetByEmail class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetByEmail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IDToken

@implementation IDToken

@dynamic iss;
@dynamic sub;
@dynamic aud;
@dynamic exp;
@dynamic iat;
@dynamic name;
@dynamic givenName;
@dynamic familyName;
@dynamic gender;
@dynamic birthdate;
@dynamic email;
@dynamic picture;

typedef struct IDToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *iss;
  NSString *sub;
  NSString *aud;
  NSString *name;
  NSString *givenName;
  NSString *familyName;
  NSString *gender;
  NSString *birthdate;
  NSString *email;
  NSString *picture;
  int64_t exp;
  int64_t iat;
} IDToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iss",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Iss,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IDToken__storage_, iss),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sub",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Sub,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IDToken__storage_, sub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aud",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Aud,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IDToken__storage_, aud),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Exp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IDToken__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iat",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Iat,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IDToken__storage_, iat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Name,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IDToken__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "givenName",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_GivenName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(IDToken__storage_, givenName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "familyName",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_FamilyName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(IDToken__storage_, familyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Gender,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(IDToken__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthdate",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Birthdate,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(IDToken__storage_, birthdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Email,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(IDToken__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Picture,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(IDToken__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IDToken class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IDToken__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserMetadata

@implementation UserMetadata

@dynamic phone;
@dynamic plan;
@dynamic payToken;
@dynamic lastContact;

typedef struct UserMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
  NSString *plan;
  NSString *payToken;
  NSString *lastContact;
} UserMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payToken",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_PayToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, payToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastContact",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_LastContact,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, lastContact),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserMetadata class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessToken

@implementation AccessToken

@dynamic iss;
@dynamic sub;
@dynamic audArray, audArray_Count;
@dynamic azp;
@dynamic exp;
@dynamic iat;
@dynamic scope;

typedef struct AccessToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *iss;
  NSString *sub;
  NSMutableArray *audArray;
  NSString *azp;
  NSString *scope;
  int64_t exp;
  int64_t iat;
} AccessToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "iss",
        .dataTypeSpecific.className = NULL,
        .number = AccessToken_FieldNumber_Iss,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccessToken__storage_, iss),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sub",
        .dataTypeSpecific.className = NULL,
        .number = AccessToken_FieldNumber_Sub,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AccessToken__storage_, sub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audArray",
        .dataTypeSpecific.className = NULL,
        .number = AccessToken_FieldNumber_AudArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AccessToken__storage_, audArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "azp",
        .dataTypeSpecific.className = NULL,
        .number = AccessToken_FieldNumber_Azp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AccessToken__storage_, azp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = AccessToken_FieldNumber_Exp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AccessToken__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "iat",
        .dataTypeSpecific.className = NULL,
        .number = AccessToken_FieldNumber_Iat,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AccessToken__storage_, iat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "scope",
        .dataTypeSpecific.className = NULL,
        .number = AccessToken_FieldNumber_Scope,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AccessToken__storage_, scope),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessToken class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccessToken__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
