syntax="proto3";

package api;

import "google/api/annotations.proto";

service UtilityService {
    rpc Echo(Message) returns (Message) {
        option (google.api.http) = {
      post: "/utility/echo"
      body: "*"
    };
    }
    rpc EchoSpanish(Message) returns (Message) {
        option (google.api.http) = {
      post: "/utility/echo/spanish"
      body: "*"
    };
    }
    rpc EchoChinese(Message) returns (Message) {
        option (google.api.http) = {
      post: "/utility/echo/chinese"
      body: "*"
    };
    }
    rpc EchoEnglish(Message) returns (Message) {
        option (google.api.http) = {
      post: "/utility/echo/english"
      body: "*"
    };
    }
    rpc EchoHindi(Message) returns (Message) {
        option (google.api.http) = {
      post: "/utility/echo/hindi"
      body: "*"
    };
    }
    rpc EchoArabic(Message) returns (Message) {
        option (google.api.http) = {
      post: "/utility/echo/arabic"
      body: "*"
    };
    }
    rpc MarshalJSON(Bytes) returns (Bytes) {
        option (google.api.http) = {
      post: "/utility/marshal/json"
      body: "*"
    };
    }
    rpc MarshalYAML(Bytes) returns (Bytes) {
        option (google.api.http) = {
      post: "/utility/marshal/yaml"
      body: "*"
    };
    }
    rpc MarshalXML(Bytes) returns (Bytes) {
        option (google.api.http) = {
      post: "/utility/marshal/xml"
      body: "*"
    };
    }
    rpc Render(RenderRequest) returns (Bytes) {
        option (google.api.http) = {
      post: "/utility/render"
      body: "*"
    };
    }

}

service ContactService {
    rpc SendSMS(SMS) returns (Bytes) {
        option (google.api.http) = {
      post: "/contact/sms/{to}"
      body: "*"
    };
    }
    rpc SendSMSBlast(SMSBlast) returns (stream Bytes) {
        option (google.api.http) = {
      post: "/contact/sms/blast"
      body: "*"
    };
    }
    rpc GetSMS(Identifier) returns (Bytes) {
        option (google.api.http) = {
      post: "/contact/sms/{id}"
      body: "*"
    };
    }
    rpc SendEmail(EmailRequest) returns (Message) {
        option (google.api.http) = {
      post: "/contact/email/{email.address}"
      body: "*"
    };
    }
    rpc SendEmailBlast(EmailBlastRequest) returns (stream Message) {
        option (google.api.http) = {
      post: "/contact/email/blast"
      body: "*"
    };
    }
    rpc SendCall(Call) returns (Bytes) {
        option (google.api.http) = {
      post: "/contact/call/{to}"
      body: "*"
    };
    }
    rpc SendCallBlast(CallBlast) returns (stream Bytes) {
        option (google.api.http) = {
      post: "/contact/call/blast"
      body: "*"
    };
    }
}

service PaymentService {
    rpc Subscribe(SubscribeRequest) returns (Bytes) {
        option (google.api.http) = {
      post: "/payment/subscribe/{email}"
      body: "*"
    };
    }
    rpc Unsubscribe(UnSubscribeRequest) returns (Bytes) {
        option (google.api.http) = {
      post: "/payment/unsubscribe/{email}"
      body: "*"
    };
    }
}

service UserService {
    rpc GetUser(UserByEmailRequest) returns (User) {
        option (google.api.http) = {
      post: "/user/get/{email}"
      body: "*"
    };
    }
    rpc UpdateUser(UserRequest) returns (Bytes) {
        option (google.api.http) = {
      post: "/user/update/{user.email}"
      body: "*"
    };
    }
    rpc CreateUser(UserRequest) returns (Bytes) {
        option (google.api.http) = {
      post: "/user/create"
      body: "*"
    };
    }
    rpc DeleteUser(UserByEmailRequest) returns (Bytes) {
        option (google.api.http) = {
      post: "/user/delete/{email}"
      body: "*"
    };
    }
    rpc ListUsers(ManagementToken) returns (stream User) {
        option (google.api.http) = {
      post: "/user/list"
      body: "*"
    };
    }
}

message SubscribeRequest {
    string email=1;
    string plan =2;
    Card card =3;
}

message UnSubscribeRequest {
    string email=1;
    string plan =2;
}

message Card {
    string number=1;
    string exp_month=2;
    string exp_year =3;
    string cvc=4;
}

message Empty {}

message ManagementToken {
    string token=1;
}

message UserRequest {
    ManagementToken string=1;
    User user=2;
}

message UserByEmailRequest {
    ManagementToken token=1;
    string email =2;
}
message Identifier {
    string id=1;
}

message SMS {
    string service =1;
    string to =2;
    Message message=3;
    string mediaURL =4;
    string callback=5;
    string app=6;
}

message SMSBlast {
    string service =1;
    repeated string to =2;
    Message message=3;
    string mediaURL =4;
    string callback=5;
    string app=6;
}

message EmailRequest {
    string from_name =1;
    string from_email =2;
    Email email =3;
}

message EmailBlastRequest {
    string from_name =1;
    string from_email =2;
    EmailBlast blast =3;
}

message EmailBlast {
    map<string,string> name_address =1;
    string subject =2;
    string plain=3;
    string html=4;
}

message Email {
    string name =1;
    string address =2;
    string subject =3;
    string plain=4;
    string html=5;
}

message Call {
    string from=1;
    string to =2;
    string app=3;
}

message CallBlast {
    string from=1;
    repeated string to =2;
    string app=3;
}

message Message {
    string value = 1;
}

message User {
    string user_id=1;
    string name=2;
    string given_name=3;
    string family_name=4;
    string gender =5;
    string birthdate=6;
    string email=7;
    string phone_number=8;
    string picture=9;
    UserMetadata user_metadata=10;
    AppMetadata app_metadata=11;
    string last_ip =12;
    bool blocked =13;
    string nickname =14;
    repeated string multifactor=15;
    string created_at=17;
    string updated_at=18;
    bool phone_verified=19;
    repeated Identity identities =20;
}

message Identity{
    string connection =1;
    string user_id=2;
    string provider=3;
    string isSocial=4;
}

message UserMetadata {
    map<string,string> metadata =1;
}

message AppMetadata {
    map<string,string> metadata =1;
}

message Auth {
    string domain =1;
    string client_id=2;
    string client_secret=3;
    string redirect=4;
    string audience=5;
    repeated Scope scopes=6;
    ManagementToken management =7;
}

message Bytes {
    bytes bits =1;
}

message Template {
    string name =1;
    string text =2;
}

message JSONWebKeys {
    string kty =1;
    string kid =2;
    string use =3;
    string n =4;
    string e =5;
   repeated string x5c =6;
}

message Jwks {
    repeated JSONWebKeys keys=1;
}

enum Scope {
    OPENID =0;
    PROFILE =1;
    EMAIL =2;
    READ_USERS=3;
    READ_USER_IDP_TOKENS=4;
    CREATE_USERS=5;
    READ_STATS=6;
    READ_EMAIL_TEMPLATES =7;
    UPDATE_EMAIL_TEMPLATES=8;
    CREATE_EMAIL_TEMPLATES=9;
    READ_RULES =10;
    UPDATE_RULES=11;
    CREATE_RULES=12;
    DELETE_RULES=13;
    READ_ROLES =14;
    UPDATE_ROLES=15;
    CREATE_ROLES=16;
    DELETE_ROLES=17;
    READ_LOGS=18;
}

enum HTTPMethod {
    GET =0;
    POST=1;
}

message HTTPRequest {
    HTTPMethod method=1;
    string url =2;
    string token =3;
    string user =4;
    string password=5;
    string contentType =6;
    map<string, string> headers =7;
    map<string, string> form =8;
    map<string, string> cookies =9;
    Bytes body =10;
}

message RenderRequest {
    Template template=1;
    Bytes data=2;
}