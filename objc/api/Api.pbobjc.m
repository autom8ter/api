// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Api.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "common/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ApiRoot

@implementation ApiRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ApiRoot_FileDescriptor

static GPBFileDescriptor *ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Scope

GPBEnumDescriptor *Scope_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Openid\000Profile\000Email\000ReadUsers\000ReadUserI"
        "dpTokens\000CreateUsers\000ReadStats\000ReadEmail"
        "Templates\000UpdateEmailTemplates\000CreateEma"
        "ilTemplates\000ReadRules\000UpdateRules\000Create"
        "Rules\000DeleteRules\000ReadRoles\000UpdateRoles\000"
        "CreateRoles\000DeleteRoles\000ReadLogs\000";
    static const int32_t values[] = {
        Scope_Openid,
        Scope_Profile,
        Scope_Email,
        Scope_ReadUsers,
        Scope_ReadUserIdpTokens,
        Scope_CreateUsers,
        Scope_ReadStats,
        Scope_ReadEmailTemplates,
        Scope_UpdateEmailTemplates,
        Scope_CreateEmailTemplates,
        Scope_ReadRules,
        Scope_UpdateRules,
        Scope_CreateRules,
        Scope_DeleteRules,
        Scope_ReadRoles,
        Scope_UpdateRoles,
        Scope_CreateRoles,
        Scope_DeleteRoles,
        Scope_ReadLogs,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Scope)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Scope_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Scope_IsValidValue(int32_t value__) {
  switch (value__) {
    case Scope_Openid:
    case Scope_Profile:
    case Scope_Email:
    case Scope_ReadUsers:
    case Scope_ReadUserIdpTokens:
    case Scope_CreateUsers:
    case Scope_ReadStats:
    case Scope_ReadEmailTemplates:
    case Scope_UpdateEmailTemplates:
    case Scope_CreateEmailTemplates:
    case Scope_ReadRules:
    case Scope_UpdateRules:
    case Scope_CreateRules:
    case Scope_DeleteRules:
    case Scope_ReadRoles:
    case Scope_UpdateRoles:
    case Scope_CreateRoles:
    case Scope_DeleteRoles:
    case Scope_ReadLogs:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum URL

GPBEnumDescriptor *URL_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UserInfourl\000Tokenurl\000Authorizeurl\000Usersu"
        "rl\000Clientsurl\000Grantsurl\000Rulesurl\000Rolesur"
        "l\000Logsurl\000Statsurl\000Connectionsurl\000Tenant"
        "surl\000EmailTemplateurl\000Emailurl\000SearchUse"
        "rsurl\000Deviceurl\000Jwksurl\000ClientGrantsurl\000";
    static const int32_t values[] = {
        URL_UserInfourl,
        URL_Tokenurl,
        URL_Authorizeurl,
        URL_Usersurl,
        URL_Clientsurl,
        URL_Grantsurl,
        URL_Rulesurl,
        URL_Rolesurl,
        URL_Logsurl,
        URL_Statsurl,
        URL_Connectionsurl,
        URL_Tenantsurl,
        URL_EmailTemplateurl,
        URL_Emailurl,
        URL_SearchUsersurl,
        URL_Deviceurl,
        URL_Jwksurl,
        URL_ClientGrantsurl,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(URL)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:URL_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL URL_IsValidValue(int32_t value__) {
  switch (value__) {
    case URL_UserInfourl:
    case URL_Tokenurl:
    case URL_Authorizeurl:
    case URL_Usersurl:
    case URL_Clientsurl:
    case URL_Grantsurl:
    case URL_Rulesurl:
    case URL_Rolesurl:
    case URL_Logsurl:
    case URL_Statsurl:
    case URL_Connectionsurl:
    case URL_Tenantsurl:
    case URL_EmailTemplateurl:
    case URL_Emailurl:
    case URL_SearchUsersurl:
    case URL_Deviceurl:
    case URL_Jwksurl:
    case URL_ClientGrantsurl:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Plan

GPBEnumDescriptor *Plan_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Free\000Basic\000Premium\000";
    static const int32_t values[] = {
        Plan_Free,
        Plan_Basic,
        Plan_Premium,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Plan)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Plan_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Plan_IsValidValue(int32_t value__) {
  switch (value__) {
    case Plan_Free:
    case Plan_Basic:
    case Plan_Premium:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - FaxRequest

@implementation FaxRequest

@dynamic hasTo, to;
@dynamic hasFrom, from;
@dynamic hasMediaURL, mediaURL;
@dynamic hasQuality, quality;
@dynamic hasCallback, callback;
@dynamic storeMedia;

typedef struct FaxRequest__storage_ {
  uint32_t _has_storage_[1];
  String *to;
  String *from;
  String *mediaURL;
  String *quality;
  String *callback;
} FaxRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = FaxRequest_FieldNumber_To,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FaxRequest__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = FaxRequest_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FaxRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = FaxRequest_FieldNumber_MediaURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FaxRequest__storage_, mediaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quality",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = FaxRequest_FieldNumber_Quality,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FaxRequest__storage_, quality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "callback",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = FaxRequest_FieldNumber_Callback,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FaxRequest__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "storeMedia",
        .dataTypeSpecific.className = NULL,
        .number = FaxRequest_FieldNumber_StoreMedia,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FaxRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FaxRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResourceRequest

@implementation ResourceRequest

@dynamic hasToken, token;
@dynamic method;
@dynamic hasDomain, domain;
@dynamic URL;
@dynamic hasForm, form;
@dynamic hasBody, body;

typedef struct ResourceRequest__storage_ {
  uint32_t _has_storage_[1];
  HTTPMethod method;
  URL URL;
  Token *token;
  String *domain;
  StringMap *form;
  Bytes *body;
} ResourceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = ResourceRequest_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResourceRequest__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "method",
        .dataTypeSpecific.enumDescFunc = HTTPMethod_EnumDescriptor,
        .number = ResourceRequest_FieldNumber_Method,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResourceRequest__storage_, method),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "domain",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = ResourceRequest_FieldNumber_Domain,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResourceRequest__storage_, domain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.enumDescFunc = URL_EnumDescriptor,
        .number = ResourceRequest_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ResourceRequest__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "form",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = ResourceRequest_FieldNumber_Form,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ResourceRequest__storage_, form),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = GPBStringifySymbol(Bytes),
        .number = ResourceRequest_FieldNumber_Body,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ResourceRequest__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResourceRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResourceRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ResourceRequest_Method_RawValue(ResourceRequest *message) {
  GPBDescriptor *descriptor = [ResourceRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ResourceRequest_FieldNumber_Method];
  return GPBGetMessageInt32Field(message, field);
}

void SetResourceRequest_Method_RawValue(ResourceRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [ResourceRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ResourceRequest_FieldNumber_Method];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t ResourceRequest_URL_RawValue(ResourceRequest *message) {
  GPBDescriptor *descriptor = [ResourceRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ResourceRequest_FieldNumber_URL];
  return GPBGetMessageInt32Field(message, field);
}

void SetResourceRequest_URL_RawValue(ResourceRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [ResourceRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ResourceRequest_FieldNumber_URL];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SubscribeRequest

@implementation SubscribeRequest

@dynamic hasEmail, email;
@dynamic plan;
@dynamic hasCard, card;

typedef struct SubscribeRequest__storage_ {
  uint32_t _has_storage_[1];
  Plan plan;
  String *email;
  Card *card;
} SubscribeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SubscribeRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "plan",
        .dataTypeSpecific.enumDescFunc = Plan_EnumDescriptor,
        .number = SubscribeRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubscribeRequest__storage_, plan),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "card",
        .dataTypeSpecific.className = GPBStringifySymbol(Card),
        .number = SubscribeRequest_FieldNumber_Card,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubscribeRequest__storage_, card),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SubscribeRequest_Plan_RawValue(SubscribeRequest *message) {
  GPBDescriptor *descriptor = [SubscribeRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SubscribeRequest_FieldNumber_Plan];
  return GPBGetMessageInt32Field(message, field);
}

void SetSubscribeRequest_Plan_RawValue(SubscribeRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [SubscribeRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SubscribeRequest_FieldNumber_Plan];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UnSubscribeRequest

@implementation UnSubscribeRequest

@dynamic hasEmail, email;
@dynamic plan;

typedef struct UnSubscribeRequest__storage_ {
  uint32_t _has_storage_[1];
  Plan plan;
  String *email;
} UnSubscribeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = UnSubscribeRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnSubscribeRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "plan",
        .dataTypeSpecific.enumDescFunc = Plan_EnumDescriptor,
        .number = UnSubscribeRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnSubscribeRequest__storage_, plan),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnSubscribeRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnSubscribeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UnSubscribeRequest_Plan_RawValue(UnSubscribeRequest *message) {
  GPBDescriptor *descriptor = [UnSubscribeRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UnSubscribeRequest_FieldNumber_Plan];
  return GPBGetMessageInt32Field(message, field);
}

void SetUnSubscribeRequest_Plan_RawValue(UnSubscribeRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [UnSubscribeRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UnSubscribeRequest_FieldNumber_Plan];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Card

@implementation Card

@dynamic hasNumber, number;
@dynamic hasExpMonth, expMonth;
@dynamic hasExpYear, expYear;
@dynamic hasCvc, cvc;

typedef struct Card__storage_ {
  uint32_t _has_storage_[1];
  String *number;
  String *expMonth;
  String *expYear;
  String *cvc;
} Card__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Card_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Card__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expMonth",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Card_FieldNumber_ExpMonth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Card__storage_, expMonth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expYear",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Card_FieldNumber_ExpYear,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Card__storage_, expYear),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cvc",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Card_FieldNumber_Cvc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Card__storage_, cvc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Card class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Card__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMS

@implementation SMS

@dynamic hasService, service;
@dynamic hasTo, to;
@dynamic hasMessage, message;
@dynamic hasMediaURL, mediaURL;
@dynamic hasCallback, callback;
@dynamic hasApp, app;

typedef struct SMS__storage_ {
  uint32_t _has_storage_[1];
  String *service;
  String *to;
  String *message;
  String *mediaURL;
  String *callback;
  String *app;
} SMS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "service",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMS_FieldNumber_Service,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMS__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMS_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SMS__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMS_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SMS__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMS_FieldNumber_MediaURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SMS__storage_, mediaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "callback",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMS_FieldNumber_Callback,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SMS__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "app",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMS_FieldNumber_App,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SMS__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMS class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMS__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMSBlast

@implementation SMSBlast

@dynamic hasService, service;
@dynamic hasTo, to;
@dynamic hasMessage, message;
@dynamic hasMediaURL, mediaURL;
@dynamic hasCallback, callback;
@dynamic hasApp, app;

typedef struct SMSBlast__storage_ {
  uint32_t _has_storage_[1];
  String *service;
  StringArray *to;
  String *message;
  String *mediaURL;
  String *callback;
  String *app;
} SMSBlast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "service",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMSBlast_FieldNumber_Service,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = SMSBlast_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMSBlast_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMSBlast_FieldNumber_MediaURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, mediaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "callback",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMSBlast_FieldNumber_Callback,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "app",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SMSBlast_FieldNumber_App,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMSBlast class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMSBlast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailRequest

@implementation EmailRequest

@dynamic hasFromName, fromName;
@dynamic hasFromEmail, fromEmail;
@dynamic hasEmail, email;

typedef struct EmailRequest__storage_ {
  uint32_t _has_storage_[1];
  String *fromName;
  String *fromEmail;
  Email *email;
} EmailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromName",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EmailRequest_FieldNumber_FromName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, fromName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromEmail",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EmailRequest_FieldNumber_FromEmail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, fromEmail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(Email),
        .number = EmailRequest_FieldNumber_Email,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailBlastRequest

@implementation EmailBlastRequest

@dynamic hasFromName, fromName;
@dynamic hasFromEmail, fromEmail;
@dynamic hasBlast, blast;

typedef struct EmailBlastRequest__storage_ {
  uint32_t _has_storage_[1];
  String *fromName;
  String *fromEmail;
  EmailBlast *blast;
} EmailBlastRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromName",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EmailBlastRequest_FieldNumber_FromName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailBlastRequest__storage_, fromName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fromEmail",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EmailBlastRequest_FieldNumber_FromEmail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailBlastRequest__storage_, fromEmail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blast",
        .dataTypeSpecific.className = GPBStringifySymbol(EmailBlast),
        .number = EmailBlastRequest_FieldNumber_Blast,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmailBlastRequest__storage_, blast),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailBlastRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailBlastRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailBlast

@implementation EmailBlast

@dynamic hasNameAddress, nameAddress;
@dynamic hasSubject, subject;
@dynamic hasPlain, plain;
@dynamic hasHtml, html;

typedef struct EmailBlast__storage_ {
  uint32_t _has_storage_[1];
  StringMap *nameAddress;
  String *subject;
  String *plain;
  String *html;
} EmailBlast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nameAddress",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = EmailBlast_FieldNumber_NameAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailBlast__storage_, nameAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EmailBlast_FieldNumber_Subject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailBlast__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "plain",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EmailBlast_FieldNumber_Plain,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmailBlast__storage_, plain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "html",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EmailBlast_FieldNumber_Html,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EmailBlast__storage_, html),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailBlast class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailBlast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Email

@implementation Email

@dynamic hasName, name;
@dynamic hasAddress, address;
@dynamic hasSubject, subject;
@dynamic hasPlain, plain;
@dynamic hasHtml, html;

typedef struct Email__storage_ {
  uint32_t _has_storage_[1];
  String *name;
  String *address;
  String *subject;
  String *plain;
  String *html;
} Email__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Email_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Email__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Email_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Email__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Email_FieldNumber_Subject,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Email__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "plain",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Email_FieldNumber_Plain,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Email__storage_, plain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "html",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Email_FieldNumber_Html,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Email__storage_, html),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Email class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Email__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Call

@implementation Call

@dynamic hasFrom, from;
@dynamic hasTo, to;
@dynamic hasApp, app;

typedef struct Call__storage_ {
  uint32_t _has_storage_[1];
  String *from;
  String *to;
  String *app;
} Call__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Call_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Call__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Call_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Call__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "app",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Call_FieldNumber_App,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Call__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Call class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Call__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CallBlast

@implementation CallBlast

@dynamic hasFrom, from;
@dynamic hasTo, to;
@dynamic hasApp, app;

typedef struct CallBlast__storage_ {
  uint32_t _has_storage_[1];
  String *from;
  StringArray *to;
  String *app;
} CallBlast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = CallBlast_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CallBlast__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = CallBlast_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CallBlast__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "app",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = CallBlast_FieldNumber_App,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CallBlast__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CallBlast class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CallBlast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - User

@implementation User

@dynamic hasUserId, userId;
@dynamic hasName, name;
@dynamic hasGivenName, givenName;
@dynamic hasFamilyName, familyName;
@dynamic hasGender, gender;
@dynamic hasBirthdate, birthdate;
@dynamic hasEmail, email;
@dynamic hasPhoneNumber, phoneNumber;
@dynamic hasPicture, picture;
@dynamic hasUserMetadata, userMetadata;
@dynamic hasAppMetadata, appMetadata;
@dynamic hasLastIp, lastIp;
@dynamic blocked;
@dynamic hasNickname, nickname;
@dynamic hasMultifactor, multifactor;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic phoneVerified;
@dynamic emailVerified;
@dynamic hasPassword, password;
@dynamic identitiesArray, identitiesArray_Count;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  String *userId;
  String *name;
  String *givenName;
  String *familyName;
  String *gender;
  String *birthdate;
  String *email;
  String *phoneNumber;
  String *picture;
  StringMap *userMetadata;
  StringMap *appMetadata;
  String *lastIp;
  String *nickname;
  StringArray *multifactor;
  String *createdAt;
  String *updatedAt;
  String *password;
  NSMutableArray *identitiesArray;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "givenName",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_GivenName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, givenName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "familyName",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_FamilyName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(User__storage_, familyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(User__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "birthdate",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Birthdate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(User__storage_, birthdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Email,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(User__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_PhoneNumber,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(User__storage_, phoneNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Picture,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(User__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = User_FieldNumber_UserMetadata,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(User__storage_, userMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = User_FieldNumber_AppMetadata,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(User__storage_, appMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastIp",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_LastIp,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(User__storage_, lastIp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blocked",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Blocked,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Nickname,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(User__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "multifactor",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = User_FieldNumber_Multifactor,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(User__storage_, multifactor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_CreatedAt,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(User__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_UpdatedAt,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(User__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "phoneVerified",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_PhoneVerified,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "emailVerified",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_EmailVerified,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Password,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(User__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "identitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Identity),
        .number = User_FieldNumber_IdentitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, identitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Identity

@implementation Identity

@dynamic hasConnection, connection;
@dynamic hasUserId, userId;
@dynamic hasProvider, provider;
@dynamic isSocial;

typedef struct Identity__storage_ {
  uint32_t _has_storage_[1];
  String *connection;
  String *userId;
  String *provider;
} Identity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connection",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Identity_FieldNumber_Connection,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Identity__storage_, connection),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Identity_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Identity__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "provider",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Identity_FieldNumber_Provider,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Identity__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isSocial",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_IsSocial,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Identity class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Identity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Auth

@implementation Auth

@dynamic hasDomain, domain;
@dynamic hasClientId, clientId;
@dynamic hasClientSecret, clientSecret;
@dynamic hasRedirect, redirect;
@dynamic scopesArray, scopesArray_Count;

typedef struct Auth__storage_ {
  uint32_t _has_storage_[1];
  String *domain;
  String *clientId;
  String *clientSecret;
  String *redirect;
  GPBEnumArray *scopesArray;
} Auth__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "domain",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Auth_FieldNumber_Domain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Auth__storage_, domain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Auth_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Auth__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientSecret",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Auth_FieldNumber_ClientSecret,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Auth__storage_, clientSecret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "redirect",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Auth_FieldNumber_Redirect,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Auth__storage_, redirect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scopesArray",
        .dataTypeSpecific.enumDescFunc = Scope_EnumDescriptor,
        .number = Auth_FieldNumber_ScopesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Auth__storage_, scopesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Auth class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Auth__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JSONWebKeys

@implementation JSONWebKeys

@dynamic hasKty, kty;
@dynamic hasKid, kid;
@dynamic hasUse, use;
@dynamic hasN, n;
@dynamic hasE, e;
@dynamic hasX5C, x5C;

typedef struct JSONWebKeys__storage_ {
  uint32_t _has_storage_[1];
  String *kty;
  String *kid;
  String *use;
  String *n;
  String *e;
  StringArray *x5C;
} JSONWebKeys__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kty",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JSONWebKeys_FieldNumber_Kty,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, kty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kid",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JSONWebKeys_FieldNumber_Kid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, kid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "use",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JSONWebKeys_FieldNumber_Use,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, use),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "n",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JSONWebKeys_FieldNumber_N,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, n),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "e",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JSONWebKeys_FieldNumber_E,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, e),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "x5C",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = JSONWebKeys_FieldNumber_X5C,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, x5C),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JSONWebKeys class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JSONWebKeys__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\002!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Jwks

@implementation Jwks

@dynamic keysArray, keysArray_Count;

typedef struct Jwks__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *keysArray;
} Jwks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keysArray",
        .dataTypeSpecific.className = GPBStringifySymbol(JSONWebKeys),
        .number = Jwks_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Jwks__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Jwks class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Jwks__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RenderRequest

@implementation RenderRequest

@dynamic hasName, name;
@dynamic hasText, text;
@dynamic hasData_p, data_p;

typedef struct RenderRequest__storage_ {
  uint32_t _has_storage_[1];
  String *name;
  String *text;
  Bytes *data_p;
} RenderRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = RenderRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RenderRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = RenderRequest_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RenderRequest__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Bytes),
        .number = RenderRequest_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RenderRequest__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RenderRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RenderRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchPhoneNumberRequest

@implementation SearchPhoneNumberRequest

@dynamic hasState, state;
@dynamic hasCapabilities, capabilities;
@dynamic hasTotalResults, totalResults;

typedef struct SearchPhoneNumberRequest__storage_ {
  uint32_t _has_storage_[1];
  String *state;
  NumberCapabilities *capabilities;
  Int64 *totalResults;
} SearchPhoneNumberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = SearchPhoneNumberRequest_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchPhoneNumberRequest__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "capabilities",
        .dataTypeSpecific.className = GPBStringifySymbol(NumberCapabilities),
        .number = SearchPhoneNumberRequest_FieldNumber_Capabilities,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchPhoneNumberRequest__storage_, capabilities),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalResults",
        .dataTypeSpecific.className = GPBStringifySymbol(Int64),
        .number = SearchPhoneNumberRequest_FieldNumber_TotalResults,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchPhoneNumberRequest__storage_, totalResults),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchPhoneNumberRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchPhoneNumberRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PhoneNumber

@implementation PhoneNumber

@dynamic hasFriendlyName, friendlyName;
@dynamic hasPhoneNumber, phoneNumber;
@dynamic hasRegion, region;
@dynamic hasCapabilities, capabilities;

typedef struct PhoneNumber__storage_ {
  uint32_t _has_storage_[1];
  String *friendlyName;
  String *phoneNumber;
  String *region;
  NumberCapabilities *capabilities;
} PhoneNumber__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendlyName",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = PhoneNumber_FieldNumber_FriendlyName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PhoneNumber__storage_, friendlyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = PhoneNumber_FieldNumber_PhoneNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PhoneNumber__storage_, phoneNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "region",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = PhoneNumber_FieldNumber_Region,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PhoneNumber__storage_, region),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "capabilities",
        .dataTypeSpecific.className = GPBStringifySymbol(NumberCapabilities),
        .number = PhoneNumber_FieldNumber_Capabilities,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PhoneNumber__storage_, capabilities),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PhoneNumber class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PhoneNumber__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NumberCapabilities

@implementation NumberCapabilities

@dynamic voice;
@dynamic sms;
@dynamic mms;

typedef struct NumberCapabilities__storage_ {
  uint32_t _has_storage_[1];
} NumberCapabilities__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voice",
        .dataTypeSpecific.className = NULL,
        .number = NumberCapabilities_FieldNumber_Voice,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sms",
        .dataTypeSpecific.className = NULL,
        .number = NumberCapabilities_FieldNumber_Sms,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "mms",
        .dataTypeSpecific.className = NULL,
        .number = NumberCapabilities_FieldNumber_Mms,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NumberCapabilities class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NumberCapabilities__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PhoneNumberResource

@implementation PhoneNumberResource

@dynamic hasNumber, number;
@dynamic hasId_p, id_p;
@dynamic hasUri, uri;

typedef struct PhoneNumberResource__storage_ {
  uint32_t _has_storage_[1];
  PhoneNumber *number;
  String *id_p;
  String *uri;
} PhoneNumberResource__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = GPBStringifySymbol(PhoneNumber),
        .number = PhoneNumberResource_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PhoneNumberResource__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = PhoneNumberResource_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PhoneNumberResource__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uri",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = PhoneNumberResource_FieldNumber_Uri,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PhoneNumberResource__storage_, uri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PhoneNumberResource class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PhoneNumberResource__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TokenQuery

@implementation TokenQuery

@dynamic hasToken, token;
@dynamic hasQuery, query;

typedef struct TokenQuery__storage_ {
  uint32_t _has_storage_[1];
  Token *token;
  String *query;
} TokenQuery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = TokenQuery_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TokenQuery__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "query",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = TokenQuery_FieldNumber_Query,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TokenQuery__storage_, query),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TokenQuery class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TokenQuery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IDBody

@implementation IDBody

@dynamic hasId_p, id_p;
@dynamic hasBody, body;

typedef struct IDBody__storage_ {
  uint32_t _has_storage_[1];
  Identifier *id_p;
  Bytes *body;
} IDBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = IDBody_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IDBody__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = GPBStringifySymbol(Bytes),
        .number = IDBody_FieldNumber_Body,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IDBody__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IDBody class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IDBody__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IDStrings

@implementation IDStrings

@dynamic hasId_p, id_p;
@dynamic hasStrings, strings;

typedef struct IDStrings__storage_ {
  uint32_t _has_storage_[1];
  Identifier *id_p;
  StringArray *strings;
} IDStrings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = IDStrings_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IDStrings__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "strings",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = IDStrings_FieldNumber_Strings,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IDStrings__storage_, strings),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IDStrings class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IDStrings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Role

@implementation Role

@dynamic hasId_p, id_p;
@dynamic hasName, name;
@dynamic hasDescription_p, description_p;

typedef struct Role__storage_ {
  uint32_t _has_storage_[1];
  String *id_p;
  String *name;
  String *description_p;
} Role__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Role_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Role__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Role_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Role__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Role_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Role__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Role class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Role__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
