// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/user.proto

package user

import (
	fmt "fmt"
	geo "github.com/autom8ter/api/sdk/go/geo"
	time "github.com/autom8ter/api/sdk/go/time"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	Id                   string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName          string             `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Photo                string             `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Email                string             `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Phone                string             `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Registered           bool               `protobuf:"varint,6,opt,name=registered,proto3" json:"registered,omitempty"`
	Verified             bool               `protobuf:"varint,7,opt,name=verified,proto3" json:"verified,omitempty"`
	AccountBalance       int64              `protobuf:"varint,8,opt,name=account_balance,json=accountBalance,proto3" json:"account_balance,omitempty"`
	Description          string             `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Tokens               []string           `protobuf:"bytes,10,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Password             string             `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	RecoveryQuestion     string             `protobuf:"bytes,12,opt,name=recovery_question,json=recoveryQuestion,proto3" json:"recovery_question,omitempty"`
	RecoveryAnswer       string             `protobuf:"bytes,13,opt,name=recovery_answer,json=recoveryAnswer,proto3" json:"recovery_answer,omitempty"`
	TrialEnd             int64              `protobuf:"varint,14,opt,name=trial_end,json=trialEnd,proto3" json:"trial_end,omitempty"`
	Coupon               string             `protobuf:"bytes,15,opt,name=coupon,proto3" json:"coupon,omitempty"`
	Meta                 map[string][]byte  `protobuf:"bytes,16,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Postal               *geo.PostalAddress `protobuf:"bytes,17,opt,name=postal,proto3" json:"postal,omitempty"`
	Tracker              *time.Tracker      `protobuf:"bytes,18,opt,name=tracker,proto3" json:"tracker,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed89022014131a74, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *User) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetRegistered() bool {
	if m != nil {
		return m.Registered
	}
	return false
}

func (m *User) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *User) GetAccountBalance() int64 {
	if m != nil {
		return m.AccountBalance
	}
	return 0
}

func (m *User) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *User) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetRecoveryQuestion() string {
	if m != nil {
		return m.RecoveryQuestion
	}
	return ""
}

func (m *User) GetRecoveryAnswer() string {
	if m != nil {
		return m.RecoveryAnswer
	}
	return ""
}

func (m *User) GetTrialEnd() int64 {
	if m != nil {
		return m.TrialEnd
	}
	return 0
}

func (m *User) GetCoupon() string {
	if m != nil {
		return m.Coupon
	}
	return ""
}

func (m *User) GetMeta() map[string][]byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *User) GetPostal() *geo.PostalAddress {
	if m != nil {
		return m.Postal
	}
	return nil
}

func (m *User) GetTracker() *time.Tracker {
	if m != nil {
		return m.Tracker
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterMapType((map[string][]byte)(nil), "user.User.MetaEntry")
}

func init() { proto.RegisterFile("user/user.proto", fileDescriptor_ed89022014131a74) }

var fileDescriptor_ed89022014131a74 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xcf, 0x8b, 0xd4, 0x30,
	0x1c, 0xc5, 0xe9, 0xb4, 0x3b, 0x3b, 0xfd, 0x76, 0x7e, 0x6d, 0x58, 0x24, 0x8c, 0x20, 0xd5, 0xcb,
	0x16, 0x85, 0x0e, 0xac, 0x07, 0xc5, 0xdb, 0x0a, 0x7b, 0x54, 0xb4, 0xe8, 0x79, 0xc8, 0x36, 0x5f,
	0xc7, 0x30, 0x6d, 0x52, 0x93, 0x74, 0x86, 0xf9, 0xd3, 0xbd, 0x49, 0xd2, 0x4c, 0xdd, 0x4b, 0xc8,
	0xfb, 0xbc, 0x97, 0x5f, 0xe4, 0xc1, 0xaa, 0x37, 0xa8, 0xb7, 0x6e, 0x28, 0x3b, 0xad, 0xac, 0x22,
	0x89, 0x9b, 0x6f, 0x56, 0x56, 0xb4, 0xb8, 0x75, 0xc3, 0x80, 0x37, 0x8b, 0x3d, 0xaa, 0xed, 0x1e,
	0xd5, 0x20, 0xdf, 0xfc, 0x4d, 0x20, 0xf9, 0x69, 0x50, 0x93, 0x25, 0x4c, 0x04, 0xa7, 0x51, 0x1e,
	0x15, 0x69, 0x35, 0x11, 0x9c, 0xbc, 0x86, 0x39, 0x17, 0xa6, 0x6b, 0xd8, 0x79, 0x27, 0x59, 0x8b,
	0x74, 0xe2, 0x9d, 0x2c, 0xb0, 0xaf, 0xac, 0x45, 0x72, 0x0b, 0x57, 0xdd, 0x6f, 0x65, 0x15, 0x8d,
	0xbd, 0x37, 0x08, 0x47, 0xb1, 0x65, 0xa2, 0xa1, 0xc9, 0x40, 0xbd, 0x08, 0x59, 0x89, 0xf4, 0x6a,
	0xcc, 0x4a, 0x24, 0xaf, 0x00, 0x34, 0xee, 0x85, 0xb1, 0xa8, 0x91, 0xd3, 0x69, 0x1e, 0x15, 0xb3,
	0xea, 0x19, 0x21, 0x1b, 0x98, 0x1d, 0x51, 0x8b, 0x5f, 0x02, 0x39, 0xbd, 0xf6, 0xee, 0xa8, 0xc9,
	0x1d, 0xac, 0x58, 0x5d, 0xab, 0x5e, 0xda, 0xdd, 0x13, 0x6b, 0x98, 0xac, 0x91, 0xce, 0xf2, 0xa8,
	0x88, 0xab, 0x65, 0xc0, 0x9f, 0x07, 0x4a, 0x72, 0xc8, 0x38, 0x9a, 0x5a, 0x8b, 0xce, 0x0a, 0x25,
	0x69, 0x1a, 0x1e, 0xf2, 0x1f, 0x91, 0x17, 0x30, 0xb5, 0xea, 0x80, 0xd2, 0x50, 0xc8, 0xe3, 0x22,
	0xad, 0x82, 0x72, 0xc7, 0x77, 0xcc, 0x98, 0x93, 0xd2, 0x9c, 0x66, 0x7e, 0xd9, 0xa8, 0xc9, 0x3b,
	0xb8, 0xd1, 0x58, 0xab, 0x23, 0xea, 0xf3, 0xee, 0x4f, 0x8f, 0xc6, 0xef, 0x3d, 0xf7, 0xa1, 0xf5,
	0xc5, 0xf8, 0x1e, 0xb8, 0xbb, 0xeb, 0x18, 0x66, 0xd2, 0x9c, 0x50, 0xd3, 0x85, 0x8f, 0x2e, 0x2f,
	0xf8, 0xc1, 0x53, 0xf2, 0x12, 0x52, 0xab, 0x05, 0x6b, 0x76, 0x28, 0x39, 0x5d, 0xfa, 0xe7, 0xcc,
	0x3c, 0x78, 0x94, 0xdc, 0x5d, 0xb3, 0x56, 0x7d, 0xa7, 0x24, 0x5d, 0xf9, 0xc5, 0x41, 0x91, 0x02,
	0x92, 0x16, 0x2d, 0xa3, 0xeb, 0x3c, 0x2e, 0xb2, 0xfb, 0xdb, 0xd2, 0x97, 0xc0, 0x7d, 0x6a, 0xf9,
	0x05, 0x2d, 0x7b, 0x94, 0x56, 0x9f, 0x2b, 0x9f, 0x20, 0x6f, 0x61, 0xda, 0x29, 0x63, 0x59, 0x43,
	0x6f, 0xf2, 0xa8, 0xc8, 0xee, 0x49, 0xe9, 0x9a, 0xf0, 0xcd, 0xa3, 0x07, 0xce, 0x35, 0x1a, 0x53,
	0x85, 0x04, 0xb9, 0x83, 0x6b, 0xab, 0x59, 0x7d, 0x40, 0x4d, 0x89, 0x0f, 0x2f, 0x4a, 0x5f, 0xa3,
	0x1f, 0x03, 0xac, 0x2e, 0xee, 0xe6, 0x03, 0xa4, 0xe3, 0x39, 0x64, 0x0d, 0xf1, 0x01, 0xcf, 0xa1,
	0x47, 0x6e, 0xea, 0x7e, 0xfe, 0xc8, 0x9a, 0x7e, 0x68, 0xd0, 0xbc, 0x1a, 0xc4, 0xa7, 0xc9, 0xc7,
	0xe8, 0x69, 0xea, 0x2b, 0xf8, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x0d, 0xf4, 0xc4,
	0xbb, 0x02, 0x00, 0x00,
}
