// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class AppMetadata;
class AppMetadataDefaultTypeInternal;
extern AppMetadataDefaultTypeInternal _AppMetadata_default_instance_;
class Auth;
class AuthDefaultTypeInternal;
extern AuthDefaultTypeInternal _Auth_default_instance_;
class Bytes;
class BytesDefaultTypeInternal;
extern BytesDefaultTypeInternal _Bytes_default_instance_;
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class Email;
class EmailDefaultTypeInternal;
extern EmailDefaultTypeInternal _Email_default_instance_;
class EmailRequest;
class EmailRequestDefaultTypeInternal;
extern EmailRequestDefaultTypeInternal _EmailRequest_default_instance_;
class Identifier;
class IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class SMS;
class SMSDefaultTypeInternal;
extern SMSDefaultTypeInternal _SMS_default_instance_;
class SMSStatus;
class SMSStatusDefaultTypeInternal;
extern SMSStatusDefaultTypeInternal _SMSStatus_default_instance_;
class Template;
class TemplateDefaultTypeInternal;
extern TemplateDefaultTypeInternal _Template_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserMetadata;
class UserMetadataDefaultTypeInternal;
extern UserMetadataDefaultTypeInternal _UserMetadata_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::AppMetadata* Arena::CreateMaybeMessage<::api::AppMetadata>(Arena*);
template<> ::api::Auth* Arena::CreateMaybeMessage<::api::Auth>(Arena*);
template<> ::api::Bytes* Arena::CreateMaybeMessage<::api::Bytes>(Arena*);
template<> ::api::Call* Arena::CreateMaybeMessage<::api::Call>(Arena*);
template<> ::api::Email* Arena::CreateMaybeMessage<::api::Email>(Arena*);
template<> ::api::EmailRequest* Arena::CreateMaybeMessage<::api::EmailRequest>(Arena*);
template<> ::api::Identifier* Arena::CreateMaybeMessage<::api::Identifier>(Arena*);
template<> ::api::Message* Arena::CreateMaybeMessage<::api::Message>(Arena*);
template<> ::api::SMS* Arena::CreateMaybeMessage<::api::SMS>(Arena*);
template<> ::api::SMSStatus* Arena::CreateMaybeMessage<::api::SMSStatus>(Arena*);
template<> ::api::Template* Arena::CreateMaybeMessage<::api::Template>(Arena*);
template<> ::api::UserInfo* Arena::CreateMaybeMessage<::api::UserInfo>(Arena*);
template<> ::api::UserMetadata* Arena::CreateMaybeMessage<::api::UserMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

// ===================================================================

class Identifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Identifier) */ {
 public:
  Identifier();
  virtual ~Identifier();

  Identifier(const Identifier& from);

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Identifier* other);
  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const final {
    return CreateMaybeMessage<Identifier>(NULL);
  }

  Identifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:api.Identifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMSStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMSStatus) */ {
 public:
  SMSStatus();
  virtual ~SMSStatus();

  SMSStatus(const SMSStatus& from);

  inline SMSStatus& operator=(const SMSStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMSStatus(SMSStatus&& from) noexcept
    : SMSStatus() {
    *this = ::std::move(from);
  }

  inline SMSStatus& operator=(SMSStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSStatus* internal_default_instance() {
    return reinterpret_cast<const SMSStatus*>(
               &_SMSStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SMSStatus* other);
  friend void swap(SMSStatus& a, SMSStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMSStatus* New() const final {
    return CreateMaybeMessage<SMSStatus>(NULL);
  }

  SMSStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMSStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMSStatus& from);
  void MergeFrom(const SMSStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string uri = 4;
  void clear_uri();
  static const int kUriFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // .api.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::api::Identifier& _internal_id() const;
  public:
  const ::api::Identifier& id() const;
  ::api::Identifier* release_id();
  ::api::Identifier* mutable_id();
  void set_allocated_id(::api::Identifier* id);

  // .api.SMS sms = 2;
  bool has_sms() const;
  void clear_sms();
  static const int kSmsFieldNumber = 2;
  private:
  const ::api::SMS& _internal_sms() const;
  public:
  const ::api::SMS& sms() const;
  ::api::SMS* release_sms();
  ::api::SMS* mutable_sms();
  void set_allocated_sms(::api::SMS* sms);

  // @@protoc_insertion_point(class_scope:api.SMSStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::api::Identifier* id_;
  ::api::SMS* sms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMS) */ {
 public:
  SMS();
  virtual ~SMS();

  SMS(const SMS& from);

  inline SMS& operator=(const SMS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMS(SMS&& from) noexcept
    : SMS() {
    *this = ::std::move(from);
  }

  inline SMS& operator=(SMS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMS* internal_default_instance() {
    return reinterpret_cast<const SMS*>(
               &_SMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SMS* other);
  friend void swap(SMS& a, SMS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMS* New() const final {
    return CreateMaybeMessage<SMS>(NULL);
  }

  SMS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMS& from);
  void MergeFrom(const SMS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string mediaURL = 4;
  void clear_mediaurl();
  static const int kMediaURLFieldNumber = 4;
  const ::std::string& mediaurl() const;
  void set_mediaurl(const ::std::string& value);
  #if LANG_CXX11
  void set_mediaurl(::std::string&& value);
  #endif
  void set_mediaurl(const char* value);
  void set_mediaurl(const char* value, size_t size);
  ::std::string* mutable_mediaurl();
  ::std::string* release_mediaurl();
  void set_allocated_mediaurl(::std::string* mediaurl);

  // string callback = 5;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  const ::std::string& callback() const;
  void set_callback(const ::std::string& value);
  #if LANG_CXX11
  void set_callback(::std::string&& value);
  #endif
  void set_callback(const char* value);
  void set_callback(const char* value, size_t size);
  ::std::string* mutable_callback();
  ::std::string* release_callback();
  void set_allocated_callback(::std::string* callback);

  // string app = 6;
  void clear_app();
  static const int kAppFieldNumber = 6;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // .api.Message message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  private:
  const ::api::Message& _internal_message() const;
  public:
  const ::api::Message& message() const;
  ::api::Message* release_message();
  ::api::Message* mutable_message();
  void set_allocated_message(::api::Message* message);

  // @@protoc_insertion_point(class_scope:api.SMS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr mediaurl_;
  ::google::protobuf::internal::ArenaStringPtr callback_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  ::api::Message* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailRequest) */ {
 public:
  EmailRequest();
  virtual ~EmailRequest();

  EmailRequest(const EmailRequest& from);

  inline EmailRequest& operator=(const EmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailRequest(EmailRequest&& from) noexcept
    : EmailRequest() {
    *this = ::std::move(from);
  }

  inline EmailRequest& operator=(EmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailRequest* internal_default_instance() {
    return reinterpret_cast<const EmailRequest*>(
               &_EmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EmailRequest* other);
  friend void swap(EmailRequest& a, EmailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailRequest* New() const final {
    return CreateMaybeMessage<EmailRequest>(NULL);
  }

  EmailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailRequest& from);
  void MergeFrom(const EmailRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_name = 1;
  void clear_from_name();
  static const int kFromNameFieldNumber = 1;
  const ::std::string& from_name() const;
  void set_from_name(const ::std::string& value);
  #if LANG_CXX11
  void set_from_name(::std::string&& value);
  #endif
  void set_from_name(const char* value);
  void set_from_name(const char* value, size_t size);
  ::std::string* mutable_from_name();
  ::std::string* release_from_name();
  void set_allocated_from_name(::std::string* from_name);

  // string from_email = 2;
  void clear_from_email();
  static const int kFromEmailFieldNumber = 2;
  const ::std::string& from_email() const;
  void set_from_email(const ::std::string& value);
  #if LANG_CXX11
  void set_from_email(::std::string&& value);
  #endif
  void set_from_email(const char* value);
  void set_from_email(const char* value, size_t size);
  ::std::string* mutable_from_email();
  ::std::string* release_from_email();
  void set_allocated_from_email(::std::string* from_email);

  // .api.Email email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  private:
  const ::api::Email& _internal_email() const;
  public:
  const ::api::Email& email() const;
  ::api::Email* release_email();
  ::api::Email* mutable_email();
  void set_allocated_email(::api::Email* email);

  // @@protoc_insertion_point(class_scope:api.EmailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_name_;
  ::google::protobuf::internal::ArenaStringPtr from_email_;
  ::api::Email* email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Email : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Email) */ {
 public:
  Email();
  virtual ~Email();

  Email(const Email& from);

  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Email(Email&& from) noexcept
    : Email() {
    *this = ::std::move(from);
  }

  inline Email& operator=(Email&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Email& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Email* internal_default_instance() {
    return reinterpret_cast<const Email*>(
               &_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Email* other);
  friend void swap(Email& a, Email& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Email* New() const final {
    return CreateMaybeMessage<Email>(NULL);
  }

  Email* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Email>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Email* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string subject = 3;
  void clear_subject();
  static const int kSubjectFieldNumber = 3;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string plain = 4;
  void clear_plain();
  static const int kPlainFieldNumber = 4;
  const ::std::string& plain() const;
  void set_plain(const ::std::string& value);
  #if LANG_CXX11
  void set_plain(::std::string&& value);
  #endif
  void set_plain(const char* value);
  void set_plain(const char* value, size_t size);
  ::std::string* mutable_plain();
  ::std::string* release_plain();
  void set_allocated_plain(::std::string* plain);

  // string html = 5;
  void clear_html();
  static const int kHtmlFieldNumber = 5;
  const ::std::string& html() const;
  void set_html(const ::std::string& value);
  #if LANG_CXX11
  void set_html(::std::string&& value);
  #endif
  void set_html(const char* value);
  void set_html(const char* value, size_t size);
  ::std::string* mutable_html();
  ::std::string* release_html();
  void set_allocated_html(::std::string* html);

  // @@protoc_insertion_point(class_scope:api.Email)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr plain_;
  ::google::protobuf::internal::ArenaStringPtr html_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const final {
    return CreateMaybeMessage<Call>(NULL);
  }

  Call* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Call>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string app = 3;
  void clear_app();
  static const int kAppFieldNumber = 3;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // @@protoc_insertion_point(class_scope:api.Call)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:api.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(NULL);
  }

  UserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string given_name = 7;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 7;
  const ::std::string& given_name() const;
  void set_given_name(const ::std::string& value);
  #if LANG_CXX11
  void set_given_name(::std::string&& value);
  #endif
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  ::std::string* mutable_given_name();
  ::std::string* release_given_name();
  void set_allocated_given_name(::std::string* given_name);

  // string family_name = 8;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 8;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  #if LANG_CXX11
  void set_family_name(::std::string&& value);
  #endif
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // string gender = 9;
  void clear_gender();
  static const int kGenderFieldNumber = 9;
  const ::std::string& gender() const;
  void set_gender(const ::std::string& value);
  #if LANG_CXX11
  void set_gender(::std::string&& value);
  #endif
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  ::std::string* mutable_gender();
  ::std::string* release_gender();
  void set_allocated_gender(::std::string* gender);

  // string birthdate = 10;
  void clear_birthdate();
  static const int kBirthdateFieldNumber = 10;
  const ::std::string& birthdate() const;
  void set_birthdate(const ::std::string& value);
  #if LANG_CXX11
  void set_birthdate(::std::string&& value);
  #endif
  void set_birthdate(const char* value);
  void set_birthdate(const char* value, size_t size);
  ::std::string* mutable_birthdate();
  ::std::string* release_birthdate();
  void set_allocated_birthdate(::std::string* birthdate);

  // string email = 11;
  void clear_email();
  static const int kEmailFieldNumber = 11;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string picture = 12;
  void clear_picture();
  static const int kPictureFieldNumber = 12;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  #if LANG_CXX11
  void set_picture(::std::string&& value);
  #endif
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // .api.UserMetadata user_metadata = 13;
  bool has_user_metadata() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 13;
  private:
  const ::api::UserMetadata& _internal_user_metadata() const;
  public:
  const ::api::UserMetadata& user_metadata() const;
  ::api::UserMetadata* release_user_metadata();
  ::api::UserMetadata* mutable_user_metadata();
  void set_allocated_user_metadata(::api::UserMetadata* user_metadata);

  // .api.AppMetadata app_metadata = 14;
  bool has_app_metadata() const;
  void clear_app_metadata();
  static const int kAppMetadataFieldNumber = 14;
  private:
  const ::api::AppMetadata& _internal_app_metadata() const;
  public:
  const ::api::AppMetadata& app_metadata() const;
  ::api::AppMetadata* release_app_metadata();
  ::api::AppMetadata* mutable_app_metadata();
  void set_allocated_app_metadata(::api::AppMetadata* app_metadata);

  // @@protoc_insertion_point(class_scope:api.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr given_name_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  ::google::protobuf::internal::ArenaStringPtr gender_;
  ::google::protobuf::internal::ArenaStringPtr birthdate_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::api::UserMetadata* user_metadata_;
  ::api::AppMetadata* app_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserMetadata) */ {
 public:
  UserMetadata();
  virtual ~UserMetadata();

  UserMetadata(const UserMetadata& from);

  inline UserMetadata& operator=(const UserMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetadata(UserMetadata&& from) noexcept
    : UserMetadata() {
    *this = ::std::move(from);
  }

  inline UserMetadata& operator=(UserMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMetadata* internal_default_instance() {
    return reinterpret_cast<const UserMetadata*>(
               &_UserMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UserMetadata* other);
  friend void swap(UserMetadata& a, UserMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetadata* New() const final {
    return CreateMaybeMessage<UserMetadata>(NULL);
  }

  UserMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMetadata& from);
  void MergeFrom(const UserMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // string phone = 1;
  void clear_phone();
  static const int kPhoneFieldNumber = 1;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string preferred_contact = 2;
  void clear_preferred_contact();
  static const int kPreferredContactFieldNumber = 2;
  const ::std::string& preferred_contact() const;
  void set_preferred_contact(const ::std::string& value);
  #if LANG_CXX11
  void set_preferred_contact(::std::string&& value);
  #endif
  void set_preferred_contact(const char* value);
  void set_preferred_contact(const char* value, size_t size);
  ::std::string* mutable_preferred_contact();
  ::std::string* release_preferred_contact();
  void set_allocated_preferred_contact(::std::string* preferred_contact);

  // string status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:api.UserMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr preferred_contact_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AppMetadata) */ {
 public:
  AppMetadata();
  virtual ~AppMetadata();

  AppMetadata(const AppMetadata& from);

  inline AppMetadata& operator=(const AppMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppMetadata(AppMetadata&& from) noexcept
    : AppMetadata() {
    *this = ::std::move(from);
  }

  inline AppMetadata& operator=(AppMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppMetadata* internal_default_instance() {
    return reinterpret_cast<const AppMetadata*>(
               &_AppMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AppMetadata* other);
  friend void swap(AppMetadata& a, AppMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppMetadata* New() const final {
    return CreateMaybeMessage<AppMetadata>(NULL);
  }

  AppMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppMetadata& from);
  void MergeFrom(const AppMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // string plan = 1;
  void clear_plan();
  static const int kPlanFieldNumber = 1;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string pay_token = 2;
  void clear_pay_token();
  static const int kPayTokenFieldNumber = 2;
  const ::std::string& pay_token() const;
  void set_pay_token(const ::std::string& value);
  #if LANG_CXX11
  void set_pay_token(::std::string&& value);
  #endif
  void set_pay_token(const char* value);
  void set_pay_token(const char* value, size_t size);
  ::std::string* mutable_pay_token();
  ::std::string* release_pay_token();
  void set_allocated_pay_token(::std::string* pay_token);

  // string delinquent = 3;
  void clear_delinquent();
  static const int kDelinquentFieldNumber = 3;
  const ::std::string& delinquent() const;
  void set_delinquent(const ::std::string& value);
  #if LANG_CXX11
  void set_delinquent(::std::string&& value);
  #endif
  void set_delinquent(const char* value);
  void set_delinquent(const char* value, size_t size);
  ::std::string* mutable_delinquent();
  ::std::string* release_delinquent();
  void set_allocated_delinquent(::std::string* delinquent);

  // @@protoc_insertion_point(class_scope:api.AppMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr pay_token_;
  ::google::protobuf::internal::ArenaStringPtr delinquent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Auth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Auth) */ {
 public:
  Auth();
  virtual ~Auth();

  Auth(const Auth& from);

  inline Auth& operator=(const Auth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Auth(Auth&& from) noexcept
    : Auth() {
    *this = ::std::move(from);
  }

  inline Auth& operator=(Auth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Auth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Auth* internal_default_instance() {
    return reinterpret_cast<const Auth*>(
               &_Auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Auth* other);
  friend void swap(Auth& a, Auth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Auth* New() const final {
    return CreateMaybeMessage<Auth>(NULL);
  }

  Auth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Auth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Auth& from);
  void MergeFrom(const Auth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Auth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string scopes = 6;
  int scopes_size() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 6;
  const ::std::string& scopes(int index) const;
  ::std::string* mutable_scopes(int index);
  void set_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scopes(int index, ::std::string&& value);
  #endif
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  ::std::string* add_scopes();
  void add_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_scopes(::std::string&& value);
  #endif
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& scopes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_scopes();

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string client_secret = 3;
  void clear_client_secret();
  static const int kClientSecretFieldNumber = 3;
  const ::std::string& client_secret() const;
  void set_client_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_client_secret(::std::string&& value);
  #endif
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  ::std::string* mutable_client_secret();
  ::std::string* release_client_secret();
  void set_allocated_client_secret(::std::string* client_secret);

  // string redirect = 4;
  void clear_redirect();
  static const int kRedirectFieldNumber = 4;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // string audience = 5;
  void clear_audience();
  static const int kAudienceFieldNumber = 5;
  const ::std::string& audience() const;
  void set_audience(const ::std::string& value);
  #if LANG_CXX11
  void set_audience(::std::string&& value);
  #endif
  void set_audience(const char* value);
  void set_audience(const char* value, size_t size);
  ::std::string* mutable_audience();
  ::std::string* release_audience();
  void set_allocated_audience(::std::string* audience);

  // @@protoc_insertion_point(class_scope:api.Auth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> scopes_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr client_secret_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::google::protobuf::internal::ArenaStringPtr audience_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bytes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Bytes) */ {
 public:
  Bytes();
  virtual ~Bytes();

  Bytes(const Bytes& from);

  inline Bytes& operator=(const Bytes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bytes(Bytes&& from) noexcept
    : Bytes() {
    *this = ::std::move(from);
  }

  inline Bytes& operator=(Bytes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bytes* internal_default_instance() {
    return reinterpret_cast<const Bytes*>(
               &_Bytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Bytes* other);
  friend void swap(Bytes& a, Bytes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bytes* New() const final {
    return CreateMaybeMessage<Bytes>(NULL);
  }

  Bytes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bytes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Bytes& from);
  void MergeFrom(const Bytes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bytes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes bits = 1;
  void clear_bits();
  static const int kBitsFieldNumber = 1;
  const ::std::string& bits() const;
  void set_bits(const ::std::string& value);
  #if LANG_CXX11
  void set_bits(::std::string&& value);
  #endif
  void set_bits(const char* value);
  void set_bits(const void* value, size_t size);
  ::std::string* mutable_bits();
  ::std::string* release_bits();
  void set_allocated_bits(::std::string* bits);

  // @@protoc_insertion_point(class_scope:api.Bytes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Template : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Template) */ {
 public:
  Template();
  virtual ~Template();

  Template(const Template& from);

  inline Template& operator=(const Template& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Template(Template&& from) noexcept
    : Template() {
    *this = ::std::move(from);
  }

  inline Template& operator=(Template&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Template& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Template* internal_default_instance() {
    return reinterpret_cast<const Template*>(
               &_Template_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Template* other);
  friend void swap(Template& a, Template& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Template* New() const final {
    return CreateMaybeMessage<Template>(NULL);
  }

  Template* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Template>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Template& from);
  void MergeFrom(const Template& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Template* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:api.Template)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Identifier

// string id = 1;
inline void Identifier::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identifier::id() const {
  // @@protoc_insertion_point(field_get:api.Identifier.id)
  return id_.GetNoArena();
}
inline void Identifier::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identifier.id)
}
#if LANG_CXX11
inline void Identifier::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identifier.id)
}
#endif
inline void Identifier::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identifier.id)
}
inline void Identifier::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identifier.id)
}
inline ::std::string* Identifier::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Identifier.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identifier::release_id() {
  // @@protoc_insertion_point(field_release:api.Identifier.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identifier::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.Identifier.id)
}

// -------------------------------------------------------------------

// SMSStatus

// .api.Identifier id = 1;
inline bool SMSStatus::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void SMSStatus::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::api::Identifier& SMSStatus::_internal_id() const {
  return *id_;
}
inline const ::api::Identifier& SMSStatus::id() const {
  const ::api::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.SMSStatus.id)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Identifier*>(
      &::api::_Identifier_default_instance_);
}
inline ::api::Identifier* SMSStatus::release_id() {
  // @@protoc_insertion_point(field_release:api.SMSStatus.id)
  
  ::api::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::api::Identifier* SMSStatus::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSStatus.id)
  return id_;
}
inline void SMSStatus::set_allocated_id(::api::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.SMSStatus.id)
}

// .api.SMS sms = 2;
inline bool SMSStatus::has_sms() const {
  return this != internal_default_instance() && sms_ != NULL;
}
inline void SMSStatus::clear_sms() {
  if (GetArenaNoVirtual() == NULL && sms_ != NULL) {
    delete sms_;
  }
  sms_ = NULL;
}
inline const ::api::SMS& SMSStatus::_internal_sms() const {
  return *sms_;
}
inline const ::api::SMS& SMSStatus::sms() const {
  const ::api::SMS* p = sms_;
  // @@protoc_insertion_point(field_get:api.SMSStatus.sms)
  return p != NULL ? *p : *reinterpret_cast<const ::api::SMS*>(
      &::api::_SMS_default_instance_);
}
inline ::api::SMS* SMSStatus::release_sms() {
  // @@protoc_insertion_point(field_release:api.SMSStatus.sms)
  
  ::api::SMS* temp = sms_;
  sms_ = NULL;
  return temp;
}
inline ::api::SMS* SMSStatus::mutable_sms() {
  
  if (sms_ == NULL) {
    auto* p = CreateMaybeMessage<::api::SMS>(GetArenaNoVirtual());
    sms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSStatus.sms)
  return sms_;
}
inline void SMSStatus::set_allocated_sms(::api::SMS* sms) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sms_;
  }
  if (sms) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sms = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sms, submessage_arena);
    }
    
  } else {
    
  }
  sms_ = sms;
  // @@protoc_insertion_point(field_set_allocated:api.SMSStatus.sms)
}

// string status = 3;
inline void SMSStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSStatus::status() const {
  // @@protoc_insertion_point(field_get:api.SMSStatus.status)
  return status_.GetNoArena();
}
inline void SMSStatus::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSStatus.status)
}
#if LANG_CXX11
inline void SMSStatus::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSStatus.status)
}
#endif
inline void SMSStatus::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSStatus.status)
}
inline void SMSStatus::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSStatus.status)
}
inline ::std::string* SMSStatus::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSStatus.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSStatus::release_status() {
  // @@protoc_insertion_point(field_release:api.SMSStatus.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSStatus::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:api.SMSStatus.status)
}

// string uri = 4;
inline void SMSStatus::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSStatus::uri() const {
  // @@protoc_insertion_point(field_get:api.SMSStatus.uri)
  return uri_.GetNoArena();
}
inline void SMSStatus::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSStatus.uri)
}
#if LANG_CXX11
inline void SMSStatus::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSStatus.uri)
}
#endif
inline void SMSStatus::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSStatus.uri)
}
inline void SMSStatus::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSStatus.uri)
}
inline ::std::string* SMSStatus::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSStatus.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSStatus::release_uri() {
  // @@protoc_insertion_point(field_release:api.SMSStatus.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSStatus::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:api.SMSStatus.uri)
}

// -------------------------------------------------------------------

// SMS

// string service = 1;
inline void SMS::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::service() const {
  // @@protoc_insertion_point(field_get:api.SMS.service)
  return service_.GetNoArena();
}
inline void SMS::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.service)
}
#if LANG_CXX11
inline void SMS::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.service)
}
#endif
inline void SMS::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.service)
}
inline void SMS::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.service)
}
inline ::std::string* SMS::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_service() {
  // @@protoc_insertion_point(field_release:api.SMS.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.service)
}

// string to = 2;
inline void SMS::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::to() const {
  // @@protoc_insertion_point(field_get:api.SMS.to)
  return to_.GetNoArena();
}
inline void SMS::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.to)
}
#if LANG_CXX11
inline void SMS::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.to)
}
#endif
inline void SMS::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.to)
}
inline void SMS::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.to)
}
inline ::std::string* SMS::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_to() {
  // @@protoc_insertion_point(field_release:api.SMS.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.to)
}

// .api.Message message = 3;
inline bool SMS::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void SMS::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::api::Message& SMS::_internal_message() const {
  return *message_;
}
inline const ::api::Message& SMS::message() const {
  const ::api::Message* p = message_;
  // @@protoc_insertion_point(field_get:api.SMS.message)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Message*>(
      &::api::_Message_default_instance_);
}
inline ::api::Message* SMS::release_message() {
  // @@protoc_insertion_point(field_release:api.SMS.message)
  
  ::api::Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::api::Message* SMS::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Message>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMS.message)
  return message_;
}
inline void SMS::set_allocated_message(::api::Message* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:api.SMS.message)
}

// string mediaURL = 4;
inline void SMS::clear_mediaurl() {
  mediaurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::mediaurl() const {
  // @@protoc_insertion_point(field_get:api.SMS.mediaURL)
  return mediaurl_.GetNoArena();
}
inline void SMS::set_mediaurl(const ::std::string& value) {
  
  mediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.mediaURL)
}
#if LANG_CXX11
inline void SMS::set_mediaurl(::std::string&& value) {
  
  mediaurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.mediaURL)
}
#endif
inline void SMS::set_mediaurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.mediaURL)
}
inline void SMS::set_mediaurl(const char* value, size_t size) {
  
  mediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.mediaURL)
}
inline ::std::string* SMS::mutable_mediaurl() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.mediaURL)
  return mediaurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_mediaurl() {
  // @@protoc_insertion_point(field_release:api.SMS.mediaURL)
  
  return mediaurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_mediaurl(::std::string* mediaurl) {
  if (mediaurl != NULL) {
    
  } else {
    
  }
  mediaurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mediaurl);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.mediaURL)
}

// string callback = 5;
inline void SMS::clear_callback() {
  callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::callback() const {
  // @@protoc_insertion_point(field_get:api.SMS.callback)
  return callback_.GetNoArena();
}
inline void SMS::set_callback(const ::std::string& value) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.callback)
}
#if LANG_CXX11
inline void SMS::set_callback(::std::string&& value) {
  
  callback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.callback)
}
#endif
inline void SMS::set_callback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.callback)
}
inline void SMS::set_callback(const char* value, size_t size) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.callback)
}
inline ::std::string* SMS::mutable_callback() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.callback)
  return callback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_callback() {
  // @@protoc_insertion_point(field_release:api.SMS.callback)
  
  return callback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_callback(::std::string* callback) {
  if (callback != NULL) {
    
  } else {
    
  }
  callback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.callback)
}

// string app = 6;
inline void SMS::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::app() const {
  // @@protoc_insertion_point(field_get:api.SMS.app)
  return app_.GetNoArena();
}
inline void SMS::set_app(const ::std::string& value) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.app)
}
#if LANG_CXX11
inline void SMS::set_app(::std::string&& value) {
  
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.app)
}
#endif
inline void SMS::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.app)
}
inline void SMS::set_app(const char* value, size_t size) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.app)
}
inline ::std::string* SMS::mutable_app() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_app() {
  // @@protoc_insertion_point(field_release:api.SMS.app)
  
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    
  } else {
    
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.app)
}

// -------------------------------------------------------------------

// EmailRequest

// string from_name = 1;
inline void EmailRequest::clear_from_name() {
  from_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::from_name() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.from_name)
  return from_name_.GetNoArena();
}
inline void EmailRequest::set_from_name(const ::std::string& value) {
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.from_name)
}
#if LANG_CXX11
inline void EmailRequest::set_from_name(::std::string&& value) {
  
  from_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.from_name)
}
#endif
inline void EmailRequest::set_from_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.from_name)
}
inline void EmailRequest::set_from_name(const char* value, size_t size) {
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.from_name)
}
inline ::std::string* EmailRequest::mutable_from_name() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.from_name)
  return from_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_from_name() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.from_name)
  
  return from_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_from_name(::std::string* from_name) {
  if (from_name != NULL) {
    
  } else {
    
  }
  from_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_name);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.from_name)
}

// string from_email = 2;
inline void EmailRequest::clear_from_email() {
  from_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::from_email() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.from_email)
  return from_email_.GetNoArena();
}
inline void EmailRequest::set_from_email(const ::std::string& value) {
  
  from_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.from_email)
}
#if LANG_CXX11
inline void EmailRequest::set_from_email(::std::string&& value) {
  
  from_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.from_email)
}
#endif
inline void EmailRequest::set_from_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.from_email)
}
inline void EmailRequest::set_from_email(const char* value, size_t size) {
  
  from_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.from_email)
}
inline ::std::string* EmailRequest::mutable_from_email() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.from_email)
  return from_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_from_email() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.from_email)
  
  return from_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_from_email(::std::string* from_email) {
  if (from_email != NULL) {
    
  } else {
    
  }
  from_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_email);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.from_email)
}

// .api.Email email = 3;
inline bool EmailRequest::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline void EmailRequest::clear_email() {
  if (GetArenaNoVirtual() == NULL && email_ != NULL) {
    delete email_;
  }
  email_ = NULL;
}
inline const ::api::Email& EmailRequest::_internal_email() const {
  return *email_;
}
inline const ::api::Email& EmailRequest::email() const {
  const ::api::Email* p = email_;
  // @@protoc_insertion_point(field_get:api.EmailRequest.email)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Email*>(
      &::api::_Email_default_instance_);
}
inline ::api::Email* EmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.email)
  
  ::api::Email* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::api::Email* EmailRequest::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Email>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.email)
  return email_;
}
inline void EmailRequest::set_allocated_email(::api::Email* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete email_;
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.email)
}

// -------------------------------------------------------------------

// Email

// string name = 1;
inline void Email::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::name() const {
  // @@protoc_insertion_point(field_get:api.Email.name)
  return name_.GetNoArena();
}
inline void Email::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.name)
}
#if LANG_CXX11
inline void Email::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.name)
}
#endif
inline void Email::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.name)
}
inline void Email::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.name)
}
inline ::std::string* Email::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_name() {
  // @@protoc_insertion_point(field_release:api.Email.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Email.name)
}

// string address = 2;
inline void Email::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::address() const {
  // @@protoc_insertion_point(field_get:api.Email.address)
  return address_.GetNoArena();
}
inline void Email::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.address)
}
#if LANG_CXX11
inline void Email::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.address)
}
#endif
inline void Email::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.address)
}
inline void Email::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.address)
}
inline ::std::string* Email::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_address() {
  // @@protoc_insertion_point(field_release:api.Email.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:api.Email.address)
}

// string subject = 3;
inline void Email::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::subject() const {
  // @@protoc_insertion_point(field_get:api.Email.subject)
  return subject_.GetNoArena();
}
inline void Email::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.subject)
}
#if LANG_CXX11
inline void Email::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.subject)
}
#endif
inline void Email::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.subject)
}
inline void Email::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.subject)
}
inline ::std::string* Email::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_subject() {
  // @@protoc_insertion_point(field_release:api.Email.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:api.Email.subject)
}

// string plain = 4;
inline void Email::clear_plain() {
  plain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::plain() const {
  // @@protoc_insertion_point(field_get:api.Email.plain)
  return plain_.GetNoArena();
}
inline void Email::set_plain(const ::std::string& value) {
  
  plain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.plain)
}
#if LANG_CXX11
inline void Email::set_plain(::std::string&& value) {
  
  plain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.plain)
}
#endif
inline void Email::set_plain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.plain)
}
inline void Email::set_plain(const char* value, size_t size) {
  
  plain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.plain)
}
inline ::std::string* Email::mutable_plain() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.plain)
  return plain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_plain() {
  // @@protoc_insertion_point(field_release:api.Email.plain)
  
  return plain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_plain(::std::string* plain) {
  if (plain != NULL) {
    
  } else {
    
  }
  plain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plain);
  // @@protoc_insertion_point(field_set_allocated:api.Email.plain)
}

// string html = 5;
inline void Email::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::html() const {
  // @@protoc_insertion_point(field_get:api.Email.html)
  return html_.GetNoArena();
}
inline void Email::set_html(const ::std::string& value) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.html)
}
#if LANG_CXX11
inline void Email::set_html(::std::string&& value) {
  
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.html)
}
#endif
inline void Email::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.html)
}
inline void Email::set_html(const char* value, size_t size) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.html)
}
inline ::std::string* Email::mutable_html() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_html() {
  // @@protoc_insertion_point(field_release:api.Email.html)
  
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    
  } else {
    
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:api.Email.html)
}

// -------------------------------------------------------------------

// Call

// string from = 1;
inline void Call::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::from() const {
  // @@protoc_insertion_point(field_get:api.Call.from)
  return from_.GetNoArena();
}
inline void Call::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Call.from)
}
#if LANG_CXX11
inline void Call::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Call.from)
}
#endif
inline void Call::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Call.from)
}
inline void Call::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Call.from)
}
inline ::std::string* Call::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:api.Call.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_from() {
  // @@protoc_insertion_point(field_release:api.Call.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:api.Call.from)
}

// string to = 2;
inline void Call::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::to() const {
  // @@protoc_insertion_point(field_get:api.Call.to)
  return to_.GetNoArena();
}
inline void Call::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Call.to)
}
#if LANG_CXX11
inline void Call::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Call.to)
}
#endif
inline void Call::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Call.to)
}
inline void Call::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Call.to)
}
inline ::std::string* Call::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:api.Call.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_to() {
  // @@protoc_insertion_point(field_release:api.Call.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:api.Call.to)
}

// string app = 3;
inline void Call::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::app() const {
  // @@protoc_insertion_point(field_get:api.Call.app)
  return app_.GetNoArena();
}
inline void Call::set_app(const ::std::string& value) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Call.app)
}
#if LANG_CXX11
inline void Call::set_app(::std::string&& value) {
  
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Call.app)
}
#endif
inline void Call::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Call.app)
}
inline void Call::set_app(const char* value, size_t size) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Call.app)
}
inline ::std::string* Call::mutable_app() {
  
  // @@protoc_insertion_point(field_mutable:api.Call.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_app() {
  // @@protoc_insertion_point(field_release:api.Call.app)
  
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    
  } else {
    
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:api.Call.app)
}

// -------------------------------------------------------------------

// Message

// string value = 1;
inline void Message::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::value() const {
  // @@protoc_insertion_point(field_get:api.Message.value)
  return value_.GetNoArena();
}
inline void Message::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Message.value)
}
#if LANG_CXX11
inline void Message::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Message.value)
}
#endif
inline void Message::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Message.value)
}
inline void Message::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Message.value)
}
inline ::std::string* Message::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:api.Message.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_value() {
  // @@protoc_insertion_point(field_release:api.Message.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:api.Message.value)
}

// -------------------------------------------------------------------

// UserInfo

// string name = 6;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.name)
  return name_.GetNoArena();
}
inline void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.name)
}
#if LANG_CXX11
inline void UserInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.name)
}
#endif
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.name)
}
inline ::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:api.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.name)
}

// string given_name = 7;
inline void UserInfo::clear_given_name() {
  given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::given_name() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.given_name)
  return given_name_.GetNoArena();
}
inline void UserInfo::set_given_name(const ::std::string& value) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.given_name)
}
#if LANG_CXX11
inline void UserInfo::set_given_name(::std::string&& value) {
  
  given_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.given_name)
}
#endif
inline void UserInfo::set_given_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.given_name)
}
inline void UserInfo::set_given_name(const char* value, size_t size) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.given_name)
}
inline ::std::string* UserInfo::mutable_given_name() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.given_name)
  return given_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_given_name() {
  // @@protoc_insertion_point(field_release:api.UserInfo.given_name)
  
  return given_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_given_name(::std::string* given_name) {
  if (given_name != NULL) {
    
  } else {
    
  }
  given_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), given_name);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.given_name)
}

// string family_name = 8;
inline void UserInfo::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::family_name() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.family_name)
  return family_name_.GetNoArena();
}
inline void UserInfo::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.family_name)
}
#if LANG_CXX11
inline void UserInfo::set_family_name(::std::string&& value) {
  
  family_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.family_name)
}
#endif
inline void UserInfo::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.family_name)
}
inline void UserInfo::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.family_name)
}
inline ::std::string* UserInfo::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_family_name() {
  // @@protoc_insertion_point(field_release:api.UserInfo.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.family_name)
}

// string gender = 9;
inline void UserInfo::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::gender() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.gender)
  return gender_.GetNoArena();
}
inline void UserInfo::set_gender(const ::std::string& value) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.gender)
}
#if LANG_CXX11
inline void UserInfo::set_gender(::std::string&& value) {
  
  gender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.gender)
}
#endif
inline void UserInfo::set_gender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.gender)
}
inline void UserInfo::set_gender(const char* value, size_t size) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.gender)
}
inline ::std::string* UserInfo::mutable_gender() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_gender() {
  // @@protoc_insertion_point(field_release:api.UserInfo.gender)
  
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    
  } else {
    
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.gender)
}

// string birthdate = 10;
inline void UserInfo::clear_birthdate() {
  birthdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::birthdate() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.birthdate)
  return birthdate_.GetNoArena();
}
inline void UserInfo::set_birthdate(const ::std::string& value) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.birthdate)
}
#if LANG_CXX11
inline void UserInfo::set_birthdate(::std::string&& value) {
  
  birthdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.birthdate)
}
#endif
inline void UserInfo::set_birthdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.birthdate)
}
inline void UserInfo::set_birthdate(const char* value, size_t size) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.birthdate)
}
inline ::std::string* UserInfo::mutable_birthdate() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.birthdate)
  return birthdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_birthdate() {
  // @@protoc_insertion_point(field_release:api.UserInfo.birthdate)
  
  return birthdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_birthdate(::std::string* birthdate) {
  if (birthdate != NULL) {
    
  } else {
    
  }
  birthdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthdate);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.birthdate)
}

// string email = 11;
inline void UserInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.email)
  return email_.GetNoArena();
}
inline void UserInfo::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.email)
}
#if LANG_CXX11
inline void UserInfo::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.email)
}
#endif
inline void UserInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.email)
}
inline void UserInfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.email)
}
inline ::std::string* UserInfo::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:api.UserInfo.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.email)
}

// string picture = 12;
inline void UserInfo::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::picture() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.picture)
  return picture_.GetNoArena();
}
inline void UserInfo::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.picture)
}
#if LANG_CXX11
inline void UserInfo::set_picture(::std::string&& value) {
  
  picture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.picture)
}
#endif
inline void UserInfo::set_picture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.picture)
}
inline void UserInfo::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.picture)
}
inline ::std::string* UserInfo::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_picture() {
  // @@protoc_insertion_point(field_release:api.UserInfo.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.picture)
}

// .api.UserMetadata user_metadata = 13;
inline bool UserInfo::has_user_metadata() const {
  return this != internal_default_instance() && user_metadata_ != NULL;
}
inline void UserInfo::clear_user_metadata() {
  if (GetArenaNoVirtual() == NULL && user_metadata_ != NULL) {
    delete user_metadata_;
  }
  user_metadata_ = NULL;
}
inline const ::api::UserMetadata& UserInfo::_internal_user_metadata() const {
  return *user_metadata_;
}
inline const ::api::UserMetadata& UserInfo::user_metadata() const {
  const ::api::UserMetadata* p = user_metadata_;
  // @@protoc_insertion_point(field_get:api.UserInfo.user_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::api::UserMetadata*>(
      &::api::_UserMetadata_default_instance_);
}
inline ::api::UserMetadata* UserInfo::release_user_metadata() {
  // @@protoc_insertion_point(field_release:api.UserInfo.user_metadata)
  
  ::api::UserMetadata* temp = user_metadata_;
  user_metadata_ = NULL;
  return temp;
}
inline ::api::UserMetadata* UserInfo::mutable_user_metadata() {
  
  if (user_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::api::UserMetadata>(GetArenaNoVirtual());
    user_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserInfo.user_metadata)
  return user_metadata_;
}
inline void UserInfo::set_allocated_user_metadata(::api::UserMetadata* user_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_metadata_;
  }
  if (user_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_metadata, submessage_arena);
    }
    
  } else {
    
  }
  user_metadata_ = user_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.user_metadata)
}

// .api.AppMetadata app_metadata = 14;
inline bool UserInfo::has_app_metadata() const {
  return this != internal_default_instance() && app_metadata_ != NULL;
}
inline void UserInfo::clear_app_metadata() {
  if (GetArenaNoVirtual() == NULL && app_metadata_ != NULL) {
    delete app_metadata_;
  }
  app_metadata_ = NULL;
}
inline const ::api::AppMetadata& UserInfo::_internal_app_metadata() const {
  return *app_metadata_;
}
inline const ::api::AppMetadata& UserInfo::app_metadata() const {
  const ::api::AppMetadata* p = app_metadata_;
  // @@protoc_insertion_point(field_get:api.UserInfo.app_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::api::AppMetadata*>(
      &::api::_AppMetadata_default_instance_);
}
inline ::api::AppMetadata* UserInfo::release_app_metadata() {
  // @@protoc_insertion_point(field_release:api.UserInfo.app_metadata)
  
  ::api::AppMetadata* temp = app_metadata_;
  app_metadata_ = NULL;
  return temp;
}
inline ::api::AppMetadata* UserInfo::mutable_app_metadata() {
  
  if (app_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::api::AppMetadata>(GetArenaNoVirtual());
    app_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserInfo.app_metadata)
  return app_metadata_;
}
inline void UserInfo::set_allocated_app_metadata(::api::AppMetadata* app_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete app_metadata_;
  }
  if (app_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app_metadata, submessage_arena);
    }
    
  } else {
    
  }
  app_metadata_ = app_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.app_metadata)
}

// -------------------------------------------------------------------

// UserMetadata

// string phone = 1;
inline void UserMetadata::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::phone() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.phone)
  return phone_.GetNoArena();
}
inline void UserMetadata::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.phone)
}
#if LANG_CXX11
inline void UserMetadata::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.phone)
}
#endif
inline void UserMetadata::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.phone)
}
inline void UserMetadata::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.phone)
}
inline ::std::string* UserMetadata::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_phone() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.phone)
}

// string preferred_contact = 2;
inline void UserMetadata::clear_preferred_contact() {
  preferred_contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::preferred_contact() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.preferred_contact)
  return preferred_contact_.GetNoArena();
}
inline void UserMetadata::set_preferred_contact(const ::std::string& value) {
  
  preferred_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.preferred_contact)
}
#if LANG_CXX11
inline void UserMetadata::set_preferred_contact(::std::string&& value) {
  
  preferred_contact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.preferred_contact)
}
#endif
inline void UserMetadata::set_preferred_contact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  preferred_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.preferred_contact)
}
inline void UserMetadata::set_preferred_contact(const char* value, size_t size) {
  
  preferred_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.preferred_contact)
}
inline ::std::string* UserMetadata::mutable_preferred_contact() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.preferred_contact)
  return preferred_contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_preferred_contact() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.preferred_contact)
  
  return preferred_contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_preferred_contact(::std::string* preferred_contact) {
  if (preferred_contact != NULL) {
    
  } else {
    
  }
  preferred_contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_contact);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.preferred_contact)
}

// string status = 3;
inline void UserMetadata::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::status() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.status)
  return status_.GetNoArena();
}
inline void UserMetadata::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.status)
}
#if LANG_CXX11
inline void UserMetadata::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.status)
}
#endif
inline void UserMetadata::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.status)
}
inline void UserMetadata::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.status)
}
inline ::std::string* UserMetadata::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_status() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.status)
}

// repeated string tags = 4;
inline int UserMetadata::tags_size() const {
  return tags_.size();
}
inline void UserMetadata::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& UserMetadata::tags(int index) const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.tags)
  return tags_.Get(index);
}
inline ::std::string* UserMetadata::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.tags)
  return tags_.Mutable(index);
}
inline void UserMetadata::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.UserMetadata.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserMetadata::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.UserMetadata.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserMetadata::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.tags)
}
inline void UserMetadata::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.tags)
}
inline ::std::string* UserMetadata::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:api.UserMetadata.tags)
  return tags_.Add();
}
inline void UserMetadata::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.UserMetadata.tags)
}
#if LANG_CXX11
inline void UserMetadata::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.UserMetadata.tags)
}
#endif
inline void UserMetadata::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.UserMetadata.tags)
}
inline void UserMetadata::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.UserMetadata.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserMetadata::tags() const {
  // @@protoc_insertion_point(field_list:api.UserMetadata.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:api.UserMetadata.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// AppMetadata

// string plan = 1;
inline void AppMetadata::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppMetadata::plan() const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.plan)
  return plan_.GetNoArena();
}
inline void AppMetadata::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AppMetadata.plan)
}
#if LANG_CXX11
inline void AppMetadata::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AppMetadata.plan)
}
#endif
inline void AppMetadata::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.plan)
}
inline void AppMetadata::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.plan)
}
inline ::std::string* AppMetadata::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMetadata::release_plan() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMetadata::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.plan)
}

// string pay_token = 2;
inline void AppMetadata::clear_pay_token() {
  pay_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppMetadata::pay_token() const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.pay_token)
  return pay_token_.GetNoArena();
}
inline void AppMetadata::set_pay_token(const ::std::string& value) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AppMetadata.pay_token)
}
#if LANG_CXX11
inline void AppMetadata::set_pay_token(::std::string&& value) {
  
  pay_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AppMetadata.pay_token)
}
#endif
inline void AppMetadata::set_pay_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.pay_token)
}
inline void AppMetadata::set_pay_token(const char* value, size_t size) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.pay_token)
}
inline ::std::string* AppMetadata::mutable_pay_token() {
  
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.pay_token)
  return pay_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMetadata::release_pay_token() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.pay_token)
  
  return pay_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMetadata::set_allocated_pay_token(::std::string* pay_token) {
  if (pay_token != NULL) {
    
  } else {
    
  }
  pay_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pay_token);
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.pay_token)
}

// string delinquent = 3;
inline void AppMetadata::clear_delinquent() {
  delinquent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppMetadata::delinquent() const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.delinquent)
  return delinquent_.GetNoArena();
}
inline void AppMetadata::set_delinquent(const ::std::string& value) {
  
  delinquent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AppMetadata.delinquent)
}
#if LANG_CXX11
inline void AppMetadata::set_delinquent(::std::string&& value) {
  
  delinquent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AppMetadata.delinquent)
}
#endif
inline void AppMetadata::set_delinquent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  delinquent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.delinquent)
}
inline void AppMetadata::set_delinquent(const char* value, size_t size) {
  
  delinquent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.delinquent)
}
inline ::std::string* AppMetadata::mutable_delinquent() {
  
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.delinquent)
  return delinquent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMetadata::release_delinquent() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.delinquent)
  
  return delinquent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMetadata::set_allocated_delinquent(::std::string* delinquent) {
  if (delinquent != NULL) {
    
  } else {
    
  }
  delinquent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delinquent);
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.delinquent)
}

// repeated string tags = 4;
inline int AppMetadata::tags_size() const {
  return tags_.size();
}
inline void AppMetadata::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& AppMetadata::tags(int index) const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.tags)
  return tags_.Get(index);
}
inline ::std::string* AppMetadata::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.tags)
  return tags_.Mutable(index);
}
inline void AppMetadata::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.AppMetadata.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AppMetadata::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.AppMetadata.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AppMetadata::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.tags)
}
inline void AppMetadata::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.tags)
}
inline ::std::string* AppMetadata::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:api.AppMetadata.tags)
  return tags_.Add();
}
inline void AppMetadata::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.AppMetadata.tags)
}
#if LANG_CXX11
inline void AppMetadata::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.AppMetadata.tags)
}
#endif
inline void AppMetadata::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.AppMetadata.tags)
}
inline void AppMetadata::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.AppMetadata.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AppMetadata::tags() const {
  // @@protoc_insertion_point(field_list:api.AppMetadata.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AppMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:api.AppMetadata.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// Auth

// string domain = 1;
inline void Auth::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::domain() const {
  // @@protoc_insertion_point(field_get:api.Auth.domain)
  return domain_.GetNoArena();
}
inline void Auth::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.domain)
}
#if LANG_CXX11
inline void Auth::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.domain)
}
#endif
inline void Auth::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.domain)
}
inline void Auth::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.domain)
}
inline ::std::string* Auth::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_domain() {
  // @@protoc_insertion_point(field_release:api.Auth.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.domain)
}

// string client_id = 2;
inline void Auth::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::client_id() const {
  // @@protoc_insertion_point(field_get:api.Auth.client_id)
  return client_id_.GetNoArena();
}
inline void Auth::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.client_id)
}
#if LANG_CXX11
inline void Auth::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.client_id)
}
#endif
inline void Auth::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.client_id)
}
inline void Auth::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.client_id)
}
inline ::std::string* Auth::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_client_id() {
  // @@protoc_insertion_point(field_release:api.Auth.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.client_id)
}

// string client_secret = 3;
inline void Auth::clear_client_secret() {
  client_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::client_secret() const {
  // @@protoc_insertion_point(field_get:api.Auth.client_secret)
  return client_secret_.GetNoArena();
}
inline void Auth::set_client_secret(const ::std::string& value) {
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.client_secret)
}
#if LANG_CXX11
inline void Auth::set_client_secret(::std::string&& value) {
  
  client_secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.client_secret)
}
#endif
inline void Auth::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.client_secret)
}
inline void Auth::set_client_secret(const char* value, size_t size) {
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.client_secret)
}
inline ::std::string* Auth::mutable_client_secret() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.client_secret)
  return client_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_client_secret() {
  // @@protoc_insertion_point(field_release:api.Auth.client_secret)
  
  return client_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_client_secret(::std::string* client_secret) {
  if (client_secret != NULL) {
    
  } else {
    
  }
  client_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_secret);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.client_secret)
}

// string redirect = 4;
inline void Auth::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::redirect() const {
  // @@protoc_insertion_point(field_get:api.Auth.redirect)
  return redirect_.GetNoArena();
}
inline void Auth::set_redirect(const ::std::string& value) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.redirect)
}
#if LANG_CXX11
inline void Auth::set_redirect(::std::string&& value) {
  
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.redirect)
}
#endif
inline void Auth::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.redirect)
}
inline void Auth::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.redirect)
}
inline ::std::string* Auth::mutable_redirect() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_redirect() {
  // @@protoc_insertion_point(field_release:api.Auth.redirect)
  
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.redirect)
}

// string audience = 5;
inline void Auth::clear_audience() {
  audience_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::audience() const {
  // @@protoc_insertion_point(field_get:api.Auth.audience)
  return audience_.GetNoArena();
}
inline void Auth::set_audience(const ::std::string& value) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.audience)
}
#if LANG_CXX11
inline void Auth::set_audience(::std::string&& value) {
  
  audience_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.audience)
}
#endif
inline void Auth::set_audience(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.audience)
}
inline void Auth::set_audience(const char* value, size_t size) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.audience)
}
inline ::std::string* Auth::mutable_audience() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.audience)
  return audience_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_audience() {
  // @@protoc_insertion_point(field_release:api.Auth.audience)
  
  return audience_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_audience(::std::string* audience) {
  if (audience != NULL) {
    
  } else {
    
  }
  audience_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audience);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.audience)
}

// repeated string scopes = 6;
inline int Auth::scopes_size() const {
  return scopes_.size();
}
inline void Auth::clear_scopes() {
  scopes_.Clear();
}
inline const ::std::string& Auth::scopes(int index) const {
  // @@protoc_insertion_point(field_get:api.Auth.scopes)
  return scopes_.Get(index);
}
inline ::std::string* Auth::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:api.Auth.scopes)
  return scopes_.Mutable(index);
}
inline void Auth::set_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.Auth.scopes)
  scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Auth::set_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.Auth.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Auth::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.Auth.scopes)
}
inline void Auth::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.Auth.scopes)
}
inline ::std::string* Auth::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:api.Auth.scopes)
  return scopes_.Add();
}
inline void Auth::add_scopes(const ::std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.Auth.scopes)
}
#if LANG_CXX11
inline void Auth::add_scopes(::std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.Auth.scopes)
}
#endif
inline void Auth::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.Auth.scopes)
}
inline void Auth::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.Auth.scopes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Auth::scopes() const {
  // @@protoc_insertion_point(field_list:api.Auth.scopes)
  return scopes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Auth::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:api.Auth.scopes)
  return &scopes_;
}

// -------------------------------------------------------------------

// Bytes

// bytes bits = 1;
inline void Bytes::clear_bits() {
  bits_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bytes::bits() const {
  // @@protoc_insertion_point(field_get:api.Bytes.bits)
  return bits_.GetNoArena();
}
inline void Bytes::set_bits(const ::std::string& value) {
  
  bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Bytes.bits)
}
#if LANG_CXX11
inline void Bytes::set_bits(::std::string&& value) {
  
  bits_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Bytes.bits)
}
#endif
inline void Bytes::set_bits(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Bytes.bits)
}
inline void Bytes::set_bits(const void* value, size_t size) {
  
  bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Bytes.bits)
}
inline ::std::string* Bytes::mutable_bits() {
  
  // @@protoc_insertion_point(field_mutable:api.Bytes.bits)
  return bits_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bytes::release_bits() {
  // @@protoc_insertion_point(field_release:api.Bytes.bits)
  
  return bits_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bytes::set_allocated_bits(::std::string* bits) {
  if (bits != NULL) {
    
  } else {
    
  }
  bits_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bits);
  // @@protoc_insertion_point(field_set_allocated:api.Bytes.bits)
}

// -------------------------------------------------------------------

// Template

// string text = 1;
inline void Template::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::text() const {
  // @@protoc_insertion_point(field_get:api.Template.text)
  return text_.GetNoArena();
}
inline void Template::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Template.text)
}
#if LANG_CXX11
inline void Template::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Template.text)
}
#endif
inline void Template::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Template.text)
}
inline void Template::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Template.text)
}
inline ::std::string* Template::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.Template.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_text() {
  // @@protoc_insertion_point(field_release:api.Template.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.Template.text)
}

// bytes data = 2;
inline void Template::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::data() const {
  // @@protoc_insertion_point(field_get:api.Template.data)
  return data_.GetNoArena();
}
inline void Template::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Template.data)
}
#if LANG_CXX11
inline void Template::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Template.data)
}
#endif
inline void Template::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Template.data)
}
inline void Template::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Template.data)
}
inline ::std::string* Template::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:api.Template.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_data() {
  // @@protoc_insertion_point(field_release:api.Template.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:api.Template.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
