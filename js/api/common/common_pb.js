/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.common.Config', null, global);
goog.exportSymbol('proto.common.Empty', null, global);
goog.exportSymbol('proto.common.Event', null, global);
goog.exportSymbol('proto.common.Float64', null, global);
goog.exportSymbol('proto.common.Identifier', null, global);
goog.exportSymbol('proto.common.Int64', null, global);
goog.exportSymbol('proto.common.Query', null, global);
goog.exportSymbol('proto.common.String', null, global);
goog.exportSymbol('proto.common.StringArray', null, global);
goog.exportSymbol('proto.common.StringMap', null, global);
goog.exportSymbol('proto.common.Token', null, global);
goog.exportSymbol('proto.common.TokenSet', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.String = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.String, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.String.displayName = 'proto.common.String';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.String.prototype.toObject = function(opt_includeInstance) {
  return proto.common.String.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.String} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.String.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.String}
 */
proto.common.String.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.String;
  return proto.common.String.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.String} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.String}
 */
proto.common.String.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.String.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.String.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.String} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.String.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.common.String.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.common.String.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.StringArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.StringArray.repeatedFields_, null);
};
goog.inherits(proto.common.StringArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.StringArray.displayName = 'proto.common.StringArray';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.StringArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.StringArray.prototype.toObject = function(opt_includeInstance) {
  return proto.common.StringArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.StringArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StringArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringsList: jspb.Message.toObjectList(msg.getStringsList(),
    proto.common.String.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.StringArray}
 */
proto.common.StringArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.StringArray;
  return proto.common.StringArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.StringArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.StringArray}
 */
proto.common.StringArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.addStrings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.StringArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.StringArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.StringArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StringArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
};


/**
 * repeated String strings = 1;
 * @return {!Array<!proto.common.String>}
 */
proto.common.StringArray.prototype.getStringsList = function() {
  return /** @type{!Array<!proto.common.String>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.String, 1));
};


/** @param {!Array<!proto.common.String>} value */
proto.common.StringArray.prototype.setStringsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.String=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.String}
 */
proto.common.StringArray.prototype.addStrings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.String, opt_index);
};


proto.common.StringArray.prototype.clearStringsList = function() {
  this.setStringsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.StringMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.StringMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.StringMap.displayName = 'proto.common.StringMap';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.StringMap.prototype.toObject = function(opt_includeInstance) {
  return proto.common.StringMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.StringMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StringMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringMapMap: (f = msg.getStringMapMap()) ? f.toObject(includeInstance, proto.common.String.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.StringMap}
 */
proto.common.StringMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.StringMap;
  return proto.common.StringMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.StringMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.StringMap}
 */
proto.common.StringMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getStringMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.String.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.StringMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.StringMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.StringMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StringMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.String.serializeBinaryToWriter);
  }
};


/**
 * map<string, String> string_map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.String>}
 */
proto.common.StringMap.prototype.getStringMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.String>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.common.String));
};


proto.common.StringMap.prototype.clearStringMapMap = function() {
  this.getStringMapMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Empty.displayName = 'proto.common.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Empty}
 */
proto.common.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Empty;
  return proto.common.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Empty}
 */
proto.common.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Identifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Identifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Identifier.displayName = 'proto.common.Identifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Identifier.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Identifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Identifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Identifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.common.String.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Identifier}
 */
proto.common.Identifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Identifier;
  return proto.common.Identifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Identifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Identifier}
 */
proto.common.Identifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Identifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Identifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Identifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Identifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
};


/**
 * optional String id = 1;
 * @return {?proto.common.String}
 */
proto.common.Identifier.prototype.getId = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 1));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Identifier.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.common.Identifier.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Identifier.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Int64 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Int64, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Int64.displayName = 'proto.common.Int64';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Int64.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Int64.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Int64} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Int64.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Int64}
 */
proto.common.Int64.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Int64;
  return proto.common.Int64.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Int64} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Int64}
 */
proto.common.Int64.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Int64.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Int64.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Int64} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Int64.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 num = 1;
 * @return {number}
 */
proto.common.Int64.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.common.Int64.prototype.setNum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Float64 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Float64, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Float64.displayName = 'proto.common.Float64';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Float64.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Float64.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Float64} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Float64.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Float64}
 */
proto.common.Float64.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Float64;
  return proto.common.Float64.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Float64} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Float64}
 */
proto.common.Float64.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Float64.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Float64.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Float64} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Float64.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double num = 1;
 * @return {number}
 */
proto.common.Float64.prototype.getNum = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.common.Float64.prototype.setNum = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Token.displayName = 'proto.common.Token';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessToken: (f = msg.getAccessToken()) && proto.common.String.toObject(includeInstance, f),
    tokenType: (f = msg.getTokenType()) && proto.common.String.toObject(includeInstance, f),
    refreshToken: (f = msg.getRefreshToken()) && proto.common.String.toObject(includeInstance, f),
    expiry: (f = msg.getExpiry()) && proto.common.String.toObject(includeInstance, f),
    idToken: (f = msg.getIdToken()) && proto.common.String.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Token}
 */
proto.common.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Token;
  return proto.common.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Token}
 */
proto.common.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setAccessToken(value);
      break;
    case 2:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setTokenType(value);
      break;
    case 3:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setRefreshToken(value);
      break;
    case 4:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setExpiry(value);
      break;
    case 5:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setIdToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getTokenType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getRefreshToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getExpiry();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getIdToken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
};


/**
 * optional String access_token = 1;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getAccessToken = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 1));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setAccessToken = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.common.Token.prototype.clearAccessToken = function() {
  this.setAccessToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasAccessToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional String token_type = 2;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getTokenType = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 2));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setTokenType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.common.Token.prototype.clearTokenType = function() {
  this.setTokenType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasTokenType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional String refresh_token = 3;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getRefreshToken = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 3));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setRefreshToken = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.common.Token.prototype.clearRefreshToken = function() {
  this.setRefreshToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasRefreshToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional String expiry = 4;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getExpiry = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 4));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setExpiry = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.common.Token.prototype.clearExpiry = function() {
  this.setExpiry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasExpiry = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional String id_token = 5;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getIdToken = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 5));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setIdToken = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.common.Token.prototype.clearIdToken = function() {
  this.setIdToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasIdToken = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Config.displayName = 'proto.common.Config';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: (f = msg.getClientId()) && proto.common.String.toObject(includeInstance, f),
    clientSecret: (f = msg.getClientSecret()) && proto.common.String.toObject(includeInstance, f),
    tokenUrl: (f = msg.getTokenUrl()) && proto.common.String.toObject(includeInstance, f),
    scopes: (f = msg.getScopes()) && proto.common.StringArray.toObject(includeInstance, f),
    endpointParams: (f = msg.getEndpointParams()) && proto.common.StringMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Config}
 */
proto.common.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Config;
  return proto.common.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Config}
 */
proto.common.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setClientId(value);
      break;
    case 2:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setClientSecret(value);
      break;
    case 3:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setTokenUrl(value);
      break;
    case 4:
      var value = new proto.common.StringArray;
      reader.readMessage(value,proto.common.StringArray.deserializeBinaryFromReader);
      msg.setScopes(value);
      break;
    case 5:
      var value = new proto.common.StringMap;
      reader.readMessage(value,proto.common.StringMap.deserializeBinaryFromReader);
      msg.setEndpointParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getClientSecret();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getTokenUrl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getScopes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.StringArray.serializeBinaryToWriter
    );
  }
  f = message.getEndpointParams();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.common.StringMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional String client_id = 1;
 * @return {?proto.common.String}
 */
proto.common.Config.prototype.getClientId = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 1));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Config.prototype.setClientId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.common.Config.prototype.clearClientId = function() {
  this.setClientId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Config.prototype.hasClientId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional String client_secret = 2;
 * @return {?proto.common.String}
 */
proto.common.Config.prototype.getClientSecret = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 2));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Config.prototype.setClientSecret = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.common.Config.prototype.clearClientSecret = function() {
  this.setClientSecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Config.prototype.hasClientSecret = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional String token_url = 3;
 * @return {?proto.common.String}
 */
proto.common.Config.prototype.getTokenUrl = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 3));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Config.prototype.setTokenUrl = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.common.Config.prototype.clearTokenUrl = function() {
  this.setTokenUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Config.prototype.hasTokenUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StringArray scopes = 4;
 * @return {?proto.common.StringArray}
 */
proto.common.Config.prototype.getScopes = function() {
  return /** @type{?proto.common.StringArray} */ (
    jspb.Message.getWrapperField(this, proto.common.StringArray, 4));
};


/** @param {?proto.common.StringArray|undefined} value */
proto.common.Config.prototype.setScopes = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.common.Config.prototype.clearScopes = function() {
  this.setScopes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Config.prototype.hasScopes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StringMap endpoint_params = 5;
 * @return {?proto.common.StringMap}
 */
proto.common.Config.prototype.getEndpointParams = function() {
  return /** @type{?proto.common.StringMap} */ (
    jspb.Message.getWrapperField(this, proto.common.StringMap, 5));
};


/** @param {?proto.common.StringMap|undefined} value */
proto.common.Config.prototype.setEndpointParams = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.common.Config.prototype.clearEndpointParams = function() {
  this.setEndpointParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Config.prototype.hasEndpointParams = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Event.displayName = 'proto.common.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    annotations: (f = msg.getAnnotations()) && proto.common.StringMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Event}
 */
proto.common.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Event;
  return proto.common.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Event}
 */
proto.common.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.common.StringMap;
      reader.readMessage(value,proto.common.StringMap.deserializeBinaryFromReader);
      msg.setAnnotations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnotations();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.common.StringMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional StringMap annotations = 10;
 * @return {?proto.common.StringMap}
 */
proto.common.Event.prototype.getAnnotations = function() {
  return /** @type{?proto.common.StringMap} */ (
    jspb.Message.getWrapperField(this, proto.common.StringMap, 10));
};


/** @param {?proto.common.StringMap|undefined} value */
proto.common.Event.prototype.setAnnotations = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.common.Event.prototype.clearAnnotations = function() {
  this.setAnnotations(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Event.prototype.hasAnnotations = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Query.displayName = 'proto.common.Query';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && proto.common.String.toObject(includeInstance, f),
    fields: (f = msg.getFields()) && proto.common.String.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Query}
 */
proto.common.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Query;
  return proto.common.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Query}
 */
proto.common.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 5:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getFields();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
};


/**
 * optional String query = 4;
 * @return {?proto.common.String}
 */
proto.common.Query.prototype.getQuery = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 4));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Query.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.common.Query.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Query.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional String fields = 5;
 * @return {?proto.common.String}
 */
proto.common.Query.prototype.getFields = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 5));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Query.prototype.setFields = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.common.Query.prototype.clearFields = function() {
  this.setFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Query.prototype.hasFields = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.TokenSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.TokenSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.TokenSet.displayName = 'proto.common.TokenSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.TokenSet.prototype.toObject = function(opt_includeInstance) {
  return proto.common.TokenSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.TokenSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TokenSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokensMap: (f = msg.getTokensMap()) ? f.toObject(includeInstance, proto.common.Token.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.TokenSet}
 */
proto.common.TokenSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.TokenSet;
  return proto.common.TokenSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.TokenSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.TokenSet}
 */
proto.common.TokenSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getTokensMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.Token.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.TokenSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.TokenSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.TokenSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.TokenSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokensMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.Token.serializeBinaryToWriter);
  }
};


/**
 * map<string, Token> tokens = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.Token>}
 */
proto.common.TokenSet.prototype.getTokensMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.Token>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.common.Token));
};


proto.common.TokenSet.prototype.clearTokensMap = function() {
  this.getTokensMap().clear();
};


goog.object.extend(exports, proto.common);
