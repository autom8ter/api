/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.net.ASNRequest', null, global);
goog.exportSymbol('proto.net.AlertRequest', null, global);
goog.exportSymbol('proto.net.ConnInfo', null, global);
goog.exportSymbol('proto.net.CountriesRequest', null, global);
goog.exportSymbol('proto.net.DNSRequest', null, global);
goog.exportSymbol('proto.net.DNSResponse', null, global);
goog.exportSymbol('proto.net.DNSReverseRequest', null, global);
goog.exportSymbol('proto.net.DNSReverseResponse', null, global);
goog.exportSymbol('proto.net.DataSetsRequest', null, global);
goog.exportSymbol('proto.net.DataSetsResponse', null, global);
goog.exportSymbol('proto.net.Dataset', null, global);
goog.exportSymbol('proto.net.Exploit', null, global);
goog.exportSymbol('proto.net.HostCertificate', null, global);
goog.exportSymbol('proto.net.HostCertificateAttributes', null, global);
goog.exportSymbol('proto.net.HostCipher', null, global);
goog.exportSymbol('proto.net.HostDHParams', null, global);
goog.exportSymbol('proto.net.HostData', null, global);
goog.exportSymbol('proto.net.HostLocation', null, global);
goog.exportSymbol('proto.net.HostSSL', null, global);
goog.exportSymbol('proto.net.HostTLSExtEntry', null, global);
goog.exportSymbol('proto.net.Network', null, global);
goog.exportSymbol('proto.net.PortsRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.Network = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.Network, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.Network.displayName = 'proto.net.Network';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.Network.prototype.toObject = function(opt_includeInstance) {
  return proto.net.Network.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.Network} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.Network.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.Network}
 */
proto.net.Network.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.Network;
  return proto.net.Network.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.Network} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.Network}
 */
proto.net.Network.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.Network.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.Network.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.Network} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.Network.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string network = 1;
 * @return {string}
 */
proto.net.Network.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.Network.prototype.setNetwork = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.net.Network.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.net.Network.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.ConnInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.ConnInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.ConnInfo.displayName = 'proto.net.ConnInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.ConnInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.net.ConnInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.ConnInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.ConnInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    network: (f = msg.getNetwork()) && proto.net.Network.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.ConnInfo}
 */
proto.net.ConnInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.ConnInfo;
  return proto.net.ConnInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.ConnInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.ConnInfo}
 */
proto.net.ConnInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServiceId(value);
      break;
    case 2:
      var value = new proto.net.Network;
      reader.readMessage(value,proto.net.Network.deserializeBinaryFromReader);
      msg.setNetwork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.ConnInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.ConnInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.ConnInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.ConnInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNetwork();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.net.Network.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 service_id = 1;
 * @return {number}
 */
proto.net.ConnInfo.prototype.getServiceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.net.ConnInfo.prototype.setServiceId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Network network = 2;
 * @return {?proto.net.Network}
 */
proto.net.ConnInfo.prototype.getNetwork = function() {
  return /** @type{?proto.net.Network} */ (
    jspb.Message.getWrapperField(this, proto.net.Network, 2));
};


/** @param {?proto.net.Network|undefined} value */
proto.net.ConnInfo.prototype.setNetwork = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.net.ConnInfo.prototype.clearNetwork = function() {
  this.setNetwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.ConnInfo.prototype.hasNetwork = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.Dataset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.Dataset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.Dataset.displayName = 'proto.net.Dataset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.Dataset.prototype.toObject = function(opt_includeInstance) {
  return proto.net.Dataset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.Dataset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.Dataset.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 2, ""),
    definition: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.Dataset}
 */
proto.net.Dataset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.Dataset;
  return proto.net.Dataset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.Dataset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.Dataset}
 */
proto.net.Dataset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.Dataset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.Dataset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.Dataset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.Dataset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDefinition();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.net.Dataset.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.Dataset.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope = 2;
 * @return {string}
 */
proto.net.Dataset.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.net.Dataset.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string definition = 3;
 * @return {string}
 */
proto.net.Dataset.prototype.getDefinition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.net.Dataset.prototype.setDefinition = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.HostLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.HostLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.HostLocation.displayName = 'proto.net.HostLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.HostLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.net.HostLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.HostLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    city: jspb.Message.getFieldWithDefault(msg, 1, ""),
    regionCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    areaCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    latitude: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    countryName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    countryCode3: jspb.Message.getFieldWithDefault(msg, 7, ""),
    postalCode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    dmaCode: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.HostLocation}
 */
proto.net.HostLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.HostLocation;
  return proto.net.HostLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.HostLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.HostLocation}
 */
proto.net.HostLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegionCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAreaCode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode3(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostalCode(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDmaCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.HostLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.HostLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.HostLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegionCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAreaCode();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCountryName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCountryCode3();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPostalCode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDmaCode();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional string city = 1;
 * @return {string}
 */
proto.net.HostLocation.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.HostLocation.prototype.setCity = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string region_code = 2;
 * @return {string}
 */
proto.net.HostLocation.prototype.getRegionCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.net.HostLocation.prototype.setRegionCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 area_code = 3;
 * @return {number}
 */
proto.net.HostLocation.prototype.getAreaCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.HostLocation.prototype.setAreaCode = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double latitude = 4;
 * @return {number}
 */
proto.net.HostLocation.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.net.HostLocation.prototype.setLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double longitude = 5;
 * @return {number}
 */
proto.net.HostLocation.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.net.HostLocation.prototype.setLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string country_name = 6;
 * @return {string}
 */
proto.net.HostLocation.prototype.getCountryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.net.HostLocation.prototype.setCountryName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string country_code3 = 7;
 * @return {string}
 */
proto.net.HostLocation.prototype.getCountryCode3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.net.HostLocation.prototype.setCountryCode3 = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string postal_code = 8;
 * @return {string}
 */
proto.net.HostLocation.prototype.getPostalCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.net.HostLocation.prototype.setPostalCode = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 dma_code = 9;
 * @return {number}
 */
proto.net.HostLocation.prototype.getDmaCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.net.HostLocation.prototype.setDmaCode = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.HostCertificateAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.HostCertificateAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.HostCertificateAttributes.displayName = 'proto.net.HostCertificateAttributes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.HostCertificateAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.net.HostCertificateAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.HostCertificateAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostCertificateAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    c: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    l: jspb.Message.getFieldWithDefault(msg, 3, ""),
    o: jspb.Message.getFieldWithDefault(msg, 4, ""),
    st: jspb.Message.getFieldWithDefault(msg, 5, ""),
    on: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.HostCertificateAttributes}
 */
proto.net.HostCertificateAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.HostCertificateAttributes;
  return proto.net.HostCertificateAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.HostCertificateAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.HostCertificateAttributes}
 */
proto.net.HostCertificateAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setC(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setL(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setO(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.HostCertificateAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.HostCertificateAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.HostCertificateAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostCertificateAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getC();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getL();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getO();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSt();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOn();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string C = 1;
 * @return {string}
 */
proto.net.HostCertificateAttributes.prototype.getC = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.HostCertificateAttributes.prototype.setC = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string CN = 2;
 * @return {string}
 */
proto.net.HostCertificateAttributes.prototype.getCn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.net.HostCertificateAttributes.prototype.setCn = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string L = 3;
 * @return {string}
 */
proto.net.HostCertificateAttributes.prototype.getL = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.net.HostCertificateAttributes.prototype.setL = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string O = 4;
 * @return {string}
 */
proto.net.HostCertificateAttributes.prototype.getO = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.net.HostCertificateAttributes.prototype.setO = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ST = 5;
 * @return {string}
 */
proto.net.HostCertificateAttributes.prototype.getSt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.net.HostCertificateAttributes.prototype.setSt = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ON = 6;
 * @return {string}
 */
proto.net.HostCertificateAttributes.prototype.getOn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.net.HostCertificateAttributes.prototype.setOn = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.HostCertificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.HostCertificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.HostCertificate.displayName = 'proto.net.HostCertificate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.HostCertificate.prototype.toObject = function(opt_includeInstance) {
  return proto.net.HostCertificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.HostCertificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostCertificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigAlg: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expired: jspb.Message.getFieldWithDefault(msg, 2, false),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    serial: jspb.Message.getFieldWithDefault(msg, 4, 0),
    issued: jspb.Message.getFieldWithDefault(msg, 5, ""),
    expires: jspb.Message.getFieldWithDefault(msg, 6, ""),
    fingerprintMap: (f = msg.getFingerprintMap()) ? f.toObject(includeInstance, undefined) : [],
    issuer: (f = msg.getIssuer()) && proto.net.HostCertificateAttributes.toObject(includeInstance, f),
    subject: (f = msg.getSubject()) && proto.net.HostCertificateAttributes.toObject(includeInstance, f),
    pubkey: (f = msg.getPubkey()) && proto.net.HostCertificateAttributes.toObject(includeInstance, f),
    extensions: (f = msg.getExtensions()) && proto.net.HostCertificateAttributes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.HostCertificate}
 */
proto.net.HostCertificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.HostCertificate;
  return proto.net.HostCertificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.HostCertificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.HostCertificate}
 */
proto.net.HostCertificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigAlg(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpired(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSerial(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssued(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpires(value);
      break;
    case 7:
      var value = msg.getFingerprintMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 8:
      var value = new proto.net.HostCertificateAttributes;
      reader.readMessage(value,proto.net.HostCertificateAttributes.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    case 9:
      var value = new proto.net.HostCertificateAttributes;
      reader.readMessage(value,proto.net.HostCertificateAttributes.deserializeBinaryFromReader);
      msg.setSubject(value);
      break;
    case 10:
      var value = new proto.net.HostCertificateAttributes;
      reader.readMessage(value,proto.net.HostCertificateAttributes.deserializeBinaryFromReader);
      msg.setPubkey(value);
      break;
    case 11:
      var value = new proto.net.HostCertificateAttributes;
      reader.readMessage(value,proto.net.HostCertificateAttributes.deserializeBinaryFromReader);
      msg.setExtensions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.HostCertificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.HostCertificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.HostCertificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostCertificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigAlg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpired();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSerial();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getIssued();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getExpires();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFingerprintMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getIssuer();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.net.HostCertificateAttributes.serializeBinaryToWriter
    );
  }
  f = message.getSubject();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.net.HostCertificateAttributes.serializeBinaryToWriter
    );
  }
  f = message.getPubkey();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.net.HostCertificateAttributes.serializeBinaryToWriter
    );
  }
  f = message.getExtensions();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.net.HostCertificateAttributes.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sig_alg = 1;
 * @return {string}
 */
proto.net.HostCertificate.prototype.getSigAlg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.HostCertificate.prototype.setSigAlg = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool expired = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.HostCertificate.prototype.getExpired = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.net.HostCertificate.prototype.setExpired = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 version = 3;
 * @return {number}
 */
proto.net.HostCertificate.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.HostCertificate.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 serial = 4;
 * @return {number}
 */
proto.net.HostCertificate.prototype.getSerial = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.net.HostCertificate.prototype.setSerial = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string issued = 5;
 * @return {string}
 */
proto.net.HostCertificate.prototype.getIssued = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.net.HostCertificate.prototype.setIssued = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string expires = 6;
 * @return {string}
 */
proto.net.HostCertificate.prototype.getExpires = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.net.HostCertificate.prototype.setExpires = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * map<string, string> fingerprint = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.net.HostCertificate.prototype.getFingerprintMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


proto.net.HostCertificate.prototype.clearFingerprintMap = function() {
  this.getFingerprintMap().clear();
};


/**
 * optional HostCertificateAttributes issuer = 8;
 * @return {?proto.net.HostCertificateAttributes}
 */
proto.net.HostCertificate.prototype.getIssuer = function() {
  return /** @type{?proto.net.HostCertificateAttributes} */ (
    jspb.Message.getWrapperField(this, proto.net.HostCertificateAttributes, 8));
};


/** @param {?proto.net.HostCertificateAttributes|undefined} value */
proto.net.HostCertificate.prototype.setIssuer = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.net.HostCertificate.prototype.clearIssuer = function() {
  this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.HostCertificate.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional HostCertificateAttributes subject = 9;
 * @return {?proto.net.HostCertificateAttributes}
 */
proto.net.HostCertificate.prototype.getSubject = function() {
  return /** @type{?proto.net.HostCertificateAttributes} */ (
    jspb.Message.getWrapperField(this, proto.net.HostCertificateAttributes, 9));
};


/** @param {?proto.net.HostCertificateAttributes|undefined} value */
proto.net.HostCertificate.prototype.setSubject = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.net.HostCertificate.prototype.clearSubject = function() {
  this.setSubject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.HostCertificate.prototype.hasSubject = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional HostCertificateAttributes pubkey = 10;
 * @return {?proto.net.HostCertificateAttributes}
 */
proto.net.HostCertificate.prototype.getPubkey = function() {
  return /** @type{?proto.net.HostCertificateAttributes} */ (
    jspb.Message.getWrapperField(this, proto.net.HostCertificateAttributes, 10));
};


/** @param {?proto.net.HostCertificateAttributes|undefined} value */
proto.net.HostCertificate.prototype.setPubkey = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.net.HostCertificate.prototype.clearPubkey = function() {
  this.setPubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.HostCertificate.prototype.hasPubkey = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional HostCertificateAttributes extensions = 11;
 * @return {?proto.net.HostCertificateAttributes}
 */
proto.net.HostCertificate.prototype.getExtensions = function() {
  return /** @type{?proto.net.HostCertificateAttributes} */ (
    jspb.Message.getWrapperField(this, proto.net.HostCertificateAttributes, 11));
};


/** @param {?proto.net.HostCertificateAttributes|undefined} value */
proto.net.HostCertificate.prototype.setExtensions = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.net.HostCertificate.prototype.clearExtensions = function() {
  this.setExtensions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.HostCertificate.prototype.hasExtensions = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.HostTLSExtEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.HostTLSExtEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.HostTLSExtEntry.displayName = 'proto.net.HostTLSExtEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.HostTLSExtEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.net.HostTLSExtEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.HostTLSExtEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostTLSExtEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.HostTLSExtEntry}
 */
proto.net.HostTLSExtEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.HostTLSExtEntry;
  return proto.net.HostTLSExtEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.HostTLSExtEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.HostTLSExtEntry}
 */
proto.net.HostTLSExtEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.HostTLSExtEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.HostTLSExtEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.HostTLSExtEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostTLSExtEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.net.HostTLSExtEntry.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.net.HostTLSExtEntry.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.net.HostTLSExtEntry.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.net.HostTLSExtEntry.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.HostCipher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.HostCipher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.HostCipher.displayName = 'proto.net.HostCipher';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.HostCipher.prototype.toObject = function(opt_includeInstance) {
  return proto.net.HostCipher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.HostCipher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostCipher.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bits: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.HostCipher}
 */
proto.net.HostCipher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.HostCipher;
  return proto.net.HostCipher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.HostCipher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.HostCipher}
 */
proto.net.HostCipher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBits(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.HostCipher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.HostCipher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.HostCipher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostCipher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBits();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.net.HostCipher.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.HostCipher.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 bits = 2;
 * @return {number}
 */
proto.net.HostCipher.prototype.getBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.net.HostCipher.prototype.setBits = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.net.HostCipher.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.net.HostCipher.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.HostSSL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.HostSSL.repeatedFields_, null);
};
goog.inherits(proto.net.HostSSL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.HostSSL.displayName = 'proto.net.HostSSL';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.HostSSL.repeatedFields_ = [1,2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.HostSSL.prototype.toObject = function(opt_includeInstance) {
  return proto.net.HostSSL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.HostSSL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostSSL.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionsList: jspb.Message.getRepeatedField(msg, 1),
    chainList: jspb.Message.getRepeatedField(msg, 2),
    dhparams: (f = msg.getDhparams()) && proto.net.HostDHParams.toObject(includeInstance, f),
    tlsextList: jspb.Message.toObjectList(msg.getTlsextList(),
    proto.net.HostTLSExtEntry.toObject, includeInstance),
    cipher: (f = msg.getCipher()) && proto.net.HostCipher.toObject(includeInstance, f),
    cert: (f = msg.getCert()) && proto.net.HostCertificate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.HostSSL}
 */
proto.net.HostSSL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.HostSSL;
  return proto.net.HostSSL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.HostSSL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.HostSSL}
 */
proto.net.HostSSL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addVersions(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addChain(value);
      break;
    case 3:
      var value = new proto.net.HostDHParams;
      reader.readMessage(value,proto.net.HostDHParams.deserializeBinaryFromReader);
      msg.setDhparams(value);
      break;
    case 4:
      var value = new proto.net.HostTLSExtEntry;
      reader.readMessage(value,proto.net.HostTLSExtEntry.deserializeBinaryFromReader);
      msg.addTlsext(value);
      break;
    case 5:
      var value = new proto.net.HostCipher;
      reader.readMessage(value,proto.net.HostCipher.deserializeBinaryFromReader);
      msg.setCipher(value);
      break;
    case 6:
      var value = new proto.net.HostCertificate;
      reader.readMessage(value,proto.net.HostCertificate.deserializeBinaryFromReader);
      msg.setCert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.HostSSL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.HostSSL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.HostSSL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostSSL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getChainList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getDhparams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.net.HostDHParams.serializeBinaryToWriter
    );
  }
  f = message.getTlsextList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.net.HostTLSExtEntry.serializeBinaryToWriter
    );
  }
  f = message.getCipher();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.net.HostCipher.serializeBinaryToWriter
    );
  }
  f = message.getCert();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.net.HostCertificate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string versions = 1;
 * @return {!Array<string>}
 */
proto.net.HostSSL.prototype.getVersionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.net.HostSSL.prototype.setVersionsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.HostSSL.prototype.addVersions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.net.HostSSL.prototype.clearVersionsList = function() {
  this.setVersionsList([]);
};


/**
 * repeated string chain = 2;
 * @return {!Array<string>}
 */
proto.net.HostSSL.prototype.getChainList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.net.HostSSL.prototype.setChainList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.HostSSL.prototype.addChain = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.net.HostSSL.prototype.clearChainList = function() {
  this.setChainList([]);
};


/**
 * optional HostDHParams dhparams = 3;
 * @return {?proto.net.HostDHParams}
 */
proto.net.HostSSL.prototype.getDhparams = function() {
  return /** @type{?proto.net.HostDHParams} */ (
    jspb.Message.getWrapperField(this, proto.net.HostDHParams, 3));
};


/** @param {?proto.net.HostDHParams|undefined} value */
proto.net.HostSSL.prototype.setDhparams = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.net.HostSSL.prototype.clearDhparams = function() {
  this.setDhparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.HostSSL.prototype.hasDhparams = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated HostTLSExtEntry tlsext = 4;
 * @return {!Array<!proto.net.HostTLSExtEntry>}
 */
proto.net.HostSSL.prototype.getTlsextList = function() {
  return /** @type{!Array<!proto.net.HostTLSExtEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.net.HostTLSExtEntry, 4));
};


/** @param {!Array<!proto.net.HostTLSExtEntry>} value */
proto.net.HostSSL.prototype.setTlsextList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.net.HostTLSExtEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.net.HostTLSExtEntry}
 */
proto.net.HostSSL.prototype.addTlsext = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.net.HostTLSExtEntry, opt_index);
};


proto.net.HostSSL.prototype.clearTlsextList = function() {
  this.setTlsextList([]);
};


/**
 * optional HostCipher cipher = 5;
 * @return {?proto.net.HostCipher}
 */
proto.net.HostSSL.prototype.getCipher = function() {
  return /** @type{?proto.net.HostCipher} */ (
    jspb.Message.getWrapperField(this, proto.net.HostCipher, 5));
};


/** @param {?proto.net.HostCipher|undefined} value */
proto.net.HostSSL.prototype.setCipher = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.net.HostSSL.prototype.clearCipher = function() {
  this.setCipher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.HostSSL.prototype.hasCipher = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional HostCertificate cert = 6;
 * @return {?proto.net.HostCertificate}
 */
proto.net.HostSSL.prototype.getCert = function() {
  return /** @type{?proto.net.HostCertificate} */ (
    jspb.Message.getWrapperField(this, proto.net.HostCertificate, 6));
};


/** @param {?proto.net.HostCertificate|undefined} value */
proto.net.HostSSL.prototype.setCert = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.net.HostSSL.prototype.clearCert = function() {
  this.setCert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.HostSSL.prototype.hasCert = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.HostDHParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.HostDHParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.HostDHParams.displayName = 'proto.net.HostDHParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.HostDHParams.prototype.toObject = function(opt_includeInstance) {
  return proto.net.HostDHParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.HostDHParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostDHParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    prime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publicKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bits: jspb.Message.getFieldWithDefault(msg, 3, 0),
    generator: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fingerprint: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.HostDHParams}
 */
proto.net.HostDHParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.HostDHParams;
  return proto.net.HostDHParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.HostDHParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.HostDHParams}
 */
proto.net.HostDHParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBits(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGenerator(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.HostDHParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.HostDHParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.HostDHParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostDHParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBits();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getGenerator();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string prime = 1;
 * @return {string}
 */
proto.net.HostDHParams.prototype.getPrime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.HostDHParams.prototype.setPrime = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string public_key = 2;
 * @return {string}
 */
proto.net.HostDHParams.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.net.HostDHParams.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 bits = 3;
 * @return {number}
 */
proto.net.HostDHParams.prototype.getBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.net.HostDHParams.prototype.setBits = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string generator = 4;
 * @return {string}
 */
proto.net.HostDHParams.prototype.getGenerator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.net.HostDHParams.prototype.setGenerator = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string fingerprint = 5;
 * @return {string}
 */
proto.net.HostDHParams.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.net.HostDHParams.prototype.setFingerprint = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.HostData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.HostData.repeatedFields_, null);
};
goog.inherits(proto.net.HostData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.HostData.displayName = 'proto.net.HostData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.HostData.repeatedFields_ = [2,10,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.HostData.prototype.toObject = function(opt_includeInstance) {
  return proto.net.HostData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.HostData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostData.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hostnamesList: jspb.Message.getRepeatedField(msg, 2),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ssl: (f = msg.getSsl()) && proto.net.HostSSL.toObject(includeInstance, f),
    ipStr: msg.getIpStr_asB64(),
    os: jspb.Message.getFieldWithDefault(msg, 7, ""),
    org: jspb.Message.getFieldWithDefault(msg, 8, ""),
    isp: jspb.Message.getFieldWithDefault(msg, 9, ""),
    cpeList: jspb.Message.getRepeatedField(msg, 10),
    data: jspb.Message.getFieldWithDefault(msg, 11, ""),
    asn: jspb.Message.getFieldWithDefault(msg, 12, ""),
    port: jspb.Message.getFieldWithDefault(msg, 13, 0),
    html: jspb.Message.getFieldWithDefault(msg, 14, ""),
    banner: jspb.Message.getFieldWithDefault(msg, 15, ""),
    link: jspb.Message.getFieldWithDefault(msg, 16, ""),
    transport: jspb.Message.getFieldWithDefault(msg, 17, ""),
    domainsList: jspb.Message.getRepeatedField(msg, 18),
    timestamp: jspb.Message.getFieldWithDefault(msg, 19, ""),
    deviceType: jspb.Message.getFieldWithDefault(msg, 20, ""),
    location: (f = msg.getLocation()) && proto.net.HostLocation.toObject(includeInstance, f),
    extraDataMap: (f = msg.getExtraDataMap()) ? f.toObject(includeInstance, undefined) : [],
    optsMap: (f = msg.getOptsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.HostData}
 */
proto.net.HostData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.HostData;
  return proto.net.HostData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.HostData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.HostData}
 */
proto.net.HostData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProduct(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addHostnames(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = new proto.net.HostSSL;
      reader.readMessage(value,proto.net.HostSSL.deserializeBinaryFromReader);
      msg.setSsl(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIpStr(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrg(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsp(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addCpe(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsn(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPort(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtml(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setBanner(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransport(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.addDomains(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceType(value);
      break;
    case 21:
      var value = new proto.net.HostLocation;
      reader.readMessage(value,proto.net.HostLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 22:
      var value = msg.getExtraDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "");
         });
      break;
    case 23:
      var value = msg.getOptsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.HostData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.HostData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.HostData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.HostData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduct();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSsl();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.net.HostSSL.serializeBinaryToWriter
    );
  }
  f = message.getIpStr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOrg();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIsp();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCpeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAsn();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getHtml();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBanner();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getTransport();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getDomainsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      18,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getDeviceType();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.net.HostLocation.serializeBinaryToWriter
    );
  }
  f = message.getExtraDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(22, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getOptsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(23, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
};


/**
 * optional string product = 1;
 * @return {string}
 */
proto.net.HostData.prototype.getProduct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setProduct = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string hostnames = 2;
 * @return {!Array<string>}
 */
proto.net.HostData.prototype.getHostnamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.net.HostData.prototype.setHostnamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.HostData.prototype.addHostnames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.net.HostData.prototype.clearHostnamesList = function() {
  this.setHostnamesList([]);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.net.HostData.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.net.HostData.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional HostSSL ssl = 5;
 * @return {?proto.net.HostSSL}
 */
proto.net.HostData.prototype.getSsl = function() {
  return /** @type{?proto.net.HostSSL} */ (
    jspb.Message.getWrapperField(this, proto.net.HostSSL, 5));
};


/** @param {?proto.net.HostSSL|undefined} value */
proto.net.HostData.prototype.setSsl = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.net.HostData.prototype.clearSsl = function() {
  this.setSsl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.HostData.prototype.hasSsl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes ip_str = 6;
 * @return {!(string|Uint8Array)}
 */
proto.net.HostData.prototype.getIpStr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes ip_str = 6;
 * This is a type-conversion wrapper around `getIpStr()`
 * @return {string}
 */
proto.net.HostData.prototype.getIpStr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIpStr()));
};


/**
 * optional bytes ip_str = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIpStr()`
 * @return {!Uint8Array}
 */
proto.net.HostData.prototype.getIpStr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIpStr()));
};


/** @param {!(string|Uint8Array)} value */
proto.net.HostData.prototype.setIpStr = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string os = 7;
 * @return {string}
 */
proto.net.HostData.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setOs = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string org = 8;
 * @return {string}
 */
proto.net.HostData.prototype.getOrg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setOrg = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string isp = 9;
 * @return {string}
 */
proto.net.HostData.prototype.getIsp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setIsp = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated string cpe = 10;
 * @return {!Array<string>}
 */
proto.net.HostData.prototype.getCpeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<string>} value */
proto.net.HostData.prototype.setCpeList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.HostData.prototype.addCpe = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.net.HostData.prototype.clearCpeList = function() {
  this.setCpeList([]);
};


/**
 * optional string data = 11;
 * @return {string}
 */
proto.net.HostData.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string asn = 12;
 * @return {string}
 */
proto.net.HostData.prototype.getAsn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setAsn = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int64 port = 13;
 * @return {number}
 */
proto.net.HostData.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.net.HostData.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string html = 14;
 * @return {string}
 */
proto.net.HostData.prototype.getHtml = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setHtml = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string banner = 15;
 * @return {string}
 */
proto.net.HostData.prototype.getBanner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setBanner = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string link = 16;
 * @return {string}
 */
proto.net.HostData.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setLink = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string transport = 17;
 * @return {string}
 */
proto.net.HostData.prototype.getTransport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setTransport = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * repeated string domains = 18;
 * @return {!Array<string>}
 */
proto.net.HostData.prototype.getDomainsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 18));
};


/** @param {!Array<string>} value */
proto.net.HostData.prototype.setDomainsList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.HostData.prototype.addDomains = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.net.HostData.prototype.clearDomainsList = function() {
  this.setDomainsList([]);
};


/**
 * optional string timestamp = 19;
 * @return {string}
 */
proto.net.HostData.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string device_type = 20;
 * @return {string}
 */
proto.net.HostData.prototype.getDeviceType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.net.HostData.prototype.setDeviceType = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional HostLocation location = 21;
 * @return {?proto.net.HostLocation}
 */
proto.net.HostData.prototype.getLocation = function() {
  return /** @type{?proto.net.HostLocation} */ (
    jspb.Message.getWrapperField(this, proto.net.HostLocation, 21));
};


/** @param {?proto.net.HostLocation|undefined} value */
proto.net.HostData.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.net.HostData.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.net.HostData.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * map<string, bytes> extra_data = 22;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.net.HostData.prototype.getExtraDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 22, opt_noLazyCreate,
      null));
};


proto.net.HostData.prototype.clearExtraDataMap = function() {
  this.getExtraDataMap().clear();
};


/**
 * map<string, bytes> opts = 23;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.net.HostData.prototype.getOptsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 23, opt_noLazyCreate,
      null));
};


proto.net.HostData.prototype.clearOptsMap = function() {
  this.getOptsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.Exploit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.Exploit.repeatedFields_, null);
};
goog.inherits(proto.net.Exploit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.Exploit.displayName = 'proto.net.Exploit';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.Exploit.repeatedFields_ = [2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.Exploit.prototype.toObject = function(opt_includeInstance) {
  return proto.net.Exploit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.Exploit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.Exploit.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    bidList: jspb.Message.getRepeatedField(msg, 2),
    cveList: jspb.Message.getRepeatedField(msg, 3),
    msbList: jspb.Message.getRepeatedField(msg, 4),
    osvdbList: msg.getOsvdbList_asB64(),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    source: jspb.Message.getFieldWithDefault(msg, 7, ""),
    author: msg.getAuthor_asB64(),
    code: jspb.Message.getFieldWithDefault(msg, 9, ""),
    platform: msg.getPlatform_asB64(),
    port: jspb.Message.getFieldWithDefault(msg, 11, 0),
    type: jspb.Message.getFieldWithDefault(msg, 12, ""),
    priviliged: jspb.Message.getFieldWithDefault(msg, 13, false),
    rank: jspb.Message.getFieldWithDefault(msg, 14, ""),
    version: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.Exploit}
 */
proto.net.Exploit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.Exploit;
  return proto.net.Exploit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.Exploit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.Exploit}
 */
proto.net.Exploit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setBidList(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCve(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addMsb(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addOsvdb(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthor(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlatform(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPort(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPriviliged(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setRank(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.Exploit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.Exploit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.Exploit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.Exploit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBidList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getCveList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getMsbList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getOsvdbList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAuthor_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPlatform_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPriviliged();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getRank();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.net.Exploit.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.net.Exploit.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.net.Exploit.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.net.Exploit.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated int64 bid = 2;
 * @return {!Array<number>}
 */
proto.net.Exploit.prototype.getBidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.net.Exploit.prototype.setBidList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.net.Exploit.prototype.addBid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.net.Exploit.prototype.clearBidList = function() {
  this.setBidList([]);
};


/**
 * repeated string cve = 3;
 * @return {!Array<string>}
 */
proto.net.Exploit.prototype.getCveList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.net.Exploit.prototype.setCveList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.Exploit.prototype.addCve = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.net.Exploit.prototype.clearCveList = function() {
  this.setCveList([]);
};


/**
 * repeated string msb = 4;
 * @return {!Array<string>}
 */
proto.net.Exploit.prototype.getMsbList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.net.Exploit.prototype.setMsbList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.Exploit.prototype.addMsb = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.net.Exploit.prototype.clearMsbList = function() {
  this.setMsbList([]);
};


/**
 * repeated bytes osvdb = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.net.Exploit.prototype.getOsvdbList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes osvdb = 5;
 * This is a type-conversion wrapper around `getOsvdbList()`
 * @return {!Array<string>}
 */
proto.net.Exploit.prototype.getOsvdbList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getOsvdbList()));
};


/**
 * repeated bytes osvdb = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOsvdbList()`
 * @return {!Array<!Uint8Array>}
 */
proto.net.Exploit.prototype.getOsvdbList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getOsvdbList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.net.Exploit.prototype.setOsvdbList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.net.Exploit.prototype.addOsvdb = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.net.Exploit.prototype.clearOsvdbList = function() {
  this.setOsvdbList([]);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.net.Exploit.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.net.Exploit.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string source = 7;
 * @return {string}
 */
proto.net.Exploit.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.net.Exploit.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes author = 8;
 * @return {!(string|Uint8Array)}
 */
proto.net.Exploit.prototype.getAuthor = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes author = 8;
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {string}
 */
proto.net.Exploit.prototype.getAuthor_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthor()));
};


/**
 * optional bytes author = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthor()`
 * @return {!Uint8Array}
 */
proto.net.Exploit.prototype.getAuthor_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthor()));
};


/** @param {!(string|Uint8Array)} value */
proto.net.Exploit.prototype.setAuthor = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional string code = 9;
 * @return {string}
 */
proto.net.Exploit.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.net.Exploit.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bytes platform = 10;
 * @return {!(string|Uint8Array)}
 */
proto.net.Exploit.prototype.getPlatform = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes platform = 10;
 * This is a type-conversion wrapper around `getPlatform()`
 * @return {string}
 */
proto.net.Exploit.prototype.getPlatform_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlatform()));
};


/**
 * optional bytes platform = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlatform()`
 * @return {!Uint8Array}
 */
proto.net.Exploit.prototype.getPlatform_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlatform()));
};


/** @param {!(string|Uint8Array)} value */
proto.net.Exploit.prototype.setPlatform = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional int64 port = 11;
 * @return {number}
 */
proto.net.Exploit.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.net.Exploit.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string type = 12;
 * @return {string}
 */
proto.net.Exploit.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.net.Exploit.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool priviliged = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.net.Exploit.prototype.getPriviliged = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.net.Exploit.prototype.setPriviliged = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string rank = 14;
 * @return {string}
 */
proto.net.Exploit.prototype.getRank = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.net.Exploit.prototype.setRank = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string version = 15;
 * @return {string}
 */
proto.net.Exploit.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.net.Exploit.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.ASNRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.ASNRequest.repeatedFields_, null);
};
goog.inherits(proto.net.ASNRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.ASNRequest.displayName = 'proto.net.ASNRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.ASNRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.ASNRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.ASNRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.ASNRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.ASNRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    asnList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.ASNRequest}
 */
proto.net.ASNRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.ASNRequest;
  return proto.net.ASNRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.ASNRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.ASNRequest}
 */
proto.net.ASNRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAsn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.ASNRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.ASNRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.ASNRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.ASNRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string asn = 1;
 * @return {!Array<string>}
 */
proto.net.ASNRequest.prototype.getAsnList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.net.ASNRequest.prototype.setAsnList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.ASNRequest.prototype.addAsn = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.net.ASNRequest.prototype.clearAsnList = function() {
  this.setAsnList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.AlertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.AlertRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.AlertRequest.displayName = 'proto.net.AlertRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.AlertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.AlertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.AlertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.AlertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.AlertRequest}
 */
proto.net.AlertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.AlertRequest;
  return proto.net.AlertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.AlertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.AlertRequest}
 */
proto.net.AlertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.AlertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.AlertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.AlertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.AlertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.net.AlertRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.AlertRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.CountriesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.CountriesRequest.repeatedFields_, null);
};
goog.inherits(proto.net.CountriesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.CountriesRequest.displayName = 'proto.net.CountriesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.CountriesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.CountriesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.CountriesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.CountriesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.CountriesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    countriesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.CountriesRequest}
 */
proto.net.CountriesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.CountriesRequest;
  return proto.net.CountriesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.CountriesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.CountriesRequest}
 */
proto.net.CountriesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCountries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.CountriesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.CountriesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.CountriesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.CountriesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string countries = 1;
 * @return {!Array<string>}
 */
proto.net.CountriesRequest.prototype.getCountriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.net.CountriesRequest.prototype.setCountriesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.CountriesRequest.prototype.addCountries = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.net.CountriesRequest.prototype.clearCountriesList = function() {
  this.setCountriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.PortsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.PortsRequest.repeatedFields_, null);
};
goog.inherits(proto.net.PortsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.PortsRequest.displayName = 'proto.net.PortsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.PortsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.PortsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.PortsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.PortsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.PortsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    portsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.PortsRequest}
 */
proto.net.PortsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.PortsRequest;
  return proto.net.PortsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.PortsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.PortsRequest}
 */
proto.net.PortsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPorts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.PortsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.PortsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.PortsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.PortsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ports = 1;
 * @return {!Array<string>}
 */
proto.net.PortsRequest.prototype.getPortsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.net.PortsRequest.prototype.setPortsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.PortsRequest.prototype.addPorts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.net.PortsRequest.prototype.clearPortsList = function() {
  this.setPortsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.DNSRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.DNSRequest.repeatedFields_, null);
};
goog.inherits(proto.net.DNSRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.DNSRequest.displayName = 'proto.net.DNSRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.DNSRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.DNSRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.DNSRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.DNSRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DNSRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.DNSRequest}
 */
proto.net.DNSRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.DNSRequest;
  return proto.net.DNSRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.DNSRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.DNSRequest}
 */
proto.net.DNSRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addHosts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.DNSRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.DNSRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.DNSRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DNSRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string hosts = 1;
 * @return {!Array<string>}
 */
proto.net.DNSRequest.prototype.getHostsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.net.DNSRequest.prototype.setHostsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.DNSRequest.prototype.addHosts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.net.DNSRequest.prototype.clearHostsList = function() {
  this.setHostsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.DNSResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.DNSResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.DNSResponse.displayName = 'proto.net.DNSResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.DNSResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.net.DNSResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.DNSResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DNSResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipsMap: (f = msg.getIpsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.DNSResponse}
 */
proto.net.DNSResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.DNSResponse;
  return proto.net.DNSResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.DNSResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.DNSResponse}
 */
proto.net.DNSResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getIpsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.DNSResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.DNSResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.DNSResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DNSResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> ips = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.net.DNSResponse.prototype.getIpsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.net.DNSResponse.prototype.clearIpsMap = function() {
  this.getIpsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.DNSReverseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.DNSReverseRequest.repeatedFields_, null);
};
goog.inherits(proto.net.DNSReverseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.DNSReverseRequest.displayName = 'proto.net.DNSReverseRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.DNSReverseRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.DNSReverseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.DNSReverseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.DNSReverseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DNSReverseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.DNSReverseRequest}
 */
proto.net.DNSReverseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.DNSReverseRequest;
  return proto.net.DNSReverseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.DNSReverseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.DNSReverseRequest}
 */
proto.net.DNSReverseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.DNSReverseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.DNSReverseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.DNSReverseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DNSReverseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ips = 1;
 * @return {!Array<string>}
 */
proto.net.DNSReverseRequest.prototype.getIpsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.net.DNSReverseRequest.prototype.setIpsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.net.DNSReverseRequest.prototype.addIps = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.net.DNSReverseRequest.prototype.clearIpsList = function() {
  this.setIpsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.DNSReverseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.DNSReverseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.DNSReverseResponse.displayName = 'proto.net.DNSReverseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.DNSReverseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.net.DNSReverseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.DNSReverseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DNSReverseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostsMap: (f = msg.getHostsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.DNSReverseResponse}
 */
proto.net.DNSReverseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.DNSReverseResponse;
  return proto.net.DNSReverseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.DNSReverseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.DNSReverseResponse}
 */
proto.net.DNSReverseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getHostsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.DNSReverseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.DNSReverseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.DNSReverseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DNSReverseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> hosts = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.net.DNSReverseResponse.prototype.getHostsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.net.DNSReverseResponse.prototype.clearHostsMap = function() {
  this.getHostsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.DataSetsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.net.DataSetsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.DataSetsRequest.displayName = 'proto.net.DataSetsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.DataSetsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.net.DataSetsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.DataSetsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DataSetsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.DataSetsRequest}
 */
proto.net.DataSetsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.DataSetsRequest;
  return proto.net.DataSetsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.DataSetsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.DataSetsRequest}
 */
proto.net.DataSetsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.DataSetsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.DataSetsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.DataSetsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DataSetsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.net.DataSetsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.net.DataSetsRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.net.DataSetsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.net.DataSetsResponse.repeatedFields_, null);
};
goog.inherits(proto.net.DataSetsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.net.DataSetsResponse.displayName = 'proto.net.DataSetsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.net.DataSetsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.net.DataSetsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.net.DataSetsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.net.DataSetsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DataSetsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetsList: jspb.Message.toObjectList(msg.getDatasetsList(),
    proto.net.Dataset.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.net.DataSetsResponse}
 */
proto.net.DataSetsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.net.DataSetsResponse;
  return proto.net.DataSetsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.net.DataSetsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.net.DataSetsResponse}
 */
proto.net.DataSetsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.net.Dataset;
      reader.readMessage(value,proto.net.Dataset.deserializeBinaryFromReader);
      msg.addDatasets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.net.DataSetsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.net.DataSetsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.net.DataSetsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.net.DataSetsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.net.Dataset.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Dataset datasets = 1;
 * @return {!Array<!proto.net.Dataset>}
 */
proto.net.DataSetsResponse.prototype.getDatasetsList = function() {
  return /** @type{!Array<!proto.net.Dataset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.net.Dataset, 1));
};


/** @param {!Array<!proto.net.Dataset>} value */
proto.net.DataSetsResponse.prototype.setDatasetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.net.Dataset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.net.Dataset}
 */
proto.net.DataSetsResponse.prototype.addDatasets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.net.Dataset, opt_index);
};


proto.net.DataSetsResponse.prototype.clearDatasetsList = function() {
  this.setDatasetsList([]);
};


goog.object.extend(exports, proto.net);
