// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Api.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "common/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ApiRoot

@implementation ApiRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ApiRoot_FileDescriptor

static GPBFileDescriptor *ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CategoryQuery

@implementation CategoryQuery

@dynamic hasCategory, category;

typedef struct CategoryQuery__storage_ {
  uint32_t _has_storage_[1];
  String *category;
} CategoryQuery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "category",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = CategoryQuery_FieldNumber_Category,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CategoryQuery__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CategoryQuery class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CategoryQuery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DocumentQuery

@implementation DocumentQuery

@dynamic hasCategory, category;
@dynamic hasName, name;

typedef struct DocumentQuery__storage_ {
  uint32_t _has_storage_[1];
  String *category;
  Identifier *name;
} DocumentQuery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "category",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = DocumentQuery_FieldNumber_Category,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DocumentQuery__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = DocumentQuery_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DocumentQuery__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DocumentQuery class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DocumentQuery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddUserRolesRequest

@implementation AddUserRolesRequest

@dynamic hasEmail, email;
@dynamic rolesArray, rolesArray_Count;

typedef struct AddUserRolesRequest__storage_ {
  uint32_t _has_storage_[1];
  Identifier *email;
  NSMutableArray *rolesArray;
} AddUserRolesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = AddUserRolesRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddUserRolesRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rolesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Role),
        .number = AddUserRolesRequest_FieldNumber_RolesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddUserRolesRequest__storage_, rolesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddUserRolesRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddUserRolesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeRequest

@implementation SubscribeRequest

@dynamic hasEmail, email;
@dynamic hasPlan, plan;
@dynamic hasCard, card;

typedef struct SubscribeRequest__storage_ {
  uint32_t _has_storage_[1];
  Identifier *email;
  Identifier *plan;
  Card *card;
} SubscribeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = SubscribeRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = SubscribeRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubscribeRequest__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "card",
        .dataTypeSpecific.className = GPBStringifySymbol(Card),
        .number = SubscribeRequest_FieldNumber_Card,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubscribeRequest__storage_, card),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnSubscribeRequest

@implementation UnSubscribeRequest

@dynamic hasEmail, email;
@dynamic hasPlan, plan;

typedef struct UnSubscribeRequest__storage_ {
  uint32_t _has_storage_[1];
  Identifier *email;
  String *plan;
} UnSubscribeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = UnSubscribeRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnSubscribeRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = UnSubscribeRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnSubscribeRequest__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnSubscribeRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnSubscribeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Card

@implementation Card

@dynamic hasNumber, number;
@dynamic hasExpMonth, expMonth;
@dynamic hasExpYear, expYear;
@dynamic hasCvc, cvc;

typedef struct Card__storage_ {
  uint32_t _has_storage_[1];
  Identifier *number;
  String *expMonth;
  String *expYear;
  String *cvc;
} Card__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = Card_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Card__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expMonth",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Card_FieldNumber_ExpMonth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Card__storage_, expMonth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expYear",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Card_FieldNumber_ExpYear,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Card__storage_, expYear),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cvc",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Card_FieldNumber_Cvc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Card__storage_, cvc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Card class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Card__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - User

@implementation User

@dynamic hasUserId, userId;
@dynamic hasName, name;
@dynamic hasGivenName, givenName;
@dynamic hasFamilyName, familyName;
@dynamic hasGender, gender;
@dynamic hasBirthdate, birthdate;
@dynamic hasEmail, email;
@dynamic hasPhoneNumber, phoneNumber;
@dynamic hasPicture, picture;
@dynamic hasNickname, nickname;
@dynamic hasUserMetadata, userMetadata;
@dynamic hasAppMetadata, appMetadata;
@dynamic hasLastIp, lastIp;
@dynamic hasBlocked, blocked;
@dynamic hasMultifactor, multifactor;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic hasPhoneVerified, phoneVerified;
@dynamic hasEmailVerified, emailVerified;
@dynamic hasPassword, password;
@dynamic identitiesArray, identitiesArray_Count;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  Identifier *userId;
  String *name;
  String *givenName;
  String *familyName;
  String *gender;
  String *birthdate;
  Identifier *email;
  Identifier *phoneNumber;
  String *picture;
  StringMap *userMetadata;
  StringMap *appMetadata;
  String *lastIp;
  Bool *blocked;
  String *nickname;
  StringArray *multifactor;
  String *createdAt;
  String *updatedAt;
  Bool *phoneVerified;
  Bool *emailVerified;
  String *password;
  NSMutableArray *identitiesArray;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = User_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "givenName",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_GivenName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, givenName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "familyName",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_FamilyName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(User__storage_, familyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(User__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "birthdate",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Birthdate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(User__storage_, birthdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = User_FieldNumber_Email,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(User__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = User_FieldNumber_PhoneNumber,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(User__storage_, phoneNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Picture,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(User__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = User_FieldNumber_UserMetadata,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(User__storage_, userMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = User_FieldNumber_AppMetadata,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(User__storage_, appMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastIp",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_LastIp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(User__storage_, lastIp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blocked",
        .dataTypeSpecific.className = GPBStringifySymbol(Bool),
        .number = User_FieldNumber_Blocked,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(User__storage_, blocked),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Nickname,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(User__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "multifactor",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = User_FieldNumber_Multifactor,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(User__storage_, multifactor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_CreatedAt,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(User__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_UpdatedAt,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(User__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "phoneVerified",
        .dataTypeSpecific.className = GPBStringifySymbol(Bool),
        .number = User_FieldNumber_PhoneVerified,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(User__storage_, phoneVerified),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "emailVerified",
        .dataTypeSpecific.className = GPBStringifySymbol(Bool),
        .number = User_FieldNumber_EmailVerified,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(User__storage_, emailVerified),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = User_FieldNumber_Password,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(User__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "identitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Identity),
        .number = User_FieldNumber_IdentitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, identitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserMetadata

@implementation UserMetadata

@dynamic hasStatus, status;
@dynamic hasBio, bio;
@dynamic hasAddress, address;
@dynamic hasTags, tags;

typedef struct UserMetadata__storage_ {
  uint32_t _has_storage_[1];
  String *status;
  StringMap *bio;
  Address *address;
  StringMap *tags;
} UserMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = UserMetadata_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bio",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = UserMetadata_FieldNumber_Bio,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, bio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = UserMetadata_FieldNumber_Address,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tags",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = UserMetadata_FieldNumber_Tags,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, tags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserMetadata class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Address

@implementation Address

@dynamic hasCity, city;
@dynamic hasState, state;
@dynamic hasLine1, line1;
@dynamic hasLine2, line2;
@dynamic hasZip, zip;

typedef struct Address__storage_ {
  uint32_t _has_storage_[1];
  String *city;
  String *state;
  String *line1;
  String *line2;
  String *zip;
} Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "city",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Address_FieldNumber_City,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Address__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Address_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Address__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "line1",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Address_FieldNumber_Line1,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Address__storage_, line1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "line2",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Address_FieldNumber_Line2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Address__storage_, line2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "zip",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Address_FieldNumber_Zip,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Address__storage_, zip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Address class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppMetadata

@implementation AppMetadata

@dynamic hasDescription_p, description_p;
@dynamic hasAccountBalance, accountBalance;
@dynamic hasPlan, plan;
@dynamic hasTags, tags;

typedef struct AppMetadata__storage_ {
  uint32_t _has_storage_[1];
  String *description_p;
  String *accountBalance;
  Plan *plan;
  StringMap *tags;
} AppMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "description_p",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = AppMetadata_FieldNumber_Description_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "accountBalance",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = AppMetadata_FieldNumber_AccountBalance,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, accountBalance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = GPBStringifySymbol(Plan),
        .number = AppMetadata_FieldNumber_Plan,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tags",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = AppMetadata_FieldNumber_Tags,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, tags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppMetadata class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Plan

@implementation Plan

@dynamic hasId_p, id_p;
@dynamic hasActive, active;
@dynamic hasAmount, amount;
@dynamic hasInterval, interval;
@dynamic hasNickname, nickname;
@dynamic hasProduct, product;

typedef struct Plan__storage_ {
  uint32_t _has_storage_[1];
  Identifier *id_p;
  Bool *active;
  Int64 *amount;
  String *interval;
  String *nickname;
  Product *product;
} Plan__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = Plan_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Plan__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "active",
        .dataTypeSpecific.className = GPBStringifySymbol(Bool),
        .number = Plan_FieldNumber_Active,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Plan__storage_, active),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = GPBStringifySymbol(Int64),
        .number = Plan_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Plan__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interval",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Plan_FieldNumber_Interval,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Plan__storage_, interval),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Plan_FieldNumber_Nickname,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Plan__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "product",
        .dataTypeSpecific.className = GPBStringifySymbol(Product),
        .number = Plan_FieldNumber_Product,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Plan__storage_, product),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Plan class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Plan__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Product

@implementation Product

@dynamic hasId_p, id_p;
@dynamic hasDescription_p, description_p;
@dynamic hasURL, URL;

typedef struct Product__storage_ {
  uint32_t _has_storage_[1];
  Identifier *id_p;
  String *description_p;
  String *URL;
} Product__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = Product_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Product__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Product_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Product__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Product_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Product__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Product class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Product__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Identity

@implementation Identity

@dynamic hasConnection, connection;
@dynamic hasUserId, userId;
@dynamic hasProvider, provider;
@dynamic hasIsSocial, isSocial;

typedef struct Identity__storage_ {
  uint32_t _has_storage_[1];
  String *connection;
  Identifier *userId;
  String *provider;
  Bool *isSocial;
} Identity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connection",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Identity_FieldNumber_Connection,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Identity__storage_, connection),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = Identity_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Identity__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "provider",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Identity_FieldNumber_Provider,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Identity__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isSocial",
        .dataTypeSpecific.className = GPBStringifySymbol(Bool),
        .number = Identity_FieldNumber_IsSocial,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Identity__storage_, isSocial),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Identity class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Identity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Role

@implementation Role

@dynamic hasId_p, id_p;
@dynamic hasName, name;
@dynamic hasDescription_p, description_p;

typedef struct Role__storage_ {
  uint32_t _has_storage_[1];
  Identifier *id_p;
  String *name;
  String *description_p;
} Role__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = Role_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Role__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Role_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Role__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Role_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Role__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Role class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Role__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OAuth2

@implementation OAuth2

@dynamic hasClientId, clientId;
@dynamic hasClientSecret, clientSecret;
@dynamic hasTokenURL, tokenURL;
@dynamic hasAuthURL, authURL;
@dynamic hasScopes, scopes;
@dynamic hasRedirect, redirect;
@dynamic hasCode, code;

typedef struct OAuth2__storage_ {
  uint32_t _has_storage_[1];
  String *clientId;
  String *clientSecret;
  String *tokenURL;
  String *authURL;
  StringArray *scopes;
  String *redirect;
  String *code;
} OAuth2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = OAuth2_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OAuth2__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientSecret",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = OAuth2_FieldNumber_ClientSecret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OAuth2__storage_, clientSecret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokenURL",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = OAuth2_FieldNumber_TokenURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OAuth2__storage_, tokenURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authURL",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = OAuth2_FieldNumber_AuthURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OAuth2__storage_, authURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scopes",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = OAuth2_FieldNumber_Scopes,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OAuth2__storage_, scopes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "redirect",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = OAuth2_FieldNumber_Redirect,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OAuth2__storage_, redirect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = OAuth2_FieldNumber_Code,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OAuth2__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OAuth2 class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OAuth2__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\005\241!!\000\004\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ClientCredentials

@implementation ClientCredentials

@dynamic hasClientId, clientId;
@dynamic hasClientSecret, clientSecret;
@dynamic hasTokenURL, tokenURL;
@dynamic hasScopes, scopes;
@dynamic hasEndpointParams, endpointParams;

typedef struct ClientCredentials__storage_ {
  uint32_t _has_storage_[1];
  String *clientId;
  String *clientSecret;
  String *tokenURL;
  StringArray *scopes;
  StringMap *endpointParams;
} ClientCredentials__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = ClientCredentials_FieldNumber_ClientId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ClientCredentials__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientSecret",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = ClientCredentials_FieldNumber_ClientSecret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ClientCredentials__storage_, clientSecret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokenURL",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = ClientCredentials_FieldNumber_TokenURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ClientCredentials__storage_, tokenURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scopes",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = ClientCredentials_FieldNumber_Scopes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ClientCredentials__storage_, scopes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endpointParams",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = ClientCredentials_FieldNumber_EndpointParams,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ClientCredentials__storage_, endpointParams),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClientCredentials class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClientCredentials__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JWT

@implementation JWT

@dynamic hasEmail, email;
@dynamic privateKey;
@dynamic hasPriveKeyId, priveKeyId;
@dynamic hasSubject, subject;
@dynamic hasScopes, scopes;
@dynamic hasTokenURL, tokenURL;
@dynamic hasExpires, expires;
@dynamic hasAudience, audience;

typedef struct JWT__storage_ {
  uint32_t _has_storage_[1];
  String *email;
  NSData *privateKey;
  String *priveKeyId;
  String *subject;
  StringArray *scopes;
  String *tokenURL;
  String *expires;
  String *audience;
} JWT__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JWT_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JWT__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "privateKey",
        .dataTypeSpecific.className = NULL,
        .number = JWT_FieldNumber_PrivateKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JWT__storage_, privateKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "priveKeyId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JWT_FieldNumber_PriveKeyId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JWT__storage_, priveKeyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JWT_FieldNumber_Subject,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(JWT__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scopes",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = JWT_FieldNumber_Scopes,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(JWT__storage_, scopes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokenURL",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JWT_FieldNumber_TokenURL,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(JWT__storage_, tokenURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expires",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JWT_FieldNumber_Expires,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(JWT__storage_, expires),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audience",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JWT_FieldNumber_Audience,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(JWT__storage_, audience),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JWT class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JWT__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DefaultGCPCredentials

@implementation DefaultGCPCredentials

@dynamic hasScopes, scopes;

typedef struct DefaultGCPCredentials__storage_ {
  uint32_t _has_storage_[1];
  StringArray *scopes;
} DefaultGCPCredentials__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scopes",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = DefaultGCPCredentials_FieldNumber_Scopes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DefaultGCPCredentials__storage_, scopes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DefaultGCPCredentials class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DefaultGCPCredentials__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Query

@implementation Query

@dynamic hasQuery, query;
@dynamic hasFields, fields;

typedef struct Query__storage_ {
  uint32_t _has_storage_[1];
  String *query;
  String *fields;
} Query__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "query",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Query_FieldNumber_Query,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Query__storage_, query),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fields",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Query_FieldNumber_Fields,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Query__storage_, fields),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Query class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Query__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Event

@implementation Event

@dynamic hasDate, date;
@dynamic hasType, type;
@dynamic hasClientId, clientId;
@dynamic hasClientName, clientName;
@dynamic hasIp, ip;
@dynamic hasLocationInfo, locationInfo;
@dynamic hasDetails, details;
@dynamic hasUserId, userId;
@dynamic hasAnnotations, annotations;

typedef struct Event__storage_ {
  uint32_t _has_storage_[1];
  String *date;
  String *type;
  String *clientId;
  String *clientName;
  String *ip;
  String *locationInfo;
  String *details;
  String *userId;
  StringMap *annotations;
} Event__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Event_FieldNumber_Date,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Event__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Event_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Event__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Event_FieldNumber_ClientId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Event__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientName",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Event_FieldNumber_ClientName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Event__storage_, clientName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ip",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Event_FieldNumber_Ip,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Event__storage_, ip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "locationInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Event_FieldNumber_LocationInfo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Event__storage_, locationInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "details",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Event_FieldNumber_Details,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Event__storage_, details),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Event_FieldNumber_UserId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Event__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "annotations",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = Event_FieldNumber_Annotations,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Event__storage_, annotations),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Event class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Event__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EventQuery

@implementation EventQuery

@dynamic hasDate, date;
@dynamic hasType, type;
@dynamic hasClientId, clientId;
@dynamic hasUserId, userId;

typedef struct EventQuery__storage_ {
  uint32_t _has_storage_[1];
  String *date;
  String *type;
  String *clientId;
  String *userId;
} EventQuery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EventQuery_FieldNumber_Date,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EventQuery__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EventQuery_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EventQuery__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EventQuery_FieldNumber_ClientId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EventQuery__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = EventQuery_FieldNumber_UserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EventQuery__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EventQuery class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EventQuery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JSONWebKeys

@implementation JSONWebKeys

@dynamic hasKty, kty;
@dynamic hasKid, kid;
@dynamic hasUse, use;
@dynamic hasN, n;
@dynamic hasE, e;
@dynamic hasX5C, x5C;

typedef struct JSONWebKeys__storage_ {
  uint32_t _has_storage_[1];
  String *kty;
  Identifier *kid;
  String *use;
  String *n;
  String *e;
  StringArray *x5C;
} JSONWebKeys__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kty",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JSONWebKeys_FieldNumber_Kty,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, kty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kid",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = JSONWebKeys_FieldNumber_Kid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, kid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "use",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JSONWebKeys_FieldNumber_Use,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, use),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "n",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JSONWebKeys_FieldNumber_N,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, n),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "e",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = JSONWebKeys_FieldNumber_E,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, e),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "x5C",
        .dataTypeSpecific.className = GPBStringifySymbol(StringArray),
        .number = JSONWebKeys_FieldNumber_X5C,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, x5C),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JSONWebKeys class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JSONWebKeys__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\002!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Jwks

@implementation Jwks

@dynamic keysArray, keysArray_Count;

typedef struct Jwks__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *keysArray;
} Jwks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keysArray",
        .dataTypeSpecific.className = GPBStringifySymbol(JSONWebKeys),
        .number = Jwks_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Jwks__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Jwks class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Jwks__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Document

@implementation Document

@dynamic hasCategory, category;
@dynamic hasName, name;
@dynamic hasData_p, data_p;

typedef struct Document__storage_ {
  uint32_t _has_storage_[1];
  String *category;
  String *name;
  StringMap *data_p;
} Document__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "category",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Document_FieldNumber_Category,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Document__storage_, category),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Document_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Document__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = Document_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Document__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Document class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Document__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
