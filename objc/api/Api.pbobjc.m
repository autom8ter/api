// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Api.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ApiRoot

@implementation ApiRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ApiRoot_FileDescriptor

static GPBFileDescriptor *ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Empty

@implementation Empty


typedef struct Empty__storage_ {
  uint32_t _has_storage_[1];
} Empty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Empty class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Empty__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserMap

@implementation UserMap

@dynamic users, users_Count;

typedef struct UserMap__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *users;
} UserMap__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "users",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = UserMap_FieldNumber_Users,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserMap__storage_, users),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserMap class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserMap__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - User

@implementation User

@dynamic userId;
@dynamic plan;
@dynamic name;
@dynamic email;
@dynamic description_p;
@dynamic phone;
@dynamic hasAddress, address;
@dynamic metadata, metadata_Count;
@dynamic deleted;
@dynamic createDate;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *plan;
  NSString *name;
  NSString *email;
  NSString *description_p;
  NSString *phone;
  Address *address;
  NSMutableDictionary *metadata;
  int64_t createDate;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Email,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(User__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(User__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Phone,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(User__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = User_FieldNumber_Address,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(User__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deleted",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Deleted,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "createDate",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_CreateDate,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(User__storage_, createDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddUserRequest

@implementation AddUserRequest

@dynamic email;
@dynamic plan;
@dynamic phone;
@dynamic name;
@dynamic password;
@dynamic trialEnd;
@dynamic description_p;
@dynamic hasAddress, address;

typedef struct AddUserRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
  NSString *plan;
  NSString *phone;
  NSString *name;
  NSString *password;
  NSString *description_p;
  Address *address;
  int64_t trialEnd;
} AddUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = AddUserRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddUserRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = AddUserRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddUserRequest__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = AddUserRequest_FieldNumber_Phone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddUserRequest__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AddUserRequest_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddUserRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = AddUserRequest_FieldNumber_Password,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddUserRequest__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "trialEnd",
        .dataTypeSpecific.className = NULL,
        .number = AddUserRequest_FieldNumber_TrialEnd,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddUserRequest__storage_, trialEnd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = AddUserRequest_FieldNumber_Description_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AddUserRequest__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = AddUserRequest_FieldNumber_Address,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddUserRequest__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddUserRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddUserRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeUserRequest

@implementation SubscribeUserRequest

@dynamic email;
@dynamic plan;
@dynamic cardNumber;
@dynamic expMonth;
@dynamic expYear;
@dynamic cvc;

typedef struct SubscribeUserRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
  NSString *plan;
  NSString *cardNumber;
  NSString *expMonth;
  NSString *expYear;
  NSString *cvc;
} SubscribeUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeUserRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeUserRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeUserRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubscribeUserRequest__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardNumber",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeUserRequest_FieldNumber_CardNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubscribeUserRequest__storage_, cardNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expMonth",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeUserRequest_FieldNumber_ExpMonth,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SubscribeUserRequest__storage_, expMonth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expYear",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeUserRequest_FieldNumber_ExpYear,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SubscribeUserRequest__storage_, expYear),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cvc",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeUserRequest_FieldNumber_Cvc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SubscribeUserRequest__storage_, cvc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeUserRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeUserRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddUserMetadataRequest

@implementation AddUserMetadataRequest

@dynamic userId;
@dynamic metadata, metadata_Count;

typedef struct AddUserMetadataRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSMutableDictionary *metadata;
} AddUserMetadataRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = AddUserMetadataRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddUserMetadataRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = AddUserMetadataRequest_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddUserMetadataRequest__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddUserMetadataRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddUserMetadataRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Address

@implementation Address

@dynamic city;
@dynamic country;
@dynamic line1;
@dynamic line2;
@dynamic postalCode;
@dynamic state;

typedef struct Address__storage_ {
  uint32_t _has_storage_[1];
  NSString *city;
  NSString *country;
  NSString *line1;
  NSString *line2;
  NSString *postalCode;
  NSString *state;
} Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_City,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Address__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Country,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Address__storage_, country),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "line1",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Line1,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Address__storage_, line1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "line2",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Line2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Address__storage_, line2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "postalCode",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_PostalCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Address__storage_, postalCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_State,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Address__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Address class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeUserResponse

@implementation SubscribeUserResponse

@dynamic subscriptionId;

typedef struct SubscribeUserResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriptionId;
} SubscribeUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriptionId",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeUserResponse_FieldNumber_SubscriptionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeUserResponse__storage_, subscriptionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeUserResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeUserResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreatePlanResponse

@implementation CreatePlanResponse

@dynamic planId;

typedef struct CreatePlanResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *planId;
} CreatePlanResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "planId",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanResponse_FieldNumber_PlanId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreatePlanResponse__storage_, planId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreatePlanResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreatePlanResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelSubscriptionRequest

@implementation CancelSubscriptionRequest

@dynamic email;

typedef struct CancelSubscriptionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
} CancelSubscriptionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = CancelSubscriptionRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelSubscriptionRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelSubscriptionRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelSubscriptionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreatePlanRequest

@implementation CreatePlanRequest

@dynamic planId;
@dynamic amount;
@dynamic serviceId;
@dynamic serviceName;
@dynamic friendlyName;

typedef struct CreatePlanRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *planId;
  NSString *serviceId;
  NSString *serviceName;
  NSString *friendlyName;
  int64_t amount;
} CreatePlanRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "planId",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_PlanId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, planId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "serviceId",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_ServiceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, serviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceName",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_ServiceName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, serviceName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendlyName",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_FriendlyName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, friendlyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreatePlanRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreatePlanRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMSRequest

@implementation SMSRequest

@dynamic userId;
@dynamic body;

typedef struct SMSRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *body;
} SMSRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SMSRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMSRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = SMSRequest_FieldNumber_Body,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SMSRequest__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMSRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMSRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CallRequest

@implementation CallRequest

@dynamic userId;
@dynamic callbackURL;

typedef struct CallRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *callbackURL;
} CallRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CallRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CallRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callbackURL",
        .dataTypeSpecific.className = NULL,
        .number = CallRequest_FieldNumber_CallbackURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CallRequest__storage_, callbackURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CallRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CallRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MMSRequest

@implementation MMSRequest

@dynamic userId;
@dynamic body;
@dynamic mediaURL;

typedef struct MMSRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *body;
  NSString *mediaURL;
} MMSRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = MMSRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MMSRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = MMSRequest_FieldNumber_Body,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MMSRequest__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = MMSRequest_FieldNumber_MediaURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MMSRequest__storage_, mediaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MMSRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MMSRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailRequest

@implementation EmailRequest

@dynamic userId;
@dynamic subject;
@dynamic plainText;
@dynamic htmlAlt;

typedef struct EmailRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *subject;
  NSString *plainText;
  NSString *htmlAlt;
} EmailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_Subject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plainText",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_PlainText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, plainText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "htmlAlt",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_HtmlAlt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, htmlAlt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
