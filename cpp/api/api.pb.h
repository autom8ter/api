// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class AppMetadata;
class AppMetadataDefaultTypeInternal;
extern AppMetadataDefaultTypeInternal _AppMetadata_default_instance_;
class AppMetadata_TagsEntry_DoNotUse;
class AppMetadata_TagsEntry_DoNotUseDefaultTypeInternal;
extern AppMetadata_TagsEntry_DoNotUseDefaultTypeInternal _AppMetadata_TagsEntry_DoNotUse_default_instance_;
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class Plan;
class PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class Product;
class ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class Product_TagsEntry_DoNotUse;
class Product_TagsEntry_DoNotUseDefaultTypeInternal;
extern Product_TagsEntry_DoNotUseDefaultTypeInternal _Product_TagsEntry_DoNotUse_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserMetadata;
class UserMetadataDefaultTypeInternal;
extern UserMetadataDefaultTypeInternal _UserMetadata_default_instance_;
class UserMetadata_BioEntry_DoNotUse;
class UserMetadata_BioEntry_DoNotUseDefaultTypeInternal;
extern UserMetadata_BioEntry_DoNotUseDefaultTypeInternal _UserMetadata_BioEntry_DoNotUse_default_instance_;
class UserMetadata_TagsEntry_DoNotUse;
class UserMetadata_TagsEntry_DoNotUseDefaultTypeInternal;
extern UserMetadata_TagsEntry_DoNotUseDefaultTypeInternal _UserMetadata_TagsEntry_DoNotUse_default_instance_;
class User_AppMetadataEntry_DoNotUse;
class User_AppMetadataEntry_DoNotUseDefaultTypeInternal;
extern User_AppMetadataEntry_DoNotUseDefaultTypeInternal _User_AppMetadataEntry_DoNotUse_default_instance_;
class User_UserMetadataEntry_DoNotUse;
class User_UserMetadataEntry_DoNotUseDefaultTypeInternal;
extern User_UserMetadataEntry_DoNotUseDefaultTypeInternal _User_UserMetadataEntry_DoNotUse_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::Address* Arena::CreateMaybeMessage<::api::Address>(Arena*);
template<> ::api::AppMetadata* Arena::CreateMaybeMessage<::api::AppMetadata>(Arena*);
template<> ::api::AppMetadata_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::api::AppMetadata_TagsEntry_DoNotUse>(Arena*);
template<> ::api::Card* Arena::CreateMaybeMessage<::api::Card>(Arena*);
template<> ::api::Identity* Arena::CreateMaybeMessage<::api::Identity>(Arena*);
template<> ::api::Plan* Arena::CreateMaybeMessage<::api::Plan>(Arena*);
template<> ::api::Product* Arena::CreateMaybeMessage<::api::Product>(Arena*);
template<> ::api::Product_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::api::Product_TagsEntry_DoNotUse>(Arena*);
template<> ::api::Role* Arena::CreateMaybeMessage<::api::Role>(Arena*);
template<> ::api::User* Arena::CreateMaybeMessage<::api::User>(Arena*);
template<> ::api::UserMetadata* Arena::CreateMaybeMessage<::api::UserMetadata>(Arena*);
template<> ::api::UserMetadata_BioEntry_DoNotUse* Arena::CreateMaybeMessage<::api::UserMetadata_BioEntry_DoNotUse>(Arena*);
template<> ::api::UserMetadata_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::api::UserMetadata_TagsEntry_DoNotUse>(Arena*);
template<> ::api::User_AppMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::api::User_AppMetadataEntry_DoNotUse>(Arena*);
template<> ::api::User_UserMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::api::User_UserMetadataEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

// ===================================================================

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(Card&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Card* other);
  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return CreateMaybeMessage<Card>(NULL);
  }

  Card* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // string exp_month = 2;
  void clear_exp_month();
  static const int kExpMonthFieldNumber = 2;
  const ::std::string& exp_month() const;
  void set_exp_month(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_month(::std::string&& value);
  #endif
  void set_exp_month(const char* value);
  void set_exp_month(const char* value, size_t size);
  ::std::string* mutable_exp_month();
  ::std::string* release_exp_month();
  void set_allocated_exp_month(::std::string* exp_month);

  // string exp_year = 3;
  void clear_exp_year();
  static const int kExpYearFieldNumber = 3;
  const ::std::string& exp_year() const;
  void set_exp_year(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_year(::std::string&& value);
  #endif
  void set_exp_year(const char* value);
  void set_exp_year(const char* value, size_t size);
  ::std::string* mutable_exp_year();
  ::std::string* release_exp_year();
  void set_allocated_exp_year(::std::string* exp_year);

  // string cvc = 4;
  void clear_cvc();
  static const int kCvcFieldNumber = 4;
  const ::std::string& cvc() const;
  void set_cvc(const ::std::string& value);
  #if LANG_CXX11
  void set_cvc(::std::string&& value);
  #endif
  void set_cvc(const char* value);
  void set_cvc(const char* value, size_t size);
  ::std::string* mutable_cvc();
  ::std::string* release_cvc();
  void set_allocated_cvc(::std::string* cvc);

  // @@protoc_insertion_point(class_scope:api.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  ::google::protobuf::internal::ArenaStringPtr exp_month_;
  ::google::protobuf::internal::ArenaStringPtr exp_year_;
  ::google::protobuf::internal::ArenaStringPtr cvc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class User_UserMetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<User_UserMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<User_UserMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  User_UserMetadataEntry_DoNotUse();
  User_UserMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const User_UserMetadataEntry_DoNotUse& other);
  static const User_UserMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const User_UserMetadataEntry_DoNotUse*>(&_User_UserMetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class User_AppMetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<User_AppMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<User_AppMetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  User_AppMetadataEntry_DoNotUse();
  User_AppMetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const User_AppMetadataEntry_DoNotUse& other);
  static const User_AppMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const User_AppMetadataEntry_DoNotUse*>(&_User_AppMetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> user_metadata = 10;
  int user_metadata_size() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 10;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      user_metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_user_metadata();

  // map<string, string> app_metadata = 11;
  int app_metadata_size() const;
  void clear_app_metadata();
  static const int kAppMetadataFieldNumber = 11;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      app_metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_app_metadata();

  // repeated string multifactor = 15;
  int multifactor_size() const;
  void clear_multifactor();
  static const int kMultifactorFieldNumber = 15;
  const ::std::string& multifactor(int index) const;
  ::std::string* mutable_multifactor(int index);
  void set_multifactor(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_multifactor(int index, ::std::string&& value);
  #endif
  void set_multifactor(int index, const char* value);
  void set_multifactor(int index, const char* value, size_t size);
  ::std::string* add_multifactor();
  void add_multifactor(const ::std::string& value);
  #if LANG_CXX11
  void add_multifactor(::std::string&& value);
  #endif
  void add_multifactor(const char* value);
  void add_multifactor(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& multifactor() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_multifactor();

  // repeated .api.Identity identities = 22;
  int identities_size() const;
  void clear_identities();
  static const int kIdentitiesFieldNumber = 22;
  ::api::Identity* mutable_identities(int index);
  ::google::protobuf::RepeatedPtrField< ::api::Identity >*
      mutable_identities();
  const ::api::Identity& identities(int index) const;
  ::api::Identity* add_identities();
  const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
      identities() const;

  // repeated .api.Role roles = 23;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 23;
  ::api::Role* mutable_roles(int index);
  ::google::protobuf::RepeatedPtrField< ::api::Role >*
      mutable_roles();
  const ::api::Role& roles(int index) const;
  ::api::Role* add_roles();
  const ::google::protobuf::RepeatedPtrField< ::api::Role >&
      roles() const;

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string given_name = 3;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 3;
  const ::std::string& given_name() const;
  void set_given_name(const ::std::string& value);
  #if LANG_CXX11
  void set_given_name(::std::string&& value);
  #endif
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  ::std::string* mutable_given_name();
  ::std::string* release_given_name();
  void set_allocated_given_name(::std::string* given_name);

  // string family_name = 4;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 4;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  #if LANG_CXX11
  void set_family_name(::std::string&& value);
  #endif
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // string gender = 5;
  void clear_gender();
  static const int kGenderFieldNumber = 5;
  const ::std::string& gender() const;
  void set_gender(const ::std::string& value);
  #if LANG_CXX11
  void set_gender(::std::string&& value);
  #endif
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  ::std::string* mutable_gender();
  ::std::string* release_gender();
  void set_allocated_gender(::std::string* gender);

  // string birthdate = 6;
  void clear_birthdate();
  static const int kBirthdateFieldNumber = 6;
  const ::std::string& birthdate() const;
  void set_birthdate(const ::std::string& value);
  #if LANG_CXX11
  void set_birthdate(::std::string&& value);
  #endif
  void set_birthdate(const char* value);
  void set_birthdate(const char* value, size_t size);
  ::std::string* mutable_birthdate();
  ::std::string* release_birthdate();
  void set_allocated_birthdate(::std::string* birthdate);

  // string email = 7;
  void clear_email();
  static const int kEmailFieldNumber = 7;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string phone_number = 8;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 8;
  const ::std::string& phone_number() const;
  void set_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(::std::string&& value);
  #endif
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  ::std::string* mutable_phone_number();
  ::std::string* release_phone_number();
  void set_allocated_phone_number(::std::string* phone_number);

  // string picture = 9;
  void clear_picture();
  static const int kPictureFieldNumber = 9;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  #if LANG_CXX11
  void set_picture(::std::string&& value);
  #endif
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // string last_ip = 12;
  void clear_last_ip();
  static const int kLastIpFieldNumber = 12;
  const ::std::string& last_ip() const;
  void set_last_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_last_ip(::std::string&& value);
  #endif
  void set_last_ip(const char* value);
  void set_last_ip(const char* value, size_t size);
  ::std::string* mutable_last_ip();
  ::std::string* release_last_ip();
  void set_allocated_last_ip(::std::string* last_ip);

  // string nickname = 14;
  void clear_nickname();
  static const int kNicknameFieldNumber = 14;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string created_at = 17;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 17;
  const ::std::string& created_at() const;
  void set_created_at(const ::std::string& value);
  #if LANG_CXX11
  void set_created_at(::std::string&& value);
  #endif
  void set_created_at(const char* value);
  void set_created_at(const char* value, size_t size);
  ::std::string* mutable_created_at();
  ::std::string* release_created_at();
  void set_allocated_created_at(::std::string* created_at);

  // string updated_at = 18;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 18;
  const ::std::string& updated_at() const;
  void set_updated_at(const ::std::string& value);
  #if LANG_CXX11
  void set_updated_at(::std::string&& value);
  #endif
  void set_updated_at(const char* value);
  void set_updated_at(const char* value, size_t size);
  ::std::string* mutable_updated_at();
  ::std::string* release_updated_at();
  void set_allocated_updated_at(::std::string* updated_at);

  // string password = 21;
  void clear_password();
  static const int kPasswordFieldNumber = 21;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bool blocked = 13;
  void clear_blocked();
  static const int kBlockedFieldNumber = 13;
  bool blocked() const;
  void set_blocked(bool value);

  // bool phone_verified = 19;
  void clear_phone_verified();
  static const int kPhoneVerifiedFieldNumber = 19;
  bool phone_verified() const;
  void set_phone_verified(bool value);

  // bool email_verified = 20;
  void clear_email_verified();
  static const int kEmailVerifiedFieldNumber = 20;
  bool email_verified() const;
  void set_email_verified(bool value);

  // @@protoc_insertion_point(class_scope:api.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      User_UserMetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > user_metadata_;
  ::google::protobuf::internal::MapField<
      User_AppMetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > app_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> multifactor_;
  ::google::protobuf::RepeatedPtrField< ::api::Identity > identities_;
  ::google::protobuf::RepeatedPtrField< ::api::Role > roles_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr given_name_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  ::google::protobuf::internal::ArenaStringPtr gender_;
  ::google::protobuf::internal::ArenaStringPtr birthdate_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr phone_number_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::google::protobuf::internal::ArenaStringPtr last_ip_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr created_at_;
  ::google::protobuf::internal::ArenaStringPtr updated_at_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  bool blocked_;
  bool phone_verified_;
  bool email_verified_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetadata_BioEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<UserMetadata_BioEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<UserMetadata_BioEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  UserMetadata_BioEntry_DoNotUse();
  UserMetadata_BioEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const UserMetadata_BioEntry_DoNotUse& other);
  static const UserMetadata_BioEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserMetadata_BioEntry_DoNotUse*>(&_UserMetadata_BioEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class UserMetadata_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<UserMetadata_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<UserMetadata_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  UserMetadata_TagsEntry_DoNotUse();
  UserMetadata_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const UserMetadata_TagsEntry_DoNotUse& other);
  static const UserMetadata_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserMetadata_TagsEntry_DoNotUse*>(&_UserMetadata_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class UserMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserMetadata) */ {
 public:
  UserMetadata();
  virtual ~UserMetadata();

  UserMetadata(const UserMetadata& from);

  inline UserMetadata& operator=(const UserMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetadata(UserMetadata&& from) noexcept
    : UserMetadata() {
    *this = ::std::move(from);
  }

  inline UserMetadata& operator=(UserMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMetadata* internal_default_instance() {
    return reinterpret_cast<const UserMetadata*>(
               &_UserMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UserMetadata* other);
  friend void swap(UserMetadata& a, UserMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetadata* New() const final {
    return CreateMaybeMessage<UserMetadata>(NULL);
  }

  UserMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMetadata& from);
  void MergeFrom(const UserMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> bio = 2;
  int bio_size() const;
  void clear_bio();
  static const int kBioFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      bio() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_bio();

  // map<string, string> tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // .api.Address address = 3;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  private:
  const ::api::Address& _internal_address() const;
  public:
  const ::api::Address& address() const;
  ::api::Address* release_address();
  ::api::Address* mutable_address();
  void set_allocated_address(::api::Address* address);

  // @@protoc_insertion_point(class_scope:api.UserMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      UserMetadata_BioEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > bio_;
  ::google::protobuf::internal::MapField<
      UserMetadata_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::api::Address* address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(NULL);
  }

  Address* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string city = 1;
  void clear_city();
  static const int kCityFieldNumber = 1;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string line1 = 3;
  void clear_line1();
  static const int kLine1FieldNumber = 3;
  const ::std::string& line1() const;
  void set_line1(const ::std::string& value);
  #if LANG_CXX11
  void set_line1(::std::string&& value);
  #endif
  void set_line1(const char* value);
  void set_line1(const char* value, size_t size);
  ::std::string* mutable_line1();
  ::std::string* release_line1();
  void set_allocated_line1(::std::string* line1);

  // string line2 = 4;
  void clear_line2();
  static const int kLine2FieldNumber = 4;
  const ::std::string& line2() const;
  void set_line2(const ::std::string& value);
  #if LANG_CXX11
  void set_line2(::std::string&& value);
  #endif
  void set_line2(const char* value);
  void set_line2(const char* value, size_t size);
  ::std::string* mutable_line2();
  ::std::string* release_line2();
  void set_allocated_line2(::std::string* line2);

  // string zip = 5;
  void clear_zip();
  static const int kZipFieldNumber = 5;
  const ::std::string& zip() const;
  void set_zip(const ::std::string& value);
  #if LANG_CXX11
  void set_zip(::std::string&& value);
  #endif
  void set_zip(const char* value);
  void set_zip(const char* value, size_t size);
  ::std::string* mutable_zip();
  ::std::string* release_zip();
  void set_allocated_zip(::std::string* zip);

  // @@protoc_insertion_point(class_scope:api.Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr line1_;
  ::google::protobuf::internal::ArenaStringPtr line2_;
  ::google::protobuf::internal::ArenaStringPtr zip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppMetadata_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AppMetadata_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AppMetadata_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AppMetadata_TagsEntry_DoNotUse();
  AppMetadata_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AppMetadata_TagsEntry_DoNotUse& other);
  static const AppMetadata_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppMetadata_TagsEntry_DoNotUse*>(&_AppMetadata_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AppMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AppMetadata) */ {
 public:
  AppMetadata();
  virtual ~AppMetadata();

  AppMetadata(const AppMetadata& from);

  inline AppMetadata& operator=(const AppMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppMetadata(AppMetadata&& from) noexcept
    : AppMetadata() {
    *this = ::std::move(from);
  }

  inline AppMetadata& operator=(AppMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppMetadata* internal_default_instance() {
    return reinterpret_cast<const AppMetadata*>(
               &_AppMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AppMetadata* other);
  friend void swap(AppMetadata& a, AppMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppMetadata* New() const final {
    return CreateMaybeMessage<AppMetadata>(NULL);
  }

  AppMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppMetadata& from);
  void MergeFrom(const AppMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string account_balance = 2;
  void clear_account_balance();
  static const int kAccountBalanceFieldNumber = 2;
  const ::std::string& account_balance() const;
  void set_account_balance(const ::std::string& value);
  #if LANG_CXX11
  void set_account_balance(::std::string&& value);
  #endif
  void set_account_balance(const char* value);
  void set_account_balance(const char* value, size_t size);
  ::std::string* mutable_account_balance();
  ::std::string* release_account_balance();
  void set_allocated_account_balance(::std::string* account_balance);

  // .api.Plan plan = 3;
  bool has_plan() const;
  void clear_plan();
  static const int kPlanFieldNumber = 3;
  private:
  const ::api::Plan& _internal_plan() const;
  public:
  const ::api::Plan& plan() const;
  ::api::Plan* release_plan();
  ::api::Plan* mutable_plan();
  void set_allocated_plan(::api::Plan* plan);

  // .api.Card card = 5;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 5;
  private:
  const ::api::Card& _internal_card() const;
  public:
  const ::api::Card& card() const;
  ::api::Card* release_card();
  ::api::Card* mutable_card();
  void set_allocated_card(::api::Card* card);

  // @@protoc_insertion_point(class_scope:api.AppMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      AppMetadata_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr account_balance_;
  ::api::Plan* plan_;
  ::api::Card* card_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Plan) */ {
 public:
  Plan();
  virtual ~Plan();

  Plan(const Plan& from);

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(Plan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Plan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Plan* other);
  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Plan* New() const final {
    return CreateMaybeMessage<Plan>(NULL);
  }

  Plan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string interval = 4;
  void clear_interval();
  static const int kIntervalFieldNumber = 4;
  const ::std::string& interval() const;
  void set_interval(const ::std::string& value);
  #if LANG_CXX11
  void set_interval(::std::string&& value);
  #endif
  void set_interval(const char* value);
  void set_interval(const char* value, size_t size);
  ::std::string* mutable_interval();
  ::std::string* release_interval();
  void set_allocated_interval(::std::string* interval);

  // string nickname = 5;
  void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // .api.Product product = 6;
  bool has_product() const;
  void clear_product();
  static const int kProductFieldNumber = 6;
  private:
  const ::api::Product& _internal_product() const;
  public:
  const ::api::Product& product() const;
  ::api::Product* release_product();
  ::api::Product* mutable_product();
  void set_allocated_product(::api::Product* product);

  // int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // bool active = 2;
  void clear_active();
  static const int kActiveFieldNumber = 2;
  bool active() const;
  void set_active(bool value);

  // @@protoc_insertion_point(class_scope:api.Plan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr interval_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::api::Product* product_;
  ::google::protobuf::int64 amount_;
  bool active_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Product_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Product_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Product_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Product_TagsEntry_DoNotUse();
  Product_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Product_TagsEntry_DoNotUse& other);
  static const Product_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Product_TagsEntry_DoNotUse*>(&_Product_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Product : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Product) */ {
 public:
  Product();
  virtual ~Product();

  Product(const Product& from);

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(Product&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Product& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Product* other);
  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const final {
    return CreateMaybeMessage<Product>(NULL);
  }

  Product* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string url = 3;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:api.Product)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Product_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Identity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Identity* other);
  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(NULL);
  }

  Identity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string connection = 1;
  void clear_connection();
  static const int kConnectionFieldNumber = 1;
  const ::std::string& connection() const;
  void set_connection(const ::std::string& value);
  #if LANG_CXX11
  void set_connection(::std::string&& value);
  #endif
  void set_connection(const char* value);
  void set_connection(const char* value, size_t size);
  ::std::string* mutable_connection();
  ::std::string* release_connection();
  void set_allocated_connection(::std::string* connection);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string provider = 3;
  void clear_provider();
  static const int kProviderFieldNumber = 3;
  const ::std::string& provider() const;
  void set_provider(const ::std::string& value);
  #if LANG_CXX11
  void set_provider(::std::string&& value);
  #endif
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  ::std::string* mutable_provider();
  ::std::string* release_provider();
  void set_allocated_provider(::std::string* provider);

  // bool isSocial = 4;
  void clear_issocial();
  static const int kIsSocialFieldNumber = 4;
  bool issocial() const;
  void set_issocial(bool value);

  // @@protoc_insertion_point(class_scope:api.Identity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr connection_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr provider_;
  bool issocial_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Role* other);
  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(NULL);
  }

  Role* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:api.Role)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Card

// string number = 1;
inline void Card::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::number() const {
  // @@protoc_insertion_point(field_get:api.Card.number)
  return number_.GetNoArena();
}
inline void Card::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.number)
}
#if LANG_CXX11
inline void Card::set_number(::std::string&& value) {
  
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.number)
}
#endif
inline void Card::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.number)
}
inline void Card::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.number)
}
inline ::std::string* Card::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_number() {
  // @@protoc_insertion_point(field_release:api.Card.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:api.Card.number)
}

// string exp_month = 2;
inline void Card::clear_exp_month() {
  exp_month_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::exp_month() const {
  // @@protoc_insertion_point(field_get:api.Card.exp_month)
  return exp_month_.GetNoArena();
}
inline void Card::set_exp_month(const ::std::string& value) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.exp_month)
}
#if LANG_CXX11
inline void Card::set_exp_month(::std::string&& value) {
  
  exp_month_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.exp_month)
}
#endif
inline void Card::set_exp_month(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.exp_month)
}
inline void Card::set_exp_month(const char* value, size_t size) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.exp_month)
}
inline ::std::string* Card::mutable_exp_month() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.exp_month)
  return exp_month_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_exp_month() {
  // @@protoc_insertion_point(field_release:api.Card.exp_month)
  
  return exp_month_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_exp_month(::std::string* exp_month) {
  if (exp_month != NULL) {
    
  } else {
    
  }
  exp_month_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_month);
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_month)
}

// string exp_year = 3;
inline void Card::clear_exp_year() {
  exp_year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::exp_year() const {
  // @@protoc_insertion_point(field_get:api.Card.exp_year)
  return exp_year_.GetNoArena();
}
inline void Card::set_exp_year(const ::std::string& value) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.exp_year)
}
#if LANG_CXX11
inline void Card::set_exp_year(::std::string&& value) {
  
  exp_year_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.exp_year)
}
#endif
inline void Card::set_exp_year(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.exp_year)
}
inline void Card::set_exp_year(const char* value, size_t size) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.exp_year)
}
inline ::std::string* Card::mutable_exp_year() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.exp_year)
  return exp_year_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_exp_year() {
  // @@protoc_insertion_point(field_release:api.Card.exp_year)
  
  return exp_year_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_exp_year(::std::string* exp_year) {
  if (exp_year != NULL) {
    
  } else {
    
  }
  exp_year_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_year);
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_year)
}

// string cvc = 4;
inline void Card::clear_cvc() {
  cvc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::cvc() const {
  // @@protoc_insertion_point(field_get:api.Card.cvc)
  return cvc_.GetNoArena();
}
inline void Card::set_cvc(const ::std::string& value) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.cvc)
}
#if LANG_CXX11
inline void Card::set_cvc(::std::string&& value) {
  
  cvc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.cvc)
}
#endif
inline void Card::set_cvc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.cvc)
}
inline void Card::set_cvc(const char* value, size_t size) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.cvc)
}
inline ::std::string* Card::mutable_cvc() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.cvc)
  return cvc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_cvc() {
  // @@protoc_insertion_point(field_release:api.Card.cvc)
  
  return cvc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_cvc(::std::string* cvc) {
  if (cvc != NULL) {
    
  } else {
    
  }
  cvc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cvc);
  // @@protoc_insertion_point(field_set_allocated:api.Card.cvc)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// User

// string user_id = 1;
inline void User::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::user_id() const {
  // @@protoc_insertion_point(field_get:api.User.user_id)
  return user_id_.GetNoArena();
}
inline void User::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.user_id)
}
#if LANG_CXX11
inline void User::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.user_id)
}
#endif
inline void User::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.user_id)
}
inline void User::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.user_id)
}
inline ::std::string* User::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.User.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_user_id() {
  // @@protoc_insertion_point(field_release:api.User.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.User.user_id)
}

// string name = 2;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:api.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.name)
}
#if LANG_CXX11
inline void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.name)
}
#endif
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:api.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.User.name)
}

// string given_name = 3;
inline void User::clear_given_name() {
  given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::given_name() const {
  // @@protoc_insertion_point(field_get:api.User.given_name)
  return given_name_.GetNoArena();
}
inline void User::set_given_name(const ::std::string& value) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.given_name)
}
#if LANG_CXX11
inline void User::set_given_name(::std::string&& value) {
  
  given_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.given_name)
}
#endif
inline void User::set_given_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.given_name)
}
inline void User::set_given_name(const char* value, size_t size) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.given_name)
}
inline ::std::string* User::mutable_given_name() {
  
  // @@protoc_insertion_point(field_mutable:api.User.given_name)
  return given_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_given_name() {
  // @@protoc_insertion_point(field_release:api.User.given_name)
  
  return given_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_given_name(::std::string* given_name) {
  if (given_name != NULL) {
    
  } else {
    
  }
  given_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), given_name);
  // @@protoc_insertion_point(field_set_allocated:api.User.given_name)
}

// string family_name = 4;
inline void User::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::family_name() const {
  // @@protoc_insertion_point(field_get:api.User.family_name)
  return family_name_.GetNoArena();
}
inline void User::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.family_name)
}
#if LANG_CXX11
inline void User::set_family_name(::std::string&& value) {
  
  family_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.family_name)
}
#endif
inline void User::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.family_name)
}
inline void User::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.family_name)
}
inline ::std::string* User::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:api.User.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_family_name() {
  // @@protoc_insertion_point(field_release:api.User.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:api.User.family_name)
}

// string gender = 5;
inline void User::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::gender() const {
  // @@protoc_insertion_point(field_get:api.User.gender)
  return gender_.GetNoArena();
}
inline void User::set_gender(const ::std::string& value) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.gender)
}
#if LANG_CXX11
inline void User::set_gender(::std::string&& value) {
  
  gender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.gender)
}
#endif
inline void User::set_gender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.gender)
}
inline void User::set_gender(const char* value, size_t size) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.gender)
}
inline ::std::string* User::mutable_gender() {
  
  // @@protoc_insertion_point(field_mutable:api.User.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_gender() {
  // @@protoc_insertion_point(field_release:api.User.gender)
  
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    
  } else {
    
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:api.User.gender)
}

// string birthdate = 6;
inline void User::clear_birthdate() {
  birthdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::birthdate() const {
  // @@protoc_insertion_point(field_get:api.User.birthdate)
  return birthdate_.GetNoArena();
}
inline void User::set_birthdate(const ::std::string& value) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.birthdate)
}
#if LANG_CXX11
inline void User::set_birthdate(::std::string&& value) {
  
  birthdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.birthdate)
}
#endif
inline void User::set_birthdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.birthdate)
}
inline void User::set_birthdate(const char* value, size_t size) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.birthdate)
}
inline ::std::string* User::mutable_birthdate() {
  
  // @@protoc_insertion_point(field_mutable:api.User.birthdate)
  return birthdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_birthdate() {
  // @@protoc_insertion_point(field_release:api.User.birthdate)
  
  return birthdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_birthdate(::std::string* birthdate) {
  if (birthdate != NULL) {
    
  } else {
    
  }
  birthdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthdate);
  // @@protoc_insertion_point(field_set_allocated:api.User.birthdate)
}

// string email = 7;
inline void User::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::email() const {
  // @@protoc_insertion_point(field_get:api.User.email)
  return email_.GetNoArena();
}
inline void User::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.email)
}
#if LANG_CXX11
inline void User::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.email)
}
#endif
inline void User::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.email)
}
inline void User::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.email)
}
inline ::std::string* User::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.User.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:api.User.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.User.email)
}

// string phone_number = 8;
inline void User::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::phone_number() const {
  // @@protoc_insertion_point(field_get:api.User.phone_number)
  return phone_number_.GetNoArena();
}
inline void User::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.phone_number)
}
#if LANG_CXX11
inline void User::set_phone_number(::std::string&& value) {
  
  phone_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.phone_number)
}
#endif
inline void User::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.phone_number)
}
inline void User::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.phone_number)
}
inline ::std::string* User::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:api.User.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_phone_number() {
  // @@protoc_insertion_point(field_release:api.User.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:api.User.phone_number)
}

// string picture = 9;
inline void User::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::picture() const {
  // @@protoc_insertion_point(field_get:api.User.picture)
  return picture_.GetNoArena();
}
inline void User::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.picture)
}
#if LANG_CXX11
inline void User::set_picture(::std::string&& value) {
  
  picture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.picture)
}
#endif
inline void User::set_picture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.picture)
}
inline void User::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.picture)
}
inline ::std::string* User::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:api.User.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_picture() {
  // @@protoc_insertion_point(field_release:api.User.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:api.User.picture)
}

// string nickname = 14;
inline void User::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::nickname() const {
  // @@protoc_insertion_point(field_get:api.User.nickname)
  return nickname_.GetNoArena();
}
inline void User::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.nickname)
}
#if LANG_CXX11
inline void User::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.nickname)
}
#endif
inline void User::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.nickname)
}
inline void User::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.nickname)
}
inline ::std::string* User::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:api.User.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_nickname() {
  // @@protoc_insertion_point(field_release:api.User.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:api.User.nickname)
}

// map<string, string> user_metadata = 10;
inline int User::user_metadata_size() const {
  return user_metadata_.size();
}
inline void User::clear_user_metadata() {
  user_metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
User::user_metadata() const {
  // @@protoc_insertion_point(field_map:api.User.user_metadata)
  return user_metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
User::mutable_user_metadata() {
  // @@protoc_insertion_point(field_mutable_map:api.User.user_metadata)
  return user_metadata_.MutableMap();
}

// map<string, string> app_metadata = 11;
inline int User::app_metadata_size() const {
  return app_metadata_.size();
}
inline void User::clear_app_metadata() {
  app_metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
User::app_metadata() const {
  // @@protoc_insertion_point(field_map:api.User.app_metadata)
  return app_metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
User::mutable_app_metadata() {
  // @@protoc_insertion_point(field_mutable_map:api.User.app_metadata)
  return app_metadata_.MutableMap();
}

// string last_ip = 12;
inline void User::clear_last_ip() {
  last_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::last_ip() const {
  // @@protoc_insertion_point(field_get:api.User.last_ip)
  return last_ip_.GetNoArena();
}
inline void User::set_last_ip(const ::std::string& value) {
  
  last_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.last_ip)
}
#if LANG_CXX11
inline void User::set_last_ip(::std::string&& value) {
  
  last_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.last_ip)
}
#endif
inline void User::set_last_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.last_ip)
}
inline void User::set_last_ip(const char* value, size_t size) {
  
  last_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.last_ip)
}
inline ::std::string* User::mutable_last_ip() {
  
  // @@protoc_insertion_point(field_mutable:api.User.last_ip)
  return last_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_last_ip() {
  // @@protoc_insertion_point(field_release:api.User.last_ip)
  
  return last_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_last_ip(::std::string* last_ip) {
  if (last_ip != NULL) {
    
  } else {
    
  }
  last_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_ip);
  // @@protoc_insertion_point(field_set_allocated:api.User.last_ip)
}

// bool blocked = 13;
inline void User::clear_blocked() {
  blocked_ = false;
}
inline bool User::blocked() const {
  // @@protoc_insertion_point(field_get:api.User.blocked)
  return blocked_;
}
inline void User::set_blocked(bool value) {
  
  blocked_ = value;
  // @@protoc_insertion_point(field_set:api.User.blocked)
}

// repeated string multifactor = 15;
inline int User::multifactor_size() const {
  return multifactor_.size();
}
inline void User::clear_multifactor() {
  multifactor_.Clear();
}
inline const ::std::string& User::multifactor(int index) const {
  // @@protoc_insertion_point(field_get:api.User.multifactor)
  return multifactor_.Get(index);
}
inline ::std::string* User::mutable_multifactor(int index) {
  // @@protoc_insertion_point(field_mutable:api.User.multifactor)
  return multifactor_.Mutable(index);
}
inline void User::set_multifactor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.User.multifactor)
  multifactor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void User::set_multifactor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.User.multifactor)
  multifactor_.Mutable(index)->assign(std::move(value));
}
#endif
inline void User::set_multifactor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  multifactor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.User.multifactor)
}
inline void User::set_multifactor(int index, const char* value, size_t size) {
  multifactor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.User.multifactor)
}
inline ::std::string* User::add_multifactor() {
  // @@protoc_insertion_point(field_add_mutable:api.User.multifactor)
  return multifactor_.Add();
}
inline void User::add_multifactor(const ::std::string& value) {
  multifactor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.User.multifactor)
}
#if LANG_CXX11
inline void User::add_multifactor(::std::string&& value) {
  multifactor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.User.multifactor)
}
#endif
inline void User::add_multifactor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  multifactor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.User.multifactor)
}
inline void User::add_multifactor(const char* value, size_t size) {
  multifactor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.User.multifactor)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::multifactor() const {
  // @@protoc_insertion_point(field_list:api.User.multifactor)
  return multifactor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_multifactor() {
  // @@protoc_insertion_point(field_mutable_list:api.User.multifactor)
  return &multifactor_;
}

// string created_at = 17;
inline void User::clear_created_at() {
  created_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::created_at() const {
  // @@protoc_insertion_point(field_get:api.User.created_at)
  return created_at_.GetNoArena();
}
inline void User::set_created_at(const ::std::string& value) {
  
  created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.created_at)
}
#if LANG_CXX11
inline void User::set_created_at(::std::string&& value) {
  
  created_at_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.created_at)
}
#endif
inline void User::set_created_at(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.created_at)
}
inline void User::set_created_at(const char* value, size_t size) {
  
  created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.created_at)
}
inline ::std::string* User::mutable_created_at() {
  
  // @@protoc_insertion_point(field_mutable:api.User.created_at)
  return created_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_created_at() {
  // @@protoc_insertion_point(field_release:api.User.created_at)
  
  return created_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_created_at(::std::string* created_at) {
  if (created_at != NULL) {
    
  } else {
    
  }
  created_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), created_at);
  // @@protoc_insertion_point(field_set_allocated:api.User.created_at)
}

// string updated_at = 18;
inline void User::clear_updated_at() {
  updated_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::updated_at() const {
  // @@protoc_insertion_point(field_get:api.User.updated_at)
  return updated_at_.GetNoArena();
}
inline void User::set_updated_at(const ::std::string& value) {
  
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.updated_at)
}
#if LANG_CXX11
inline void User::set_updated_at(::std::string&& value) {
  
  updated_at_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.updated_at)
}
#endif
inline void User::set_updated_at(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.updated_at)
}
inline void User::set_updated_at(const char* value, size_t size) {
  
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.updated_at)
}
inline ::std::string* User::mutable_updated_at() {
  
  // @@protoc_insertion_point(field_mutable:api.User.updated_at)
  return updated_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_updated_at() {
  // @@protoc_insertion_point(field_release:api.User.updated_at)
  
  return updated_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_updated_at(::std::string* updated_at) {
  if (updated_at != NULL) {
    
  } else {
    
  }
  updated_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updated_at);
  // @@protoc_insertion_point(field_set_allocated:api.User.updated_at)
}

// bool phone_verified = 19;
inline void User::clear_phone_verified() {
  phone_verified_ = false;
}
inline bool User::phone_verified() const {
  // @@protoc_insertion_point(field_get:api.User.phone_verified)
  return phone_verified_;
}
inline void User::set_phone_verified(bool value) {
  
  phone_verified_ = value;
  // @@protoc_insertion_point(field_set:api.User.phone_verified)
}

// bool email_verified = 20;
inline void User::clear_email_verified() {
  email_verified_ = false;
}
inline bool User::email_verified() const {
  // @@protoc_insertion_point(field_get:api.User.email_verified)
  return email_verified_;
}
inline void User::set_email_verified(bool value) {
  
  email_verified_ = value;
  // @@protoc_insertion_point(field_set:api.User.email_verified)
}

// string password = 21;
inline void User::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::password() const {
  // @@protoc_insertion_point(field_get:api.User.password)
  return password_.GetNoArena();
}
inline void User::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.password)
}
#if LANG_CXX11
inline void User::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.password)
}
#endif
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.password)
}
inline void User::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.password)
}
inline ::std::string* User::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:api.User.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:api.User.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:api.User.password)
}

// repeated .api.Identity identities = 22;
inline int User::identities_size() const {
  return identities_.size();
}
inline void User::clear_identities() {
  identities_.Clear();
}
inline ::api::Identity* User::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:api.User.identities)
  return identities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::Identity >*
User::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:api.User.identities)
  return &identities_;
}
inline const ::api::Identity& User::identities(int index) const {
  // @@protoc_insertion_point(field_get:api.User.identities)
  return identities_.Get(index);
}
inline ::api::Identity* User::add_identities() {
  // @@protoc_insertion_point(field_add:api.User.identities)
  return identities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
User::identities() const {
  // @@protoc_insertion_point(field_list:api.User.identities)
  return identities_;
}

// repeated .api.Role roles = 23;
inline int User::roles_size() const {
  return roles_.size();
}
inline void User::clear_roles() {
  roles_.Clear();
}
inline ::api::Role* User::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:api.User.roles)
  return roles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::Role >*
User::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:api.User.roles)
  return &roles_;
}
inline const ::api::Role& User::roles(int index) const {
  // @@protoc_insertion_point(field_get:api.User.roles)
  return roles_.Get(index);
}
inline ::api::Role* User::add_roles() {
  // @@protoc_insertion_point(field_add:api.User.roles)
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::Role >&
User::roles() const {
  // @@protoc_insertion_point(field_list:api.User.roles)
  return roles_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserMetadata

// string status = 1;
inline void UserMetadata::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::status() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.status)
  return status_.GetNoArena();
}
inline void UserMetadata::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.status)
}
#if LANG_CXX11
inline void UserMetadata::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.status)
}
#endif
inline void UserMetadata::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.status)
}
inline void UserMetadata::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.status)
}
inline ::std::string* UserMetadata::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_status() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.status)
}

// map<string, string> bio = 2;
inline int UserMetadata::bio_size() const {
  return bio_.size();
}
inline void UserMetadata::clear_bio() {
  bio_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
UserMetadata::bio() const {
  // @@protoc_insertion_point(field_map:api.UserMetadata.bio)
  return bio_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
UserMetadata::mutable_bio() {
  // @@protoc_insertion_point(field_mutable_map:api.UserMetadata.bio)
  return bio_.MutableMap();
}

// .api.Address address = 3;
inline bool UserMetadata::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void UserMetadata::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::api::Address& UserMetadata::_internal_address() const {
  return *address_;
}
inline const ::api::Address& UserMetadata::address() const {
  const ::api::Address* p = address_;
  // @@protoc_insertion_point(field_get:api.UserMetadata.address)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Address*>(
      &::api::_Address_default_instance_);
}
inline ::api::Address* UserMetadata::release_address() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.address)
  
  ::api::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::api::Address* UserMetadata::mutable_address() {
  
  if (address_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.address)
  return address_;
}
inline void UserMetadata::set_allocated_address(::api::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.address)
}

// map<string, string> tags = 4;
inline int UserMetadata::tags_size() const {
  return tags_.size();
}
inline void UserMetadata::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
UserMetadata::tags() const {
  // @@protoc_insertion_point(field_map:api.UserMetadata.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
UserMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:api.UserMetadata.tags)
  return tags_.MutableMap();
}

// -------------------------------------------------------------------

// Address

// string city = 1;
inline void Address::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:api.Address.city)
  return city_.GetNoArena();
}
inline void Address::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.city)
}
#if LANG_CXX11
inline void Address::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.city)
}
#endif
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.city)
}
inline void Address::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.city)
}
inline ::std::string* Address::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:api.Address.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:api.Address.city)
}

// string state = 2;
inline void Address::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::state() const {
  // @@protoc_insertion_point(field_get:api.Address.state)
  return state_.GetNoArena();
}
inline void Address::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.state)
}
#if LANG_CXX11
inline void Address::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.state)
}
#endif
inline void Address::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.state)
}
inline void Address::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.state)
}
inline ::std::string* Address::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_state() {
  // @@protoc_insertion_point(field_release:api.Address.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:api.Address.state)
}

// string line1 = 3;
inline void Address::clear_line1() {
  line1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::line1() const {
  // @@protoc_insertion_point(field_get:api.Address.line1)
  return line1_.GetNoArena();
}
inline void Address::set_line1(const ::std::string& value) {
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.line1)
}
#if LANG_CXX11
inline void Address::set_line1(::std::string&& value) {
  
  line1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.line1)
}
#endif
inline void Address::set_line1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.line1)
}
inline void Address::set_line1(const char* value, size_t size) {
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.line1)
}
inline ::std::string* Address::mutable_line1() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.line1)
  return line1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_line1() {
  // @@protoc_insertion_point(field_release:api.Address.line1)
  
  return line1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_line1(::std::string* line1) {
  if (line1 != NULL) {
    
  } else {
    
  }
  line1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line1);
  // @@protoc_insertion_point(field_set_allocated:api.Address.line1)
}

// string line2 = 4;
inline void Address::clear_line2() {
  line2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::line2() const {
  // @@protoc_insertion_point(field_get:api.Address.line2)
  return line2_.GetNoArena();
}
inline void Address::set_line2(const ::std::string& value) {
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.line2)
}
#if LANG_CXX11
inline void Address::set_line2(::std::string&& value) {
  
  line2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.line2)
}
#endif
inline void Address::set_line2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.line2)
}
inline void Address::set_line2(const char* value, size_t size) {
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.line2)
}
inline ::std::string* Address::mutable_line2() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.line2)
  return line2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_line2() {
  // @@protoc_insertion_point(field_release:api.Address.line2)
  
  return line2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_line2(::std::string* line2) {
  if (line2 != NULL) {
    
  } else {
    
  }
  line2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line2);
  // @@protoc_insertion_point(field_set_allocated:api.Address.line2)
}

// string zip = 5;
inline void Address::clear_zip() {
  zip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::zip() const {
  // @@protoc_insertion_point(field_get:api.Address.zip)
  return zip_.GetNoArena();
}
inline void Address::set_zip(const ::std::string& value) {
  
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.zip)
}
#if LANG_CXX11
inline void Address::set_zip(::std::string&& value) {
  
  zip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.zip)
}
#endif
inline void Address::set_zip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.zip)
}
inline void Address::set_zip(const char* value, size_t size) {
  
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.zip)
}
inline ::std::string* Address::mutable_zip() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.zip)
  return zip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_zip() {
  // @@protoc_insertion_point(field_release:api.Address.zip)
  
  return zip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_zip(::std::string* zip) {
  if (zip != NULL) {
    
  } else {
    
  }
  zip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zip);
  // @@protoc_insertion_point(field_set_allocated:api.Address.zip)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppMetadata

// string description = 1;
inline void AppMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppMetadata::description() const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.description)
  return description_.GetNoArena();
}
inline void AppMetadata::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AppMetadata.description)
}
#if LANG_CXX11
inline void AppMetadata::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AppMetadata.description)
}
#endif
inline void AppMetadata::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.description)
}
inline void AppMetadata::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.description)
}
inline ::std::string* AppMetadata::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMetadata::release_description() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMetadata::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.description)
}

// string account_balance = 2;
inline void AppMetadata::clear_account_balance() {
  account_balance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppMetadata::account_balance() const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.account_balance)
  return account_balance_.GetNoArena();
}
inline void AppMetadata::set_account_balance(const ::std::string& value) {
  
  account_balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AppMetadata.account_balance)
}
#if LANG_CXX11
inline void AppMetadata::set_account_balance(::std::string&& value) {
  
  account_balance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AppMetadata.account_balance)
}
#endif
inline void AppMetadata::set_account_balance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.account_balance)
}
inline void AppMetadata::set_account_balance(const char* value, size_t size) {
  
  account_balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.account_balance)
}
inline ::std::string* AppMetadata::mutable_account_balance() {
  
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.account_balance)
  return account_balance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMetadata::release_account_balance() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.account_balance)
  
  return account_balance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMetadata::set_allocated_account_balance(::std::string* account_balance) {
  if (account_balance != NULL) {
    
  } else {
    
  }
  account_balance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_balance);
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.account_balance)
}

// .api.Plan plan = 3;
inline bool AppMetadata::has_plan() const {
  return this != internal_default_instance() && plan_ != NULL;
}
inline void AppMetadata::clear_plan() {
  if (GetArenaNoVirtual() == NULL && plan_ != NULL) {
    delete plan_;
  }
  plan_ = NULL;
}
inline const ::api::Plan& AppMetadata::_internal_plan() const {
  return *plan_;
}
inline const ::api::Plan& AppMetadata::plan() const {
  const ::api::Plan* p = plan_;
  // @@protoc_insertion_point(field_get:api.AppMetadata.plan)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Plan*>(
      &::api::_Plan_default_instance_);
}
inline ::api::Plan* AppMetadata::release_plan() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.plan)
  
  ::api::Plan* temp = plan_;
  plan_ = NULL;
  return temp;
}
inline ::api::Plan* AppMetadata::mutable_plan() {
  
  if (plan_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Plan>(GetArenaNoVirtual());
    plan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.plan)
  return plan_;
}
inline void AppMetadata::set_allocated_plan(::api::Plan* plan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete plan_;
  }
  if (plan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.plan)
}

// map<string, string> tags = 4;
inline int AppMetadata::tags_size() const {
  return tags_.size();
}
inline void AppMetadata::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AppMetadata::tags() const {
  // @@protoc_insertion_point(field_map:api.AppMetadata.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AppMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:api.AppMetadata.tags)
  return tags_.MutableMap();
}

// .api.Card card = 5;
inline bool AppMetadata::has_card() const {
  return this != internal_default_instance() && card_ != NULL;
}
inline void AppMetadata::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) {
    delete card_;
  }
  card_ = NULL;
}
inline const ::api::Card& AppMetadata::_internal_card() const {
  return *card_;
}
inline const ::api::Card& AppMetadata::card() const {
  const ::api::Card* p = card_;
  // @@protoc_insertion_point(field_get:api.AppMetadata.card)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Card*>(
      &::api::_Card_default_instance_);
}
inline ::api::Card* AppMetadata::release_card() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.card)
  
  ::api::Card* temp = card_;
  card_ = NULL;
  return temp;
}
inline ::api::Card* AppMetadata::mutable_card() {
  
  if (card_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Card>(GetArenaNoVirtual());
    card_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.card)
  return card_;
}
inline void AppMetadata::set_allocated_card(::api::Card* card) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete card_;
  }
  if (card) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      card = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.card)
}

// -------------------------------------------------------------------

// Plan

// string id = 1;
inline void Plan::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plan::id() const {
  // @@protoc_insertion_point(field_get:api.Plan.id)
  return id_.GetNoArena();
}
inline void Plan::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Plan.id)
}
#if LANG_CXX11
inline void Plan::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Plan.id)
}
#endif
inline void Plan::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Plan.id)
}
inline void Plan::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Plan.id)
}
inline ::std::string* Plan::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Plan.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plan::release_id() {
  // @@protoc_insertion_point(field_release:api.Plan.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plan::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.Plan.id)
}

// bool active = 2;
inline void Plan::clear_active() {
  active_ = false;
}
inline bool Plan::active() const {
  // @@protoc_insertion_point(field_get:api.Plan.active)
  return active_;
}
inline void Plan::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:api.Plan.active)
}

// int64 amount = 3;
inline void Plan::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Plan::amount() const {
  // @@protoc_insertion_point(field_get:api.Plan.amount)
  return amount_;
}
inline void Plan::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:api.Plan.amount)
}

// string interval = 4;
inline void Plan::clear_interval() {
  interval_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plan::interval() const {
  // @@protoc_insertion_point(field_get:api.Plan.interval)
  return interval_.GetNoArena();
}
inline void Plan::set_interval(const ::std::string& value) {
  
  interval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Plan.interval)
}
#if LANG_CXX11
inline void Plan::set_interval(::std::string&& value) {
  
  interval_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Plan.interval)
}
#endif
inline void Plan::set_interval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Plan.interval)
}
inline void Plan::set_interval(const char* value, size_t size) {
  
  interval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Plan.interval)
}
inline ::std::string* Plan::mutable_interval() {
  
  // @@protoc_insertion_point(field_mutable:api.Plan.interval)
  return interval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plan::release_interval() {
  // @@protoc_insertion_point(field_release:api.Plan.interval)
  
  return interval_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plan::set_allocated_interval(::std::string* interval) {
  if (interval != NULL) {
    
  } else {
    
  }
  interval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interval);
  // @@protoc_insertion_point(field_set_allocated:api.Plan.interval)
}

// string nickname = 5;
inline void Plan::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plan::nickname() const {
  // @@protoc_insertion_point(field_get:api.Plan.nickname)
  return nickname_.GetNoArena();
}
inline void Plan::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Plan.nickname)
}
#if LANG_CXX11
inline void Plan::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Plan.nickname)
}
#endif
inline void Plan::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Plan.nickname)
}
inline void Plan::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Plan.nickname)
}
inline ::std::string* Plan::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:api.Plan.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plan::release_nickname() {
  // @@protoc_insertion_point(field_release:api.Plan.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plan::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:api.Plan.nickname)
}

// .api.Product product = 6;
inline bool Plan::has_product() const {
  return this != internal_default_instance() && product_ != NULL;
}
inline void Plan::clear_product() {
  if (GetArenaNoVirtual() == NULL && product_ != NULL) {
    delete product_;
  }
  product_ = NULL;
}
inline const ::api::Product& Plan::_internal_product() const {
  return *product_;
}
inline const ::api::Product& Plan::product() const {
  const ::api::Product* p = product_;
  // @@protoc_insertion_point(field_get:api.Plan.product)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Product*>(
      &::api::_Product_default_instance_);
}
inline ::api::Product* Plan::release_product() {
  // @@protoc_insertion_point(field_release:api.Plan.product)
  
  ::api::Product* temp = product_;
  product_ = NULL;
  return temp;
}
inline ::api::Product* Plan::mutable_product() {
  
  if (product_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Product>(GetArenaNoVirtual());
    product_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Plan.product)
  return product_;
}
inline void Plan::set_allocated_product(::api::Product* product) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_;
  }
  if (product) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:api.Plan.product)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Product

// string id = 1;
inline void Product::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::id() const {
  // @@protoc_insertion_point(field_get:api.Product.id)
  return id_.GetNoArena();
}
inline void Product::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Product.id)
}
#if LANG_CXX11
inline void Product::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Product.id)
}
#endif
inline void Product::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Product.id)
}
inline void Product::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Product.id)
}
inline ::std::string* Product::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Product.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_id() {
  // @@protoc_insertion_point(field_release:api.Product.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.Product.id)
}

// string description = 2;
inline void Product::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::description() const {
  // @@protoc_insertion_point(field_get:api.Product.description)
  return description_.GetNoArena();
}
inline void Product::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Product.description)
}
#if LANG_CXX11
inline void Product::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Product.description)
}
#endif
inline void Product::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Product.description)
}
inline void Product::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Product.description)
}
inline ::std::string* Product::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:api.Product.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_description() {
  // @@protoc_insertion_point(field_release:api.Product.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:api.Product.description)
}

// string url = 3;
inline void Product::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::url() const {
  // @@protoc_insertion_point(field_get:api.Product.url)
  return url_.GetNoArena();
}
inline void Product::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Product.url)
}
#if LANG_CXX11
inline void Product::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Product.url)
}
#endif
inline void Product::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Product.url)
}
inline void Product::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Product.url)
}
inline ::std::string* Product::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:api.Product.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_url() {
  // @@protoc_insertion_point(field_release:api.Product.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:api.Product.url)
}

// map<string, string> tags = 4;
inline int Product::tags_size() const {
  return tags_.size();
}
inline void Product::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Product::tags() const {
  // @@protoc_insertion_point(field_map:api.Product.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Product::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:api.Product.tags)
  return tags_.MutableMap();
}

// -------------------------------------------------------------------

// Identity

// string connection = 1;
inline void Identity::clear_connection() {
  connection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::connection() const {
  // @@protoc_insertion_point(field_get:api.Identity.connection)
  return connection_.GetNoArena();
}
inline void Identity::set_connection(const ::std::string& value) {
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.connection)
}
#if LANG_CXX11
inline void Identity::set_connection(::std::string&& value) {
  
  connection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.connection)
}
#endif
inline void Identity::set_connection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.connection)
}
inline void Identity::set_connection(const char* value, size_t size) {
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.connection)
}
inline ::std::string* Identity::mutable_connection() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.connection)
  return connection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_connection() {
  // @@protoc_insertion_point(field_release:api.Identity.connection)
  
  return connection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_connection(::std::string* connection) {
  if (connection != NULL) {
    
  } else {
    
  }
  connection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.connection)
}

// string user_id = 2;
inline void Identity::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::user_id() const {
  // @@protoc_insertion_point(field_get:api.Identity.user_id)
  return user_id_.GetNoArena();
}
inline void Identity::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.user_id)
}
#if LANG_CXX11
inline void Identity::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.user_id)
}
#endif
inline void Identity::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.user_id)
}
inline void Identity::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.user_id)
}
inline ::std::string* Identity::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_user_id() {
  // @@protoc_insertion_point(field_release:api.Identity.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.user_id)
}

// string provider = 3;
inline void Identity::clear_provider() {
  provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::provider() const {
  // @@protoc_insertion_point(field_get:api.Identity.provider)
  return provider_.GetNoArena();
}
inline void Identity::set_provider(const ::std::string& value) {
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.provider)
}
#if LANG_CXX11
inline void Identity::set_provider(::std::string&& value) {
  
  provider_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.provider)
}
#endif
inline void Identity::set_provider(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.provider)
}
inline void Identity::set_provider(const char* value, size_t size) {
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.provider)
}
inline ::std::string* Identity::mutable_provider() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.provider)
  return provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_provider() {
  // @@protoc_insertion_point(field_release:api.Identity.provider)
  
  return provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_provider(::std::string* provider) {
  if (provider != NULL) {
    
  } else {
    
  }
  provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.provider)
}

// bool isSocial = 4;
inline void Identity::clear_issocial() {
  issocial_ = false;
}
inline bool Identity::issocial() const {
  // @@protoc_insertion_point(field_get:api.Identity.isSocial)
  return issocial_;
}
inline void Identity::set_issocial(bool value) {
  
  issocial_ = value;
  // @@protoc_insertion_point(field_set:api.Identity.isSocial)
}

// -------------------------------------------------------------------

// Role

// string id = 1;
inline void Role::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::id() const {
  // @@protoc_insertion_point(field_get:api.Role.id)
  return id_.GetNoArena();
}
inline void Role::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Role.id)
}
#if LANG_CXX11
inline void Role::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Role.id)
}
#endif
inline void Role::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Role.id)
}
inline void Role::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Role.id)
}
inline ::std::string* Role::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Role.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_id() {
  // @@protoc_insertion_point(field_release:api.Role.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.Role.id)
}

// string name = 2;
inline void Role::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::name() const {
  // @@protoc_insertion_point(field_get:api.Role.name)
  return name_.GetNoArena();
}
inline void Role::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Role.name)
}
#if LANG_CXX11
inline void Role::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Role.name)
}
#endif
inline void Role::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Role.name)
}
inline void Role::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Role.name)
}
inline ::std::string* Role::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Role.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_name() {
  // @@protoc_insertion_point(field_release:api.Role.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Role.name)
}

// string description = 3;
inline void Role::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Role::description() const {
  // @@protoc_insertion_point(field_get:api.Role.description)
  return description_.GetNoArena();
}
inline void Role::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Role.description)
}
#if LANG_CXX11
inline void Role::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Role.description)
}
#endif
inline void Role::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Role.description)
}
inline void Role::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Role.description)
}
inline ::std::string* Role::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:api.Role.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Role::release_description() {
  // @@protoc_insertion_point(field_release:api.Role.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Role::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:api.Role.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
