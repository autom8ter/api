// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class AccessToken;
class AccessTokenDefaultTypeInternal;
extern AccessTokenDefaultTypeInternal _AccessToken_default_instance_;
class GetByEmail;
class GetByEmailDefaultTypeInternal;
extern GetByEmailDefaultTypeInternal _GetByEmail_default_instance_;
class IDToken;
class IDTokenDefaultTypeInternal;
extern IDTokenDefaultTypeInternal _IDToken_default_instance_;
class UserMetadata;
class UserMetadataDefaultTypeInternal;
extern UserMetadataDefaultTypeInternal _UserMetadata_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::AccessToken* Arena::CreateMaybeMessage<::api::AccessToken>(Arena*);
template<> ::api::GetByEmail* Arena::CreateMaybeMessage<::api::GetByEmail>(Arena*);
template<> ::api::IDToken* Arena::CreateMaybeMessage<::api::IDToken>(Arena*);
template<> ::api::UserMetadata* Arena::CreateMaybeMessage<::api::UserMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

// ===================================================================

class GetByEmail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.GetByEmail) */ {
 public:
  GetByEmail();
  virtual ~GetByEmail();

  GetByEmail(const GetByEmail& from);

  inline GetByEmail& operator=(const GetByEmail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetByEmail(GetByEmail&& from) noexcept
    : GetByEmail() {
    *this = ::std::move(from);
  }

  inline GetByEmail& operator=(GetByEmail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetByEmail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetByEmail* internal_default_instance() {
    return reinterpret_cast<const GetByEmail*>(
               &_GetByEmail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetByEmail* other);
  friend void swap(GetByEmail& a, GetByEmail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetByEmail* New() const final {
    return CreateMaybeMessage<GetByEmail>(NULL);
  }

  GetByEmail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetByEmail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetByEmail& from);
  void MergeFrom(const GetByEmail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetByEmail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:api.GetByEmail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IDToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.IDToken) */ {
 public:
  IDToken();
  virtual ~IDToken();

  IDToken(const IDToken& from);

  inline IDToken& operator=(const IDToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IDToken(IDToken&& from) noexcept
    : IDToken() {
    *this = ::std::move(from);
  }

  inline IDToken& operator=(IDToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IDToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IDToken* internal_default_instance() {
    return reinterpret_cast<const IDToken*>(
               &_IDToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IDToken* other);
  friend void swap(IDToken& a, IDToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IDToken* New() const final {
    return CreateMaybeMessage<IDToken>(NULL);
  }

  IDToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IDToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IDToken& from);
  void MergeFrom(const IDToken& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string iss = 1;
  void clear_iss();
  static const int kIssFieldNumber = 1;
  const ::std::string& iss() const;
  void set_iss(const ::std::string& value);
  #if LANG_CXX11
  void set_iss(::std::string&& value);
  #endif
  void set_iss(const char* value);
  void set_iss(const char* value, size_t size);
  ::std::string* mutable_iss();
  ::std::string* release_iss();
  void set_allocated_iss(::std::string* iss);

  // string aud = 3;
  void clear_aud();
  static const int kAudFieldNumber = 3;
  const ::std::string& aud() const;
  void set_aud(const ::std::string& value);
  #if LANG_CXX11
  void set_aud(::std::string&& value);
  #endif
  void set_aud(const char* value);
  void set_aud(const char* value, size_t size);
  ::std::string* mutable_aud();
  ::std::string* release_aud();
  void set_allocated_aud(::std::string* aud);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string given_name = 7;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 7;
  const ::std::string& given_name() const;
  void set_given_name(const ::std::string& value);
  #if LANG_CXX11
  void set_given_name(::std::string&& value);
  #endif
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  ::std::string* mutable_given_name();
  ::std::string* release_given_name();
  void set_allocated_given_name(::std::string* given_name);

  // string family_name = 8;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 8;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  #if LANG_CXX11
  void set_family_name(::std::string&& value);
  #endif
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // string gender = 9;
  void clear_gender();
  static const int kGenderFieldNumber = 9;
  const ::std::string& gender() const;
  void set_gender(const ::std::string& value);
  #if LANG_CXX11
  void set_gender(::std::string&& value);
  #endif
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  ::std::string* mutable_gender();
  ::std::string* release_gender();
  void set_allocated_gender(::std::string* gender);

  // string birthdate = 10;
  void clear_birthdate();
  static const int kBirthdateFieldNumber = 10;
  const ::std::string& birthdate() const;
  void set_birthdate(const ::std::string& value);
  #if LANG_CXX11
  void set_birthdate(::std::string&& value);
  #endif
  void set_birthdate(const char* value);
  void set_birthdate(const char* value, size_t size);
  ::std::string* mutable_birthdate();
  ::std::string* release_birthdate();
  void set_allocated_birthdate(::std::string* birthdate);

  // string email = 11;
  void clear_email();
  static const int kEmailFieldNumber = 11;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // int64 exp = 4;
  void clear_exp();
  static const int kExpFieldNumber = 4;
  ::google::protobuf::int64 exp() const;
  void set_exp(::google::protobuf::int64 value);

  // int64 iat = 5;
  void clear_iat();
  static const int kIatFieldNumber = 5;
  ::google::protobuf::int64 iat() const;
  void set_iat(::google::protobuf::int64 value);

  // int64 picture = 12;
  void clear_picture();
  static const int kPictureFieldNumber = 12;
  ::google::protobuf::int64 picture() const;
  void set_picture(::google::protobuf::int64 value);

  // bool sub = 2;
  void clear_sub();
  static const int kSubFieldNumber = 2;
  bool sub() const;
  void set_sub(bool value);

  // @@protoc_insertion_point(class_scope:api.IDToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr iss_;
  ::google::protobuf::internal::ArenaStringPtr aud_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr given_name_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  ::google::protobuf::internal::ArenaStringPtr gender_;
  ::google::protobuf::internal::ArenaStringPtr birthdate_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int64 iat_;
  ::google::protobuf::int64 picture_;
  bool sub_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserMetadata) */ {
 public:
  UserMetadata();
  virtual ~UserMetadata();

  UserMetadata(const UserMetadata& from);

  inline UserMetadata& operator=(const UserMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetadata(UserMetadata&& from) noexcept
    : UserMetadata() {
    *this = ::std::move(from);
  }

  inline UserMetadata& operator=(UserMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMetadata* internal_default_instance() {
    return reinterpret_cast<const UserMetadata*>(
               &_UserMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserMetadata* other);
  friend void swap(UserMetadata& a, UserMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetadata* New() const final {
    return CreateMaybeMessage<UserMetadata>(NULL);
  }

  UserMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMetadata& from);
  void MergeFrom(const UserMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string phone = 1;
  void clear_phone();
  static const int kPhoneFieldNumber = 1;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string pay_token = 3;
  void clear_pay_token();
  static const int kPayTokenFieldNumber = 3;
  const ::std::string& pay_token() const;
  void set_pay_token(const ::std::string& value);
  #if LANG_CXX11
  void set_pay_token(::std::string&& value);
  #endif
  void set_pay_token(const char* value);
  void set_pay_token(const char* value, size_t size);
  ::std::string* mutable_pay_token();
  ::std::string* release_pay_token();
  void set_allocated_pay_token(::std::string* pay_token);

  // string last_contact = 4;
  void clear_last_contact();
  static const int kLastContactFieldNumber = 4;
  const ::std::string& last_contact() const;
  void set_last_contact(const ::std::string& value);
  #if LANG_CXX11
  void set_last_contact(::std::string&& value);
  #endif
  void set_last_contact(const char* value);
  void set_last_contact(const char* value, size_t size);
  ::std::string* mutable_last_contact();
  ::std::string* release_last_contact();
  void set_allocated_last_contact(::std::string* last_contact);

  // @@protoc_insertion_point(class_scope:api.UserMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr pay_token_;
  ::google::protobuf::internal::ArenaStringPtr last_contact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AccessToken) */ {
 public:
  AccessToken();
  virtual ~AccessToken();

  AccessToken(const AccessToken& from);

  inline AccessToken& operator=(const AccessToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccessToken(AccessToken&& from) noexcept
    : AccessToken() {
    *this = ::std::move(from);
  }

  inline AccessToken& operator=(AccessToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessToken* internal_default_instance() {
    return reinterpret_cast<const AccessToken*>(
               &_AccessToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AccessToken* other);
  friend void swap(AccessToken& a, AccessToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessToken* New() const final {
    return CreateMaybeMessage<AccessToken>(NULL);
  }

  AccessToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccessToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccessToken& from);
  void MergeFrom(const AccessToken& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string aud = 3;
  int aud_size() const;
  void clear_aud();
  static const int kAudFieldNumber = 3;
  const ::std::string& aud(int index) const;
  ::std::string* mutable_aud(int index);
  void set_aud(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_aud(int index, ::std::string&& value);
  #endif
  void set_aud(int index, const char* value);
  void set_aud(int index, const char* value, size_t size);
  ::std::string* add_aud();
  void add_aud(const ::std::string& value);
  #if LANG_CXX11
  void add_aud(::std::string&& value);
  #endif
  void add_aud(const char* value);
  void add_aud(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& aud() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_aud();

  // string iss = 1;
  void clear_iss();
  static const int kIssFieldNumber = 1;
  const ::std::string& iss() const;
  void set_iss(const ::std::string& value);
  #if LANG_CXX11
  void set_iss(::std::string&& value);
  #endif
  void set_iss(const char* value);
  void set_iss(const char* value, size_t size);
  ::std::string* mutable_iss();
  ::std::string* release_iss();
  void set_allocated_iss(::std::string* iss);

  // string sub = 2;
  void clear_sub();
  static const int kSubFieldNumber = 2;
  const ::std::string& sub() const;
  void set_sub(const ::std::string& value);
  #if LANG_CXX11
  void set_sub(::std::string&& value);
  #endif
  void set_sub(const char* value);
  void set_sub(const char* value, size_t size);
  ::std::string* mutable_sub();
  ::std::string* release_sub();
  void set_allocated_sub(::std::string* sub);

  // string azp = 4;
  void clear_azp();
  static const int kAzpFieldNumber = 4;
  const ::std::string& azp() const;
  void set_azp(const ::std::string& value);
  #if LANG_CXX11
  void set_azp(::std::string&& value);
  #endif
  void set_azp(const char* value);
  void set_azp(const char* value, size_t size);
  ::std::string* mutable_azp();
  ::std::string* release_azp();
  void set_allocated_azp(::std::string* azp);

  // string scope = 7;
  void clear_scope();
  static const int kScopeFieldNumber = 7;
  const ::std::string& scope() const;
  void set_scope(const ::std::string& value);
  #if LANG_CXX11
  void set_scope(::std::string&& value);
  #endif
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  ::std::string* mutable_scope();
  ::std::string* release_scope();
  void set_allocated_scope(::std::string* scope);

  // int64 exp = 5;
  void clear_exp();
  static const int kExpFieldNumber = 5;
  ::google::protobuf::int64 exp() const;
  void set_exp(::google::protobuf::int64 value);

  // int64 iat = 6;
  void clear_iat();
  static const int kIatFieldNumber = 6;
  ::google::protobuf::int64 iat() const;
  void set_iat(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.AccessToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> aud_;
  ::google::protobuf::internal::ArenaStringPtr iss_;
  ::google::protobuf::internal::ArenaStringPtr sub_;
  ::google::protobuf::internal::ArenaStringPtr azp_;
  ::google::protobuf::internal::ArenaStringPtr scope_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int64 iat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetByEmail

// string email = 1;
inline void GetByEmail::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetByEmail::email() const {
  // @@protoc_insertion_point(field_get:api.GetByEmail.email)
  return email_.GetNoArena();
}
inline void GetByEmail::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.GetByEmail.email)
}
#if LANG_CXX11
inline void GetByEmail::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.GetByEmail.email)
}
#endif
inline void GetByEmail::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.GetByEmail.email)
}
inline void GetByEmail::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.GetByEmail.email)
}
inline ::std::string* GetByEmail::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.GetByEmail.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetByEmail::release_email() {
  // @@protoc_insertion_point(field_release:api.GetByEmail.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetByEmail::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.GetByEmail.email)
}

// -------------------------------------------------------------------

// IDToken

// string iss = 1;
inline void IDToken::clear_iss() {
  iss_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IDToken::iss() const {
  // @@protoc_insertion_point(field_get:api.IDToken.iss)
  return iss_.GetNoArena();
}
inline void IDToken::set_iss(const ::std::string& value) {
  
  iss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IDToken.iss)
}
#if LANG_CXX11
inline void IDToken::set_iss(::std::string&& value) {
  
  iss_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IDToken.iss)
}
#endif
inline void IDToken::set_iss(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  iss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IDToken.iss)
}
inline void IDToken::set_iss(const char* value, size_t size) {
  
  iss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IDToken.iss)
}
inline ::std::string* IDToken::mutable_iss() {
  
  // @@protoc_insertion_point(field_mutable:api.IDToken.iss)
  return iss_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IDToken::release_iss() {
  // @@protoc_insertion_point(field_release:api.IDToken.iss)
  
  return iss_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IDToken::set_allocated_iss(::std::string* iss) {
  if (iss != NULL) {
    
  } else {
    
  }
  iss_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iss);
  // @@protoc_insertion_point(field_set_allocated:api.IDToken.iss)
}

// bool sub = 2;
inline void IDToken::clear_sub() {
  sub_ = false;
}
inline bool IDToken::sub() const {
  // @@protoc_insertion_point(field_get:api.IDToken.sub)
  return sub_;
}
inline void IDToken::set_sub(bool value) {
  
  sub_ = value;
  // @@protoc_insertion_point(field_set:api.IDToken.sub)
}

// string aud = 3;
inline void IDToken::clear_aud() {
  aud_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IDToken::aud() const {
  // @@protoc_insertion_point(field_get:api.IDToken.aud)
  return aud_.GetNoArena();
}
inline void IDToken::set_aud(const ::std::string& value) {
  
  aud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IDToken.aud)
}
#if LANG_CXX11
inline void IDToken::set_aud(::std::string&& value) {
  
  aud_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IDToken.aud)
}
#endif
inline void IDToken::set_aud(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IDToken.aud)
}
inline void IDToken::set_aud(const char* value, size_t size) {
  
  aud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IDToken.aud)
}
inline ::std::string* IDToken::mutable_aud() {
  
  // @@protoc_insertion_point(field_mutable:api.IDToken.aud)
  return aud_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IDToken::release_aud() {
  // @@protoc_insertion_point(field_release:api.IDToken.aud)
  
  return aud_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IDToken::set_allocated_aud(::std::string* aud) {
  if (aud != NULL) {
    
  } else {
    
  }
  aud_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aud);
  // @@protoc_insertion_point(field_set_allocated:api.IDToken.aud)
}

// int64 exp = 4;
inline void IDToken::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IDToken::exp() const {
  // @@protoc_insertion_point(field_get:api.IDToken.exp)
  return exp_;
}
inline void IDToken::set_exp(::google::protobuf::int64 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:api.IDToken.exp)
}

// int64 iat = 5;
inline void IDToken::clear_iat() {
  iat_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IDToken::iat() const {
  // @@protoc_insertion_point(field_get:api.IDToken.iat)
  return iat_;
}
inline void IDToken::set_iat(::google::protobuf::int64 value) {
  
  iat_ = value;
  // @@protoc_insertion_point(field_set:api.IDToken.iat)
}

// string name = 6;
inline void IDToken::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IDToken::name() const {
  // @@protoc_insertion_point(field_get:api.IDToken.name)
  return name_.GetNoArena();
}
inline void IDToken::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IDToken.name)
}
#if LANG_CXX11
inline void IDToken::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IDToken.name)
}
#endif
inline void IDToken::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IDToken.name)
}
inline void IDToken::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IDToken.name)
}
inline ::std::string* IDToken::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.IDToken.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IDToken::release_name() {
  // @@protoc_insertion_point(field_release:api.IDToken.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IDToken::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.IDToken.name)
}

// string given_name = 7;
inline void IDToken::clear_given_name() {
  given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IDToken::given_name() const {
  // @@protoc_insertion_point(field_get:api.IDToken.given_name)
  return given_name_.GetNoArena();
}
inline void IDToken::set_given_name(const ::std::string& value) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IDToken.given_name)
}
#if LANG_CXX11
inline void IDToken::set_given_name(::std::string&& value) {
  
  given_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IDToken.given_name)
}
#endif
inline void IDToken::set_given_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IDToken.given_name)
}
inline void IDToken::set_given_name(const char* value, size_t size) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IDToken.given_name)
}
inline ::std::string* IDToken::mutable_given_name() {
  
  // @@protoc_insertion_point(field_mutable:api.IDToken.given_name)
  return given_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IDToken::release_given_name() {
  // @@protoc_insertion_point(field_release:api.IDToken.given_name)
  
  return given_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IDToken::set_allocated_given_name(::std::string* given_name) {
  if (given_name != NULL) {
    
  } else {
    
  }
  given_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), given_name);
  // @@protoc_insertion_point(field_set_allocated:api.IDToken.given_name)
}

// string family_name = 8;
inline void IDToken::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IDToken::family_name() const {
  // @@protoc_insertion_point(field_get:api.IDToken.family_name)
  return family_name_.GetNoArena();
}
inline void IDToken::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IDToken.family_name)
}
#if LANG_CXX11
inline void IDToken::set_family_name(::std::string&& value) {
  
  family_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IDToken.family_name)
}
#endif
inline void IDToken::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IDToken.family_name)
}
inline void IDToken::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IDToken.family_name)
}
inline ::std::string* IDToken::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:api.IDToken.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IDToken::release_family_name() {
  // @@protoc_insertion_point(field_release:api.IDToken.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IDToken::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:api.IDToken.family_name)
}

// string gender = 9;
inline void IDToken::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IDToken::gender() const {
  // @@protoc_insertion_point(field_get:api.IDToken.gender)
  return gender_.GetNoArena();
}
inline void IDToken::set_gender(const ::std::string& value) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IDToken.gender)
}
#if LANG_CXX11
inline void IDToken::set_gender(::std::string&& value) {
  
  gender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IDToken.gender)
}
#endif
inline void IDToken::set_gender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IDToken.gender)
}
inline void IDToken::set_gender(const char* value, size_t size) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IDToken.gender)
}
inline ::std::string* IDToken::mutable_gender() {
  
  // @@protoc_insertion_point(field_mutable:api.IDToken.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IDToken::release_gender() {
  // @@protoc_insertion_point(field_release:api.IDToken.gender)
  
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IDToken::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    
  } else {
    
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:api.IDToken.gender)
}

// string birthdate = 10;
inline void IDToken::clear_birthdate() {
  birthdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IDToken::birthdate() const {
  // @@protoc_insertion_point(field_get:api.IDToken.birthdate)
  return birthdate_.GetNoArena();
}
inline void IDToken::set_birthdate(const ::std::string& value) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IDToken.birthdate)
}
#if LANG_CXX11
inline void IDToken::set_birthdate(::std::string&& value) {
  
  birthdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IDToken.birthdate)
}
#endif
inline void IDToken::set_birthdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IDToken.birthdate)
}
inline void IDToken::set_birthdate(const char* value, size_t size) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IDToken.birthdate)
}
inline ::std::string* IDToken::mutable_birthdate() {
  
  // @@protoc_insertion_point(field_mutable:api.IDToken.birthdate)
  return birthdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IDToken::release_birthdate() {
  // @@protoc_insertion_point(field_release:api.IDToken.birthdate)
  
  return birthdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IDToken::set_allocated_birthdate(::std::string* birthdate) {
  if (birthdate != NULL) {
    
  } else {
    
  }
  birthdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthdate);
  // @@protoc_insertion_point(field_set_allocated:api.IDToken.birthdate)
}

// string email = 11;
inline void IDToken::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IDToken::email() const {
  // @@protoc_insertion_point(field_get:api.IDToken.email)
  return email_.GetNoArena();
}
inline void IDToken::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IDToken.email)
}
#if LANG_CXX11
inline void IDToken::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IDToken.email)
}
#endif
inline void IDToken::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IDToken.email)
}
inline void IDToken::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IDToken.email)
}
inline ::std::string* IDToken::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.IDToken.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IDToken::release_email() {
  // @@protoc_insertion_point(field_release:api.IDToken.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IDToken::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.IDToken.email)
}

// int64 picture = 12;
inline void IDToken::clear_picture() {
  picture_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 IDToken::picture() const {
  // @@protoc_insertion_point(field_get:api.IDToken.picture)
  return picture_;
}
inline void IDToken::set_picture(::google::protobuf::int64 value) {
  
  picture_ = value;
  // @@protoc_insertion_point(field_set:api.IDToken.picture)
}

// -------------------------------------------------------------------

// UserMetadata

// string phone = 1;
inline void UserMetadata::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::phone() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.phone)
  return phone_.GetNoArena();
}
inline void UserMetadata::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.phone)
}
#if LANG_CXX11
inline void UserMetadata::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.phone)
}
#endif
inline void UserMetadata::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.phone)
}
inline void UserMetadata::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.phone)
}
inline ::std::string* UserMetadata::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_phone() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.phone)
}

// string plan = 2;
inline void UserMetadata::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::plan() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.plan)
  return plan_.GetNoArena();
}
inline void UserMetadata::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.plan)
}
#if LANG_CXX11
inline void UserMetadata::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.plan)
}
#endif
inline void UserMetadata::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.plan)
}
inline void UserMetadata::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.plan)
}
inline ::std::string* UserMetadata::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_plan() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.plan)
}

// string pay_token = 3;
inline void UserMetadata::clear_pay_token() {
  pay_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::pay_token() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.pay_token)
  return pay_token_.GetNoArena();
}
inline void UserMetadata::set_pay_token(const ::std::string& value) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.pay_token)
}
#if LANG_CXX11
inline void UserMetadata::set_pay_token(::std::string&& value) {
  
  pay_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.pay_token)
}
#endif
inline void UserMetadata::set_pay_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.pay_token)
}
inline void UserMetadata::set_pay_token(const char* value, size_t size) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.pay_token)
}
inline ::std::string* UserMetadata::mutable_pay_token() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.pay_token)
  return pay_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_pay_token() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.pay_token)
  
  return pay_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_pay_token(::std::string* pay_token) {
  if (pay_token != NULL) {
    
  } else {
    
  }
  pay_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pay_token);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.pay_token)
}

// string last_contact = 4;
inline void UserMetadata::clear_last_contact() {
  last_contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::last_contact() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.last_contact)
  return last_contact_.GetNoArena();
}
inline void UserMetadata::set_last_contact(const ::std::string& value) {
  
  last_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.last_contact)
}
#if LANG_CXX11
inline void UserMetadata::set_last_contact(::std::string&& value) {
  
  last_contact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.last_contact)
}
#endif
inline void UserMetadata::set_last_contact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.last_contact)
}
inline void UserMetadata::set_last_contact(const char* value, size_t size) {
  
  last_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.last_contact)
}
inline ::std::string* UserMetadata::mutable_last_contact() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.last_contact)
  return last_contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_last_contact() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.last_contact)
  
  return last_contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_last_contact(::std::string* last_contact) {
  if (last_contact != NULL) {
    
  } else {
    
  }
  last_contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_contact);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.last_contact)
}

// -------------------------------------------------------------------

// AccessToken

// string iss = 1;
inline void AccessToken::clear_iss() {
  iss_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessToken::iss() const {
  // @@protoc_insertion_point(field_get:api.AccessToken.iss)
  return iss_.GetNoArena();
}
inline void AccessToken::set_iss(const ::std::string& value) {
  
  iss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AccessToken.iss)
}
#if LANG_CXX11
inline void AccessToken::set_iss(::std::string&& value) {
  
  iss_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AccessToken.iss)
}
#endif
inline void AccessToken::set_iss(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  iss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AccessToken.iss)
}
inline void AccessToken::set_iss(const char* value, size_t size) {
  
  iss_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AccessToken.iss)
}
inline ::std::string* AccessToken::mutable_iss() {
  
  // @@protoc_insertion_point(field_mutable:api.AccessToken.iss)
  return iss_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessToken::release_iss() {
  // @@protoc_insertion_point(field_release:api.AccessToken.iss)
  
  return iss_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessToken::set_allocated_iss(::std::string* iss) {
  if (iss != NULL) {
    
  } else {
    
  }
  iss_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iss);
  // @@protoc_insertion_point(field_set_allocated:api.AccessToken.iss)
}

// string sub = 2;
inline void AccessToken::clear_sub() {
  sub_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessToken::sub() const {
  // @@protoc_insertion_point(field_get:api.AccessToken.sub)
  return sub_.GetNoArena();
}
inline void AccessToken::set_sub(const ::std::string& value) {
  
  sub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AccessToken.sub)
}
#if LANG_CXX11
inline void AccessToken::set_sub(::std::string&& value) {
  
  sub_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AccessToken.sub)
}
#endif
inline void AccessToken::set_sub(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AccessToken.sub)
}
inline void AccessToken::set_sub(const char* value, size_t size) {
  
  sub_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AccessToken.sub)
}
inline ::std::string* AccessToken::mutable_sub() {
  
  // @@protoc_insertion_point(field_mutable:api.AccessToken.sub)
  return sub_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessToken::release_sub() {
  // @@protoc_insertion_point(field_release:api.AccessToken.sub)
  
  return sub_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessToken::set_allocated_sub(::std::string* sub) {
  if (sub != NULL) {
    
  } else {
    
  }
  sub_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub);
  // @@protoc_insertion_point(field_set_allocated:api.AccessToken.sub)
}

// repeated string aud = 3;
inline int AccessToken::aud_size() const {
  return aud_.size();
}
inline void AccessToken::clear_aud() {
  aud_.Clear();
}
inline const ::std::string& AccessToken::aud(int index) const {
  // @@protoc_insertion_point(field_get:api.AccessToken.aud)
  return aud_.Get(index);
}
inline ::std::string* AccessToken::mutable_aud(int index) {
  // @@protoc_insertion_point(field_mutable:api.AccessToken.aud)
  return aud_.Mutable(index);
}
inline void AccessToken::set_aud(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.AccessToken.aud)
  aud_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AccessToken::set_aud(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.AccessToken.aud)
  aud_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AccessToken::set_aud(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  aud_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.AccessToken.aud)
}
inline void AccessToken::set_aud(int index, const char* value, size_t size) {
  aud_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.AccessToken.aud)
}
inline ::std::string* AccessToken::add_aud() {
  // @@protoc_insertion_point(field_add_mutable:api.AccessToken.aud)
  return aud_.Add();
}
inline void AccessToken::add_aud(const ::std::string& value) {
  aud_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.AccessToken.aud)
}
#if LANG_CXX11
inline void AccessToken::add_aud(::std::string&& value) {
  aud_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.AccessToken.aud)
}
#endif
inline void AccessToken::add_aud(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  aud_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.AccessToken.aud)
}
inline void AccessToken::add_aud(const char* value, size_t size) {
  aud_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.AccessToken.aud)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AccessToken::aud() const {
  // @@protoc_insertion_point(field_list:api.AccessToken.aud)
  return aud_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AccessToken::mutable_aud() {
  // @@protoc_insertion_point(field_mutable_list:api.AccessToken.aud)
  return &aud_;
}

// string azp = 4;
inline void AccessToken::clear_azp() {
  azp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessToken::azp() const {
  // @@protoc_insertion_point(field_get:api.AccessToken.azp)
  return azp_.GetNoArena();
}
inline void AccessToken::set_azp(const ::std::string& value) {
  
  azp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AccessToken.azp)
}
#if LANG_CXX11
inline void AccessToken::set_azp(::std::string&& value) {
  
  azp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AccessToken.azp)
}
#endif
inline void AccessToken::set_azp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  azp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AccessToken.azp)
}
inline void AccessToken::set_azp(const char* value, size_t size) {
  
  azp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AccessToken.azp)
}
inline ::std::string* AccessToken::mutable_azp() {
  
  // @@protoc_insertion_point(field_mutable:api.AccessToken.azp)
  return azp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessToken::release_azp() {
  // @@protoc_insertion_point(field_release:api.AccessToken.azp)
  
  return azp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessToken::set_allocated_azp(::std::string* azp) {
  if (azp != NULL) {
    
  } else {
    
  }
  azp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), azp);
  // @@protoc_insertion_point(field_set_allocated:api.AccessToken.azp)
}

// int64 exp = 5;
inline void AccessToken::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AccessToken::exp() const {
  // @@protoc_insertion_point(field_get:api.AccessToken.exp)
  return exp_;
}
inline void AccessToken::set_exp(::google::protobuf::int64 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:api.AccessToken.exp)
}

// int64 iat = 6;
inline void AccessToken::clear_iat() {
  iat_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AccessToken::iat() const {
  // @@protoc_insertion_point(field_get:api.AccessToken.iat)
  return iat_;
}
inline void AccessToken::set_iat(::google::protobuf::int64 value) {
  
  iat_ = value;
  // @@protoc_insertion_point(field_set:api.AccessToken.iat)
}

// string scope = 7;
inline void AccessToken::clear_scope() {
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessToken::scope() const {
  // @@protoc_insertion_point(field_get:api.AccessToken.scope)
  return scope_.GetNoArena();
}
inline void AccessToken::set_scope(const ::std::string& value) {
  
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AccessToken.scope)
}
#if LANG_CXX11
inline void AccessToken::set_scope(::std::string&& value) {
  
  scope_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AccessToken.scope)
}
#endif
inline void AccessToken::set_scope(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AccessToken.scope)
}
inline void AccessToken::set_scope(const char* value, size_t size) {
  
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AccessToken.scope)
}
inline ::std::string* AccessToken::mutable_scope() {
  
  // @@protoc_insertion_point(field_mutable:api.AccessToken.scope)
  return scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessToken::release_scope() {
  // @@protoc_insertion_point(field_release:api.AccessToken.scope)
  
  return scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessToken::set_allocated_scope(::std::string* scope) {
  if (scope != NULL) {
    
  } else {
    
  }
  scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:api.AccessToken.scope)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
