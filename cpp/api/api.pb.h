// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[26];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class AddUserMetadataRequest;
class AddUserMetadataRequestDefaultTypeInternal;
extern AddUserMetadataRequestDefaultTypeInternal _AddUserMetadataRequest_default_instance_;
class AddUserMetadataRequest_MetadataEntry_DoNotUse;
class AddUserMetadataRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AddUserMetadataRequest_MetadataEntry_DoNotUseDefaultTypeInternal _AddUserMetadataRequest_MetadataEntry_DoNotUse_default_instance_;
class AddUserRequest;
class AddUserRequestDefaultTypeInternal;
extern AddUserRequestDefaultTypeInternal _AddUserRequest_default_instance_;
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class CallRequest;
class CallRequestDefaultTypeInternal;
extern CallRequestDefaultTypeInternal _CallRequest_default_instance_;
class CancelSubscriptionRequest;
class CancelSubscriptionRequestDefaultTypeInternal;
extern CancelSubscriptionRequestDefaultTypeInternal _CancelSubscriptionRequest_default_instance_;
class ChannelReminder;
class ChannelReminderDefaultTypeInternal;
extern ChannelReminderDefaultTypeInternal _ChannelReminder_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class CreatePlanRequest;
class CreatePlanRequestDefaultTypeInternal;
extern CreatePlanRequestDefaultTypeInternal _CreatePlanRequest_default_instance_;
class CreatePlanResponse;
class CreatePlanResponseDefaultTypeInternal;
extern CreatePlanResponseDefaultTypeInternal _CreatePlanResponse_default_instance_;
class Email;
class EmailDefaultTypeInternal;
extern EmailDefaultTypeInternal _Email_default_instance_;
class EmailAddress;
class EmailAddressDefaultTypeInternal;
extern EmailAddressDefaultTypeInternal _EmailAddress_default_instance_;
class EmailRequest;
class EmailRequestDefaultTypeInternal;
extern EmailRequestDefaultTypeInternal _EmailRequest_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class ItemRef;
class ItemRefDefaultTypeInternal;
extern ItemRefDefaultTypeInternal _ItemRef_default_instance_;
class LogConfig;
class LogConfigDefaultTypeInternal;
extern LogConfigDefaultTypeInternal _LogConfig_default_instance_;
class MMSRequest;
class MMSRequestDefaultTypeInternal;
extern MMSRequestDefaultTypeInternal _MMSRequest_default_instance_;
class SMSRequest;
class SMSRequestDefaultTypeInternal;
extern SMSRequestDefaultTypeInternal _SMSRequest_default_instance_;
class Star;
class StarDefaultTypeInternal;
extern StarDefaultTypeInternal _Star_default_instance_;
class SubscribeUserRequest;
class SubscribeUserRequestDefaultTypeInternal;
extern SubscribeUserRequestDefaultTypeInternal _SubscribeUserRequest_default_instance_;
class SubscribeUserResponse;
class SubscribeUserResponseDefaultTypeInternal;
extern SubscribeUserResponseDefaultTypeInternal _SubscribeUserResponse_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserMap;
class UserMapDefaultTypeInternal;
extern UserMapDefaultTypeInternal _UserMap_default_instance_;
class UserMap_UsersEntry_DoNotUse;
class UserMap_UsersEntry_DoNotUseDefaultTypeInternal;
extern UserMap_UsersEntry_DoNotUseDefaultTypeInternal _UserMap_UsersEntry_DoNotUse_default_instance_;
class UserReminder;
class UserReminderDefaultTypeInternal;
extern UserReminderDefaultTypeInternal _UserReminder_default_instance_;
class User_MetadataEntry_DoNotUse;
class User_MetadataEntry_DoNotUseDefaultTypeInternal;
extern User_MetadataEntry_DoNotUseDefaultTypeInternal _User_MetadataEntry_DoNotUse_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::AddUserMetadataRequest* Arena::CreateMaybeMessage<::api::AddUserMetadataRequest>(Arena*);
template<> ::api::AddUserMetadataRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::api::AddUserMetadataRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::api::AddUserRequest* Arena::CreateMaybeMessage<::api::AddUserRequest>(Arena*);
template<> ::api::Address* Arena::CreateMaybeMessage<::api::Address>(Arena*);
template<> ::api::CallRequest* Arena::CreateMaybeMessage<::api::CallRequest>(Arena*);
template<> ::api::CancelSubscriptionRequest* Arena::CreateMaybeMessage<::api::CancelSubscriptionRequest>(Arena*);
template<> ::api::ChannelReminder* Arena::CreateMaybeMessage<::api::ChannelReminder>(Arena*);
template<> ::api::Config* Arena::CreateMaybeMessage<::api::Config>(Arena*);
template<> ::api::CreatePlanRequest* Arena::CreateMaybeMessage<::api::CreatePlanRequest>(Arena*);
template<> ::api::CreatePlanResponse* Arena::CreateMaybeMessage<::api::CreatePlanResponse>(Arena*);
template<> ::api::Email* Arena::CreateMaybeMessage<::api::Email>(Arena*);
template<> ::api::EmailAddress* Arena::CreateMaybeMessage<::api::EmailAddress>(Arena*);
template<> ::api::EmailRequest* Arena::CreateMaybeMessage<::api::EmailRequest>(Arena*);
template<> ::api::Empty* Arena::CreateMaybeMessage<::api::Empty>(Arena*);
template<> ::api::ItemRef* Arena::CreateMaybeMessage<::api::ItemRef>(Arena*);
template<> ::api::LogConfig* Arena::CreateMaybeMessage<::api::LogConfig>(Arena*);
template<> ::api::MMSRequest* Arena::CreateMaybeMessage<::api::MMSRequest>(Arena*);
template<> ::api::SMSRequest* Arena::CreateMaybeMessage<::api::SMSRequest>(Arena*);
template<> ::api::Star* Arena::CreateMaybeMessage<::api::Star>(Arena*);
template<> ::api::SubscribeUserRequest* Arena::CreateMaybeMessage<::api::SubscribeUserRequest>(Arena*);
template<> ::api::SubscribeUserResponse* Arena::CreateMaybeMessage<::api::SubscribeUserResponse>(Arena*);
template<> ::api::User* Arena::CreateMaybeMessage<::api::User>(Arena*);
template<> ::api::UserMap* Arena::CreateMaybeMessage<::api::UserMap>(Arena*);
template<> ::api::UserMap_UsersEntry_DoNotUse* Arena::CreateMaybeMessage<::api::UserMap_UsersEntry_DoNotUse>(Arena*);
template<> ::api::UserReminder* Arena::CreateMaybeMessage<::api::UserReminder>(Arena*);
template<> ::api::User_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::api::User_MetadataEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

enum CustomerIndex {
  ID = 0,
  EMAIL = 1,
  PHONE = 2,
  CustomerIndex_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CustomerIndex_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CustomerIndex_IsValid(int value);
const CustomerIndex CustomerIndex_MIN = ID;
const CustomerIndex CustomerIndex_MAX = PHONE;
const int CustomerIndex_ARRAYSIZE = CustomerIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* CustomerIndex_descriptor();
inline const ::std::string& CustomerIndex_Name(CustomerIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    CustomerIndex_descriptor(), value);
}
inline bool CustomerIndex_Parse(
    const ::std::string& name, CustomerIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CustomerIndex>(
    CustomerIndex_descriptor(), name, value);
}
// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMap_UsersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<UserMap_UsersEntry_DoNotUse, 
    ::std::string, ::api::User,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<UserMap_UsersEntry_DoNotUse, 
    ::std::string, ::api::User,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  UserMap_UsersEntry_DoNotUse();
  UserMap_UsersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const UserMap_UsersEntry_DoNotUse& other);
  static const UserMap_UsersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserMap_UsersEntry_DoNotUse*>(&_UserMap_UsersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class UserMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserMap) */ {
 public:
  UserMap();
  virtual ~UserMap();

  UserMap(const UserMap& from);

  inline UserMap& operator=(const UserMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMap(UserMap&& from) noexcept
    : UserMap() {
    *this = ::std::move(from);
  }

  inline UserMap& operator=(UserMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMap* internal_default_instance() {
    return reinterpret_cast<const UserMap*>(
               &_UserMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserMap* other);
  friend void swap(UserMap& a, UserMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMap* New() const final {
    return CreateMaybeMessage<UserMap>(NULL);
  }

  UserMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMap& from);
  void MergeFrom(const UserMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .api.User> users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::api::User >&
      users() const;
  ::google::protobuf::Map< ::std::string, ::api::User >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:api.UserMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      UserMap_UsersEntry_DoNotUse,
      ::std::string, ::api::User,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > users_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class User_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<User_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<User_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  User_MetadataEntry_DoNotUse();
  User_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const User_MetadataEntry_DoNotUse& other);
  static const User_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const User_MetadataEntry_DoNotUse*>(&_User_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> metadata = 9;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 4;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string phone = 6;
  void clear_phone();
  static const int kPhoneFieldNumber = 6;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // .api.Address address = 8;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 8;
  private:
  const ::api::Address& _internal_address() const;
  public:
  const ::api::Address& address() const;
  ::api::Address* release_address();
  ::api::Address* mutable_address();
  void set_allocated_address(::api::Address* address);

  // bool deleted = 10;
  void clear_deleted();
  static const int kDeletedFieldNumber = 10;
  bool deleted() const;
  void set_deleted(bool value);

  // int64 create_date = 20;
  void clear_create_date();
  static const int kCreateDateFieldNumber = 20;
  ::google::protobuf::int64 create_date() const;
  void set_create_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      User_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::api::Address* address_;
  bool deleted_;
  ::google::protobuf::int64 create_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AddUserRequest) */ {
 public:
  AddUserRequest();
  virtual ~AddUserRequest();

  AddUserRequest(const AddUserRequest& from);

  inline AddUserRequest& operator=(const AddUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddUserRequest(AddUserRequest&& from) noexcept
    : AddUserRequest() {
    *this = ::std::move(from);
  }

  inline AddUserRequest& operator=(AddUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddUserRequest* internal_default_instance() {
    return reinterpret_cast<const AddUserRequest*>(
               &_AddUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AddUserRequest* other);
  friend void swap(AddUserRequest& a, AddUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddUserRequest* New() const final {
    return CreateMaybeMessage<AddUserRequest>(NULL);
  }

  AddUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddUserRequest& from);
  void MergeFrom(const AddUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string phone = 3;
  void clear_phone();
  static const int kPhoneFieldNumber = 3;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string description = 7;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .api.Address address = 8;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 8;
  private:
  const ::api::Address& _internal_address() const;
  public:
  const ::api::Address& address() const;
  ::api::Address* release_address();
  ::api::Address* mutable_address();
  void set_allocated_address(::api::Address* address);

  // int64 trial_end = 6;
  void clear_trial_end();
  static const int kTrialEndFieldNumber = 6;
  ::google::protobuf::int64 trial_end() const;
  void set_trial_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.AddUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::api::Address* address_;
  ::google::protobuf::int64 trial_end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubscribeUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SubscribeUserRequest) */ {
 public:
  SubscribeUserRequest();
  virtual ~SubscribeUserRequest();

  SubscribeUserRequest(const SubscribeUserRequest& from);

  inline SubscribeUserRequest& operator=(const SubscribeUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeUserRequest(SubscribeUserRequest&& from) noexcept
    : SubscribeUserRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeUserRequest& operator=(SubscribeUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeUserRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeUserRequest*>(
               &_SubscribeUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SubscribeUserRequest* other);
  friend void swap(SubscribeUserRequest& a, SubscribeUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeUserRequest* New() const final {
    return CreateMaybeMessage<SubscribeUserRequest>(NULL);
  }

  SubscribeUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeUserRequest& from);
  void MergeFrom(const SubscribeUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string card_number = 3;
  void clear_card_number();
  static const int kCardNumberFieldNumber = 3;
  const ::std::string& card_number() const;
  void set_card_number(const ::std::string& value);
  #if LANG_CXX11
  void set_card_number(::std::string&& value);
  #endif
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  ::std::string* mutable_card_number();
  ::std::string* release_card_number();
  void set_allocated_card_number(::std::string* card_number);

  // string exp_month = 4;
  void clear_exp_month();
  static const int kExpMonthFieldNumber = 4;
  const ::std::string& exp_month() const;
  void set_exp_month(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_month(::std::string&& value);
  #endif
  void set_exp_month(const char* value);
  void set_exp_month(const char* value, size_t size);
  ::std::string* mutable_exp_month();
  ::std::string* release_exp_month();
  void set_allocated_exp_month(::std::string* exp_month);

  // string exp_year = 5;
  void clear_exp_year();
  static const int kExpYearFieldNumber = 5;
  const ::std::string& exp_year() const;
  void set_exp_year(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_year(::std::string&& value);
  #endif
  void set_exp_year(const char* value);
  void set_exp_year(const char* value, size_t size);
  ::std::string* mutable_exp_year();
  ::std::string* release_exp_year();
  void set_allocated_exp_year(::std::string* exp_year);

  // string cvc = 6;
  void clear_cvc();
  static const int kCvcFieldNumber = 6;
  const ::std::string& cvc() const;
  void set_cvc(const ::std::string& value);
  #if LANG_CXX11
  void set_cvc(::std::string&& value);
  #endif
  void set_cvc(const char* value);
  void set_cvc(const char* value, size_t size);
  ::std::string* mutable_cvc();
  ::std::string* release_cvc();
  void set_allocated_cvc(::std::string* cvc);

  // @@protoc_insertion_point(class_scope:api.SubscribeUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr card_number_;
  ::google::protobuf::internal::ArenaStringPtr exp_month_;
  ::google::protobuf::internal::ArenaStringPtr exp_year_;
  ::google::protobuf::internal::ArenaStringPtr cvc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddUserMetadataRequest_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AddUserMetadataRequest_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AddUserMetadataRequest_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AddUserMetadataRequest_MetadataEntry_DoNotUse();
  AddUserMetadataRequest_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AddUserMetadataRequest_MetadataEntry_DoNotUse& other);
  static const AddUserMetadataRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AddUserMetadataRequest_MetadataEntry_DoNotUse*>(&_AddUserMetadataRequest_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AddUserMetadataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AddUserMetadataRequest) */ {
 public:
  AddUserMetadataRequest();
  virtual ~AddUserMetadataRequest();

  AddUserMetadataRequest(const AddUserMetadataRequest& from);

  inline AddUserMetadataRequest& operator=(const AddUserMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddUserMetadataRequest(AddUserMetadataRequest&& from) noexcept
    : AddUserMetadataRequest() {
    *this = ::std::move(from);
  }

  inline AddUserMetadataRequest& operator=(AddUserMetadataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddUserMetadataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddUserMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const AddUserMetadataRequest*>(
               &_AddUserMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AddUserMetadataRequest* other);
  friend void swap(AddUserMetadataRequest& a, AddUserMetadataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddUserMetadataRequest* New() const final {
    return CreateMaybeMessage<AddUserMetadataRequest>(NULL);
  }

  AddUserMetadataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddUserMetadataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddUserMetadataRequest& from);
  void MergeFrom(const AddUserMetadataRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserMetadataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> metadata = 2;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:api.AddUserMetadataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      AddUserMetadataRequest_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(NULL);
  }

  Address* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string city = 1;
  void clear_city();
  static const int kCityFieldNumber = 1;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string country = 2;
  void clear_country();
  static const int kCountryFieldNumber = 2;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // string line1 = 3;
  void clear_line1();
  static const int kLine1FieldNumber = 3;
  const ::std::string& line1() const;
  void set_line1(const ::std::string& value);
  #if LANG_CXX11
  void set_line1(::std::string&& value);
  #endif
  void set_line1(const char* value);
  void set_line1(const char* value, size_t size);
  ::std::string* mutable_line1();
  ::std::string* release_line1();
  void set_allocated_line1(::std::string* line1);

  // string line2 = 4;
  void clear_line2();
  static const int kLine2FieldNumber = 4;
  const ::std::string& line2() const;
  void set_line2(const ::std::string& value);
  #if LANG_CXX11
  void set_line2(::std::string&& value);
  #endif
  void set_line2(const char* value);
  void set_line2(const char* value, size_t size);
  ::std::string* mutable_line2();
  ::std::string* release_line2();
  void set_allocated_line2(::std::string* line2);

  // string postal_code = 5;
  void clear_postal_code();
  static const int kPostalCodeFieldNumber = 5;
  const ::std::string& postal_code() const;
  void set_postal_code(const ::std::string& value);
  #if LANG_CXX11
  void set_postal_code(::std::string&& value);
  #endif
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  ::std::string* mutable_postal_code();
  ::std::string* release_postal_code();
  void set_allocated_postal_code(::std::string* postal_code);

  // string state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // @@protoc_insertion_point(class_scope:api.Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr line1_;
  ::google::protobuf::internal::ArenaStringPtr line2_;
  ::google::protobuf::internal::ArenaStringPtr postal_code_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubscribeUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SubscribeUserResponse) */ {
 public:
  SubscribeUserResponse();
  virtual ~SubscribeUserResponse();

  SubscribeUserResponse(const SubscribeUserResponse& from);

  inline SubscribeUserResponse& operator=(const SubscribeUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeUserResponse(SubscribeUserResponse&& from) noexcept
    : SubscribeUserResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeUserResponse& operator=(SubscribeUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeUserResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeUserResponse*>(
               &_SubscribeUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SubscribeUserResponse* other);
  friend void swap(SubscribeUserResponse& a, SubscribeUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeUserResponse* New() const final {
    return CreateMaybeMessage<SubscribeUserResponse>(NULL);
  }

  SubscribeUserResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeUserResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeUserResponse& from);
  void MergeFrom(const SubscribeUserResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription_id = 1;
  void clear_subscription_id();
  static const int kSubscriptionIdFieldNumber = 1;
  const ::std::string& subscription_id() const;
  void set_subscription_id(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription_id(::std::string&& value);
  #endif
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  ::std::string* mutable_subscription_id();
  ::std::string* release_subscription_id();
  void set_allocated_subscription_id(::std::string* subscription_id);

  // @@protoc_insertion_point(class_scope:api.SubscribeUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subscription_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreatePlanResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CreatePlanResponse) */ {
 public:
  CreatePlanResponse();
  virtual ~CreatePlanResponse();

  CreatePlanResponse(const CreatePlanResponse& from);

  inline CreatePlanResponse& operator=(const CreatePlanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreatePlanResponse(CreatePlanResponse&& from) noexcept
    : CreatePlanResponse() {
    *this = ::std::move(from);
  }

  inline CreatePlanResponse& operator=(CreatePlanResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatePlanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlanResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePlanResponse*>(
               &_CreatePlanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CreatePlanResponse* other);
  friend void swap(CreatePlanResponse& a, CreatePlanResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreatePlanResponse* New() const final {
    return CreateMaybeMessage<CreatePlanResponse>(NULL);
  }

  CreatePlanResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlanResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreatePlanResponse& from);
  void MergeFrom(const CreatePlanResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlanResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plan_id = 1;
  void clear_plan_id();
  static const int kPlanIdFieldNumber = 1;
  const ::std::string& plan_id() const;
  void set_plan_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plan_id(::std::string&& value);
  #endif
  void set_plan_id(const char* value);
  void set_plan_id(const char* value, size_t size);
  ::std::string* mutable_plan_id();
  ::std::string* release_plan_id();
  void set_allocated_plan_id(::std::string* plan_id);

  // @@protoc_insertion_point(class_scope:api.CreatePlanResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plan_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CancelSubscriptionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CancelSubscriptionRequest) */ {
 public:
  CancelSubscriptionRequest();
  virtual ~CancelSubscriptionRequest();

  CancelSubscriptionRequest(const CancelSubscriptionRequest& from);

  inline CancelSubscriptionRequest& operator=(const CancelSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelSubscriptionRequest(CancelSubscriptionRequest&& from) noexcept
    : CancelSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline CancelSubscriptionRequest& operator=(CancelSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const CancelSubscriptionRequest*>(
               &_CancelSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CancelSubscriptionRequest* other);
  friend void swap(CancelSubscriptionRequest& a, CancelSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelSubscriptionRequest* New() const final {
    return CreateMaybeMessage<CancelSubscriptionRequest>(NULL);
  }

  CancelSubscriptionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelSubscriptionRequest& from);
  void MergeFrom(const CancelSubscriptionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelSubscriptionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:api.CancelSubscriptionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreatePlanRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CreatePlanRequest) */ {
 public:
  CreatePlanRequest();
  virtual ~CreatePlanRequest();

  CreatePlanRequest(const CreatePlanRequest& from);

  inline CreatePlanRequest& operator=(const CreatePlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreatePlanRequest(CreatePlanRequest&& from) noexcept
    : CreatePlanRequest() {
    *this = ::std::move(from);
  }

  inline CreatePlanRequest& operator=(CreatePlanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatePlanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlanRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePlanRequest*>(
               &_CreatePlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CreatePlanRequest* other);
  friend void swap(CreatePlanRequest& a, CreatePlanRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreatePlanRequest* New() const final {
    return CreateMaybeMessage<CreatePlanRequest>(NULL);
  }

  CreatePlanRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlanRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreatePlanRequest& from);
  void MergeFrom(const CreatePlanRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plan_id = 1;
  void clear_plan_id();
  static const int kPlanIdFieldNumber = 1;
  const ::std::string& plan_id() const;
  void set_plan_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plan_id(::std::string&& value);
  #endif
  void set_plan_id(const char* value);
  void set_plan_id(const char* value, size_t size);
  ::std::string* mutable_plan_id();
  ::std::string* release_plan_id();
  void set_allocated_plan_id(::std::string* plan_id);

  // string service_id = 3;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 3;
  const ::std::string& service_id() const;
  void set_service_id(const ::std::string& value);
  #if LANG_CXX11
  void set_service_id(::std::string&& value);
  #endif
  void set_service_id(const char* value);
  void set_service_id(const char* value, size_t size);
  ::std::string* mutable_service_id();
  ::std::string* release_service_id();
  void set_allocated_service_id(::std::string* service_id);

  // string service_name = 4;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 4;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string friendly_name = 5;
  void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 5;
  const ::std::string& friendly_name() const;
  void set_friendly_name(const ::std::string& value);
  #if LANG_CXX11
  void set_friendly_name(::std::string&& value);
  #endif
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  ::std::string* mutable_friendly_name();
  ::std::string* release_friendly_name();
  void set_allocated_friendly_name(::std::string* friendly_name);

  // int64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.CreatePlanRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plan_id_;
  ::google::protobuf::internal::ArenaStringPtr service_id_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr friendly_name_;
  ::google::protobuf::int64 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMSRequest) */ {
 public:
  SMSRequest();
  virtual ~SMSRequest();

  SMSRequest(const SMSRequest& from);

  inline SMSRequest& operator=(const SMSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMSRequest(SMSRequest&& from) noexcept
    : SMSRequest() {
    *this = ::std::move(from);
  }

  inline SMSRequest& operator=(SMSRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSRequest* internal_default_instance() {
    return reinterpret_cast<const SMSRequest*>(
               &_SMSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SMSRequest* other);
  friend void swap(SMSRequest& a, SMSRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMSRequest* New() const final {
    return CreateMaybeMessage<SMSRequest>(NULL);
  }

  SMSRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMSRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMSRequest& from);
  void MergeFrom(const SMSRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:api.SMSRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CallRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CallRequest) */ {
 public:
  CallRequest();
  virtual ~CallRequest();

  CallRequest(const CallRequest& from);

  inline CallRequest& operator=(const CallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallRequest(CallRequest&& from) noexcept
    : CallRequest() {
    *this = ::std::move(from);
  }

  inline CallRequest& operator=(CallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallRequest* internal_default_instance() {
    return reinterpret_cast<const CallRequest*>(
               &_CallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(CallRequest* other);
  friend void swap(CallRequest& a, CallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallRequest* New() const final {
    return CreateMaybeMessage<CallRequest>(NULL);
  }

  CallRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallRequest& from);
  void MergeFrom(const CallRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string callback_url = 2;
  void clear_callback_url();
  static const int kCallbackUrlFieldNumber = 2;
  const ::std::string& callback_url() const;
  void set_callback_url(const ::std::string& value);
  #if LANG_CXX11
  void set_callback_url(::std::string&& value);
  #endif
  void set_callback_url(const char* value);
  void set_callback_url(const char* value, size_t size);
  ::std::string* mutable_callback_url();
  ::std::string* release_callback_url();
  void set_allocated_callback_url(::std::string* callback_url);

  // @@protoc_insertion_point(class_scope:api.CallRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr callback_url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MMSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.MMSRequest) */ {
 public:
  MMSRequest();
  virtual ~MMSRequest();

  MMSRequest(const MMSRequest& from);

  inline MMSRequest& operator=(const MMSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MMSRequest(MMSRequest&& from) noexcept
    : MMSRequest() {
    *this = ::std::move(from);
  }

  inline MMSRequest& operator=(MMSRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MMSRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MMSRequest* internal_default_instance() {
    return reinterpret_cast<const MMSRequest*>(
               &_MMSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(MMSRequest* other);
  friend void swap(MMSRequest& a, MMSRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MMSRequest* New() const final {
    return CreateMaybeMessage<MMSRequest>(NULL);
  }

  MMSRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MMSRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MMSRequest& from);
  void MergeFrom(const MMSRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MMSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // string media_url = 3;
  void clear_media_url();
  static const int kMediaUrlFieldNumber = 3;
  const ::std::string& media_url() const;
  void set_media_url(const ::std::string& value);
  #if LANG_CXX11
  void set_media_url(::std::string&& value);
  #endif
  void set_media_url(const char* value);
  void set_media_url(const char* value, size_t size);
  ::std::string* mutable_media_url();
  ::std::string* release_media_url();
  void set_allocated_media_url(::std::string* media_url);

  // @@protoc_insertion_point(class_scope:api.MMSRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr media_url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailRequest) */ {
 public:
  EmailRequest();
  virtual ~EmailRequest();

  EmailRequest(const EmailRequest& from);

  inline EmailRequest& operator=(const EmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailRequest(EmailRequest&& from) noexcept
    : EmailRequest() {
    *this = ::std::move(from);
  }

  inline EmailRequest& operator=(EmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailRequest* internal_default_instance() {
    return reinterpret_cast<const EmailRequest*>(
               &_EmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(EmailRequest* other);
  friend void swap(EmailRequest& a, EmailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailRequest* New() const final {
    return CreateMaybeMessage<EmailRequest>(NULL);
  }

  EmailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailRequest& from);
  void MergeFrom(const EmailRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string subject = 2;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string plain_text = 3;
  void clear_plain_text();
  static const int kPlainTextFieldNumber = 3;
  const ::std::string& plain_text() const;
  void set_plain_text(const ::std::string& value);
  #if LANG_CXX11
  void set_plain_text(::std::string&& value);
  #endif
  void set_plain_text(const char* value);
  void set_plain_text(const char* value, size_t size);
  ::std::string* mutable_plain_text();
  ::std::string* release_plain_text();
  void set_allocated_plain_text(::std::string* plain_text);

  // string html_alt = 4;
  void clear_html_alt();
  static const int kHtmlAltFieldNumber = 4;
  const ::std::string& html_alt() const;
  void set_html_alt(const ::std::string& value);
  #if LANG_CXX11
  void set_html_alt(::std::string&& value);
  #endif
  void set_html_alt(const char* value);
  void set_html_alt(const char* value, size_t size);
  ::std::string* mutable_html_alt();
  ::std::string* release_html_alt();
  void set_allocated_html_alt(::std::string* html_alt);

  // @@protoc_insertion_point(class_scope:api.EmailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr plain_text_;
  ::google::protobuf::internal::ArenaStringPtr html_alt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelReminder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ChannelReminder) */ {
 public:
  ChannelReminder();
  virtual ~ChannelReminder();

  ChannelReminder(const ChannelReminder& from);

  inline ChannelReminder& operator=(const ChannelReminder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelReminder(ChannelReminder&& from) noexcept
    : ChannelReminder() {
    *this = ::std::move(from);
  }

  inline ChannelReminder& operator=(ChannelReminder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelReminder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelReminder* internal_default_instance() {
    return reinterpret_cast<const ChannelReminder*>(
               &_ChannelReminder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ChannelReminder* other);
  friend void swap(ChannelReminder& a, ChannelReminder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelReminder* New() const final {
    return CreateMaybeMessage<ChannelReminder>(NULL);
  }

  ChannelReminder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelReminder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelReminder& from);
  void MergeFrom(const ChannelReminder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelReminder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_id(::std::string&& value);
  #endif
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:api.ChannelReminder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserReminder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserReminder) */ {
 public:
  UserReminder();
  virtual ~UserReminder();

  UserReminder(const UserReminder& from);

  inline UserReminder& operator=(const UserReminder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserReminder(UserReminder&& from) noexcept
    : UserReminder() {
    *this = ::std::move(from);
  }

  inline UserReminder& operator=(UserReminder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserReminder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserReminder* internal_default_instance() {
    return reinterpret_cast<const UserReminder*>(
               &_UserReminder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(UserReminder* other);
  friend void swap(UserReminder& a, UserReminder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserReminder* New() const final {
    return CreateMaybeMessage<UserReminder>(NULL);
  }

  UserReminder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserReminder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserReminder& from);
  void MergeFrom(const UserReminder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserReminder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // .api.ItemRef item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  private:
  const ::api::ItemRef& _internal_item() const;
  public:
  const ::api::ItemRef& item() const;
  ::api::ItemRef* release_item();
  ::api::ItemRef* mutable_item();
  void set_allocated_item(::api::ItemRef* item);

  // @@protoc_insertion_point(class_scope:api.UserReminder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::api::ItemRef* item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ItemRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ItemRef) */ {
 public:
  ItemRef();
  virtual ~ItemRef();

  ItemRef(const ItemRef& from);

  inline ItemRef& operator=(const ItemRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemRef(ItemRef&& from) noexcept
    : ItemRef() {
    *this = ::std::move(from);
  }

  inline ItemRef& operator=(ItemRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemRef* internal_default_instance() {
    return reinterpret_cast<const ItemRef*>(
               &_ItemRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ItemRef* other);
  friend void swap(ItemRef& a, ItemRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemRef* New() const final {
    return CreateMaybeMessage<ItemRef>(NULL);
  }

  ItemRef* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ItemRef>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ItemRef& from);
  void MergeFrom(const ItemRef& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // string comment = 3;
  void clear_comment();
  static const int kCommentFieldNumber = 3;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:api.ItemRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Star : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Star) */ {
 public:
  Star();
  virtual ~Star();

  Star(const Star& from);

  inline Star& operator=(const Star& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Star(Star&& from) noexcept
    : Star() {
    *this = ::std::move(from);
  }

  inline Star& operator=(Star&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Star& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Star* internal_default_instance() {
    return reinterpret_cast<const Star*>(
               &_Star_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Star* other);
  friend void swap(Star& a, Star& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Star* New() const final {
    return CreateMaybeMessage<Star>(NULL);
  }

  Star* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Star>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Star& from);
  void MergeFrom(const Star& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Star* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .api.ItemRef item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  private:
  const ::api::ItemRef& _internal_item() const;
  public:
  const ::api::ItemRef& item() const;
  ::api::ItemRef* release_item();
  ::api::ItemRef* mutable_item();
  void set_allocated_item(::api::ItemRef* item);

  // @@protoc_insertion_point(class_scope:api.Star)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::api::ItemRef* item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string twilio_account = 2;
  void clear_twilio_account();
  static const int kTwilioAccountFieldNumber = 2;
  const ::std::string& twilio_account() const;
  void set_twilio_account(const ::std::string& value);
  #if LANG_CXX11
  void set_twilio_account(::std::string&& value);
  #endif
  void set_twilio_account(const char* value);
  void set_twilio_account(const char* value, size_t size);
  ::std::string* mutable_twilio_account();
  ::std::string* release_twilio_account();
  void set_allocated_twilio_account(::std::string* twilio_account);

  // string twilio_key = 3;
  void clear_twilio_key();
  static const int kTwilioKeyFieldNumber = 3;
  const ::std::string& twilio_key() const;
  void set_twilio_key(const ::std::string& value);
  #if LANG_CXX11
  void set_twilio_key(::std::string&& value);
  #endif
  void set_twilio_key(const char* value);
  void set_twilio_key(const char* value, size_t size);
  ::std::string* mutable_twilio_key();
  ::std::string* release_twilio_key();
  void set_allocated_twilio_key(::std::string* twilio_key);

  // string sendgrid_key = 4;
  void clear_sendgrid_key();
  static const int kSendgridKeyFieldNumber = 4;
  const ::std::string& sendgrid_key() const;
  void set_sendgrid_key(const ::std::string& value);
  #if LANG_CXX11
  void set_sendgrid_key(::std::string&& value);
  #endif
  void set_sendgrid_key(const char* value);
  void set_sendgrid_key(const char* value, size_t size);
  ::std::string* mutable_sendgrid_key();
  ::std::string* release_sendgrid_key();
  void set_allocated_sendgrid_key(::std::string* sendgrid_key);

  // string stripe_key = 5;
  void clear_stripe_key();
  static const int kStripeKeyFieldNumber = 5;
  const ::std::string& stripe_key() const;
  void set_stripe_key(const ::std::string& value);
  #if LANG_CXX11
  void set_stripe_key(::std::string&& value);
  #endif
  void set_stripe_key(const char* value);
  void set_stripe_key(const char* value, size_t size);
  ::std::string* mutable_stripe_key();
  ::std::string* release_stripe_key();
  void set_allocated_stripe_key(::std::string* stripe_key);

  // string slack_key = 6;
  void clear_slack_key();
  static const int kSlackKeyFieldNumber = 6;
  const ::std::string& slack_key() const;
  void set_slack_key(const ::std::string& value);
  #if LANG_CXX11
  void set_slack_key(::std::string&& value);
  #endif
  void set_slack_key(const char* value);
  void set_slack_key(const char* value, size_t size);
  ::std::string* mutable_slack_key();
  ::std::string* release_slack_key();
  void set_allocated_slack_key(::std::string* slack_key);

  // .api.EmailAddress email_address = 8;
  bool has_email_address() const;
  void clear_email_address();
  static const int kEmailAddressFieldNumber = 8;
  private:
  const ::api::EmailAddress& _internal_email_address() const;
  public:
  const ::api::EmailAddress& email_address() const;
  ::api::EmailAddress* release_email_address();
  ::api::EmailAddress* mutable_email_address();
  void set_allocated_email_address(::api::EmailAddress* email_address);

  // .api.LogConfig log_config = 9;
  bool has_log_config() const;
  void clear_log_config();
  static const int kLogConfigFieldNumber = 9;
  private:
  const ::api::LogConfig& _internal_log_config() const;
  public:
  const ::api::LogConfig& log_config() const;
  ::api::LogConfig* release_log_config();
  ::api::LogConfig* mutable_log_config();
  void set_allocated_log_config(::api::LogConfig* log_config);

  // bool debug = 1;
  void clear_debug();
  static const int kDebugFieldNumber = 1;
  bool debug() const;
  void set_debug(bool value);

  // .api.CustomerIndex customer_index = 7;
  void clear_customer_index();
  static const int kCustomerIndexFieldNumber = 7;
  ::api::CustomerIndex customer_index() const;
  void set_customer_index(::api::CustomerIndex value);

  // @@protoc_insertion_point(class_scope:api.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr twilio_account_;
  ::google::protobuf::internal::ArenaStringPtr twilio_key_;
  ::google::protobuf::internal::ArenaStringPtr sendgrid_key_;
  ::google::protobuf::internal::ArenaStringPtr stripe_key_;
  ::google::protobuf::internal::ArenaStringPtr slack_key_;
  ::api::EmailAddress* email_address_;
  ::api::LogConfig* log_config_;
  bool debug_;
  int customer_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.LogConfig) */ {
 public:
  LogConfig();
  virtual ~LogConfig();

  LogConfig(const LogConfig& from);

  inline LogConfig& operator=(const LogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogConfig(LogConfig&& from) noexcept
    : LogConfig() {
    *this = ::std::move(from);
  }

  inline LogConfig& operator=(LogConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogConfig* internal_default_instance() {
    return reinterpret_cast<const LogConfig*>(
               &_LogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(LogConfig* other);
  friend void swap(LogConfig& a, LogConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogConfig* New() const final {
    return CreateMaybeMessage<LogConfig>(NULL);
  }

  LogConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogConfig& from);
  void MergeFrom(const LogConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // @@protoc_insertion_point(class_scope:api.LogConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailAddress) */ {
 public:
  EmailAddress();
  virtual ~EmailAddress();

  EmailAddress(const EmailAddress& from);

  inline EmailAddress& operator=(const EmailAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailAddress(EmailAddress&& from) noexcept
    : EmailAddress() {
    *this = ::std::move(from);
  }

  inline EmailAddress& operator=(EmailAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailAddress* internal_default_instance() {
    return reinterpret_cast<const EmailAddress*>(
               &_EmailAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(EmailAddress* other);
  friend void swap(EmailAddress& a, EmailAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailAddress* New() const final {
    return CreateMaybeMessage<EmailAddress>(NULL);
  }

  EmailAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailAddress& from);
  void MergeFrom(const EmailAddress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:api.EmailAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Email : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Email) */ {
 public:
  Email();
  virtual ~Email();

  Email(const Email& from);

  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Email(Email&& from) noexcept
    : Email() {
    *this = ::std::move(from);
  }

  inline Email& operator=(Email&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Email& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Email* internal_default_instance() {
    return reinterpret_cast<const Email*>(
               &_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Email* other);
  friend void swap(Email& a, Email& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Email* New() const final {
    return CreateMaybeMessage<Email>(NULL);
  }

  Email* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Email>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Email* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject = 3;
  void clear_subject();
  static const int kSubjectFieldNumber = 3;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string plain_text = 4;
  void clear_plain_text();
  static const int kPlainTextFieldNumber = 4;
  const ::std::string& plain_text() const;
  void set_plain_text(const ::std::string& value);
  #if LANG_CXX11
  void set_plain_text(::std::string&& value);
  #endif
  void set_plain_text(const char* value);
  void set_plain_text(const char* value, size_t size);
  ::std::string* mutable_plain_text();
  ::std::string* release_plain_text();
  void set_allocated_plain_text(::std::string* plain_text);

  // string html = 5;
  void clear_html();
  static const int kHtmlFieldNumber = 5;
  const ::std::string& html() const;
  void set_html(const ::std::string& value);
  #if LANG_CXX11
  void set_html(::std::string&& value);
  #endif
  void set_html(const char* value);
  void set_html(const char* value, size_t size);
  ::std::string* mutable_html();
  ::std::string* release_html();
  void set_allocated_html(::std::string* html);

  // .api.EmailAddress from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  private:
  const ::api::EmailAddress& _internal_from() const;
  public:
  const ::api::EmailAddress& from() const;
  ::api::EmailAddress* release_from();
  ::api::EmailAddress* mutable_from();
  void set_allocated_from(::api::EmailAddress* from);

  // .api.EmailAddress to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  private:
  const ::api::EmailAddress& _internal_to() const;
  public:
  const ::api::EmailAddress& to() const;
  ::api::EmailAddress* release_to();
  ::api::EmailAddress* mutable_to();
  void set_allocated_to(::api::EmailAddress* to);

  // @@protoc_insertion_point(class_scope:api.Email)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr plain_text_;
  ::google::protobuf::internal::ArenaStringPtr html_;
  ::api::EmailAddress* from_;
  ::api::EmailAddress* to_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserMap

// map<string, .api.User> users = 1;
inline int UserMap::users_size() const {
  return users_.size();
}
inline void UserMap::clear_users() {
  users_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::api::User >&
UserMap::users() const {
  // @@protoc_insertion_point(field_map:api.UserMap.users)
  return users_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::api::User >*
UserMap::mutable_users() {
  // @@protoc_insertion_point(field_mutable_map:api.UserMap.users)
  return users_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// User

// string user_id = 1;
inline void User::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::user_id() const {
  // @@protoc_insertion_point(field_get:api.User.user_id)
  return user_id_.GetNoArena();
}
inline void User::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.user_id)
}
#if LANG_CXX11
inline void User::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.user_id)
}
#endif
inline void User::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.user_id)
}
inline void User::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.user_id)
}
inline ::std::string* User::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.User.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_user_id() {
  // @@protoc_insertion_point(field_release:api.User.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.User.user_id)
}

// string plan = 2;
inline void User::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::plan() const {
  // @@protoc_insertion_point(field_get:api.User.plan)
  return plan_.GetNoArena();
}
inline void User::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.plan)
}
#if LANG_CXX11
inline void User::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.plan)
}
#endif
inline void User::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.plan)
}
inline void User::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.plan)
}
inline ::std::string* User::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.User.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_plan() {
  // @@protoc_insertion_point(field_release:api.User.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.User.plan)
}

// string name = 3;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:api.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.name)
}
#if LANG_CXX11
inline void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.name)
}
#endif
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:api.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.User.name)
}

// string email = 4;
inline void User::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::email() const {
  // @@protoc_insertion_point(field_get:api.User.email)
  return email_.GetNoArena();
}
inline void User::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.email)
}
#if LANG_CXX11
inline void User::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.email)
}
#endif
inline void User::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.email)
}
inline void User::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.email)
}
inline ::std::string* User::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.User.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:api.User.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.User.email)
}

// string description = 5;
inline void User::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::description() const {
  // @@protoc_insertion_point(field_get:api.User.description)
  return description_.GetNoArena();
}
inline void User::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.description)
}
#if LANG_CXX11
inline void User::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.description)
}
#endif
inline void User::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.description)
}
inline void User::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.description)
}
inline ::std::string* User::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:api.User.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_description() {
  // @@protoc_insertion_point(field_release:api.User.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:api.User.description)
}

// string phone = 6;
inline void User::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::phone() const {
  // @@protoc_insertion_point(field_get:api.User.phone)
  return phone_.GetNoArena();
}
inline void User::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.phone)
}
#if LANG_CXX11
inline void User::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.phone)
}
#endif
inline void User::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.phone)
}
inline void User::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.phone)
}
inline ::std::string* User::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.User.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_phone() {
  // @@protoc_insertion_point(field_release:api.User.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.User.phone)
}

// .api.Address address = 8;
inline bool User::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void User::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::api::Address& User::_internal_address() const {
  return *address_;
}
inline const ::api::Address& User::address() const {
  const ::api::Address* p = address_;
  // @@protoc_insertion_point(field_get:api.User.address)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Address*>(
      &::api::_Address_default_instance_);
}
inline ::api::Address* User::release_address() {
  // @@protoc_insertion_point(field_release:api.User.address)
  
  ::api::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::api::Address* User::mutable_address() {
  
  if (address_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.address)
  return address_;
}
inline void User::set_allocated_address(::api::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:api.User.address)
}

// map<string, string> metadata = 9;
inline int User::metadata_size() const {
  return metadata_.size();
}
inline void User::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
User::metadata() const {
  // @@protoc_insertion_point(field_map:api.User.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
User::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:api.User.metadata)
  return metadata_.MutableMap();
}

// bool deleted = 10;
inline void User::clear_deleted() {
  deleted_ = false;
}
inline bool User::deleted() const {
  // @@protoc_insertion_point(field_get:api.User.deleted)
  return deleted_;
}
inline void User::set_deleted(bool value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:api.User.deleted)
}

// int64 create_date = 20;
inline void User::clear_create_date() {
  create_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 User::create_date() const {
  // @@protoc_insertion_point(field_get:api.User.create_date)
  return create_date_;
}
inline void User::set_create_date(::google::protobuf::int64 value) {
  
  create_date_ = value;
  // @@protoc_insertion_point(field_set:api.User.create_date)
}

// -------------------------------------------------------------------

// AddUserRequest

// string email = 1;
inline void AddUserRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserRequest::email() const {
  // @@protoc_insertion_point(field_get:api.AddUserRequest.email)
  return email_.GetNoArena();
}
inline void AddUserRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AddUserRequest.email)
}
#if LANG_CXX11
inline void AddUserRequest::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AddUserRequest.email)
}
#endif
inline void AddUserRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AddUserRequest.email)
}
inline void AddUserRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AddUserRequest.email)
}
inline ::std::string* AddUserRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.AddUserRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.AddUserRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.AddUserRequest.email)
}

// string plan = 2;
inline void AddUserRequest::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserRequest::plan() const {
  // @@protoc_insertion_point(field_get:api.AddUserRequest.plan)
  return plan_.GetNoArena();
}
inline void AddUserRequest::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AddUserRequest.plan)
}
#if LANG_CXX11
inline void AddUserRequest::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AddUserRequest.plan)
}
#endif
inline void AddUserRequest::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AddUserRequest.plan)
}
inline void AddUserRequest::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AddUserRequest.plan)
}
inline ::std::string* AddUserRequest::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.AddUserRequest.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserRequest::release_plan() {
  // @@protoc_insertion_point(field_release:api.AddUserRequest.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserRequest::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.AddUserRequest.plan)
}

// string phone = 3;
inline void AddUserRequest::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserRequest::phone() const {
  // @@protoc_insertion_point(field_get:api.AddUserRequest.phone)
  return phone_.GetNoArena();
}
inline void AddUserRequest::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AddUserRequest.phone)
}
#if LANG_CXX11
inline void AddUserRequest::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AddUserRequest.phone)
}
#endif
inline void AddUserRequest::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AddUserRequest.phone)
}
inline void AddUserRequest::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AddUserRequest.phone)
}
inline ::std::string* AddUserRequest::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.AddUserRequest.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserRequest::release_phone() {
  // @@protoc_insertion_point(field_release:api.AddUserRequest.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserRequest::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.AddUserRequest.phone)
}

// string name = 4;
inline void AddUserRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserRequest::name() const {
  // @@protoc_insertion_point(field_get:api.AddUserRequest.name)
  return name_.GetNoArena();
}
inline void AddUserRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AddUserRequest.name)
}
#if LANG_CXX11
inline void AddUserRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AddUserRequest.name)
}
#endif
inline void AddUserRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AddUserRequest.name)
}
inline void AddUserRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AddUserRequest.name)
}
inline ::std::string* AddUserRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.AddUserRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserRequest::release_name() {
  // @@protoc_insertion_point(field_release:api.AddUserRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.AddUserRequest.name)
}

// string password = 5;
inline void AddUserRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserRequest::password() const {
  // @@protoc_insertion_point(field_get:api.AddUserRequest.password)
  return password_.GetNoArena();
}
inline void AddUserRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AddUserRequest.password)
}
#if LANG_CXX11
inline void AddUserRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AddUserRequest.password)
}
#endif
inline void AddUserRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AddUserRequest.password)
}
inline void AddUserRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AddUserRequest.password)
}
inline ::std::string* AddUserRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:api.AddUserRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserRequest::release_password() {
  // @@protoc_insertion_point(field_release:api.AddUserRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:api.AddUserRequest.password)
}

// int64 trial_end = 6;
inline void AddUserRequest::clear_trial_end() {
  trial_end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AddUserRequest::trial_end() const {
  // @@protoc_insertion_point(field_get:api.AddUserRequest.trial_end)
  return trial_end_;
}
inline void AddUserRequest::set_trial_end(::google::protobuf::int64 value) {
  
  trial_end_ = value;
  // @@protoc_insertion_point(field_set:api.AddUserRequest.trial_end)
}

// string description = 7;
inline void AddUserRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserRequest::description() const {
  // @@protoc_insertion_point(field_get:api.AddUserRequest.description)
  return description_.GetNoArena();
}
inline void AddUserRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AddUserRequest.description)
}
#if LANG_CXX11
inline void AddUserRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AddUserRequest.description)
}
#endif
inline void AddUserRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AddUserRequest.description)
}
inline void AddUserRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AddUserRequest.description)
}
inline ::std::string* AddUserRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:api.AddUserRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserRequest::release_description() {
  // @@protoc_insertion_point(field_release:api.AddUserRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:api.AddUserRequest.description)
}

// .api.Address address = 8;
inline bool AddUserRequest::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void AddUserRequest::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::api::Address& AddUserRequest::_internal_address() const {
  return *address_;
}
inline const ::api::Address& AddUserRequest::address() const {
  const ::api::Address* p = address_;
  // @@protoc_insertion_point(field_get:api.AddUserRequest.address)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Address*>(
      &::api::_Address_default_instance_);
}
inline ::api::Address* AddUserRequest::release_address() {
  // @@protoc_insertion_point(field_release:api.AddUserRequest.address)
  
  ::api::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::api::Address* AddUserRequest::mutable_address() {
  
  if (address_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.AddUserRequest.address)
  return address_;
}
inline void AddUserRequest::set_allocated_address(::api::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:api.AddUserRequest.address)
}

// -------------------------------------------------------------------

// SubscribeUserRequest

// string email = 1;
inline void SubscribeUserRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeUserRequest::email() const {
  // @@protoc_insertion_point(field_get:api.SubscribeUserRequest.email)
  return email_.GetNoArena();
}
inline void SubscribeUserRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeUserRequest.email)
}
#if LANG_CXX11
inline void SubscribeUserRequest::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeUserRequest.email)
}
#endif
inline void SubscribeUserRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeUserRequest.email)
}
inline void SubscribeUserRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeUserRequest.email)
}
inline ::std::string* SubscribeUserRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeUserRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.SubscribeUserRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeUserRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeUserRequest.email)
}

// string plan = 2;
inline void SubscribeUserRequest::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeUserRequest::plan() const {
  // @@protoc_insertion_point(field_get:api.SubscribeUserRequest.plan)
  return plan_.GetNoArena();
}
inline void SubscribeUserRequest::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeUserRequest.plan)
}
#if LANG_CXX11
inline void SubscribeUserRequest::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeUserRequest.plan)
}
#endif
inline void SubscribeUserRequest::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeUserRequest.plan)
}
inline void SubscribeUserRequest::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeUserRequest.plan)
}
inline ::std::string* SubscribeUserRequest::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeUserRequest.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeUserRequest::release_plan() {
  // @@protoc_insertion_point(field_release:api.SubscribeUserRequest.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeUserRequest::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeUserRequest.plan)
}

// string card_number = 3;
inline void SubscribeUserRequest::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeUserRequest::card_number() const {
  // @@protoc_insertion_point(field_get:api.SubscribeUserRequest.card_number)
  return card_number_.GetNoArena();
}
inline void SubscribeUserRequest::set_card_number(const ::std::string& value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeUserRequest.card_number)
}
#if LANG_CXX11
inline void SubscribeUserRequest::set_card_number(::std::string&& value) {
  
  card_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeUserRequest.card_number)
}
#endif
inline void SubscribeUserRequest::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeUserRequest.card_number)
}
inline void SubscribeUserRequest::set_card_number(const char* value, size_t size) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeUserRequest.card_number)
}
inline ::std::string* SubscribeUserRequest::mutable_card_number() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeUserRequest.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeUserRequest::release_card_number() {
  // @@protoc_insertion_point(field_release:api.SubscribeUserRequest.card_number)
  
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeUserRequest::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    
  } else {
    
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeUserRequest.card_number)
}

// string exp_month = 4;
inline void SubscribeUserRequest::clear_exp_month() {
  exp_month_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeUserRequest::exp_month() const {
  // @@protoc_insertion_point(field_get:api.SubscribeUserRequest.exp_month)
  return exp_month_.GetNoArena();
}
inline void SubscribeUserRequest::set_exp_month(const ::std::string& value) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeUserRequest.exp_month)
}
#if LANG_CXX11
inline void SubscribeUserRequest::set_exp_month(::std::string&& value) {
  
  exp_month_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeUserRequest.exp_month)
}
#endif
inline void SubscribeUserRequest::set_exp_month(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeUserRequest.exp_month)
}
inline void SubscribeUserRequest::set_exp_month(const char* value, size_t size) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeUserRequest.exp_month)
}
inline ::std::string* SubscribeUserRequest::mutable_exp_month() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeUserRequest.exp_month)
  return exp_month_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeUserRequest::release_exp_month() {
  // @@protoc_insertion_point(field_release:api.SubscribeUserRequest.exp_month)
  
  return exp_month_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeUserRequest::set_allocated_exp_month(::std::string* exp_month) {
  if (exp_month != NULL) {
    
  } else {
    
  }
  exp_month_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_month);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeUserRequest.exp_month)
}

// string exp_year = 5;
inline void SubscribeUserRequest::clear_exp_year() {
  exp_year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeUserRequest::exp_year() const {
  // @@protoc_insertion_point(field_get:api.SubscribeUserRequest.exp_year)
  return exp_year_.GetNoArena();
}
inline void SubscribeUserRequest::set_exp_year(const ::std::string& value) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeUserRequest.exp_year)
}
#if LANG_CXX11
inline void SubscribeUserRequest::set_exp_year(::std::string&& value) {
  
  exp_year_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeUserRequest.exp_year)
}
#endif
inline void SubscribeUserRequest::set_exp_year(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeUserRequest.exp_year)
}
inline void SubscribeUserRequest::set_exp_year(const char* value, size_t size) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeUserRequest.exp_year)
}
inline ::std::string* SubscribeUserRequest::mutable_exp_year() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeUserRequest.exp_year)
  return exp_year_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeUserRequest::release_exp_year() {
  // @@protoc_insertion_point(field_release:api.SubscribeUserRequest.exp_year)
  
  return exp_year_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeUserRequest::set_allocated_exp_year(::std::string* exp_year) {
  if (exp_year != NULL) {
    
  } else {
    
  }
  exp_year_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_year);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeUserRequest.exp_year)
}

// string cvc = 6;
inline void SubscribeUserRequest::clear_cvc() {
  cvc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeUserRequest::cvc() const {
  // @@protoc_insertion_point(field_get:api.SubscribeUserRequest.cvc)
  return cvc_.GetNoArena();
}
inline void SubscribeUserRequest::set_cvc(const ::std::string& value) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeUserRequest.cvc)
}
#if LANG_CXX11
inline void SubscribeUserRequest::set_cvc(::std::string&& value) {
  
  cvc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeUserRequest.cvc)
}
#endif
inline void SubscribeUserRequest::set_cvc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeUserRequest.cvc)
}
inline void SubscribeUserRequest::set_cvc(const char* value, size_t size) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeUserRequest.cvc)
}
inline ::std::string* SubscribeUserRequest::mutable_cvc() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeUserRequest.cvc)
  return cvc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeUserRequest::release_cvc() {
  // @@protoc_insertion_point(field_release:api.SubscribeUserRequest.cvc)
  
  return cvc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeUserRequest::set_allocated_cvc(::std::string* cvc) {
  if (cvc != NULL) {
    
  } else {
    
  }
  cvc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cvc);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeUserRequest.cvc)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AddUserMetadataRequest

// string user_id = 1;
inline void AddUserMetadataRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserMetadataRequest::user_id() const {
  // @@protoc_insertion_point(field_get:api.AddUserMetadataRequest.user_id)
  return user_id_.GetNoArena();
}
inline void AddUserMetadataRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AddUserMetadataRequest.user_id)
}
#if LANG_CXX11
inline void AddUserMetadataRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AddUserMetadataRequest.user_id)
}
#endif
inline void AddUserMetadataRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AddUserMetadataRequest.user_id)
}
inline void AddUserMetadataRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AddUserMetadataRequest.user_id)
}
inline ::std::string* AddUserMetadataRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.AddUserMetadataRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserMetadataRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:api.AddUserMetadataRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserMetadataRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.AddUserMetadataRequest.user_id)
}

// map<string, string> metadata = 2;
inline int AddUserMetadataRequest::metadata_size() const {
  return metadata_.size();
}
inline void AddUserMetadataRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AddUserMetadataRequest::metadata() const {
  // @@protoc_insertion_point(field_map:api.AddUserMetadataRequest.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AddUserMetadataRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:api.AddUserMetadataRequest.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// Address

// string city = 1;
inline void Address::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:api.Address.city)
  return city_.GetNoArena();
}
inline void Address::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.city)
}
#if LANG_CXX11
inline void Address::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.city)
}
#endif
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.city)
}
inline void Address::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.city)
}
inline ::std::string* Address::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:api.Address.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:api.Address.city)
}

// string country = 2;
inline void Address::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::country() const {
  // @@protoc_insertion_point(field_get:api.Address.country)
  return country_.GetNoArena();
}
inline void Address::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.country)
}
#if LANG_CXX11
inline void Address::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.country)
}
#endif
inline void Address::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.country)
}
inline void Address::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.country)
}
inline ::std::string* Address::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_country() {
  // @@protoc_insertion_point(field_release:api.Address.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:api.Address.country)
}

// string line1 = 3;
inline void Address::clear_line1() {
  line1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::line1() const {
  // @@protoc_insertion_point(field_get:api.Address.line1)
  return line1_.GetNoArena();
}
inline void Address::set_line1(const ::std::string& value) {
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.line1)
}
#if LANG_CXX11
inline void Address::set_line1(::std::string&& value) {
  
  line1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.line1)
}
#endif
inline void Address::set_line1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.line1)
}
inline void Address::set_line1(const char* value, size_t size) {
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.line1)
}
inline ::std::string* Address::mutable_line1() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.line1)
  return line1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_line1() {
  // @@protoc_insertion_point(field_release:api.Address.line1)
  
  return line1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_line1(::std::string* line1) {
  if (line1 != NULL) {
    
  } else {
    
  }
  line1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line1);
  // @@protoc_insertion_point(field_set_allocated:api.Address.line1)
}

// string line2 = 4;
inline void Address::clear_line2() {
  line2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::line2() const {
  // @@protoc_insertion_point(field_get:api.Address.line2)
  return line2_.GetNoArena();
}
inline void Address::set_line2(const ::std::string& value) {
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.line2)
}
#if LANG_CXX11
inline void Address::set_line2(::std::string&& value) {
  
  line2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.line2)
}
#endif
inline void Address::set_line2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.line2)
}
inline void Address::set_line2(const char* value, size_t size) {
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.line2)
}
inline ::std::string* Address::mutable_line2() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.line2)
  return line2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_line2() {
  // @@protoc_insertion_point(field_release:api.Address.line2)
  
  return line2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_line2(::std::string* line2) {
  if (line2 != NULL) {
    
  } else {
    
  }
  line2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line2);
  // @@protoc_insertion_point(field_set_allocated:api.Address.line2)
}

// string postal_code = 5;
inline void Address::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::postal_code() const {
  // @@protoc_insertion_point(field_get:api.Address.postal_code)
  return postal_code_.GetNoArena();
}
inline void Address::set_postal_code(const ::std::string& value) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.postal_code)
}
#if LANG_CXX11
inline void Address::set_postal_code(::std::string&& value) {
  
  postal_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.postal_code)
}
#endif
inline void Address::set_postal_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.postal_code)
}
inline void Address::set_postal_code(const char* value, size_t size) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.postal_code)
}
inline ::std::string* Address::mutable_postal_code() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.postal_code)
  return postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_postal_code() {
  // @@protoc_insertion_point(field_release:api.Address.postal_code)
  
  return postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_postal_code(::std::string* postal_code) {
  if (postal_code != NULL) {
    
  } else {
    
  }
  postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:api.Address.postal_code)
}

// string state = 6;
inline void Address::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::state() const {
  // @@protoc_insertion_point(field_get:api.Address.state)
  return state_.GetNoArena();
}
inline void Address::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.state)
}
#if LANG_CXX11
inline void Address::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.state)
}
#endif
inline void Address::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.state)
}
inline void Address::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.state)
}
inline ::std::string* Address::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_state() {
  // @@protoc_insertion_point(field_release:api.Address.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:api.Address.state)
}

// -------------------------------------------------------------------

// SubscribeUserResponse

// string subscription_id = 1;
inline void SubscribeUserResponse::clear_subscription_id() {
  subscription_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeUserResponse::subscription_id() const {
  // @@protoc_insertion_point(field_get:api.SubscribeUserResponse.subscription_id)
  return subscription_id_.GetNoArena();
}
inline void SubscribeUserResponse::set_subscription_id(const ::std::string& value) {
  
  subscription_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeUserResponse.subscription_id)
}
#if LANG_CXX11
inline void SubscribeUserResponse::set_subscription_id(::std::string&& value) {
  
  subscription_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeUserResponse.subscription_id)
}
#endif
inline void SubscribeUserResponse::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeUserResponse.subscription_id)
}
inline void SubscribeUserResponse::set_subscription_id(const char* value, size_t size) {
  
  subscription_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeUserResponse.subscription_id)
}
inline ::std::string* SubscribeUserResponse::mutable_subscription_id() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeUserResponse.subscription_id)
  return subscription_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeUserResponse::release_subscription_id() {
  // @@protoc_insertion_point(field_release:api.SubscribeUserResponse.subscription_id)
  
  return subscription_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeUserResponse::set_allocated_subscription_id(::std::string* subscription_id) {
  if (subscription_id != NULL) {
    
  } else {
    
  }
  subscription_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription_id);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeUserResponse.subscription_id)
}

// -------------------------------------------------------------------

// CreatePlanResponse

// string plan_id = 1;
inline void CreatePlanResponse::clear_plan_id() {
  plan_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreatePlanResponse::plan_id() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanResponse.plan_id)
  return plan_id_.GetNoArena();
}
inline void CreatePlanResponse::set_plan_id(const ::std::string& value) {
  
  plan_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreatePlanResponse.plan_id)
}
#if LANG_CXX11
inline void CreatePlanResponse::set_plan_id(::std::string&& value) {
  
  plan_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreatePlanResponse.plan_id)
}
#endif
inline void CreatePlanResponse::set_plan_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreatePlanResponse.plan_id)
}
inline void CreatePlanResponse::set_plan_id(const char* value, size_t size) {
  
  plan_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreatePlanResponse.plan_id)
}
inline ::std::string* CreatePlanResponse::mutable_plan_id() {
  
  // @@protoc_insertion_point(field_mutable:api.CreatePlanResponse.plan_id)
  return plan_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreatePlanResponse::release_plan_id() {
  // @@protoc_insertion_point(field_release:api.CreatePlanResponse.plan_id)
  
  return plan_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlanResponse::set_allocated_plan_id(::std::string* plan_id) {
  if (plan_id != NULL) {
    
  } else {
    
  }
  plan_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan_id);
  // @@protoc_insertion_point(field_set_allocated:api.CreatePlanResponse.plan_id)
}

// -------------------------------------------------------------------

// CancelSubscriptionRequest

// string email = 1;
inline void CancelSubscriptionRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelSubscriptionRequest::email() const {
  // @@protoc_insertion_point(field_get:api.CancelSubscriptionRequest.email)
  return email_.GetNoArena();
}
inline void CancelSubscriptionRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CancelSubscriptionRequest.email)
}
#if LANG_CXX11
inline void CancelSubscriptionRequest::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CancelSubscriptionRequest.email)
}
#endif
inline void CancelSubscriptionRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CancelSubscriptionRequest.email)
}
inline void CancelSubscriptionRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CancelSubscriptionRequest.email)
}
inline ::std::string* CancelSubscriptionRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.CancelSubscriptionRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelSubscriptionRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.CancelSubscriptionRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelSubscriptionRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.CancelSubscriptionRequest.email)
}

// -------------------------------------------------------------------

// CreatePlanRequest

// string plan_id = 1;
inline void CreatePlanRequest::clear_plan_id() {
  plan_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreatePlanRequest::plan_id() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.plan_id)
  return plan_id_.GetNoArena();
}
inline void CreatePlanRequest::set_plan_id(const ::std::string& value) {
  
  plan_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.plan_id)
}
#if LANG_CXX11
inline void CreatePlanRequest::set_plan_id(::std::string&& value) {
  
  plan_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreatePlanRequest.plan_id)
}
#endif
inline void CreatePlanRequest::set_plan_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreatePlanRequest.plan_id)
}
inline void CreatePlanRequest::set_plan_id(const char* value, size_t size) {
  
  plan_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreatePlanRequest.plan_id)
}
inline ::std::string* CreatePlanRequest::mutable_plan_id() {
  
  // @@protoc_insertion_point(field_mutable:api.CreatePlanRequest.plan_id)
  return plan_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreatePlanRequest::release_plan_id() {
  // @@protoc_insertion_point(field_release:api.CreatePlanRequest.plan_id)
  
  return plan_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlanRequest::set_allocated_plan_id(::std::string* plan_id) {
  if (plan_id != NULL) {
    
  } else {
    
  }
  plan_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan_id);
  // @@protoc_insertion_point(field_set_allocated:api.CreatePlanRequest.plan_id)
}

// int64 amount = 2;
inline void CreatePlanRequest::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CreatePlanRequest::amount() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.amount)
  return amount_;
}
inline void CreatePlanRequest::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.amount)
}

// string service_id = 3;
inline void CreatePlanRequest::clear_service_id() {
  service_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreatePlanRequest::service_id() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.service_id)
  return service_id_.GetNoArena();
}
inline void CreatePlanRequest::set_service_id(const ::std::string& value) {
  
  service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.service_id)
}
#if LANG_CXX11
inline void CreatePlanRequest::set_service_id(::std::string&& value) {
  
  service_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreatePlanRequest.service_id)
}
#endif
inline void CreatePlanRequest::set_service_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreatePlanRequest.service_id)
}
inline void CreatePlanRequest::set_service_id(const char* value, size_t size) {
  
  service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreatePlanRequest.service_id)
}
inline ::std::string* CreatePlanRequest::mutable_service_id() {
  
  // @@protoc_insertion_point(field_mutable:api.CreatePlanRequest.service_id)
  return service_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreatePlanRequest::release_service_id() {
  // @@protoc_insertion_point(field_release:api.CreatePlanRequest.service_id)
  
  return service_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlanRequest::set_allocated_service_id(::std::string* service_id) {
  if (service_id != NULL) {
    
  } else {
    
  }
  service_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_id);
  // @@protoc_insertion_point(field_set_allocated:api.CreatePlanRequest.service_id)
}

// string service_name = 4;
inline void CreatePlanRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreatePlanRequest::service_name() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.service_name)
  return service_name_.GetNoArena();
}
inline void CreatePlanRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.service_name)
}
#if LANG_CXX11
inline void CreatePlanRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreatePlanRequest.service_name)
}
#endif
inline void CreatePlanRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreatePlanRequest.service_name)
}
inline void CreatePlanRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreatePlanRequest.service_name)
}
inline ::std::string* CreatePlanRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:api.CreatePlanRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreatePlanRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:api.CreatePlanRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlanRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:api.CreatePlanRequest.service_name)
}

// string friendly_name = 5;
inline void CreatePlanRequest::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreatePlanRequest::friendly_name() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.friendly_name)
  return friendly_name_.GetNoArena();
}
inline void CreatePlanRequest::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.friendly_name)
}
#if LANG_CXX11
inline void CreatePlanRequest::set_friendly_name(::std::string&& value) {
  
  friendly_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreatePlanRequest.friendly_name)
}
#endif
inline void CreatePlanRequest::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreatePlanRequest.friendly_name)
}
inline void CreatePlanRequest::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreatePlanRequest.friendly_name)
}
inline ::std::string* CreatePlanRequest::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:api.CreatePlanRequest.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreatePlanRequest::release_friendly_name() {
  // @@protoc_insertion_point(field_release:api.CreatePlanRequest.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlanRequest::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:api.CreatePlanRequest.friendly_name)
}

// -------------------------------------------------------------------

// SMSRequest

// string user_id = 1;
inline void SMSRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSRequest::user_id() const {
  // @@protoc_insertion_point(field_get:api.SMSRequest.user_id)
  return user_id_.GetNoArena();
}
inline void SMSRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSRequest.user_id)
}
#if LANG_CXX11
inline void SMSRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSRequest.user_id)
}
#endif
inline void SMSRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSRequest.user_id)
}
inline void SMSRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSRequest.user_id)
}
inline ::std::string* SMSRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:api.SMSRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.SMSRequest.user_id)
}

// string body = 2;
inline void SMSRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSRequest::body() const {
  // @@protoc_insertion_point(field_get:api.SMSRequest.body)
  return body_.GetNoArena();
}
inline void SMSRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSRequest.body)
}
#if LANG_CXX11
inline void SMSRequest::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSRequest.body)
}
#endif
inline void SMSRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSRequest.body)
}
inline void SMSRequest::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSRequest.body)
}
inline ::std::string* SMSRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSRequest::release_body() {
  // @@protoc_insertion_point(field_release:api.SMSRequest.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:api.SMSRequest.body)
}

// -------------------------------------------------------------------

// CallRequest

// string user_id = 1;
inline void CallRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallRequest::user_id() const {
  // @@protoc_insertion_point(field_get:api.CallRequest.user_id)
  return user_id_.GetNoArena();
}
inline void CallRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CallRequest.user_id)
}
#if LANG_CXX11
inline void CallRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CallRequest.user_id)
}
#endif
inline void CallRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CallRequest.user_id)
}
inline void CallRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CallRequest.user_id)
}
inline ::std::string* CallRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.CallRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:api.CallRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.CallRequest.user_id)
}

// string callback_url = 2;
inline void CallRequest::clear_callback_url() {
  callback_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallRequest::callback_url() const {
  // @@protoc_insertion_point(field_get:api.CallRequest.callback_url)
  return callback_url_.GetNoArena();
}
inline void CallRequest::set_callback_url(const ::std::string& value) {
  
  callback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CallRequest.callback_url)
}
#if LANG_CXX11
inline void CallRequest::set_callback_url(::std::string&& value) {
  
  callback_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CallRequest.callback_url)
}
#endif
inline void CallRequest::set_callback_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CallRequest.callback_url)
}
inline void CallRequest::set_callback_url(const char* value, size_t size) {
  
  callback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CallRequest.callback_url)
}
inline ::std::string* CallRequest::mutable_callback_url() {
  
  // @@protoc_insertion_point(field_mutable:api.CallRequest.callback_url)
  return callback_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRequest::release_callback_url() {
  // @@protoc_insertion_point(field_release:api.CallRequest.callback_url)
  
  return callback_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRequest::set_allocated_callback_url(::std::string* callback_url) {
  if (callback_url != NULL) {
    
  } else {
    
  }
  callback_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_url);
  // @@protoc_insertion_point(field_set_allocated:api.CallRequest.callback_url)
}

// -------------------------------------------------------------------

// MMSRequest

// string user_id = 1;
inline void MMSRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MMSRequest::user_id() const {
  // @@protoc_insertion_point(field_get:api.MMSRequest.user_id)
  return user_id_.GetNoArena();
}
inline void MMSRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.MMSRequest.user_id)
}
#if LANG_CXX11
inline void MMSRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.MMSRequest.user_id)
}
#endif
inline void MMSRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.MMSRequest.user_id)
}
inline void MMSRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.MMSRequest.user_id)
}
inline ::std::string* MMSRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.MMSRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MMSRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:api.MMSRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MMSRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.MMSRequest.user_id)
}

// string body = 2;
inline void MMSRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MMSRequest::body() const {
  // @@protoc_insertion_point(field_get:api.MMSRequest.body)
  return body_.GetNoArena();
}
inline void MMSRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.MMSRequest.body)
}
#if LANG_CXX11
inline void MMSRequest::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.MMSRequest.body)
}
#endif
inline void MMSRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.MMSRequest.body)
}
inline void MMSRequest::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.MMSRequest.body)
}
inline ::std::string* MMSRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:api.MMSRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MMSRequest::release_body() {
  // @@protoc_insertion_point(field_release:api.MMSRequest.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MMSRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:api.MMSRequest.body)
}

// string media_url = 3;
inline void MMSRequest::clear_media_url() {
  media_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MMSRequest::media_url() const {
  // @@protoc_insertion_point(field_get:api.MMSRequest.media_url)
  return media_url_.GetNoArena();
}
inline void MMSRequest::set_media_url(const ::std::string& value) {
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.MMSRequest.media_url)
}
#if LANG_CXX11
inline void MMSRequest::set_media_url(::std::string&& value) {
  
  media_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.MMSRequest.media_url)
}
#endif
inline void MMSRequest::set_media_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.MMSRequest.media_url)
}
inline void MMSRequest::set_media_url(const char* value, size_t size) {
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.MMSRequest.media_url)
}
inline ::std::string* MMSRequest::mutable_media_url() {
  
  // @@protoc_insertion_point(field_mutable:api.MMSRequest.media_url)
  return media_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MMSRequest::release_media_url() {
  // @@protoc_insertion_point(field_release:api.MMSRequest.media_url)
  
  return media_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MMSRequest::set_allocated_media_url(::std::string* media_url) {
  if (media_url != NULL) {
    
  } else {
    
  }
  media_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_url);
  // @@protoc_insertion_point(field_set_allocated:api.MMSRequest.media_url)
}

// -------------------------------------------------------------------

// EmailRequest

// string user_id = 1;
inline void EmailRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::user_id() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.user_id)
  return user_id_.GetNoArena();
}
inline void EmailRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.user_id)
}
#if LANG_CXX11
inline void EmailRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.user_id)
}
#endif
inline void EmailRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.user_id)
}
inline void EmailRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.user_id)
}
inline ::std::string* EmailRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.user_id)
}

// string subject = 2;
inline void EmailRequest::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::subject() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.subject)
  return subject_.GetNoArena();
}
inline void EmailRequest::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.subject)
}
#if LANG_CXX11
inline void EmailRequest::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.subject)
}
#endif
inline void EmailRequest::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.subject)
}
inline void EmailRequest::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.subject)
}
inline ::std::string* EmailRequest::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_subject() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.subject)
}

// string plain_text = 3;
inline void EmailRequest::clear_plain_text() {
  plain_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::plain_text() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.plain_text)
  return plain_text_.GetNoArena();
}
inline void EmailRequest::set_plain_text(const ::std::string& value) {
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.plain_text)
}
#if LANG_CXX11
inline void EmailRequest::set_plain_text(::std::string&& value) {
  
  plain_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.plain_text)
}
#endif
inline void EmailRequest::set_plain_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.plain_text)
}
inline void EmailRequest::set_plain_text(const char* value, size_t size) {
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.plain_text)
}
inline ::std::string* EmailRequest::mutable_plain_text() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.plain_text)
  return plain_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_plain_text() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.plain_text)
  
  return plain_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_plain_text(::std::string* plain_text) {
  if (plain_text != NULL) {
    
  } else {
    
  }
  plain_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plain_text);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.plain_text)
}

// string html_alt = 4;
inline void EmailRequest::clear_html_alt() {
  html_alt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::html_alt() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.html_alt)
  return html_alt_.GetNoArena();
}
inline void EmailRequest::set_html_alt(const ::std::string& value) {
  
  html_alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.html_alt)
}
#if LANG_CXX11
inline void EmailRequest::set_html_alt(::std::string&& value) {
  
  html_alt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.html_alt)
}
#endif
inline void EmailRequest::set_html_alt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  html_alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.html_alt)
}
inline void EmailRequest::set_html_alt(const char* value, size_t size) {
  
  html_alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.html_alt)
}
inline ::std::string* EmailRequest::mutable_html_alt() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.html_alt)
  return html_alt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_html_alt() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.html_alt)
  
  return html_alt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_html_alt(::std::string* html_alt) {
  if (html_alt != NULL) {
    
  } else {
    
  }
  html_alt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html_alt);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.html_alt)
}

// -------------------------------------------------------------------

// ChannelReminder

// string channel_id = 1;
inline void ChannelReminder::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelReminder::channel_id() const {
  // @@protoc_insertion_point(field_get:api.ChannelReminder.channel_id)
  return channel_id_.GetNoArena();
}
inline void ChannelReminder::set_channel_id(const ::std::string& value) {
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelReminder.channel_id)
}
#if LANG_CXX11
inline void ChannelReminder::set_channel_id(::std::string&& value) {
  
  channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelReminder.channel_id)
}
#endif
inline void ChannelReminder::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelReminder.channel_id)
}
inline void ChannelReminder::set_channel_id(const char* value, size_t size) {
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelReminder.channel_id)
}
inline ::std::string* ChannelReminder::mutable_channel_id() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelReminder.channel_id)
  return channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelReminder::release_channel_id() {
  // @@protoc_insertion_point(field_release:api.ChannelReminder.channel_id)
  
  return channel_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelReminder::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    
  } else {
    
  }
  channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelReminder.channel_id)
}

// string text = 2;
inline void ChannelReminder::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelReminder::text() const {
  // @@protoc_insertion_point(field_get:api.ChannelReminder.text)
  return text_.GetNoArena();
}
inline void ChannelReminder::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelReminder.text)
}
#if LANG_CXX11
inline void ChannelReminder::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelReminder.text)
}
#endif
inline void ChannelReminder::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelReminder.text)
}
inline void ChannelReminder::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelReminder.text)
}
inline ::std::string* ChannelReminder::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelReminder.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelReminder::release_text() {
  // @@protoc_insertion_point(field_release:api.ChannelReminder.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelReminder::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelReminder.text)
}

// string time = 3;
inline void ChannelReminder::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelReminder::time() const {
  // @@protoc_insertion_point(field_get:api.ChannelReminder.time)
  return time_.GetNoArena();
}
inline void ChannelReminder::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelReminder.time)
}
#if LANG_CXX11
inline void ChannelReminder::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelReminder.time)
}
#endif
inline void ChannelReminder::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelReminder.time)
}
inline void ChannelReminder::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelReminder.time)
}
inline ::std::string* ChannelReminder::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelReminder.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelReminder::release_time() {
  // @@protoc_insertion_point(field_release:api.ChannelReminder.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelReminder::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelReminder.time)
}

// -------------------------------------------------------------------

// UserReminder

// string user_id = 1;
inline void UserReminder::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserReminder::user_id() const {
  // @@protoc_insertion_point(field_get:api.UserReminder.user_id)
  return user_id_.GetNoArena();
}
inline void UserReminder::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserReminder.user_id)
}
#if LANG_CXX11
inline void UserReminder::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserReminder.user_id)
}
#endif
inline void UserReminder::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserReminder.user_id)
}
inline void UserReminder::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserReminder.user_id)
}
inline ::std::string* UserReminder::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.UserReminder.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserReminder::release_user_id() {
  // @@protoc_insertion_point(field_release:api.UserReminder.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserReminder::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.UserReminder.user_id)
}

// string text = 2;
inline void UserReminder::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserReminder::text() const {
  // @@protoc_insertion_point(field_get:api.UserReminder.text)
  return text_.GetNoArena();
}
inline void UserReminder::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserReminder.text)
}
#if LANG_CXX11
inline void UserReminder::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserReminder.text)
}
#endif
inline void UserReminder::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserReminder.text)
}
inline void UserReminder::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserReminder.text)
}
inline ::std::string* UserReminder::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.UserReminder.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserReminder::release_text() {
  // @@protoc_insertion_point(field_release:api.UserReminder.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserReminder::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.UserReminder.text)
}

// string time = 3;
inline void UserReminder::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserReminder::time() const {
  // @@protoc_insertion_point(field_get:api.UserReminder.time)
  return time_.GetNoArena();
}
inline void UserReminder::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserReminder.time)
}
#if LANG_CXX11
inline void UserReminder::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserReminder.time)
}
#endif
inline void UserReminder::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserReminder.time)
}
inline void UserReminder::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserReminder.time)
}
inline ::std::string* UserReminder::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:api.UserReminder.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserReminder::release_time() {
  // @@protoc_insertion_point(field_release:api.UserReminder.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserReminder::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:api.UserReminder.time)
}

// .api.ItemRef item = 4;
inline bool UserReminder::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void UserReminder::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::api::ItemRef& UserReminder::_internal_item() const {
  return *item_;
}
inline const ::api::ItemRef& UserReminder::item() const {
  const ::api::ItemRef* p = item_;
  // @@protoc_insertion_point(field_get:api.UserReminder.item)
  return p != NULL ? *p : *reinterpret_cast<const ::api::ItemRef*>(
      &::api::_ItemRef_default_instance_);
}
inline ::api::ItemRef* UserReminder::release_item() {
  // @@protoc_insertion_point(field_release:api.UserReminder.item)
  
  ::api::ItemRef* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::api::ItemRef* UserReminder::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::api::ItemRef>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserReminder.item)
  return item_;
}
inline void UserReminder::set_allocated_item(::api::ItemRef* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:api.UserReminder.item)
}

// -------------------------------------------------------------------

// ItemRef

// string channel = 1;
inline void ItemRef::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemRef::channel() const {
  // @@protoc_insertion_point(field_get:api.ItemRef.channel)
  return channel_.GetNoArena();
}
inline void ItemRef::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ItemRef.channel)
}
#if LANG_CXX11
inline void ItemRef::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ItemRef.channel)
}
#endif
inline void ItemRef::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ItemRef.channel)
}
inline void ItemRef::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ItemRef.channel)
}
inline ::std::string* ItemRef::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:api.ItemRef.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemRef::release_channel() {
  // @@protoc_insertion_point(field_release:api.ItemRef.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemRef::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:api.ItemRef.channel)
}

// string file = 2;
inline void ItemRef::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemRef::file() const {
  // @@protoc_insertion_point(field_get:api.ItemRef.file)
  return file_.GetNoArena();
}
inline void ItemRef::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ItemRef.file)
}
#if LANG_CXX11
inline void ItemRef::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ItemRef.file)
}
#endif
inline void ItemRef::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ItemRef.file)
}
inline void ItemRef::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ItemRef.file)
}
inline ::std::string* ItemRef::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:api.ItemRef.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemRef::release_file() {
  // @@protoc_insertion_point(field_release:api.ItemRef.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemRef::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:api.ItemRef.file)
}

// string comment = 3;
inline void ItemRef::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemRef::comment() const {
  // @@protoc_insertion_point(field_get:api.ItemRef.comment)
  return comment_.GetNoArena();
}
inline void ItemRef::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ItemRef.comment)
}
#if LANG_CXX11
inline void ItemRef::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ItemRef.comment)
}
#endif
inline void ItemRef::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ItemRef.comment)
}
inline void ItemRef::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ItemRef.comment)
}
inline ::std::string* ItemRef::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:api.ItemRef.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemRef::release_comment() {
  // @@protoc_insertion_point(field_release:api.ItemRef.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemRef::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:api.ItemRef.comment)
}

// -------------------------------------------------------------------

// Star

// string text = 1;
inline void Star::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Star::text() const {
  // @@protoc_insertion_point(field_get:api.Star.text)
  return text_.GetNoArena();
}
inline void Star::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Star.text)
}
#if LANG_CXX11
inline void Star::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Star.text)
}
#endif
inline void Star::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Star.text)
}
inline void Star::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Star.text)
}
inline ::std::string* Star::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.Star.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Star::release_text() {
  // @@protoc_insertion_point(field_release:api.Star.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Star::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.Star.text)
}

// .api.ItemRef item = 4;
inline bool Star::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void Star::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::api::ItemRef& Star::_internal_item() const {
  return *item_;
}
inline const ::api::ItemRef& Star::item() const {
  const ::api::ItemRef* p = item_;
  // @@protoc_insertion_point(field_get:api.Star.item)
  return p != NULL ? *p : *reinterpret_cast<const ::api::ItemRef*>(
      &::api::_ItemRef_default_instance_);
}
inline ::api::ItemRef* Star::release_item() {
  // @@protoc_insertion_point(field_release:api.Star.item)
  
  ::api::ItemRef* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::api::ItemRef* Star::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::api::ItemRef>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Star.item)
  return item_;
}
inline void Star::set_allocated_item(::api::ItemRef* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:api.Star.item)
}

// -------------------------------------------------------------------

// Config

// bool debug = 1;
inline void Config::clear_debug() {
  debug_ = false;
}
inline bool Config::debug() const {
  // @@protoc_insertion_point(field_get:api.Config.debug)
  return debug_;
}
inline void Config::set_debug(bool value) {
  
  debug_ = value;
  // @@protoc_insertion_point(field_set:api.Config.debug)
}

// string twilio_account = 2;
inline void Config::clear_twilio_account() {
  twilio_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::twilio_account() const {
  // @@protoc_insertion_point(field_get:api.Config.twilio_account)
  return twilio_account_.GetNoArena();
}
inline void Config::set_twilio_account(const ::std::string& value) {
  
  twilio_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Config.twilio_account)
}
#if LANG_CXX11
inline void Config::set_twilio_account(::std::string&& value) {
  
  twilio_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Config.twilio_account)
}
#endif
inline void Config::set_twilio_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  twilio_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Config.twilio_account)
}
inline void Config::set_twilio_account(const char* value, size_t size) {
  
  twilio_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Config.twilio_account)
}
inline ::std::string* Config::mutable_twilio_account() {
  
  // @@protoc_insertion_point(field_mutable:api.Config.twilio_account)
  return twilio_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_twilio_account() {
  // @@protoc_insertion_point(field_release:api.Config.twilio_account)
  
  return twilio_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_twilio_account(::std::string* twilio_account) {
  if (twilio_account != NULL) {
    
  } else {
    
  }
  twilio_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), twilio_account);
  // @@protoc_insertion_point(field_set_allocated:api.Config.twilio_account)
}

// string twilio_key = 3;
inline void Config::clear_twilio_key() {
  twilio_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::twilio_key() const {
  // @@protoc_insertion_point(field_get:api.Config.twilio_key)
  return twilio_key_.GetNoArena();
}
inline void Config::set_twilio_key(const ::std::string& value) {
  
  twilio_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Config.twilio_key)
}
#if LANG_CXX11
inline void Config::set_twilio_key(::std::string&& value) {
  
  twilio_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Config.twilio_key)
}
#endif
inline void Config::set_twilio_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  twilio_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Config.twilio_key)
}
inline void Config::set_twilio_key(const char* value, size_t size) {
  
  twilio_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Config.twilio_key)
}
inline ::std::string* Config::mutable_twilio_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Config.twilio_key)
  return twilio_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_twilio_key() {
  // @@protoc_insertion_point(field_release:api.Config.twilio_key)
  
  return twilio_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_twilio_key(::std::string* twilio_key) {
  if (twilio_key != NULL) {
    
  } else {
    
  }
  twilio_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), twilio_key);
  // @@protoc_insertion_point(field_set_allocated:api.Config.twilio_key)
}

// string sendgrid_key = 4;
inline void Config::clear_sendgrid_key() {
  sendgrid_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::sendgrid_key() const {
  // @@protoc_insertion_point(field_get:api.Config.sendgrid_key)
  return sendgrid_key_.GetNoArena();
}
inline void Config::set_sendgrid_key(const ::std::string& value) {
  
  sendgrid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Config.sendgrid_key)
}
#if LANG_CXX11
inline void Config::set_sendgrid_key(::std::string&& value) {
  
  sendgrid_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Config.sendgrid_key)
}
#endif
inline void Config::set_sendgrid_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sendgrid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Config.sendgrid_key)
}
inline void Config::set_sendgrid_key(const char* value, size_t size) {
  
  sendgrid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Config.sendgrid_key)
}
inline ::std::string* Config::mutable_sendgrid_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Config.sendgrid_key)
  return sendgrid_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_sendgrid_key() {
  // @@protoc_insertion_point(field_release:api.Config.sendgrid_key)
  
  return sendgrid_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_sendgrid_key(::std::string* sendgrid_key) {
  if (sendgrid_key != NULL) {
    
  } else {
    
  }
  sendgrid_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendgrid_key);
  // @@protoc_insertion_point(field_set_allocated:api.Config.sendgrid_key)
}

// string stripe_key = 5;
inline void Config::clear_stripe_key() {
  stripe_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::stripe_key() const {
  // @@protoc_insertion_point(field_get:api.Config.stripe_key)
  return stripe_key_.GetNoArena();
}
inline void Config::set_stripe_key(const ::std::string& value) {
  
  stripe_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Config.stripe_key)
}
#if LANG_CXX11
inline void Config::set_stripe_key(::std::string&& value) {
  
  stripe_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Config.stripe_key)
}
#endif
inline void Config::set_stripe_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stripe_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Config.stripe_key)
}
inline void Config::set_stripe_key(const char* value, size_t size) {
  
  stripe_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Config.stripe_key)
}
inline ::std::string* Config::mutable_stripe_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Config.stripe_key)
  return stripe_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_stripe_key() {
  // @@protoc_insertion_point(field_release:api.Config.stripe_key)
  
  return stripe_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_stripe_key(::std::string* stripe_key) {
  if (stripe_key != NULL) {
    
  } else {
    
  }
  stripe_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stripe_key);
  // @@protoc_insertion_point(field_set_allocated:api.Config.stripe_key)
}

// string slack_key = 6;
inline void Config::clear_slack_key() {
  slack_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::slack_key() const {
  // @@protoc_insertion_point(field_get:api.Config.slack_key)
  return slack_key_.GetNoArena();
}
inline void Config::set_slack_key(const ::std::string& value) {
  
  slack_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Config.slack_key)
}
#if LANG_CXX11
inline void Config::set_slack_key(::std::string&& value) {
  
  slack_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Config.slack_key)
}
#endif
inline void Config::set_slack_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slack_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Config.slack_key)
}
inline void Config::set_slack_key(const char* value, size_t size) {
  
  slack_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Config.slack_key)
}
inline ::std::string* Config::mutable_slack_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Config.slack_key)
  return slack_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_slack_key() {
  // @@protoc_insertion_point(field_release:api.Config.slack_key)
  
  return slack_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_slack_key(::std::string* slack_key) {
  if (slack_key != NULL) {
    
  } else {
    
  }
  slack_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slack_key);
  // @@protoc_insertion_point(field_set_allocated:api.Config.slack_key)
}

// .api.CustomerIndex customer_index = 7;
inline void Config::clear_customer_index() {
  customer_index_ = 0;
}
inline ::api::CustomerIndex Config::customer_index() const {
  // @@protoc_insertion_point(field_get:api.Config.customer_index)
  return static_cast< ::api::CustomerIndex >(customer_index_);
}
inline void Config::set_customer_index(::api::CustomerIndex value) {
  
  customer_index_ = value;
  // @@protoc_insertion_point(field_set:api.Config.customer_index)
}

// .api.EmailAddress email_address = 8;
inline bool Config::has_email_address() const {
  return this != internal_default_instance() && email_address_ != NULL;
}
inline void Config::clear_email_address() {
  if (GetArenaNoVirtual() == NULL && email_address_ != NULL) {
    delete email_address_;
  }
  email_address_ = NULL;
}
inline const ::api::EmailAddress& Config::_internal_email_address() const {
  return *email_address_;
}
inline const ::api::EmailAddress& Config::email_address() const {
  const ::api::EmailAddress* p = email_address_;
  // @@protoc_insertion_point(field_get:api.Config.email_address)
  return p != NULL ? *p : *reinterpret_cast<const ::api::EmailAddress*>(
      &::api::_EmailAddress_default_instance_);
}
inline ::api::EmailAddress* Config::release_email_address() {
  // @@protoc_insertion_point(field_release:api.Config.email_address)
  
  ::api::EmailAddress* temp = email_address_;
  email_address_ = NULL;
  return temp;
}
inline ::api::EmailAddress* Config::mutable_email_address() {
  
  if (email_address_ == NULL) {
    auto* p = CreateMaybeMessage<::api::EmailAddress>(GetArenaNoVirtual());
    email_address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Config.email_address)
  return email_address_;
}
inline void Config::set_allocated_email_address(::api::EmailAddress* email_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete email_address_;
  }
  if (email_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email_address, submessage_arena);
    }
    
  } else {
    
  }
  email_address_ = email_address;
  // @@protoc_insertion_point(field_set_allocated:api.Config.email_address)
}

// .api.LogConfig log_config = 9;
inline bool Config::has_log_config() const {
  return this != internal_default_instance() && log_config_ != NULL;
}
inline void Config::clear_log_config() {
  if (GetArenaNoVirtual() == NULL && log_config_ != NULL) {
    delete log_config_;
  }
  log_config_ = NULL;
}
inline const ::api::LogConfig& Config::_internal_log_config() const {
  return *log_config_;
}
inline const ::api::LogConfig& Config::log_config() const {
  const ::api::LogConfig* p = log_config_;
  // @@protoc_insertion_point(field_get:api.Config.log_config)
  return p != NULL ? *p : *reinterpret_cast<const ::api::LogConfig*>(
      &::api::_LogConfig_default_instance_);
}
inline ::api::LogConfig* Config::release_log_config() {
  // @@protoc_insertion_point(field_release:api.Config.log_config)
  
  ::api::LogConfig* temp = log_config_;
  log_config_ = NULL;
  return temp;
}
inline ::api::LogConfig* Config::mutable_log_config() {
  
  if (log_config_ == NULL) {
    auto* p = CreateMaybeMessage<::api::LogConfig>(GetArenaNoVirtual());
    log_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Config.log_config)
  return log_config_;
}
inline void Config::set_allocated_log_config(::api::LogConfig* log_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_config_;
  }
  if (log_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log_config, submessage_arena);
    }
    
  } else {
    
  }
  log_config_ = log_config;
  // @@protoc_insertion_point(field_set_allocated:api.Config.log_config)
}

// -------------------------------------------------------------------

// LogConfig

// string username = 1;
inline void LogConfig::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogConfig::username() const {
  // @@protoc_insertion_point(field_get:api.LogConfig.username)
  return username_.GetNoArena();
}
inline void LogConfig::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogConfig.username)
}
#if LANG_CXX11
inline void LogConfig::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogConfig.username)
}
#endif
inline void LogConfig::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogConfig.username)
}
inline void LogConfig::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogConfig.username)
}
inline ::std::string* LogConfig::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:api.LogConfig.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogConfig::release_username() {
  // @@protoc_insertion_point(field_release:api.LogConfig.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogConfig::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:api.LogConfig.username)
}

// string channel = 2;
inline void LogConfig::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogConfig::channel() const {
  // @@protoc_insertion_point(field_get:api.LogConfig.channel)
  return channel_.GetNoArena();
}
inline void LogConfig::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogConfig.channel)
}
#if LANG_CXX11
inline void LogConfig::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogConfig.channel)
}
#endif
inline void LogConfig::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogConfig.channel)
}
inline void LogConfig::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogConfig.channel)
}
inline ::std::string* LogConfig::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:api.LogConfig.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogConfig::release_channel() {
  // @@protoc_insertion_point(field_release:api.LogConfig.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogConfig::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:api.LogConfig.channel)
}

// -------------------------------------------------------------------

// EmailAddress

// string name = 1;
inline void EmailAddress::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailAddress::name() const {
  // @@protoc_insertion_point(field_get:api.EmailAddress.name)
  return name_.GetNoArena();
}
inline void EmailAddress::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailAddress.name)
}
#if LANG_CXX11
inline void EmailAddress::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailAddress.name)
}
#endif
inline void EmailAddress::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailAddress.name)
}
inline void EmailAddress::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailAddress.name)
}
inline ::std::string* EmailAddress::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailAddress.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailAddress::release_name() {
  // @@protoc_insertion_point(field_release:api.EmailAddress.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailAddress::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.EmailAddress.name)
}

// string address = 2;
inline void EmailAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailAddress::address() const {
  // @@protoc_insertion_point(field_get:api.EmailAddress.address)
  return address_.GetNoArena();
}
inline void EmailAddress::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailAddress.address)
}
#if LANG_CXX11
inline void EmailAddress::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailAddress.address)
}
#endif
inline void EmailAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailAddress.address)
}
inline void EmailAddress::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailAddress.address)
}
inline ::std::string* EmailAddress::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailAddress::release_address() {
  // @@protoc_insertion_point(field_release:api.EmailAddress.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailAddress::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:api.EmailAddress.address)
}

// -------------------------------------------------------------------

// Email

// .api.EmailAddress from = 1;
inline bool Email::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline void Email::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) {
    delete from_;
  }
  from_ = NULL;
}
inline const ::api::EmailAddress& Email::_internal_from() const {
  return *from_;
}
inline const ::api::EmailAddress& Email::from() const {
  const ::api::EmailAddress* p = from_;
  // @@protoc_insertion_point(field_get:api.Email.from)
  return p != NULL ? *p : *reinterpret_cast<const ::api::EmailAddress*>(
      &::api::_EmailAddress_default_instance_);
}
inline ::api::EmailAddress* Email::release_from() {
  // @@protoc_insertion_point(field_release:api.Email.from)
  
  ::api::EmailAddress* temp = from_;
  from_ = NULL;
  return temp;
}
inline ::api::EmailAddress* Email::mutable_from() {
  
  if (from_ == NULL) {
    auto* p = CreateMaybeMessage<::api::EmailAddress>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Email.from)
  return from_;
}
inline void Email::set_allocated_from(::api::EmailAddress* from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete from_;
  }
  if (from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:api.Email.from)
}

// .api.EmailAddress to = 2;
inline bool Email::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline void Email::clear_to() {
  if (GetArenaNoVirtual() == NULL && to_ != NULL) {
    delete to_;
  }
  to_ = NULL;
}
inline const ::api::EmailAddress& Email::_internal_to() const {
  return *to_;
}
inline const ::api::EmailAddress& Email::to() const {
  const ::api::EmailAddress* p = to_;
  // @@protoc_insertion_point(field_get:api.Email.to)
  return p != NULL ? *p : *reinterpret_cast<const ::api::EmailAddress*>(
      &::api::_EmailAddress_default_instance_);
}
inline ::api::EmailAddress* Email::release_to() {
  // @@protoc_insertion_point(field_release:api.Email.to)
  
  ::api::EmailAddress* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::api::EmailAddress* Email::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::api::EmailAddress>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Email.to)
  return to_;
}
inline void Email::set_allocated_to(::api::EmailAddress* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_;
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.Email.to)
}

// string subject = 3;
inline void Email::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::subject() const {
  // @@protoc_insertion_point(field_get:api.Email.subject)
  return subject_.GetNoArena();
}
inline void Email::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.subject)
}
#if LANG_CXX11
inline void Email::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.subject)
}
#endif
inline void Email::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.subject)
}
inline void Email::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.subject)
}
inline ::std::string* Email::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_subject() {
  // @@protoc_insertion_point(field_release:api.Email.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:api.Email.subject)
}

// string plain_text = 4;
inline void Email::clear_plain_text() {
  plain_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::plain_text() const {
  // @@protoc_insertion_point(field_get:api.Email.plain_text)
  return plain_text_.GetNoArena();
}
inline void Email::set_plain_text(const ::std::string& value) {
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.plain_text)
}
#if LANG_CXX11
inline void Email::set_plain_text(::std::string&& value) {
  
  plain_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.plain_text)
}
#endif
inline void Email::set_plain_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.plain_text)
}
inline void Email::set_plain_text(const char* value, size_t size) {
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.plain_text)
}
inline ::std::string* Email::mutable_plain_text() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.plain_text)
  return plain_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_plain_text() {
  // @@protoc_insertion_point(field_release:api.Email.plain_text)
  
  return plain_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_plain_text(::std::string* plain_text) {
  if (plain_text != NULL) {
    
  } else {
    
  }
  plain_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plain_text);
  // @@protoc_insertion_point(field_set_allocated:api.Email.plain_text)
}

// string html = 5;
inline void Email::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::html() const {
  // @@protoc_insertion_point(field_get:api.Email.html)
  return html_.GetNoArena();
}
inline void Email::set_html(const ::std::string& value) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.html)
}
#if LANG_CXX11
inline void Email::set_html(::std::string&& value) {
  
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.html)
}
#endif
inline void Email::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.html)
}
inline void Email::set_html(const char* value, size_t size) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.html)
}
inline ::std::string* Email::mutable_html() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_html() {
  // @@protoc_insertion_point(field_release:api.Email.html)
  
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    
  } else {
    
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:api.Email.html)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::api::CustomerIndex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::CustomerIndex>() {
  return ::api::CustomerIndex_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
