// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[32];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class AppMetadata;
class AppMetadataDefaultTypeInternal;
extern AppMetadataDefaultTypeInternal _AppMetadata_default_instance_;
class AppMetadata_MetadataEntry_DoNotUse;
class AppMetadata_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AppMetadata_MetadataEntry_DoNotUseDefaultTypeInternal _AppMetadata_MetadataEntry_DoNotUse_default_instance_;
class Auth;
class AuthDefaultTypeInternal;
extern AuthDefaultTypeInternal _Auth_default_instance_;
class Bytes;
class BytesDefaultTypeInternal;
extern BytesDefaultTypeInternal _Bytes_default_instance_;
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class Email;
class EmailDefaultTypeInternal;
extern EmailDefaultTypeInternal _Email_default_instance_;
class EmailBlast;
class EmailBlastDefaultTypeInternal;
extern EmailBlastDefaultTypeInternal _EmailBlast_default_instance_;
class EmailBlastRequest;
class EmailBlastRequestDefaultTypeInternal;
extern EmailBlastRequestDefaultTypeInternal _EmailBlastRequest_default_instance_;
class EmailBlast_NameAddressEntry_DoNotUse;
class EmailBlast_NameAddressEntry_DoNotUseDefaultTypeInternal;
extern EmailBlast_NameAddressEntry_DoNotUseDefaultTypeInternal _EmailBlast_NameAddressEntry_DoNotUse_default_instance_;
class EmailRequest;
class EmailRequestDefaultTypeInternal;
extern EmailRequestDefaultTypeInternal _EmailRequest_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class HTTPRequest;
class HTTPRequestDefaultTypeInternal;
extern HTTPRequestDefaultTypeInternal _HTTPRequest_default_instance_;
class HTTPRequest_CookiesEntry_DoNotUse;
class HTTPRequest_CookiesEntry_DoNotUseDefaultTypeInternal;
extern HTTPRequest_CookiesEntry_DoNotUseDefaultTypeInternal _HTTPRequest_CookiesEntry_DoNotUse_default_instance_;
class HTTPRequest_FormEntry_DoNotUse;
class HTTPRequest_FormEntry_DoNotUseDefaultTypeInternal;
extern HTTPRequest_FormEntry_DoNotUseDefaultTypeInternal _HTTPRequest_FormEntry_DoNotUse_default_instance_;
class HTTPRequest_HeadersEntry_DoNotUse;
class HTTPRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern HTTPRequest_HeadersEntry_DoNotUseDefaultTypeInternal _HTTPRequest_HeadersEntry_DoNotUse_default_instance_;
class Identifier;
class IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class JSONWebKeys;
class JSONWebKeysDefaultTypeInternal;
extern JSONWebKeysDefaultTypeInternal _JSONWebKeys_default_instance_;
class Jwks;
class JwksDefaultTypeInternal;
extern JwksDefaultTypeInternal _Jwks_default_instance_;
class ManagementToken;
class ManagementTokenDefaultTypeInternal;
extern ManagementTokenDefaultTypeInternal _ManagementToken_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class SMS;
class SMSDefaultTypeInternal;
extern SMSDefaultTypeInternal _SMS_default_instance_;
class SMSBlast;
class SMSBlastDefaultTypeInternal;
extern SMSBlastDefaultTypeInternal _SMSBlast_default_instance_;
class SubscribeRequest;
class SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class Template;
class TemplateDefaultTypeInternal;
extern TemplateDefaultTypeInternal _Template_default_instance_;
class UnSubscribeRequest;
class UnSubscribeRequestDefaultTypeInternal;
extern UnSubscribeRequestDefaultTypeInternal _UnSubscribeRequest_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserByEmailRequest;
class UserByEmailRequestDefaultTypeInternal;
extern UserByEmailRequestDefaultTypeInternal _UserByEmailRequest_default_instance_;
class UserMetadata;
class UserMetadataDefaultTypeInternal;
extern UserMetadataDefaultTypeInternal _UserMetadata_default_instance_;
class UserMetadata_MetadataEntry_DoNotUse;
class UserMetadata_MetadataEntry_DoNotUseDefaultTypeInternal;
extern UserMetadata_MetadataEntry_DoNotUseDefaultTypeInternal _UserMetadata_MetadataEntry_DoNotUse_default_instance_;
class UserRequest;
class UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::AppMetadata* Arena::CreateMaybeMessage<::api::AppMetadata>(Arena*);
template<> ::api::AppMetadata_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::api::AppMetadata_MetadataEntry_DoNotUse>(Arena*);
template<> ::api::Auth* Arena::CreateMaybeMessage<::api::Auth>(Arena*);
template<> ::api::Bytes* Arena::CreateMaybeMessage<::api::Bytes>(Arena*);
template<> ::api::Call* Arena::CreateMaybeMessage<::api::Call>(Arena*);
template<> ::api::Card* Arena::CreateMaybeMessage<::api::Card>(Arena*);
template<> ::api::Email* Arena::CreateMaybeMessage<::api::Email>(Arena*);
template<> ::api::EmailBlast* Arena::CreateMaybeMessage<::api::EmailBlast>(Arena*);
template<> ::api::EmailBlastRequest* Arena::CreateMaybeMessage<::api::EmailBlastRequest>(Arena*);
template<> ::api::EmailBlast_NameAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::api::EmailBlast_NameAddressEntry_DoNotUse>(Arena*);
template<> ::api::EmailRequest* Arena::CreateMaybeMessage<::api::EmailRequest>(Arena*);
template<> ::api::Empty* Arena::CreateMaybeMessage<::api::Empty>(Arena*);
template<> ::api::HTTPRequest* Arena::CreateMaybeMessage<::api::HTTPRequest>(Arena*);
template<> ::api::HTTPRequest_CookiesEntry_DoNotUse* Arena::CreateMaybeMessage<::api::HTTPRequest_CookiesEntry_DoNotUse>(Arena*);
template<> ::api::HTTPRequest_FormEntry_DoNotUse* Arena::CreateMaybeMessage<::api::HTTPRequest_FormEntry_DoNotUse>(Arena*);
template<> ::api::HTTPRequest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::api::HTTPRequest_HeadersEntry_DoNotUse>(Arena*);
template<> ::api::Identifier* Arena::CreateMaybeMessage<::api::Identifier>(Arena*);
template<> ::api::Identity* Arena::CreateMaybeMessage<::api::Identity>(Arena*);
template<> ::api::JSONWebKeys* Arena::CreateMaybeMessage<::api::JSONWebKeys>(Arena*);
template<> ::api::Jwks* Arena::CreateMaybeMessage<::api::Jwks>(Arena*);
template<> ::api::ManagementToken* Arena::CreateMaybeMessage<::api::ManagementToken>(Arena*);
template<> ::api::Message* Arena::CreateMaybeMessage<::api::Message>(Arena*);
template<> ::api::SMS* Arena::CreateMaybeMessage<::api::SMS>(Arena*);
template<> ::api::SMSBlast* Arena::CreateMaybeMessage<::api::SMSBlast>(Arena*);
template<> ::api::SubscribeRequest* Arena::CreateMaybeMessage<::api::SubscribeRequest>(Arena*);
template<> ::api::Template* Arena::CreateMaybeMessage<::api::Template>(Arena*);
template<> ::api::UnSubscribeRequest* Arena::CreateMaybeMessage<::api::UnSubscribeRequest>(Arena*);
template<> ::api::User* Arena::CreateMaybeMessage<::api::User>(Arena*);
template<> ::api::UserByEmailRequest* Arena::CreateMaybeMessage<::api::UserByEmailRequest>(Arena*);
template<> ::api::UserMetadata* Arena::CreateMaybeMessage<::api::UserMetadata>(Arena*);
template<> ::api::UserMetadata_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::api::UserMetadata_MetadataEntry_DoNotUse>(Arena*);
template<> ::api::UserRequest* Arena::CreateMaybeMessage<::api::UserRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

enum Scope {
  OPENID = 0,
  PROFILE = 1,
  EMAIL = 2,
  READ_USERS = 3,
  READ_USER_IDP_TOKENS = 4,
  CREATE_USERS = 5,
  READ_STATS = 6,
  READ_EMAIL_TEMPLATES = 7,
  UPDATE_EMAIL_TEMPLATES = 8,
  CREATE_EMAIL_TEMPLATES = 9,
  READ_RULES = 10,
  UPDATE_RULES = 11,
  CREATE_RULES = 12,
  DELETE_RULES = 13,
  READ_ROLES = 14,
  UPDATE_ROLES = 15,
  CREATE_ROLES = 16,
  DELETE_ROLES = 17,
  READ_LOGS = 18,
  Scope_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Scope_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Scope_IsValid(int value);
const Scope Scope_MIN = OPENID;
const Scope Scope_MAX = READ_LOGS;
const int Scope_ARRAYSIZE = Scope_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scope_descriptor();
inline const ::std::string& Scope_Name(Scope value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scope_descriptor(), value);
}
inline bool Scope_Parse(
    const ::std::string& name, Scope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scope>(
    Scope_descriptor(), name, value);
}
enum HTTPMethod {
  GET = 0,
  POST = 1,
  HTTPMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HTTPMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HTTPMethod_IsValid(int value);
const HTTPMethod HTTPMethod_MIN = GET;
const HTTPMethod HTTPMethod_MAX = POST;
const int HTTPMethod_ARRAYSIZE = HTTPMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* HTTPMethod_descriptor();
inline const ::std::string& HTTPMethod_Name(HTTPMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    HTTPMethod_descriptor(), value);
}
inline bool HTTPMethod_Parse(
    const ::std::string& name, HTTPMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HTTPMethod>(
    HTTPMethod_descriptor(), name, value);
}
// ===================================================================

class SubscribeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SubscribeRequest) */ {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SubscribeRequest* other);
  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const final {
    return CreateMaybeMessage<SubscribeRequest>(NULL);
  }

  SubscribeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // .api.Card card = 3;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 3;
  private:
  const ::api::Card& _internal_card() const;
  public:
  const ::api::Card& card() const;
  ::api::Card* release_card();
  ::api::Card* mutable_card();
  void set_allocated_card(::api::Card* card);

  // @@protoc_insertion_point(class_scope:api.SubscribeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::api::Card* card_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnSubscribeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UnSubscribeRequest) */ {
 public:
  UnSubscribeRequest();
  virtual ~UnSubscribeRequest();

  UnSubscribeRequest(const UnSubscribeRequest& from);

  inline UnSubscribeRequest& operator=(const UnSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnSubscribeRequest(UnSubscribeRequest&& from) noexcept
    : UnSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline UnSubscribeRequest& operator=(UnSubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnSubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const UnSubscribeRequest*>(
               &_UnSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UnSubscribeRequest* other);
  friend void swap(UnSubscribeRequest& a, UnSubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnSubscribeRequest* New() const final {
    return CreateMaybeMessage<UnSubscribeRequest>(NULL);
  }

  UnSubscribeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnSubscribeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnSubscribeRequest& from);
  void MergeFrom(const UnSubscribeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnSubscribeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // @@protoc_insertion_point(class_scope:api.UnSubscribeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(Card&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Card* other);
  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return CreateMaybeMessage<Card>(NULL);
  }

  Card* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // string exp_month = 2;
  void clear_exp_month();
  static const int kExpMonthFieldNumber = 2;
  const ::std::string& exp_month() const;
  void set_exp_month(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_month(::std::string&& value);
  #endif
  void set_exp_month(const char* value);
  void set_exp_month(const char* value, size_t size);
  ::std::string* mutable_exp_month();
  ::std::string* release_exp_month();
  void set_allocated_exp_month(::std::string* exp_month);

  // string exp_year = 3;
  void clear_exp_year();
  static const int kExpYearFieldNumber = 3;
  const ::std::string& exp_year() const;
  void set_exp_year(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_year(::std::string&& value);
  #endif
  void set_exp_year(const char* value);
  void set_exp_year(const char* value, size_t size);
  ::std::string* mutable_exp_year();
  ::std::string* release_exp_year();
  void set_allocated_exp_year(::std::string* exp_year);

  // string cvc = 4;
  void clear_cvc();
  static const int kCvcFieldNumber = 4;
  const ::std::string& cvc() const;
  void set_cvc(const ::std::string& value);
  #if LANG_CXX11
  void set_cvc(::std::string&& value);
  #endif
  void set_cvc(const char* value);
  void set_cvc(const char* value, size_t size);
  ::std::string* mutable_cvc();
  ::std::string* release_cvc();
  void set_allocated_cvc(::std::string* cvc);

  // @@protoc_insertion_point(class_scope:api.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  ::google::protobuf::internal::ArenaStringPtr exp_month_;
  ::google::protobuf::internal::ArenaStringPtr exp_year_;
  ::google::protobuf::internal::ArenaStringPtr cvc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManagementToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ManagementToken) */ {
 public:
  ManagementToken();
  virtual ~ManagementToken();

  ManagementToken(const ManagementToken& from);

  inline ManagementToken& operator=(const ManagementToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManagementToken(ManagementToken&& from) noexcept
    : ManagementToken() {
    *this = ::std::move(from);
  }

  inline ManagementToken& operator=(ManagementToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagementToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagementToken* internal_default_instance() {
    return reinterpret_cast<const ManagementToken*>(
               &_ManagementToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ManagementToken* other);
  friend void swap(ManagementToken& a, ManagementToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManagementToken* New() const final {
    return CreateMaybeMessage<ManagementToken>(NULL);
  }

  ManagementToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ManagementToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ManagementToken& from);
  void MergeFrom(const ManagementToken& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManagementToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:api.ManagementToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserRequest) */ {
 public:
  UserRequest();
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UserRequest* other);
  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRequest* New() const final {
    return CreateMaybeMessage<UserRequest>(NULL);
  }

  UserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.ManagementToken string = 1;
  bool has_string() const;
  void clear_string();
  static const int kStringFieldNumber = 1;
  private:
  const ::api::ManagementToken& _internal_string() const;
  public:
  const ::api::ManagementToken& string() const;
  ::api::ManagementToken* release_string();
  ::api::ManagementToken* mutable_string();
  void set_allocated_string(::api::ManagementToken* string);

  // .api.User user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  private:
  const ::api::User& _internal_user() const;
  public:
  const ::api::User& user() const;
  ::api::User* release_user();
  ::api::User* mutable_user();
  void set_allocated_user(::api::User* user);

  // @@protoc_insertion_point(class_scope:api.UserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::ManagementToken* string_;
  ::api::User* user_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserByEmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserByEmailRequest) */ {
 public:
  UserByEmailRequest();
  virtual ~UserByEmailRequest();

  UserByEmailRequest(const UserByEmailRequest& from);

  inline UserByEmailRequest& operator=(const UserByEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserByEmailRequest(UserByEmailRequest&& from) noexcept
    : UserByEmailRequest() {
    *this = ::std::move(from);
  }

  inline UserByEmailRequest& operator=(UserByEmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserByEmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserByEmailRequest* internal_default_instance() {
    return reinterpret_cast<const UserByEmailRequest*>(
               &_UserByEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UserByEmailRequest* other);
  friend void swap(UserByEmailRequest& a, UserByEmailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserByEmailRequest* New() const final {
    return CreateMaybeMessage<UserByEmailRequest>(NULL);
  }

  UserByEmailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserByEmailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserByEmailRequest& from);
  void MergeFrom(const UserByEmailRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserByEmailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 2;
  void clear_email();
  static const int kEmailFieldNumber = 2;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // .api.ManagementToken token = 1;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  private:
  const ::api::ManagementToken& _internal_token() const;
  public:
  const ::api::ManagementToken& token() const;
  ::api::ManagementToken* release_token();
  ::api::ManagementToken* mutable_token();
  void set_allocated_token(::api::ManagementToken* token);

  // @@protoc_insertion_point(class_scope:api.UserByEmailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::api::ManagementToken* token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Identifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Identifier) */ {
 public:
  Identifier();
  virtual ~Identifier();

  Identifier(const Identifier& from);

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Identifier* other);
  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const final {
    return CreateMaybeMessage<Identifier>(NULL);
  }

  Identifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:api.Identifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMS) */ {
 public:
  SMS();
  virtual ~SMS();

  SMS(const SMS& from);

  inline SMS& operator=(const SMS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMS(SMS&& from) noexcept
    : SMS() {
    *this = ::std::move(from);
  }

  inline SMS& operator=(SMS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMS* internal_default_instance() {
    return reinterpret_cast<const SMS*>(
               &_SMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SMS* other);
  friend void swap(SMS& a, SMS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMS* New() const final {
    return CreateMaybeMessage<SMS>(NULL);
  }

  SMS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMS& from);
  void MergeFrom(const SMS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string mediaURL = 4;
  void clear_mediaurl();
  static const int kMediaURLFieldNumber = 4;
  const ::std::string& mediaurl() const;
  void set_mediaurl(const ::std::string& value);
  #if LANG_CXX11
  void set_mediaurl(::std::string&& value);
  #endif
  void set_mediaurl(const char* value);
  void set_mediaurl(const char* value, size_t size);
  ::std::string* mutable_mediaurl();
  ::std::string* release_mediaurl();
  void set_allocated_mediaurl(::std::string* mediaurl);

  // string callback = 5;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  const ::std::string& callback() const;
  void set_callback(const ::std::string& value);
  #if LANG_CXX11
  void set_callback(::std::string&& value);
  #endif
  void set_callback(const char* value);
  void set_callback(const char* value, size_t size);
  ::std::string* mutable_callback();
  ::std::string* release_callback();
  void set_allocated_callback(::std::string* callback);

  // string app = 6;
  void clear_app();
  static const int kAppFieldNumber = 6;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // .api.Message message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  private:
  const ::api::Message& _internal_message() const;
  public:
  const ::api::Message& message() const;
  ::api::Message* release_message();
  ::api::Message* mutable_message();
  void set_allocated_message(::api::Message* message);

  // @@protoc_insertion_point(class_scope:api.SMS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr mediaurl_;
  ::google::protobuf::internal::ArenaStringPtr callback_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  ::api::Message* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMSBlast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMSBlast) */ {
 public:
  SMSBlast();
  virtual ~SMSBlast();

  SMSBlast(const SMSBlast& from);

  inline SMSBlast& operator=(const SMSBlast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMSBlast(SMSBlast&& from) noexcept
    : SMSBlast() {
    *this = ::std::move(from);
  }

  inline SMSBlast& operator=(SMSBlast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSBlast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSBlast* internal_default_instance() {
    return reinterpret_cast<const SMSBlast*>(
               &_SMSBlast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SMSBlast* other);
  friend void swap(SMSBlast& a, SMSBlast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMSBlast* New() const final {
    return CreateMaybeMessage<SMSBlast>(NULL);
  }

  SMSBlast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMSBlast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMSBlast& from);
  void MergeFrom(const SMSBlast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSBlast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string mediaURL = 4;
  void clear_mediaurl();
  static const int kMediaURLFieldNumber = 4;
  const ::std::string& mediaurl() const;
  void set_mediaurl(const ::std::string& value);
  #if LANG_CXX11
  void set_mediaurl(::std::string&& value);
  #endif
  void set_mediaurl(const char* value);
  void set_mediaurl(const char* value, size_t size);
  ::std::string* mutable_mediaurl();
  ::std::string* release_mediaurl();
  void set_allocated_mediaurl(::std::string* mediaurl);

  // string callback = 5;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  const ::std::string& callback() const;
  void set_callback(const ::std::string& value);
  #if LANG_CXX11
  void set_callback(::std::string&& value);
  #endif
  void set_callback(const char* value);
  void set_callback(const char* value, size_t size);
  ::std::string* mutable_callback();
  ::std::string* release_callback();
  void set_allocated_callback(::std::string* callback);

  // string app = 6;
  void clear_app();
  static const int kAppFieldNumber = 6;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // .api.Message message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  private:
  const ::api::Message& _internal_message() const;
  public:
  const ::api::Message& message() const;
  ::api::Message* release_message();
  ::api::Message* mutable_message();
  void set_allocated_message(::api::Message* message);

  // @@protoc_insertion_point(class_scope:api.SMSBlast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr mediaurl_;
  ::google::protobuf::internal::ArenaStringPtr callback_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  ::api::Message* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailRequest) */ {
 public:
  EmailRequest();
  virtual ~EmailRequest();

  EmailRequest(const EmailRequest& from);

  inline EmailRequest& operator=(const EmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailRequest(EmailRequest&& from) noexcept
    : EmailRequest() {
    *this = ::std::move(from);
  }

  inline EmailRequest& operator=(EmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailRequest* internal_default_instance() {
    return reinterpret_cast<const EmailRequest*>(
               &_EmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(EmailRequest* other);
  friend void swap(EmailRequest& a, EmailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailRequest* New() const final {
    return CreateMaybeMessage<EmailRequest>(NULL);
  }

  EmailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailRequest& from);
  void MergeFrom(const EmailRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_name = 1;
  void clear_from_name();
  static const int kFromNameFieldNumber = 1;
  const ::std::string& from_name() const;
  void set_from_name(const ::std::string& value);
  #if LANG_CXX11
  void set_from_name(::std::string&& value);
  #endif
  void set_from_name(const char* value);
  void set_from_name(const char* value, size_t size);
  ::std::string* mutable_from_name();
  ::std::string* release_from_name();
  void set_allocated_from_name(::std::string* from_name);

  // string from_email = 2;
  void clear_from_email();
  static const int kFromEmailFieldNumber = 2;
  const ::std::string& from_email() const;
  void set_from_email(const ::std::string& value);
  #if LANG_CXX11
  void set_from_email(::std::string&& value);
  #endif
  void set_from_email(const char* value);
  void set_from_email(const char* value, size_t size);
  ::std::string* mutable_from_email();
  ::std::string* release_from_email();
  void set_allocated_from_email(::std::string* from_email);

  // .api.Email email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  private:
  const ::api::Email& _internal_email() const;
  public:
  const ::api::Email& email() const;
  ::api::Email* release_email();
  ::api::Email* mutable_email();
  void set_allocated_email(::api::Email* email);

  // @@protoc_insertion_point(class_scope:api.EmailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_name_;
  ::google::protobuf::internal::ArenaStringPtr from_email_;
  ::api::Email* email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailBlastRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailBlastRequest) */ {
 public:
  EmailBlastRequest();
  virtual ~EmailBlastRequest();

  EmailBlastRequest(const EmailBlastRequest& from);

  inline EmailBlastRequest& operator=(const EmailBlastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailBlastRequest(EmailBlastRequest&& from) noexcept
    : EmailBlastRequest() {
    *this = ::std::move(from);
  }

  inline EmailBlastRequest& operator=(EmailBlastRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailBlastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailBlastRequest* internal_default_instance() {
    return reinterpret_cast<const EmailBlastRequest*>(
               &_EmailBlastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(EmailBlastRequest* other);
  friend void swap(EmailBlastRequest& a, EmailBlastRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailBlastRequest* New() const final {
    return CreateMaybeMessage<EmailBlastRequest>(NULL);
  }

  EmailBlastRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailBlastRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailBlastRequest& from);
  void MergeFrom(const EmailBlastRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailBlastRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_name = 1;
  void clear_from_name();
  static const int kFromNameFieldNumber = 1;
  const ::std::string& from_name() const;
  void set_from_name(const ::std::string& value);
  #if LANG_CXX11
  void set_from_name(::std::string&& value);
  #endif
  void set_from_name(const char* value);
  void set_from_name(const char* value, size_t size);
  ::std::string* mutable_from_name();
  ::std::string* release_from_name();
  void set_allocated_from_name(::std::string* from_name);

  // string from_email = 2;
  void clear_from_email();
  static const int kFromEmailFieldNumber = 2;
  const ::std::string& from_email() const;
  void set_from_email(const ::std::string& value);
  #if LANG_CXX11
  void set_from_email(::std::string&& value);
  #endif
  void set_from_email(const char* value);
  void set_from_email(const char* value, size_t size);
  ::std::string* mutable_from_email();
  ::std::string* release_from_email();
  void set_allocated_from_email(::std::string* from_email);

  // .api.EmailBlast blast = 3;
  bool has_blast() const;
  void clear_blast();
  static const int kBlastFieldNumber = 3;
  private:
  const ::api::EmailBlast& _internal_blast() const;
  public:
  const ::api::EmailBlast& blast() const;
  ::api::EmailBlast* release_blast();
  ::api::EmailBlast* mutable_blast();
  void set_allocated_blast(::api::EmailBlast* blast);

  // @@protoc_insertion_point(class_scope:api.EmailBlastRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_name_;
  ::google::protobuf::internal::ArenaStringPtr from_email_;
  ::api::EmailBlast* blast_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailBlast_NameAddressEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<EmailBlast_NameAddressEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<EmailBlast_NameAddressEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  EmailBlast_NameAddressEntry_DoNotUse();
  EmailBlast_NameAddressEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const EmailBlast_NameAddressEntry_DoNotUse& other);
  static const EmailBlast_NameAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EmailBlast_NameAddressEntry_DoNotUse*>(&_EmailBlast_NameAddressEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class EmailBlast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailBlast) */ {
 public:
  EmailBlast();
  virtual ~EmailBlast();

  EmailBlast(const EmailBlast& from);

  inline EmailBlast& operator=(const EmailBlast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailBlast(EmailBlast&& from) noexcept
    : EmailBlast() {
    *this = ::std::move(from);
  }

  inline EmailBlast& operator=(EmailBlast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailBlast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailBlast* internal_default_instance() {
    return reinterpret_cast<const EmailBlast*>(
               &_EmailBlast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(EmailBlast* other);
  friend void swap(EmailBlast& a, EmailBlast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailBlast* New() const final {
    return CreateMaybeMessage<EmailBlast>(NULL);
  }

  EmailBlast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailBlast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailBlast& from);
  void MergeFrom(const EmailBlast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailBlast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> name_address = 1;
  int name_address_size() const;
  void clear_name_address();
  static const int kNameAddressFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      name_address() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_name_address();

  // string subject = 2;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string plain = 3;
  void clear_plain();
  static const int kPlainFieldNumber = 3;
  const ::std::string& plain() const;
  void set_plain(const ::std::string& value);
  #if LANG_CXX11
  void set_plain(::std::string&& value);
  #endif
  void set_plain(const char* value);
  void set_plain(const char* value, size_t size);
  ::std::string* mutable_plain();
  ::std::string* release_plain();
  void set_allocated_plain(::std::string* plain);

  // string html = 4;
  void clear_html();
  static const int kHtmlFieldNumber = 4;
  const ::std::string& html() const;
  void set_html(const ::std::string& value);
  #if LANG_CXX11
  void set_html(::std::string&& value);
  #endif
  void set_html(const char* value);
  void set_html(const char* value, size_t size);
  ::std::string* mutable_html();
  ::std::string* release_html();
  void set_allocated_html(::std::string* html);

  // @@protoc_insertion_point(class_scope:api.EmailBlast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      EmailBlast_NameAddressEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > name_address_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr plain_;
  ::google::protobuf::internal::ArenaStringPtr html_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Email : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Email) */ {
 public:
  Email();
  virtual ~Email();

  Email(const Email& from);

  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Email(Email&& from) noexcept
    : Email() {
    *this = ::std::move(from);
  }

  inline Email& operator=(Email&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Email& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Email* internal_default_instance() {
    return reinterpret_cast<const Email*>(
               &_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Email* other);
  friend void swap(Email& a, Email& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Email* New() const final {
    return CreateMaybeMessage<Email>(NULL);
  }

  Email* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Email>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Email* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string subject = 3;
  void clear_subject();
  static const int kSubjectFieldNumber = 3;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string plain = 4;
  void clear_plain();
  static const int kPlainFieldNumber = 4;
  const ::std::string& plain() const;
  void set_plain(const ::std::string& value);
  #if LANG_CXX11
  void set_plain(::std::string&& value);
  #endif
  void set_plain(const char* value);
  void set_plain(const char* value, size_t size);
  ::std::string* mutable_plain();
  ::std::string* release_plain();
  void set_allocated_plain(::std::string* plain);

  // string html = 5;
  void clear_html();
  static const int kHtmlFieldNumber = 5;
  const ::std::string& html() const;
  void set_html(const ::std::string& value);
  #if LANG_CXX11
  void set_html(::std::string&& value);
  #endif
  void set_html(const char* value);
  void set_html(const char* value, size_t size);
  ::std::string* mutable_html();
  ::std::string* release_html();
  void set_allocated_html(::std::string* html);

  // @@protoc_insertion_point(class_scope:api.Email)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr plain_;
  ::google::protobuf::internal::ArenaStringPtr html_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const final {
    return CreateMaybeMessage<Call>(NULL);
  }

  Call* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Call>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string app = 3;
  void clear_app();
  static const int kAppFieldNumber = 3;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // @@protoc_insertion_point(class_scope:api.Call)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:api.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string multifactor = 15;
  int multifactor_size() const;
  void clear_multifactor();
  static const int kMultifactorFieldNumber = 15;
  const ::std::string& multifactor(int index) const;
  ::std::string* mutable_multifactor(int index);
  void set_multifactor(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_multifactor(int index, ::std::string&& value);
  #endif
  void set_multifactor(int index, const char* value);
  void set_multifactor(int index, const char* value, size_t size);
  ::std::string* add_multifactor();
  void add_multifactor(const ::std::string& value);
  #if LANG_CXX11
  void add_multifactor(::std::string&& value);
  #endif
  void add_multifactor(const char* value);
  void add_multifactor(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& multifactor() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_multifactor();

  // repeated .api.Identity identities = 20;
  int identities_size() const;
  void clear_identities();
  static const int kIdentitiesFieldNumber = 20;
  ::api::Identity* mutable_identities(int index);
  ::google::protobuf::RepeatedPtrField< ::api::Identity >*
      mutable_identities();
  const ::api::Identity& identities(int index) const;
  ::api::Identity* add_identities();
  const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
      identities() const;

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string given_name = 3;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 3;
  const ::std::string& given_name() const;
  void set_given_name(const ::std::string& value);
  #if LANG_CXX11
  void set_given_name(::std::string&& value);
  #endif
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  ::std::string* mutable_given_name();
  ::std::string* release_given_name();
  void set_allocated_given_name(::std::string* given_name);

  // string family_name = 4;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 4;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  #if LANG_CXX11
  void set_family_name(::std::string&& value);
  #endif
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // string gender = 5;
  void clear_gender();
  static const int kGenderFieldNumber = 5;
  const ::std::string& gender() const;
  void set_gender(const ::std::string& value);
  #if LANG_CXX11
  void set_gender(::std::string&& value);
  #endif
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  ::std::string* mutable_gender();
  ::std::string* release_gender();
  void set_allocated_gender(::std::string* gender);

  // string birthdate = 6;
  void clear_birthdate();
  static const int kBirthdateFieldNumber = 6;
  const ::std::string& birthdate() const;
  void set_birthdate(const ::std::string& value);
  #if LANG_CXX11
  void set_birthdate(::std::string&& value);
  #endif
  void set_birthdate(const char* value);
  void set_birthdate(const char* value, size_t size);
  ::std::string* mutable_birthdate();
  ::std::string* release_birthdate();
  void set_allocated_birthdate(::std::string* birthdate);

  // string email = 7;
  void clear_email();
  static const int kEmailFieldNumber = 7;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string phone_number = 8;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 8;
  const ::std::string& phone_number() const;
  void set_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(::std::string&& value);
  #endif
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  ::std::string* mutable_phone_number();
  ::std::string* release_phone_number();
  void set_allocated_phone_number(::std::string* phone_number);

  // string picture = 9;
  void clear_picture();
  static const int kPictureFieldNumber = 9;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  #if LANG_CXX11
  void set_picture(::std::string&& value);
  #endif
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // string last_ip = 12;
  void clear_last_ip();
  static const int kLastIpFieldNumber = 12;
  const ::std::string& last_ip() const;
  void set_last_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_last_ip(::std::string&& value);
  #endif
  void set_last_ip(const char* value);
  void set_last_ip(const char* value, size_t size);
  ::std::string* mutable_last_ip();
  ::std::string* release_last_ip();
  void set_allocated_last_ip(::std::string* last_ip);

  // string nickname = 14;
  void clear_nickname();
  static const int kNicknameFieldNumber = 14;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string created_at = 17;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 17;
  const ::std::string& created_at() const;
  void set_created_at(const ::std::string& value);
  #if LANG_CXX11
  void set_created_at(::std::string&& value);
  #endif
  void set_created_at(const char* value);
  void set_created_at(const char* value, size_t size);
  ::std::string* mutable_created_at();
  ::std::string* release_created_at();
  void set_allocated_created_at(::std::string* created_at);

  // string updated_at = 18;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 18;
  const ::std::string& updated_at() const;
  void set_updated_at(const ::std::string& value);
  #if LANG_CXX11
  void set_updated_at(::std::string&& value);
  #endif
  void set_updated_at(const char* value);
  void set_updated_at(const char* value, size_t size);
  ::std::string* mutable_updated_at();
  ::std::string* release_updated_at();
  void set_allocated_updated_at(::std::string* updated_at);

  // .api.UserMetadata user_metadata = 10;
  bool has_user_metadata() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 10;
  private:
  const ::api::UserMetadata& _internal_user_metadata() const;
  public:
  const ::api::UserMetadata& user_metadata() const;
  ::api::UserMetadata* release_user_metadata();
  ::api::UserMetadata* mutable_user_metadata();
  void set_allocated_user_metadata(::api::UserMetadata* user_metadata);

  // .api.AppMetadata app_metadata = 11;
  bool has_app_metadata() const;
  void clear_app_metadata();
  static const int kAppMetadataFieldNumber = 11;
  private:
  const ::api::AppMetadata& _internal_app_metadata() const;
  public:
  const ::api::AppMetadata& app_metadata() const;
  ::api::AppMetadata* release_app_metadata();
  ::api::AppMetadata* mutable_app_metadata();
  void set_allocated_app_metadata(::api::AppMetadata* app_metadata);

  // bool blocked = 13;
  void clear_blocked();
  static const int kBlockedFieldNumber = 13;
  bool blocked() const;
  void set_blocked(bool value);

  // bool phone_verified = 19;
  void clear_phone_verified();
  static const int kPhoneVerifiedFieldNumber = 19;
  bool phone_verified() const;
  void set_phone_verified(bool value);

  // @@protoc_insertion_point(class_scope:api.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> multifactor_;
  ::google::protobuf::RepeatedPtrField< ::api::Identity > identities_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr given_name_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  ::google::protobuf::internal::ArenaStringPtr gender_;
  ::google::protobuf::internal::ArenaStringPtr birthdate_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr phone_number_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::google::protobuf::internal::ArenaStringPtr last_ip_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr created_at_;
  ::google::protobuf::internal::ArenaStringPtr updated_at_;
  ::api::UserMetadata* user_metadata_;
  ::api::AppMetadata* app_metadata_;
  bool blocked_;
  bool phone_verified_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Identity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Identity* other);
  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(NULL);
  }

  Identity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string connection = 1;
  void clear_connection();
  static const int kConnectionFieldNumber = 1;
  const ::std::string& connection() const;
  void set_connection(const ::std::string& value);
  #if LANG_CXX11
  void set_connection(::std::string&& value);
  #endif
  void set_connection(const char* value);
  void set_connection(const char* value, size_t size);
  ::std::string* mutable_connection();
  ::std::string* release_connection();
  void set_allocated_connection(::std::string* connection);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string provider = 3;
  void clear_provider();
  static const int kProviderFieldNumber = 3;
  const ::std::string& provider() const;
  void set_provider(const ::std::string& value);
  #if LANG_CXX11
  void set_provider(::std::string&& value);
  #endif
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  ::std::string* mutable_provider();
  ::std::string* release_provider();
  void set_allocated_provider(::std::string* provider);

  // string isSocial = 4;
  void clear_issocial();
  static const int kIsSocialFieldNumber = 4;
  const ::std::string& issocial() const;
  void set_issocial(const ::std::string& value);
  #if LANG_CXX11
  void set_issocial(::std::string&& value);
  #endif
  void set_issocial(const char* value);
  void set_issocial(const char* value, size_t size);
  ::std::string* mutable_issocial();
  ::std::string* release_issocial();
  void set_allocated_issocial(::std::string* issocial);

  // @@protoc_insertion_point(class_scope:api.Identity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr connection_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr provider_;
  ::google::protobuf::internal::ArenaStringPtr issocial_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetadata_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<UserMetadata_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<UserMetadata_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  UserMetadata_MetadataEntry_DoNotUse();
  UserMetadata_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const UserMetadata_MetadataEntry_DoNotUse& other);
  static const UserMetadata_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserMetadata_MetadataEntry_DoNotUse*>(&_UserMetadata_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class UserMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserMetadata) */ {
 public:
  UserMetadata();
  virtual ~UserMetadata();

  UserMetadata(const UserMetadata& from);

  inline UserMetadata& operator=(const UserMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetadata(UserMetadata&& from) noexcept
    : UserMetadata() {
    *this = ::std::move(from);
  }

  inline UserMetadata& operator=(UserMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMetadata* internal_default_instance() {
    return reinterpret_cast<const UserMetadata*>(
               &_UserMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(UserMetadata* other);
  friend void swap(UserMetadata& a, UserMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetadata* New() const final {
    return CreateMaybeMessage<UserMetadata>(NULL);
  }

  UserMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMetadata& from);
  void MergeFrom(const UserMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> metadata = 1;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:api.UserMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      UserMetadata_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppMetadata_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<AppMetadata_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<AppMetadata_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AppMetadata_MetadataEntry_DoNotUse();
  AppMetadata_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AppMetadata_MetadataEntry_DoNotUse& other);
  static const AppMetadata_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppMetadata_MetadataEntry_DoNotUse*>(&_AppMetadata_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class AppMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AppMetadata) */ {
 public:
  AppMetadata();
  virtual ~AppMetadata();

  AppMetadata(const AppMetadata& from);

  inline AppMetadata& operator=(const AppMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppMetadata(AppMetadata&& from) noexcept
    : AppMetadata() {
    *this = ::std::move(from);
  }

  inline AppMetadata& operator=(AppMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppMetadata* internal_default_instance() {
    return reinterpret_cast<const AppMetadata*>(
               &_AppMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(AppMetadata* other);
  friend void swap(AppMetadata& a, AppMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppMetadata* New() const final {
    return CreateMaybeMessage<AppMetadata>(NULL);
  }

  AppMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppMetadata& from);
  void MergeFrom(const AppMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> metadata = 1;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:api.AppMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      AppMetadata_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Auth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Auth) */ {
 public:
  Auth();
  virtual ~Auth();

  Auth(const Auth& from);

  inline Auth& operator=(const Auth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Auth(Auth&& from) noexcept
    : Auth() {
    *this = ::std::move(from);
  }

  inline Auth& operator=(Auth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Auth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Auth* internal_default_instance() {
    return reinterpret_cast<const Auth*>(
               &_Auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(Auth* other);
  friend void swap(Auth& a, Auth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Auth* New() const final {
    return CreateMaybeMessage<Auth>(NULL);
  }

  Auth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Auth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Auth& from);
  void MergeFrom(const Auth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Auth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.Scope scopes = 6;
  int scopes_size() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 6;
  ::api::Scope scopes(int index) const;
  void set_scopes(int index, ::api::Scope value);
  void add_scopes(::api::Scope value);
  const ::google::protobuf::RepeatedField<int>& scopes() const;
  ::google::protobuf::RepeatedField<int>* mutable_scopes();

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string client_secret = 3;
  void clear_client_secret();
  static const int kClientSecretFieldNumber = 3;
  const ::std::string& client_secret() const;
  void set_client_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_client_secret(::std::string&& value);
  #endif
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  ::std::string* mutable_client_secret();
  ::std::string* release_client_secret();
  void set_allocated_client_secret(::std::string* client_secret);

  // string redirect = 4;
  void clear_redirect();
  static const int kRedirectFieldNumber = 4;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // string audience = 5;
  void clear_audience();
  static const int kAudienceFieldNumber = 5;
  const ::std::string& audience() const;
  void set_audience(const ::std::string& value);
  #if LANG_CXX11
  void set_audience(::std::string&& value);
  #endif
  void set_audience(const char* value);
  void set_audience(const char* value, size_t size);
  ::std::string* mutable_audience();
  ::std::string* release_audience();
  void set_allocated_audience(::std::string* audience);

  // @@protoc_insertion_point(class_scope:api.Auth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> scopes_;
  mutable int _scopes_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr client_secret_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::google::protobuf::internal::ArenaStringPtr audience_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bytes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Bytes) */ {
 public:
  Bytes();
  virtual ~Bytes();

  Bytes(const Bytes& from);

  inline Bytes& operator=(const Bytes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bytes(Bytes&& from) noexcept
    : Bytes() {
    *this = ::std::move(from);
  }

  inline Bytes& operator=(Bytes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bytes* internal_default_instance() {
    return reinterpret_cast<const Bytes*>(
               &_Bytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(Bytes* other);
  friend void swap(Bytes& a, Bytes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bytes* New() const final {
    return CreateMaybeMessage<Bytes>(NULL);
  }

  Bytes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bytes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Bytes& from);
  void MergeFrom(const Bytes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bytes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes bits = 1;
  void clear_bits();
  static const int kBitsFieldNumber = 1;
  const ::std::string& bits() const;
  void set_bits(const ::std::string& value);
  #if LANG_CXX11
  void set_bits(::std::string&& value);
  #endif
  void set_bits(const char* value);
  void set_bits(const void* value, size_t size);
  ::std::string* mutable_bits();
  ::std::string* release_bits();
  void set_allocated_bits(::std::string* bits);

  // @@protoc_insertion_point(class_scope:api.Bytes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Template : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Template) */ {
 public:
  Template();
  virtual ~Template();

  Template(const Template& from);

  inline Template& operator=(const Template& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Template(Template&& from) noexcept
    : Template() {
    *this = ::std::move(from);
  }

  inline Template& operator=(Template&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Template& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Template* internal_default_instance() {
    return reinterpret_cast<const Template*>(
               &_Template_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Template* other);
  friend void swap(Template& a, Template& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Template* New() const final {
    return CreateMaybeMessage<Template>(NULL);
  }

  Template* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Template>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Template& from);
  void MergeFrom(const Template& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Template* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:api.Template)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JSONWebKeys : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.JSONWebKeys) */ {
 public:
  JSONWebKeys();
  virtual ~JSONWebKeys();

  JSONWebKeys(const JSONWebKeys& from);

  inline JSONWebKeys& operator=(const JSONWebKeys& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JSONWebKeys(JSONWebKeys&& from) noexcept
    : JSONWebKeys() {
    *this = ::std::move(from);
  }

  inline JSONWebKeys& operator=(JSONWebKeys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JSONWebKeys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JSONWebKeys* internal_default_instance() {
    return reinterpret_cast<const JSONWebKeys*>(
               &_JSONWebKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(JSONWebKeys* other);
  friend void swap(JSONWebKeys& a, JSONWebKeys& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JSONWebKeys* New() const final {
    return CreateMaybeMessage<JSONWebKeys>(NULL);
  }

  JSONWebKeys* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JSONWebKeys>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JSONWebKeys& from);
  void MergeFrom(const JSONWebKeys& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSONWebKeys* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string x5c = 6;
  int x5c_size() const;
  void clear_x5c();
  static const int kX5CFieldNumber = 6;
  const ::std::string& x5c(int index) const;
  ::std::string* mutable_x5c(int index);
  void set_x5c(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_x5c(int index, ::std::string&& value);
  #endif
  void set_x5c(int index, const char* value);
  void set_x5c(int index, const char* value, size_t size);
  ::std::string* add_x5c();
  void add_x5c(const ::std::string& value);
  #if LANG_CXX11
  void add_x5c(::std::string&& value);
  #endif
  void add_x5c(const char* value);
  void add_x5c(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& x5c() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_x5c();

  // string kty = 1;
  void clear_kty();
  static const int kKtyFieldNumber = 1;
  const ::std::string& kty() const;
  void set_kty(const ::std::string& value);
  #if LANG_CXX11
  void set_kty(::std::string&& value);
  #endif
  void set_kty(const char* value);
  void set_kty(const char* value, size_t size);
  ::std::string* mutable_kty();
  ::std::string* release_kty();
  void set_allocated_kty(::std::string* kty);

  // string kid = 2;
  void clear_kid();
  static const int kKidFieldNumber = 2;
  const ::std::string& kid() const;
  void set_kid(const ::std::string& value);
  #if LANG_CXX11
  void set_kid(::std::string&& value);
  #endif
  void set_kid(const char* value);
  void set_kid(const char* value, size_t size);
  ::std::string* mutable_kid();
  ::std::string* release_kid();
  void set_allocated_kid(::std::string* kid);

  // string use = 3;
  void clear_use();
  static const int kUseFieldNumber = 3;
  const ::std::string& use() const;
  void set_use(const ::std::string& value);
  #if LANG_CXX11
  void set_use(::std::string&& value);
  #endif
  void set_use(const char* value);
  void set_use(const char* value, size_t size);
  ::std::string* mutable_use();
  ::std::string* release_use();
  void set_allocated_use(::std::string* use);

  // string n = 4;
  void clear_n();
  static const int kNFieldNumber = 4;
  const ::std::string& n() const;
  void set_n(const ::std::string& value);
  #if LANG_CXX11
  void set_n(::std::string&& value);
  #endif
  void set_n(const char* value);
  void set_n(const char* value, size_t size);
  ::std::string* mutable_n();
  ::std::string* release_n();
  void set_allocated_n(::std::string* n);

  // string e = 5;
  void clear_e();
  static const int kEFieldNumber = 5;
  const ::std::string& e() const;
  void set_e(const ::std::string& value);
  #if LANG_CXX11
  void set_e(::std::string&& value);
  #endif
  void set_e(const char* value);
  void set_e(const char* value, size_t size);
  ::std::string* mutable_e();
  ::std::string* release_e();
  void set_allocated_e(::std::string* e);

  // @@protoc_insertion_point(class_scope:api.JSONWebKeys)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> x5c_;
  ::google::protobuf::internal::ArenaStringPtr kty_;
  ::google::protobuf::internal::ArenaStringPtr kid_;
  ::google::protobuf::internal::ArenaStringPtr use_;
  ::google::protobuf::internal::ArenaStringPtr n_;
  ::google::protobuf::internal::ArenaStringPtr e_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Jwks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Jwks) */ {
 public:
  Jwks();
  virtual ~Jwks();

  Jwks(const Jwks& from);

  inline Jwks& operator=(const Jwks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Jwks(Jwks&& from) noexcept
    : Jwks() {
    *this = ::std::move(from);
  }

  inline Jwks& operator=(Jwks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Jwks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jwks* internal_default_instance() {
    return reinterpret_cast<const Jwks*>(
               &_Jwks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Jwks* other);
  friend void swap(Jwks& a, Jwks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Jwks* New() const final {
    return CreateMaybeMessage<Jwks>(NULL);
  }

  Jwks* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Jwks>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Jwks& from);
  void MergeFrom(const Jwks& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Jwks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.JSONWebKeys keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  ::api::JSONWebKeys* mutable_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >*
      mutable_keys();
  const ::api::JSONWebKeys& keys(int index) const;
  ::api::JSONWebKeys* add_keys();
  const ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >&
      keys() const;

  // @@protoc_insertion_point(class_scope:api.Jwks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys > keys_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HTTPRequest_HeadersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPRequest_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPRequest_HeadersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPRequest_HeadersEntry_DoNotUse();
  HTTPRequest_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPRequest_HeadersEntry_DoNotUse& other);
  static const HTTPRequest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPRequest_HeadersEntry_DoNotUse*>(&_HTTPRequest_HeadersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPRequest_FormEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPRequest_FormEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPRequest_FormEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPRequest_FormEntry_DoNotUse();
  HTTPRequest_FormEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPRequest_FormEntry_DoNotUse& other);
  static const HTTPRequest_FormEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPRequest_FormEntry_DoNotUse*>(&_HTTPRequest_FormEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPRequest_CookiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HTTPRequest_CookiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HTTPRequest_CookiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPRequest_CookiesEntry_DoNotUse();
  HTTPRequest_CookiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HTTPRequest_CookiesEntry_DoNotUse& other);
  static const HTTPRequest_CookiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPRequest_CookiesEntry_DoNotUse*>(&_HTTPRequest_CookiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HTTPRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.HTTPRequest) */ {
 public:
  HTTPRequest();
  virtual ~HTTPRequest();

  HTTPRequest(const HTTPRequest& from);

  inline HTTPRequest& operator=(const HTTPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HTTPRequest(HTTPRequest&& from) noexcept
    : HTTPRequest() {
    *this = ::std::move(from);
  }

  inline HTTPRequest& operator=(HTTPRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPRequest* internal_default_instance() {
    return reinterpret_cast<const HTTPRequest*>(
               &_HTTPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(HTTPRequest* other);
  friend void swap(HTTPRequest& a, HTTPRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HTTPRequest* New() const final {
    return CreateMaybeMessage<HTTPRequest>(NULL);
  }

  HTTPRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HTTPRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HTTPRequest& from);
  void MergeFrom(const HTTPRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> headers = 6;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      headers() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_headers();

  // map<string, string> form = 7;
  int form_size() const;
  void clear_form();
  static const int kFormFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      form() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_form();

  // map<string, string> cookies = 8;
  int cookies_size() const;
  void clear_cookies();
  static const int kCookiesFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      cookies() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_cookies();

  // string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string account = 4;
  void clear_account();
  static const int kAccountFieldNumber = 4;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string contentType = 5;
  void clear_contenttype();
  static const int kContentTypeFieldNumber = 5;
  const ::std::string& contenttype() const;
  void set_contenttype(const ::std::string& value);
  #if LANG_CXX11
  void set_contenttype(::std::string&& value);
  #endif
  void set_contenttype(const char* value);
  void set_contenttype(const char* value, size_t size);
  ::std::string* mutable_contenttype();
  ::std::string* release_contenttype();
  void set_allocated_contenttype(::std::string* contenttype);

  // .api.Bytes body = 9;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 9;
  private:
  const ::api::Bytes& _internal_body() const;
  public:
  const ::api::Bytes& body() const;
  ::api::Bytes* release_body();
  ::api::Bytes* mutable_body();
  void set_allocated_body(::api::Bytes* body);

  // .api.HTTPMethod method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::api::HTTPMethod method() const;
  void set_method(::api::HTTPMethod value);

  // @@protoc_insertion_point(class_scope:api.HTTPRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      HTTPRequest_HeadersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::google::protobuf::internal::MapField<
      HTTPRequest_FormEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > form_;
  ::google::protobuf::internal::MapField<
      HTTPRequest_CookiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > cookies_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr contenttype_;
  ::api::Bytes* body_;
  int method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribeRequest

// string email = 1;
inline void SubscribeRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeRequest::email() const {
  // @@protoc_insertion_point(field_get:api.SubscribeRequest.email)
  return email_.GetNoArena();
}
inline void SubscribeRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeRequest.email)
}
#if LANG_CXX11
inline void SubscribeRequest::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeRequest.email)
}
#endif
inline void SubscribeRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeRequest.email)
}
inline void SubscribeRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeRequest.email)
}
inline ::std::string* SubscribeRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.SubscribeRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeRequest.email)
}

// string plan = 2;
inline void SubscribeRequest::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeRequest::plan() const {
  // @@protoc_insertion_point(field_get:api.SubscribeRequest.plan)
  return plan_.GetNoArena();
}
inline void SubscribeRequest::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeRequest.plan)
}
#if LANG_CXX11
inline void SubscribeRequest::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeRequest.plan)
}
#endif
inline void SubscribeRequest::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeRequest.plan)
}
inline void SubscribeRequest::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeRequest.plan)
}
inline ::std::string* SubscribeRequest::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeRequest.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeRequest::release_plan() {
  // @@protoc_insertion_point(field_release:api.SubscribeRequest.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeRequest::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeRequest.plan)
}

// .api.Card card = 3;
inline bool SubscribeRequest::has_card() const {
  return this != internal_default_instance() && card_ != NULL;
}
inline void SubscribeRequest::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) {
    delete card_;
  }
  card_ = NULL;
}
inline const ::api::Card& SubscribeRequest::_internal_card() const {
  return *card_;
}
inline const ::api::Card& SubscribeRequest::card() const {
  const ::api::Card* p = card_;
  // @@protoc_insertion_point(field_get:api.SubscribeRequest.card)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Card*>(
      &::api::_Card_default_instance_);
}
inline ::api::Card* SubscribeRequest::release_card() {
  // @@protoc_insertion_point(field_release:api.SubscribeRequest.card)
  
  ::api::Card* temp = card_;
  card_ = NULL;
  return temp;
}
inline ::api::Card* SubscribeRequest::mutable_card() {
  
  if (card_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Card>(GetArenaNoVirtual());
    card_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscribeRequest.card)
  return card_;
}
inline void SubscribeRequest::set_allocated_card(::api::Card* card) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete card_;
  }
  if (card) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      card = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeRequest.card)
}

// -------------------------------------------------------------------

// UnSubscribeRequest

// string email = 1;
inline void UnSubscribeRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnSubscribeRequest::email() const {
  // @@protoc_insertion_point(field_get:api.UnSubscribeRequest.email)
  return email_.GetNoArena();
}
inline void UnSubscribeRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UnSubscribeRequest.email)
}
#if LANG_CXX11
inline void UnSubscribeRequest::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UnSubscribeRequest.email)
}
#endif
inline void UnSubscribeRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UnSubscribeRequest.email)
}
inline void UnSubscribeRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UnSubscribeRequest.email)
}
inline ::std::string* UnSubscribeRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.UnSubscribeRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnSubscribeRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.UnSubscribeRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnSubscribeRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.UnSubscribeRequest.email)
}

// string plan = 2;
inline void UnSubscribeRequest::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnSubscribeRequest::plan() const {
  // @@protoc_insertion_point(field_get:api.UnSubscribeRequest.plan)
  return plan_.GetNoArena();
}
inline void UnSubscribeRequest::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UnSubscribeRequest.plan)
}
#if LANG_CXX11
inline void UnSubscribeRequest::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UnSubscribeRequest.plan)
}
#endif
inline void UnSubscribeRequest::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UnSubscribeRequest.plan)
}
inline void UnSubscribeRequest::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UnSubscribeRequest.plan)
}
inline ::std::string* UnSubscribeRequest::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.UnSubscribeRequest.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnSubscribeRequest::release_plan() {
  // @@protoc_insertion_point(field_release:api.UnSubscribeRequest.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnSubscribeRequest::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.UnSubscribeRequest.plan)
}

// -------------------------------------------------------------------

// Card

// string number = 1;
inline void Card::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::number() const {
  // @@protoc_insertion_point(field_get:api.Card.number)
  return number_.GetNoArena();
}
inline void Card::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.number)
}
#if LANG_CXX11
inline void Card::set_number(::std::string&& value) {
  
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.number)
}
#endif
inline void Card::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.number)
}
inline void Card::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.number)
}
inline ::std::string* Card::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_number() {
  // @@protoc_insertion_point(field_release:api.Card.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:api.Card.number)
}

// string exp_month = 2;
inline void Card::clear_exp_month() {
  exp_month_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::exp_month() const {
  // @@protoc_insertion_point(field_get:api.Card.exp_month)
  return exp_month_.GetNoArena();
}
inline void Card::set_exp_month(const ::std::string& value) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.exp_month)
}
#if LANG_CXX11
inline void Card::set_exp_month(::std::string&& value) {
  
  exp_month_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.exp_month)
}
#endif
inline void Card::set_exp_month(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.exp_month)
}
inline void Card::set_exp_month(const char* value, size_t size) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.exp_month)
}
inline ::std::string* Card::mutable_exp_month() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.exp_month)
  return exp_month_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_exp_month() {
  // @@protoc_insertion_point(field_release:api.Card.exp_month)
  
  return exp_month_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_exp_month(::std::string* exp_month) {
  if (exp_month != NULL) {
    
  } else {
    
  }
  exp_month_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_month);
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_month)
}

// string exp_year = 3;
inline void Card::clear_exp_year() {
  exp_year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::exp_year() const {
  // @@protoc_insertion_point(field_get:api.Card.exp_year)
  return exp_year_.GetNoArena();
}
inline void Card::set_exp_year(const ::std::string& value) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.exp_year)
}
#if LANG_CXX11
inline void Card::set_exp_year(::std::string&& value) {
  
  exp_year_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.exp_year)
}
#endif
inline void Card::set_exp_year(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.exp_year)
}
inline void Card::set_exp_year(const char* value, size_t size) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.exp_year)
}
inline ::std::string* Card::mutable_exp_year() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.exp_year)
  return exp_year_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_exp_year() {
  // @@protoc_insertion_point(field_release:api.Card.exp_year)
  
  return exp_year_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_exp_year(::std::string* exp_year) {
  if (exp_year != NULL) {
    
  } else {
    
  }
  exp_year_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_year);
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_year)
}

// string cvc = 4;
inline void Card::clear_cvc() {
  cvc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::cvc() const {
  // @@protoc_insertion_point(field_get:api.Card.cvc)
  return cvc_.GetNoArena();
}
inline void Card::set_cvc(const ::std::string& value) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.cvc)
}
#if LANG_CXX11
inline void Card::set_cvc(::std::string&& value) {
  
  cvc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.cvc)
}
#endif
inline void Card::set_cvc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.cvc)
}
inline void Card::set_cvc(const char* value, size_t size) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.cvc)
}
inline ::std::string* Card::mutable_cvc() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.cvc)
  return cvc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_cvc() {
  // @@protoc_insertion_point(field_release:api.Card.cvc)
  
  return cvc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_cvc(::std::string* cvc) {
  if (cvc != NULL) {
    
  } else {
    
  }
  cvc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cvc);
  // @@protoc_insertion_point(field_set_allocated:api.Card.cvc)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// ManagementToken

// string token = 1;
inline void ManagementToken::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ManagementToken::token() const {
  // @@protoc_insertion_point(field_get:api.ManagementToken.token)
  return token_.GetNoArena();
}
inline void ManagementToken::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ManagementToken.token)
}
#if LANG_CXX11
inline void ManagementToken::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ManagementToken.token)
}
#endif
inline void ManagementToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ManagementToken.token)
}
inline void ManagementToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ManagementToken.token)
}
inline ::std::string* ManagementToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:api.ManagementToken.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ManagementToken::release_token() {
  // @@protoc_insertion_point(field_release:api.ManagementToken.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ManagementToken::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:api.ManagementToken.token)
}

// -------------------------------------------------------------------

// UserRequest

// .api.ManagementToken string = 1;
inline bool UserRequest::has_string() const {
  return this != internal_default_instance() && string_ != NULL;
}
inline void UserRequest::clear_string() {
  if (GetArenaNoVirtual() == NULL && string_ != NULL) {
    delete string_;
  }
  string_ = NULL;
}
inline const ::api::ManagementToken& UserRequest::_internal_string() const {
  return *string_;
}
inline const ::api::ManagementToken& UserRequest::string() const {
  const ::api::ManagementToken* p = string_;
  // @@protoc_insertion_point(field_get:api.UserRequest.string)
  return p != NULL ? *p : *reinterpret_cast<const ::api::ManagementToken*>(
      &::api::_ManagementToken_default_instance_);
}
inline ::api::ManagementToken* UserRequest::release_string() {
  // @@protoc_insertion_point(field_release:api.UserRequest.string)
  
  ::api::ManagementToken* temp = string_;
  string_ = NULL;
  return temp;
}
inline ::api::ManagementToken* UserRequest::mutable_string() {
  
  if (string_ == NULL) {
    auto* p = CreateMaybeMessage<::api::ManagementToken>(GetArenaNoVirtual());
    string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserRequest.string)
  return string_;
}
inline void UserRequest::set_allocated_string(::api::ManagementToken* string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete string_;
  }
  if (string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    
  } else {
    
  }
  string_ = string;
  // @@protoc_insertion_point(field_set_allocated:api.UserRequest.string)
}

// .api.User user = 2;
inline bool UserRequest::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void UserRequest::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
inline const ::api::User& UserRequest::_internal_user() const {
  return *user_;
}
inline const ::api::User& UserRequest::user() const {
  const ::api::User* p = user_;
  // @@protoc_insertion_point(field_get:api.UserRequest.user)
  return p != NULL ? *p : *reinterpret_cast<const ::api::User*>(
      &::api::_User_default_instance_);
}
inline ::api::User* UserRequest::release_user() {
  // @@protoc_insertion_point(field_release:api.UserRequest.user)
  
  ::api::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::api::User* UserRequest::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::api::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserRequest.user)
  return user_;
}
inline void UserRequest::set_allocated_user(::api::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:api.UserRequest.user)
}

// -------------------------------------------------------------------

// UserByEmailRequest

// .api.ManagementToken token = 1;
inline bool UserByEmailRequest::has_token() const {
  return this != internal_default_instance() && token_ != NULL;
}
inline void UserByEmailRequest::clear_token() {
  if (GetArenaNoVirtual() == NULL && token_ != NULL) {
    delete token_;
  }
  token_ = NULL;
}
inline const ::api::ManagementToken& UserByEmailRequest::_internal_token() const {
  return *token_;
}
inline const ::api::ManagementToken& UserByEmailRequest::token() const {
  const ::api::ManagementToken* p = token_;
  // @@protoc_insertion_point(field_get:api.UserByEmailRequest.token)
  return p != NULL ? *p : *reinterpret_cast<const ::api::ManagementToken*>(
      &::api::_ManagementToken_default_instance_);
}
inline ::api::ManagementToken* UserByEmailRequest::release_token() {
  // @@protoc_insertion_point(field_release:api.UserByEmailRequest.token)
  
  ::api::ManagementToken* temp = token_;
  token_ = NULL;
  return temp;
}
inline ::api::ManagementToken* UserByEmailRequest::mutable_token() {
  
  if (token_ == NULL) {
    auto* p = CreateMaybeMessage<::api::ManagementToken>(GetArenaNoVirtual());
    token_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserByEmailRequest.token)
  return token_;
}
inline void UserByEmailRequest::set_allocated_token(::api::ManagementToken* token) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete token_;
  }
  if (token) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      token = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:api.UserByEmailRequest.token)
}

// string email = 2;
inline void UserByEmailRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserByEmailRequest::email() const {
  // @@protoc_insertion_point(field_get:api.UserByEmailRequest.email)
  return email_.GetNoArena();
}
inline void UserByEmailRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserByEmailRequest.email)
}
#if LANG_CXX11
inline void UserByEmailRequest::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserByEmailRequest.email)
}
#endif
inline void UserByEmailRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserByEmailRequest.email)
}
inline void UserByEmailRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserByEmailRequest.email)
}
inline ::std::string* UserByEmailRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.UserByEmailRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserByEmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.UserByEmailRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserByEmailRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.UserByEmailRequest.email)
}

// -------------------------------------------------------------------

// Identifier

// string id = 1;
inline void Identifier::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identifier::id() const {
  // @@protoc_insertion_point(field_get:api.Identifier.id)
  return id_.GetNoArena();
}
inline void Identifier::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identifier.id)
}
#if LANG_CXX11
inline void Identifier::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identifier.id)
}
#endif
inline void Identifier::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identifier.id)
}
inline void Identifier::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identifier.id)
}
inline ::std::string* Identifier::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Identifier.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identifier::release_id() {
  // @@protoc_insertion_point(field_release:api.Identifier.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identifier::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.Identifier.id)
}

// -------------------------------------------------------------------

// SMS

// string service = 1;
inline void SMS::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::service() const {
  // @@protoc_insertion_point(field_get:api.SMS.service)
  return service_.GetNoArena();
}
inline void SMS::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.service)
}
#if LANG_CXX11
inline void SMS::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.service)
}
#endif
inline void SMS::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.service)
}
inline void SMS::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.service)
}
inline ::std::string* SMS::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_service() {
  // @@protoc_insertion_point(field_release:api.SMS.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.service)
}

// string to = 2;
inline void SMS::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::to() const {
  // @@protoc_insertion_point(field_get:api.SMS.to)
  return to_.GetNoArena();
}
inline void SMS::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.to)
}
#if LANG_CXX11
inline void SMS::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.to)
}
#endif
inline void SMS::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.to)
}
inline void SMS::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.to)
}
inline ::std::string* SMS::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_to() {
  // @@protoc_insertion_point(field_release:api.SMS.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.to)
}

// .api.Message message = 3;
inline bool SMS::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void SMS::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::api::Message& SMS::_internal_message() const {
  return *message_;
}
inline const ::api::Message& SMS::message() const {
  const ::api::Message* p = message_;
  // @@protoc_insertion_point(field_get:api.SMS.message)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Message*>(
      &::api::_Message_default_instance_);
}
inline ::api::Message* SMS::release_message() {
  // @@protoc_insertion_point(field_release:api.SMS.message)
  
  ::api::Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::api::Message* SMS::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Message>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMS.message)
  return message_;
}
inline void SMS::set_allocated_message(::api::Message* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:api.SMS.message)
}

// string mediaURL = 4;
inline void SMS::clear_mediaurl() {
  mediaurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::mediaurl() const {
  // @@protoc_insertion_point(field_get:api.SMS.mediaURL)
  return mediaurl_.GetNoArena();
}
inline void SMS::set_mediaurl(const ::std::string& value) {
  
  mediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.mediaURL)
}
#if LANG_CXX11
inline void SMS::set_mediaurl(::std::string&& value) {
  
  mediaurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.mediaURL)
}
#endif
inline void SMS::set_mediaurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.mediaURL)
}
inline void SMS::set_mediaurl(const char* value, size_t size) {
  
  mediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.mediaURL)
}
inline ::std::string* SMS::mutable_mediaurl() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.mediaURL)
  return mediaurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_mediaurl() {
  // @@protoc_insertion_point(field_release:api.SMS.mediaURL)
  
  return mediaurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_mediaurl(::std::string* mediaurl) {
  if (mediaurl != NULL) {
    
  } else {
    
  }
  mediaurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mediaurl);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.mediaURL)
}

// string callback = 5;
inline void SMS::clear_callback() {
  callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::callback() const {
  // @@protoc_insertion_point(field_get:api.SMS.callback)
  return callback_.GetNoArena();
}
inline void SMS::set_callback(const ::std::string& value) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.callback)
}
#if LANG_CXX11
inline void SMS::set_callback(::std::string&& value) {
  
  callback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.callback)
}
#endif
inline void SMS::set_callback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.callback)
}
inline void SMS::set_callback(const char* value, size_t size) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.callback)
}
inline ::std::string* SMS::mutable_callback() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.callback)
  return callback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_callback() {
  // @@protoc_insertion_point(field_release:api.SMS.callback)
  
  return callback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_callback(::std::string* callback) {
  if (callback != NULL) {
    
  } else {
    
  }
  callback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.callback)
}

// string app = 6;
inline void SMS::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::app() const {
  // @@protoc_insertion_point(field_get:api.SMS.app)
  return app_.GetNoArena();
}
inline void SMS::set_app(const ::std::string& value) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.app)
}
#if LANG_CXX11
inline void SMS::set_app(::std::string&& value) {
  
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.app)
}
#endif
inline void SMS::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.app)
}
inline void SMS::set_app(const char* value, size_t size) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.app)
}
inline ::std::string* SMS::mutable_app() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_app() {
  // @@protoc_insertion_point(field_release:api.SMS.app)
  
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    
  } else {
    
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.app)
}

// -------------------------------------------------------------------

// SMSBlast

// string service = 1;
inline void SMSBlast::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSBlast::service() const {
  // @@protoc_insertion_point(field_get:api.SMSBlast.service)
  return service_.GetNoArena();
}
inline void SMSBlast::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSBlast.service)
}
#if LANG_CXX11
inline void SMSBlast::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSBlast.service)
}
#endif
inline void SMSBlast::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSBlast.service)
}
inline void SMSBlast::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSBlast.service)
}
inline ::std::string* SMSBlast::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSBlast::release_service() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSBlast::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.service)
}

// string to = 2;
inline void SMSBlast::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSBlast::to() const {
  // @@protoc_insertion_point(field_get:api.SMSBlast.to)
  return to_.GetNoArena();
}
inline void SMSBlast::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSBlast.to)
}
#if LANG_CXX11
inline void SMSBlast::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSBlast.to)
}
#endif
inline void SMSBlast::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSBlast.to)
}
inline void SMSBlast::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSBlast.to)
}
inline ::std::string* SMSBlast::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSBlast::release_to() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSBlast::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.to)
}

// .api.Message message = 3;
inline bool SMSBlast::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void SMSBlast::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::api::Message& SMSBlast::_internal_message() const {
  return *message_;
}
inline const ::api::Message& SMSBlast::message() const {
  const ::api::Message* p = message_;
  // @@protoc_insertion_point(field_get:api.SMSBlast.message)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Message*>(
      &::api::_Message_default_instance_);
}
inline ::api::Message* SMSBlast::release_message() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.message)
  
  ::api::Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::api::Message* SMSBlast::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Message>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.message)
  return message_;
}
inline void SMSBlast::set_allocated_message(::api::Message* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.message)
}

// string mediaURL = 4;
inline void SMSBlast::clear_mediaurl() {
  mediaurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSBlast::mediaurl() const {
  // @@protoc_insertion_point(field_get:api.SMSBlast.mediaURL)
  return mediaurl_.GetNoArena();
}
inline void SMSBlast::set_mediaurl(const ::std::string& value) {
  
  mediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSBlast.mediaURL)
}
#if LANG_CXX11
inline void SMSBlast::set_mediaurl(::std::string&& value) {
  
  mediaurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSBlast.mediaURL)
}
#endif
inline void SMSBlast::set_mediaurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSBlast.mediaURL)
}
inline void SMSBlast::set_mediaurl(const char* value, size_t size) {
  
  mediaurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSBlast.mediaURL)
}
inline ::std::string* SMSBlast::mutable_mediaurl() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.mediaURL)
  return mediaurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSBlast::release_mediaurl() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.mediaURL)
  
  return mediaurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSBlast::set_allocated_mediaurl(::std::string* mediaurl) {
  if (mediaurl != NULL) {
    
  } else {
    
  }
  mediaurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mediaurl);
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.mediaURL)
}

// string callback = 5;
inline void SMSBlast::clear_callback() {
  callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSBlast::callback() const {
  // @@protoc_insertion_point(field_get:api.SMSBlast.callback)
  return callback_.GetNoArena();
}
inline void SMSBlast::set_callback(const ::std::string& value) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSBlast.callback)
}
#if LANG_CXX11
inline void SMSBlast::set_callback(::std::string&& value) {
  
  callback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSBlast.callback)
}
#endif
inline void SMSBlast::set_callback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSBlast.callback)
}
inline void SMSBlast::set_callback(const char* value, size_t size) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSBlast.callback)
}
inline ::std::string* SMSBlast::mutable_callback() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.callback)
  return callback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSBlast::release_callback() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.callback)
  
  return callback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSBlast::set_allocated_callback(::std::string* callback) {
  if (callback != NULL) {
    
  } else {
    
  }
  callback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback);
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.callback)
}

// string app = 6;
inline void SMSBlast::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSBlast::app() const {
  // @@protoc_insertion_point(field_get:api.SMSBlast.app)
  return app_.GetNoArena();
}
inline void SMSBlast::set_app(const ::std::string& value) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSBlast.app)
}
#if LANG_CXX11
inline void SMSBlast::set_app(::std::string&& value) {
  
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSBlast.app)
}
#endif
inline void SMSBlast::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSBlast.app)
}
inline void SMSBlast::set_app(const char* value, size_t size) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSBlast.app)
}
inline ::std::string* SMSBlast::mutable_app() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSBlast::release_app() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.app)
  
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSBlast::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    
  } else {
    
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.app)
}

// -------------------------------------------------------------------

// EmailRequest

// string from_name = 1;
inline void EmailRequest::clear_from_name() {
  from_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::from_name() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.from_name)
  return from_name_.GetNoArena();
}
inline void EmailRequest::set_from_name(const ::std::string& value) {
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.from_name)
}
#if LANG_CXX11
inline void EmailRequest::set_from_name(::std::string&& value) {
  
  from_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.from_name)
}
#endif
inline void EmailRequest::set_from_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.from_name)
}
inline void EmailRequest::set_from_name(const char* value, size_t size) {
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.from_name)
}
inline ::std::string* EmailRequest::mutable_from_name() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.from_name)
  return from_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_from_name() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.from_name)
  
  return from_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_from_name(::std::string* from_name) {
  if (from_name != NULL) {
    
  } else {
    
  }
  from_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_name);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.from_name)
}

// string from_email = 2;
inline void EmailRequest::clear_from_email() {
  from_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::from_email() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.from_email)
  return from_email_.GetNoArena();
}
inline void EmailRequest::set_from_email(const ::std::string& value) {
  
  from_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.from_email)
}
#if LANG_CXX11
inline void EmailRequest::set_from_email(::std::string&& value) {
  
  from_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.from_email)
}
#endif
inline void EmailRequest::set_from_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.from_email)
}
inline void EmailRequest::set_from_email(const char* value, size_t size) {
  
  from_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.from_email)
}
inline ::std::string* EmailRequest::mutable_from_email() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.from_email)
  return from_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_from_email() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.from_email)
  
  return from_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_from_email(::std::string* from_email) {
  if (from_email != NULL) {
    
  } else {
    
  }
  from_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_email);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.from_email)
}

// .api.Email email = 3;
inline bool EmailRequest::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline void EmailRequest::clear_email() {
  if (GetArenaNoVirtual() == NULL && email_ != NULL) {
    delete email_;
  }
  email_ = NULL;
}
inline const ::api::Email& EmailRequest::_internal_email() const {
  return *email_;
}
inline const ::api::Email& EmailRequest::email() const {
  const ::api::Email* p = email_;
  // @@protoc_insertion_point(field_get:api.EmailRequest.email)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Email*>(
      &::api::_Email_default_instance_);
}
inline ::api::Email* EmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.email)
  
  ::api::Email* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::api::Email* EmailRequest::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Email>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.email)
  return email_;
}
inline void EmailRequest::set_allocated_email(::api::Email* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete email_;
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.email)
}

// -------------------------------------------------------------------

// EmailBlastRequest

// string from_name = 1;
inline void EmailBlastRequest::clear_from_name() {
  from_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailBlastRequest::from_name() const {
  // @@protoc_insertion_point(field_get:api.EmailBlastRequest.from_name)
  return from_name_.GetNoArena();
}
inline void EmailBlastRequest::set_from_name(const ::std::string& value) {
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailBlastRequest.from_name)
}
#if LANG_CXX11
inline void EmailBlastRequest::set_from_name(::std::string&& value) {
  
  from_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailBlastRequest.from_name)
}
#endif
inline void EmailBlastRequest::set_from_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailBlastRequest.from_name)
}
inline void EmailBlastRequest::set_from_name(const char* value, size_t size) {
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailBlastRequest.from_name)
}
inline ::std::string* EmailBlastRequest::mutable_from_name() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailBlastRequest.from_name)
  return from_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailBlastRequest::release_from_name() {
  // @@protoc_insertion_point(field_release:api.EmailBlastRequest.from_name)
  
  return from_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailBlastRequest::set_allocated_from_name(::std::string* from_name) {
  if (from_name != NULL) {
    
  } else {
    
  }
  from_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_name);
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlastRequest.from_name)
}

// string from_email = 2;
inline void EmailBlastRequest::clear_from_email() {
  from_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailBlastRequest::from_email() const {
  // @@protoc_insertion_point(field_get:api.EmailBlastRequest.from_email)
  return from_email_.GetNoArena();
}
inline void EmailBlastRequest::set_from_email(const ::std::string& value) {
  
  from_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailBlastRequest.from_email)
}
#if LANG_CXX11
inline void EmailBlastRequest::set_from_email(::std::string&& value) {
  
  from_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailBlastRequest.from_email)
}
#endif
inline void EmailBlastRequest::set_from_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailBlastRequest.from_email)
}
inline void EmailBlastRequest::set_from_email(const char* value, size_t size) {
  
  from_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailBlastRequest.from_email)
}
inline ::std::string* EmailBlastRequest::mutable_from_email() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailBlastRequest.from_email)
  return from_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailBlastRequest::release_from_email() {
  // @@protoc_insertion_point(field_release:api.EmailBlastRequest.from_email)
  
  return from_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailBlastRequest::set_allocated_from_email(::std::string* from_email) {
  if (from_email != NULL) {
    
  } else {
    
  }
  from_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_email);
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlastRequest.from_email)
}

// .api.EmailBlast blast = 3;
inline bool EmailBlastRequest::has_blast() const {
  return this != internal_default_instance() && blast_ != NULL;
}
inline void EmailBlastRequest::clear_blast() {
  if (GetArenaNoVirtual() == NULL && blast_ != NULL) {
    delete blast_;
  }
  blast_ = NULL;
}
inline const ::api::EmailBlast& EmailBlastRequest::_internal_blast() const {
  return *blast_;
}
inline const ::api::EmailBlast& EmailBlastRequest::blast() const {
  const ::api::EmailBlast* p = blast_;
  // @@protoc_insertion_point(field_get:api.EmailBlastRequest.blast)
  return p != NULL ? *p : *reinterpret_cast<const ::api::EmailBlast*>(
      &::api::_EmailBlast_default_instance_);
}
inline ::api::EmailBlast* EmailBlastRequest::release_blast() {
  // @@protoc_insertion_point(field_release:api.EmailBlastRequest.blast)
  
  ::api::EmailBlast* temp = blast_;
  blast_ = NULL;
  return temp;
}
inline ::api::EmailBlast* EmailBlastRequest::mutable_blast() {
  
  if (blast_ == NULL) {
    auto* p = CreateMaybeMessage<::api::EmailBlast>(GetArenaNoVirtual());
    blast_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailBlastRequest.blast)
  return blast_;
}
inline void EmailBlastRequest::set_allocated_blast(::api::EmailBlast* blast) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete blast_;
  }
  if (blast) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blast = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blast, submessage_arena);
    }
    
  } else {
    
  }
  blast_ = blast;
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlastRequest.blast)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EmailBlast

// map<string, string> name_address = 1;
inline int EmailBlast::name_address_size() const {
  return name_address_.size();
}
inline void EmailBlast::clear_name_address() {
  name_address_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
EmailBlast::name_address() const {
  // @@protoc_insertion_point(field_map:api.EmailBlast.name_address)
  return name_address_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
EmailBlast::mutable_name_address() {
  // @@protoc_insertion_point(field_mutable_map:api.EmailBlast.name_address)
  return name_address_.MutableMap();
}

// string subject = 2;
inline void EmailBlast::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailBlast::subject() const {
  // @@protoc_insertion_point(field_get:api.EmailBlast.subject)
  return subject_.GetNoArena();
}
inline void EmailBlast::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailBlast.subject)
}
#if LANG_CXX11
inline void EmailBlast::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailBlast.subject)
}
#endif
inline void EmailBlast::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailBlast.subject)
}
inline void EmailBlast::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailBlast.subject)
}
inline ::std::string* EmailBlast::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailBlast.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailBlast::release_subject() {
  // @@protoc_insertion_point(field_release:api.EmailBlast.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailBlast::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlast.subject)
}

// string plain = 3;
inline void EmailBlast::clear_plain() {
  plain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailBlast::plain() const {
  // @@protoc_insertion_point(field_get:api.EmailBlast.plain)
  return plain_.GetNoArena();
}
inline void EmailBlast::set_plain(const ::std::string& value) {
  
  plain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailBlast.plain)
}
#if LANG_CXX11
inline void EmailBlast::set_plain(::std::string&& value) {
  
  plain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailBlast.plain)
}
#endif
inline void EmailBlast::set_plain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailBlast.plain)
}
inline void EmailBlast::set_plain(const char* value, size_t size) {
  
  plain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailBlast.plain)
}
inline ::std::string* EmailBlast::mutable_plain() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailBlast.plain)
  return plain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailBlast::release_plain() {
  // @@protoc_insertion_point(field_release:api.EmailBlast.plain)
  
  return plain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailBlast::set_allocated_plain(::std::string* plain) {
  if (plain != NULL) {
    
  } else {
    
  }
  plain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plain);
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlast.plain)
}

// string html = 4;
inline void EmailBlast::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailBlast::html() const {
  // @@protoc_insertion_point(field_get:api.EmailBlast.html)
  return html_.GetNoArena();
}
inline void EmailBlast::set_html(const ::std::string& value) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailBlast.html)
}
#if LANG_CXX11
inline void EmailBlast::set_html(::std::string&& value) {
  
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailBlast.html)
}
#endif
inline void EmailBlast::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailBlast.html)
}
inline void EmailBlast::set_html(const char* value, size_t size) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailBlast.html)
}
inline ::std::string* EmailBlast::mutable_html() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailBlast.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailBlast::release_html() {
  // @@protoc_insertion_point(field_release:api.EmailBlast.html)
  
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailBlast::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    
  } else {
    
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlast.html)
}

// -------------------------------------------------------------------

// Email

// string name = 1;
inline void Email::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::name() const {
  // @@protoc_insertion_point(field_get:api.Email.name)
  return name_.GetNoArena();
}
inline void Email::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.name)
}
#if LANG_CXX11
inline void Email::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.name)
}
#endif
inline void Email::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.name)
}
inline void Email::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.name)
}
inline ::std::string* Email::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_name() {
  // @@protoc_insertion_point(field_release:api.Email.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Email.name)
}

// string address = 2;
inline void Email::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::address() const {
  // @@protoc_insertion_point(field_get:api.Email.address)
  return address_.GetNoArena();
}
inline void Email::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.address)
}
#if LANG_CXX11
inline void Email::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.address)
}
#endif
inline void Email::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.address)
}
inline void Email::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.address)
}
inline ::std::string* Email::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_address() {
  // @@protoc_insertion_point(field_release:api.Email.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:api.Email.address)
}

// string subject = 3;
inline void Email::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::subject() const {
  // @@protoc_insertion_point(field_get:api.Email.subject)
  return subject_.GetNoArena();
}
inline void Email::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.subject)
}
#if LANG_CXX11
inline void Email::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.subject)
}
#endif
inline void Email::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.subject)
}
inline void Email::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.subject)
}
inline ::std::string* Email::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_subject() {
  // @@protoc_insertion_point(field_release:api.Email.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:api.Email.subject)
}

// string plain = 4;
inline void Email::clear_plain() {
  plain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::plain() const {
  // @@protoc_insertion_point(field_get:api.Email.plain)
  return plain_.GetNoArena();
}
inline void Email::set_plain(const ::std::string& value) {
  
  plain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.plain)
}
#if LANG_CXX11
inline void Email::set_plain(::std::string&& value) {
  
  plain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.plain)
}
#endif
inline void Email::set_plain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.plain)
}
inline void Email::set_plain(const char* value, size_t size) {
  
  plain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.plain)
}
inline ::std::string* Email::mutable_plain() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.plain)
  return plain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_plain() {
  // @@protoc_insertion_point(field_release:api.Email.plain)
  
  return plain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_plain(::std::string* plain) {
  if (plain != NULL) {
    
  } else {
    
  }
  plain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plain);
  // @@protoc_insertion_point(field_set_allocated:api.Email.plain)
}

// string html = 5;
inline void Email::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::html() const {
  // @@protoc_insertion_point(field_get:api.Email.html)
  return html_.GetNoArena();
}
inline void Email::set_html(const ::std::string& value) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Email.html)
}
#if LANG_CXX11
inline void Email::set_html(::std::string&& value) {
  
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Email.html)
}
#endif
inline void Email::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Email.html)
}
inline void Email::set_html(const char* value, size_t size) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Email.html)
}
inline ::std::string* Email::mutable_html() {
  
  // @@protoc_insertion_point(field_mutable:api.Email.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_html() {
  // @@protoc_insertion_point(field_release:api.Email.html)
  
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    
  } else {
    
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:api.Email.html)
}

// -------------------------------------------------------------------

// Call

// string from = 1;
inline void Call::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::from() const {
  // @@protoc_insertion_point(field_get:api.Call.from)
  return from_.GetNoArena();
}
inline void Call::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Call.from)
}
#if LANG_CXX11
inline void Call::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Call.from)
}
#endif
inline void Call::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Call.from)
}
inline void Call::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Call.from)
}
inline ::std::string* Call::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:api.Call.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_from() {
  // @@protoc_insertion_point(field_release:api.Call.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:api.Call.from)
}

// string to = 2;
inline void Call::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::to() const {
  // @@protoc_insertion_point(field_get:api.Call.to)
  return to_.GetNoArena();
}
inline void Call::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Call.to)
}
#if LANG_CXX11
inline void Call::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Call.to)
}
#endif
inline void Call::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Call.to)
}
inline void Call::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Call.to)
}
inline ::std::string* Call::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:api.Call.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_to() {
  // @@protoc_insertion_point(field_release:api.Call.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:api.Call.to)
}

// string app = 3;
inline void Call::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::app() const {
  // @@protoc_insertion_point(field_get:api.Call.app)
  return app_.GetNoArena();
}
inline void Call::set_app(const ::std::string& value) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Call.app)
}
#if LANG_CXX11
inline void Call::set_app(::std::string&& value) {
  
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Call.app)
}
#endif
inline void Call::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Call.app)
}
inline void Call::set_app(const char* value, size_t size) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Call.app)
}
inline ::std::string* Call::mutable_app() {
  
  // @@protoc_insertion_point(field_mutable:api.Call.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_app() {
  // @@protoc_insertion_point(field_release:api.Call.app)
  
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    
  } else {
    
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:api.Call.app)
}

// -------------------------------------------------------------------

// Message

// string value = 1;
inline void Message::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::value() const {
  // @@protoc_insertion_point(field_get:api.Message.value)
  return value_.GetNoArena();
}
inline void Message::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Message.value)
}
#if LANG_CXX11
inline void Message::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Message.value)
}
#endif
inline void Message::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Message.value)
}
inline void Message::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Message.value)
}
inline ::std::string* Message::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:api.Message.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_value() {
  // @@protoc_insertion_point(field_release:api.Message.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:api.Message.value)
}

// -------------------------------------------------------------------

// User

// string user_id = 1;
inline void User::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::user_id() const {
  // @@protoc_insertion_point(field_get:api.User.user_id)
  return user_id_.GetNoArena();
}
inline void User::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.user_id)
}
#if LANG_CXX11
inline void User::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.user_id)
}
#endif
inline void User::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.user_id)
}
inline void User::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.user_id)
}
inline ::std::string* User::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.User.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_user_id() {
  // @@protoc_insertion_point(field_release:api.User.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.User.user_id)
}

// string name = 2;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:api.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.name)
}
#if LANG_CXX11
inline void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.name)
}
#endif
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:api.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.User.name)
}

// string given_name = 3;
inline void User::clear_given_name() {
  given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::given_name() const {
  // @@protoc_insertion_point(field_get:api.User.given_name)
  return given_name_.GetNoArena();
}
inline void User::set_given_name(const ::std::string& value) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.given_name)
}
#if LANG_CXX11
inline void User::set_given_name(::std::string&& value) {
  
  given_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.given_name)
}
#endif
inline void User::set_given_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.given_name)
}
inline void User::set_given_name(const char* value, size_t size) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.given_name)
}
inline ::std::string* User::mutable_given_name() {
  
  // @@protoc_insertion_point(field_mutable:api.User.given_name)
  return given_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_given_name() {
  // @@protoc_insertion_point(field_release:api.User.given_name)
  
  return given_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_given_name(::std::string* given_name) {
  if (given_name != NULL) {
    
  } else {
    
  }
  given_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), given_name);
  // @@protoc_insertion_point(field_set_allocated:api.User.given_name)
}

// string family_name = 4;
inline void User::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::family_name() const {
  // @@protoc_insertion_point(field_get:api.User.family_name)
  return family_name_.GetNoArena();
}
inline void User::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.family_name)
}
#if LANG_CXX11
inline void User::set_family_name(::std::string&& value) {
  
  family_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.family_name)
}
#endif
inline void User::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.family_name)
}
inline void User::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.family_name)
}
inline ::std::string* User::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:api.User.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_family_name() {
  // @@protoc_insertion_point(field_release:api.User.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:api.User.family_name)
}

// string gender = 5;
inline void User::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::gender() const {
  // @@protoc_insertion_point(field_get:api.User.gender)
  return gender_.GetNoArena();
}
inline void User::set_gender(const ::std::string& value) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.gender)
}
#if LANG_CXX11
inline void User::set_gender(::std::string&& value) {
  
  gender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.gender)
}
#endif
inline void User::set_gender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.gender)
}
inline void User::set_gender(const char* value, size_t size) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.gender)
}
inline ::std::string* User::mutable_gender() {
  
  // @@protoc_insertion_point(field_mutable:api.User.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_gender() {
  // @@protoc_insertion_point(field_release:api.User.gender)
  
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    
  } else {
    
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:api.User.gender)
}

// string birthdate = 6;
inline void User::clear_birthdate() {
  birthdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::birthdate() const {
  // @@protoc_insertion_point(field_get:api.User.birthdate)
  return birthdate_.GetNoArena();
}
inline void User::set_birthdate(const ::std::string& value) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.birthdate)
}
#if LANG_CXX11
inline void User::set_birthdate(::std::string&& value) {
  
  birthdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.birthdate)
}
#endif
inline void User::set_birthdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.birthdate)
}
inline void User::set_birthdate(const char* value, size_t size) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.birthdate)
}
inline ::std::string* User::mutable_birthdate() {
  
  // @@protoc_insertion_point(field_mutable:api.User.birthdate)
  return birthdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_birthdate() {
  // @@protoc_insertion_point(field_release:api.User.birthdate)
  
  return birthdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_birthdate(::std::string* birthdate) {
  if (birthdate != NULL) {
    
  } else {
    
  }
  birthdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthdate);
  // @@protoc_insertion_point(field_set_allocated:api.User.birthdate)
}

// string email = 7;
inline void User::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::email() const {
  // @@protoc_insertion_point(field_get:api.User.email)
  return email_.GetNoArena();
}
inline void User::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.email)
}
#if LANG_CXX11
inline void User::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.email)
}
#endif
inline void User::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.email)
}
inline void User::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.email)
}
inline ::std::string* User::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.User.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:api.User.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.User.email)
}

// string phone_number = 8;
inline void User::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::phone_number() const {
  // @@protoc_insertion_point(field_get:api.User.phone_number)
  return phone_number_.GetNoArena();
}
inline void User::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.phone_number)
}
#if LANG_CXX11
inline void User::set_phone_number(::std::string&& value) {
  
  phone_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.phone_number)
}
#endif
inline void User::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.phone_number)
}
inline void User::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.phone_number)
}
inline ::std::string* User::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:api.User.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_phone_number() {
  // @@protoc_insertion_point(field_release:api.User.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != NULL) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:api.User.phone_number)
}

// string picture = 9;
inline void User::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::picture() const {
  // @@protoc_insertion_point(field_get:api.User.picture)
  return picture_.GetNoArena();
}
inline void User::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.picture)
}
#if LANG_CXX11
inline void User::set_picture(::std::string&& value) {
  
  picture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.picture)
}
#endif
inline void User::set_picture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.picture)
}
inline void User::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.picture)
}
inline ::std::string* User::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:api.User.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_picture() {
  // @@protoc_insertion_point(field_release:api.User.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:api.User.picture)
}

// .api.UserMetadata user_metadata = 10;
inline bool User::has_user_metadata() const {
  return this != internal_default_instance() && user_metadata_ != NULL;
}
inline void User::clear_user_metadata() {
  if (GetArenaNoVirtual() == NULL && user_metadata_ != NULL) {
    delete user_metadata_;
  }
  user_metadata_ = NULL;
}
inline const ::api::UserMetadata& User::_internal_user_metadata() const {
  return *user_metadata_;
}
inline const ::api::UserMetadata& User::user_metadata() const {
  const ::api::UserMetadata* p = user_metadata_;
  // @@protoc_insertion_point(field_get:api.User.user_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::api::UserMetadata*>(
      &::api::_UserMetadata_default_instance_);
}
inline ::api::UserMetadata* User::release_user_metadata() {
  // @@protoc_insertion_point(field_release:api.User.user_metadata)
  
  ::api::UserMetadata* temp = user_metadata_;
  user_metadata_ = NULL;
  return temp;
}
inline ::api::UserMetadata* User::mutable_user_metadata() {
  
  if (user_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::api::UserMetadata>(GetArenaNoVirtual());
    user_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.user_metadata)
  return user_metadata_;
}
inline void User::set_allocated_user_metadata(::api::UserMetadata* user_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_metadata_;
  }
  if (user_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_metadata, submessage_arena);
    }
    
  } else {
    
  }
  user_metadata_ = user_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.User.user_metadata)
}

// .api.AppMetadata app_metadata = 11;
inline bool User::has_app_metadata() const {
  return this != internal_default_instance() && app_metadata_ != NULL;
}
inline void User::clear_app_metadata() {
  if (GetArenaNoVirtual() == NULL && app_metadata_ != NULL) {
    delete app_metadata_;
  }
  app_metadata_ = NULL;
}
inline const ::api::AppMetadata& User::_internal_app_metadata() const {
  return *app_metadata_;
}
inline const ::api::AppMetadata& User::app_metadata() const {
  const ::api::AppMetadata* p = app_metadata_;
  // @@protoc_insertion_point(field_get:api.User.app_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::api::AppMetadata*>(
      &::api::_AppMetadata_default_instance_);
}
inline ::api::AppMetadata* User::release_app_metadata() {
  // @@protoc_insertion_point(field_release:api.User.app_metadata)
  
  ::api::AppMetadata* temp = app_metadata_;
  app_metadata_ = NULL;
  return temp;
}
inline ::api::AppMetadata* User::mutable_app_metadata() {
  
  if (app_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::api::AppMetadata>(GetArenaNoVirtual());
    app_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.app_metadata)
  return app_metadata_;
}
inline void User::set_allocated_app_metadata(::api::AppMetadata* app_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete app_metadata_;
  }
  if (app_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app_metadata, submessage_arena);
    }
    
  } else {
    
  }
  app_metadata_ = app_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.User.app_metadata)
}

// string last_ip = 12;
inline void User::clear_last_ip() {
  last_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::last_ip() const {
  // @@protoc_insertion_point(field_get:api.User.last_ip)
  return last_ip_.GetNoArena();
}
inline void User::set_last_ip(const ::std::string& value) {
  
  last_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.last_ip)
}
#if LANG_CXX11
inline void User::set_last_ip(::std::string&& value) {
  
  last_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.last_ip)
}
#endif
inline void User::set_last_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.last_ip)
}
inline void User::set_last_ip(const char* value, size_t size) {
  
  last_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.last_ip)
}
inline ::std::string* User::mutable_last_ip() {
  
  // @@protoc_insertion_point(field_mutable:api.User.last_ip)
  return last_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_last_ip() {
  // @@protoc_insertion_point(field_release:api.User.last_ip)
  
  return last_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_last_ip(::std::string* last_ip) {
  if (last_ip != NULL) {
    
  } else {
    
  }
  last_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_ip);
  // @@protoc_insertion_point(field_set_allocated:api.User.last_ip)
}

// bool blocked = 13;
inline void User::clear_blocked() {
  blocked_ = false;
}
inline bool User::blocked() const {
  // @@protoc_insertion_point(field_get:api.User.blocked)
  return blocked_;
}
inline void User::set_blocked(bool value) {
  
  blocked_ = value;
  // @@protoc_insertion_point(field_set:api.User.blocked)
}

// string nickname = 14;
inline void User::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::nickname() const {
  // @@protoc_insertion_point(field_get:api.User.nickname)
  return nickname_.GetNoArena();
}
inline void User::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.nickname)
}
#if LANG_CXX11
inline void User::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.nickname)
}
#endif
inline void User::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.nickname)
}
inline void User::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.nickname)
}
inline ::std::string* User::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:api.User.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_nickname() {
  // @@protoc_insertion_point(field_release:api.User.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:api.User.nickname)
}

// repeated string multifactor = 15;
inline int User::multifactor_size() const {
  return multifactor_.size();
}
inline void User::clear_multifactor() {
  multifactor_.Clear();
}
inline const ::std::string& User::multifactor(int index) const {
  // @@protoc_insertion_point(field_get:api.User.multifactor)
  return multifactor_.Get(index);
}
inline ::std::string* User::mutable_multifactor(int index) {
  // @@protoc_insertion_point(field_mutable:api.User.multifactor)
  return multifactor_.Mutable(index);
}
inline void User::set_multifactor(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.User.multifactor)
  multifactor_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void User::set_multifactor(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.User.multifactor)
  multifactor_.Mutable(index)->assign(std::move(value));
}
#endif
inline void User::set_multifactor(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  multifactor_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.User.multifactor)
}
inline void User::set_multifactor(int index, const char* value, size_t size) {
  multifactor_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.User.multifactor)
}
inline ::std::string* User::add_multifactor() {
  // @@protoc_insertion_point(field_add_mutable:api.User.multifactor)
  return multifactor_.Add();
}
inline void User::add_multifactor(const ::std::string& value) {
  multifactor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.User.multifactor)
}
#if LANG_CXX11
inline void User::add_multifactor(::std::string&& value) {
  multifactor_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.User.multifactor)
}
#endif
inline void User::add_multifactor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  multifactor_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.User.multifactor)
}
inline void User::add_multifactor(const char* value, size_t size) {
  multifactor_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.User.multifactor)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::multifactor() const {
  // @@protoc_insertion_point(field_list:api.User.multifactor)
  return multifactor_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_multifactor() {
  // @@protoc_insertion_point(field_mutable_list:api.User.multifactor)
  return &multifactor_;
}

// string created_at = 17;
inline void User::clear_created_at() {
  created_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::created_at() const {
  // @@protoc_insertion_point(field_get:api.User.created_at)
  return created_at_.GetNoArena();
}
inline void User::set_created_at(const ::std::string& value) {
  
  created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.created_at)
}
#if LANG_CXX11
inline void User::set_created_at(::std::string&& value) {
  
  created_at_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.created_at)
}
#endif
inline void User::set_created_at(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.created_at)
}
inline void User::set_created_at(const char* value, size_t size) {
  
  created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.created_at)
}
inline ::std::string* User::mutable_created_at() {
  
  // @@protoc_insertion_point(field_mutable:api.User.created_at)
  return created_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_created_at() {
  // @@protoc_insertion_point(field_release:api.User.created_at)
  
  return created_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_created_at(::std::string* created_at) {
  if (created_at != NULL) {
    
  } else {
    
  }
  created_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), created_at);
  // @@protoc_insertion_point(field_set_allocated:api.User.created_at)
}

// string updated_at = 18;
inline void User::clear_updated_at() {
  updated_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::updated_at() const {
  // @@protoc_insertion_point(field_get:api.User.updated_at)
  return updated_at_.GetNoArena();
}
inline void User::set_updated_at(const ::std::string& value) {
  
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.updated_at)
}
#if LANG_CXX11
inline void User::set_updated_at(::std::string&& value) {
  
  updated_at_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.updated_at)
}
#endif
inline void User::set_updated_at(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.updated_at)
}
inline void User::set_updated_at(const char* value, size_t size) {
  
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.updated_at)
}
inline ::std::string* User::mutable_updated_at() {
  
  // @@protoc_insertion_point(field_mutable:api.User.updated_at)
  return updated_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_updated_at() {
  // @@protoc_insertion_point(field_release:api.User.updated_at)
  
  return updated_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_updated_at(::std::string* updated_at) {
  if (updated_at != NULL) {
    
  } else {
    
  }
  updated_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updated_at);
  // @@protoc_insertion_point(field_set_allocated:api.User.updated_at)
}

// bool phone_verified = 19;
inline void User::clear_phone_verified() {
  phone_verified_ = false;
}
inline bool User::phone_verified() const {
  // @@protoc_insertion_point(field_get:api.User.phone_verified)
  return phone_verified_;
}
inline void User::set_phone_verified(bool value) {
  
  phone_verified_ = value;
  // @@protoc_insertion_point(field_set:api.User.phone_verified)
}

// repeated .api.Identity identities = 20;
inline int User::identities_size() const {
  return identities_.size();
}
inline void User::clear_identities() {
  identities_.Clear();
}
inline ::api::Identity* User::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:api.User.identities)
  return identities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::Identity >*
User::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:api.User.identities)
  return &identities_;
}
inline const ::api::Identity& User::identities(int index) const {
  // @@protoc_insertion_point(field_get:api.User.identities)
  return identities_.Get(index);
}
inline ::api::Identity* User::add_identities() {
  // @@protoc_insertion_point(field_add:api.User.identities)
  return identities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
User::identities() const {
  // @@protoc_insertion_point(field_list:api.User.identities)
  return identities_;
}

// -------------------------------------------------------------------

// Identity

// string connection = 1;
inline void Identity::clear_connection() {
  connection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::connection() const {
  // @@protoc_insertion_point(field_get:api.Identity.connection)
  return connection_.GetNoArena();
}
inline void Identity::set_connection(const ::std::string& value) {
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.connection)
}
#if LANG_CXX11
inline void Identity::set_connection(::std::string&& value) {
  
  connection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.connection)
}
#endif
inline void Identity::set_connection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.connection)
}
inline void Identity::set_connection(const char* value, size_t size) {
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.connection)
}
inline ::std::string* Identity::mutable_connection() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.connection)
  return connection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_connection() {
  // @@protoc_insertion_point(field_release:api.Identity.connection)
  
  return connection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_connection(::std::string* connection) {
  if (connection != NULL) {
    
  } else {
    
  }
  connection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.connection)
}

// string user_id = 2;
inline void Identity::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::user_id() const {
  // @@protoc_insertion_point(field_get:api.Identity.user_id)
  return user_id_.GetNoArena();
}
inline void Identity::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.user_id)
}
#if LANG_CXX11
inline void Identity::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.user_id)
}
#endif
inline void Identity::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.user_id)
}
inline void Identity::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.user_id)
}
inline ::std::string* Identity::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_user_id() {
  // @@protoc_insertion_point(field_release:api.Identity.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.user_id)
}

// string provider = 3;
inline void Identity::clear_provider() {
  provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::provider() const {
  // @@protoc_insertion_point(field_get:api.Identity.provider)
  return provider_.GetNoArena();
}
inline void Identity::set_provider(const ::std::string& value) {
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.provider)
}
#if LANG_CXX11
inline void Identity::set_provider(::std::string&& value) {
  
  provider_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.provider)
}
#endif
inline void Identity::set_provider(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.provider)
}
inline void Identity::set_provider(const char* value, size_t size) {
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.provider)
}
inline ::std::string* Identity::mutable_provider() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.provider)
  return provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_provider() {
  // @@protoc_insertion_point(field_release:api.Identity.provider)
  
  return provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_provider(::std::string* provider) {
  if (provider != NULL) {
    
  } else {
    
  }
  provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.provider)
}

// string isSocial = 4;
inline void Identity::clear_issocial() {
  issocial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::issocial() const {
  // @@protoc_insertion_point(field_get:api.Identity.isSocial)
  return issocial_.GetNoArena();
}
inline void Identity::set_issocial(const ::std::string& value) {
  
  issocial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.isSocial)
}
#if LANG_CXX11
inline void Identity::set_issocial(::std::string&& value) {
  
  issocial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.isSocial)
}
#endif
inline void Identity::set_issocial(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  issocial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.isSocial)
}
inline void Identity::set_issocial(const char* value, size_t size) {
  
  issocial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.isSocial)
}
inline ::std::string* Identity::mutable_issocial() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.isSocial)
  return issocial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_issocial() {
  // @@protoc_insertion_point(field_release:api.Identity.isSocial)
  
  return issocial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_issocial(::std::string* issocial) {
  if (issocial != NULL) {
    
  } else {
    
  }
  issocial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issocial);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.isSocial)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserMetadata

// map<string, string> metadata = 1;
inline int UserMetadata::metadata_size() const {
  return metadata_.size();
}
inline void UserMetadata::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
UserMetadata::metadata() const {
  // @@protoc_insertion_point(field_map:api.UserMetadata.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
UserMetadata::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:api.UserMetadata.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppMetadata

// map<string, string> metadata = 1;
inline int AppMetadata::metadata_size() const {
  return metadata_.size();
}
inline void AppMetadata::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AppMetadata::metadata() const {
  // @@protoc_insertion_point(field_map:api.AppMetadata.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AppMetadata::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:api.AppMetadata.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// Auth

// string domain = 1;
inline void Auth::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::domain() const {
  // @@protoc_insertion_point(field_get:api.Auth.domain)
  return domain_.GetNoArena();
}
inline void Auth::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.domain)
}
#if LANG_CXX11
inline void Auth::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.domain)
}
#endif
inline void Auth::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.domain)
}
inline void Auth::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.domain)
}
inline ::std::string* Auth::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_domain() {
  // @@protoc_insertion_point(field_release:api.Auth.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.domain)
}

// string client_id = 2;
inline void Auth::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::client_id() const {
  // @@protoc_insertion_point(field_get:api.Auth.client_id)
  return client_id_.GetNoArena();
}
inline void Auth::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.client_id)
}
#if LANG_CXX11
inline void Auth::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.client_id)
}
#endif
inline void Auth::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.client_id)
}
inline void Auth::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.client_id)
}
inline ::std::string* Auth::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_client_id() {
  // @@protoc_insertion_point(field_release:api.Auth.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.client_id)
}

// string client_secret = 3;
inline void Auth::clear_client_secret() {
  client_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::client_secret() const {
  // @@protoc_insertion_point(field_get:api.Auth.client_secret)
  return client_secret_.GetNoArena();
}
inline void Auth::set_client_secret(const ::std::string& value) {
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.client_secret)
}
#if LANG_CXX11
inline void Auth::set_client_secret(::std::string&& value) {
  
  client_secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.client_secret)
}
#endif
inline void Auth::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.client_secret)
}
inline void Auth::set_client_secret(const char* value, size_t size) {
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.client_secret)
}
inline ::std::string* Auth::mutable_client_secret() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.client_secret)
  return client_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_client_secret() {
  // @@protoc_insertion_point(field_release:api.Auth.client_secret)
  
  return client_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_client_secret(::std::string* client_secret) {
  if (client_secret != NULL) {
    
  } else {
    
  }
  client_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_secret);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.client_secret)
}

// string redirect = 4;
inline void Auth::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::redirect() const {
  // @@protoc_insertion_point(field_get:api.Auth.redirect)
  return redirect_.GetNoArena();
}
inline void Auth::set_redirect(const ::std::string& value) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.redirect)
}
#if LANG_CXX11
inline void Auth::set_redirect(::std::string&& value) {
  
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.redirect)
}
#endif
inline void Auth::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.redirect)
}
inline void Auth::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.redirect)
}
inline ::std::string* Auth::mutable_redirect() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_redirect() {
  // @@protoc_insertion_point(field_release:api.Auth.redirect)
  
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.redirect)
}

// string audience = 5;
inline void Auth::clear_audience() {
  audience_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::audience() const {
  // @@protoc_insertion_point(field_get:api.Auth.audience)
  return audience_.GetNoArena();
}
inline void Auth::set_audience(const ::std::string& value) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.audience)
}
#if LANG_CXX11
inline void Auth::set_audience(::std::string&& value) {
  
  audience_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.audience)
}
#endif
inline void Auth::set_audience(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.audience)
}
inline void Auth::set_audience(const char* value, size_t size) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.audience)
}
inline ::std::string* Auth::mutable_audience() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.audience)
  return audience_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_audience() {
  // @@protoc_insertion_point(field_release:api.Auth.audience)
  
  return audience_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_audience(::std::string* audience) {
  if (audience != NULL) {
    
  } else {
    
  }
  audience_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audience);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.audience)
}

// repeated .api.Scope scopes = 6;
inline int Auth::scopes_size() const {
  return scopes_.size();
}
inline void Auth::clear_scopes() {
  scopes_.Clear();
}
inline ::api::Scope Auth::scopes(int index) const {
  // @@protoc_insertion_point(field_get:api.Auth.scopes)
  return static_cast< ::api::Scope >(scopes_.Get(index));
}
inline void Auth::set_scopes(int index, ::api::Scope value) {
  scopes_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.Auth.scopes)
}
inline void Auth::add_scopes(::api::Scope value) {
  scopes_.Add(value);
  // @@protoc_insertion_point(field_add:api.Auth.scopes)
}
inline const ::google::protobuf::RepeatedField<int>&
Auth::scopes() const {
  // @@protoc_insertion_point(field_list:api.Auth.scopes)
  return scopes_;
}
inline ::google::protobuf::RepeatedField<int>*
Auth::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:api.Auth.scopes)
  return &scopes_;
}

// -------------------------------------------------------------------

// Bytes

// bytes bits = 1;
inline void Bytes::clear_bits() {
  bits_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bytes::bits() const {
  // @@protoc_insertion_point(field_get:api.Bytes.bits)
  return bits_.GetNoArena();
}
inline void Bytes::set_bits(const ::std::string& value) {
  
  bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Bytes.bits)
}
#if LANG_CXX11
inline void Bytes::set_bits(::std::string&& value) {
  
  bits_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Bytes.bits)
}
#endif
inline void Bytes::set_bits(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Bytes.bits)
}
inline void Bytes::set_bits(const void* value, size_t size) {
  
  bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Bytes.bits)
}
inline ::std::string* Bytes::mutable_bits() {
  
  // @@protoc_insertion_point(field_mutable:api.Bytes.bits)
  return bits_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bytes::release_bits() {
  // @@protoc_insertion_point(field_release:api.Bytes.bits)
  
  return bits_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bytes::set_allocated_bits(::std::string* bits) {
  if (bits != NULL) {
    
  } else {
    
  }
  bits_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bits);
  // @@protoc_insertion_point(field_set_allocated:api.Bytes.bits)
}

// -------------------------------------------------------------------

// Template

// string name = 1;
inline void Template::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::name() const {
  // @@protoc_insertion_point(field_get:api.Template.name)
  return name_.GetNoArena();
}
inline void Template::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Template.name)
}
#if LANG_CXX11
inline void Template::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Template.name)
}
#endif
inline void Template::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Template.name)
}
inline void Template::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Template.name)
}
inline ::std::string* Template::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Template.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_name() {
  // @@protoc_insertion_point(field_release:api.Template.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Template.name)
}

// string text = 2;
inline void Template::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::text() const {
  // @@protoc_insertion_point(field_get:api.Template.text)
  return text_.GetNoArena();
}
inline void Template::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Template.text)
}
#if LANG_CXX11
inline void Template::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Template.text)
}
#endif
inline void Template::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Template.text)
}
inline void Template::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Template.text)
}
inline ::std::string* Template::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.Template.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_text() {
  // @@protoc_insertion_point(field_release:api.Template.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.Template.text)
}

// -------------------------------------------------------------------

// JSONWebKeys

// string kty = 1;
inline void JSONWebKeys::clear_kty() {
  kty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JSONWebKeys::kty() const {
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.kty)
  return kty_.GetNoArena();
}
inline void JSONWebKeys::set_kty(const ::std::string& value) {
  
  kty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.JSONWebKeys.kty)
}
#if LANG_CXX11
inline void JSONWebKeys::set_kty(::std::string&& value) {
  
  kty_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.JSONWebKeys.kty)
}
#endif
inline void JSONWebKeys::set_kty(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.JSONWebKeys.kty)
}
inline void JSONWebKeys::set_kty(const char* value, size_t size) {
  
  kty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.JSONWebKeys.kty)
}
inline ::std::string* JSONWebKeys::mutable_kty() {
  
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.kty)
  return kty_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSONWebKeys::release_kty() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.kty)
  
  return kty_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSONWebKeys::set_allocated_kty(::std::string* kty) {
  if (kty != NULL) {
    
  } else {
    
  }
  kty_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kty);
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.kty)
}

// string kid = 2;
inline void JSONWebKeys::clear_kid() {
  kid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JSONWebKeys::kid() const {
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.kid)
  return kid_.GetNoArena();
}
inline void JSONWebKeys::set_kid(const ::std::string& value) {
  
  kid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.JSONWebKeys.kid)
}
#if LANG_CXX11
inline void JSONWebKeys::set_kid(::std::string&& value) {
  
  kid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.JSONWebKeys.kid)
}
#endif
inline void JSONWebKeys::set_kid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.JSONWebKeys.kid)
}
inline void JSONWebKeys::set_kid(const char* value, size_t size) {
  
  kid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.JSONWebKeys.kid)
}
inline ::std::string* JSONWebKeys::mutable_kid() {
  
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.kid)
  return kid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSONWebKeys::release_kid() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.kid)
  
  return kid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSONWebKeys::set_allocated_kid(::std::string* kid) {
  if (kid != NULL) {
    
  } else {
    
  }
  kid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kid);
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.kid)
}

// string use = 3;
inline void JSONWebKeys::clear_use() {
  use_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JSONWebKeys::use() const {
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.use)
  return use_.GetNoArena();
}
inline void JSONWebKeys::set_use(const ::std::string& value) {
  
  use_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.JSONWebKeys.use)
}
#if LANG_CXX11
inline void JSONWebKeys::set_use(::std::string&& value) {
  
  use_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.JSONWebKeys.use)
}
#endif
inline void JSONWebKeys::set_use(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  use_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.JSONWebKeys.use)
}
inline void JSONWebKeys::set_use(const char* value, size_t size) {
  
  use_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.JSONWebKeys.use)
}
inline ::std::string* JSONWebKeys::mutable_use() {
  
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.use)
  return use_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSONWebKeys::release_use() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.use)
  
  return use_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSONWebKeys::set_allocated_use(::std::string* use) {
  if (use != NULL) {
    
  } else {
    
  }
  use_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), use);
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.use)
}

// string n = 4;
inline void JSONWebKeys::clear_n() {
  n_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JSONWebKeys::n() const {
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.n)
  return n_.GetNoArena();
}
inline void JSONWebKeys::set_n(const ::std::string& value) {
  
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.JSONWebKeys.n)
}
#if LANG_CXX11
inline void JSONWebKeys::set_n(::std::string&& value) {
  
  n_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.JSONWebKeys.n)
}
#endif
inline void JSONWebKeys::set_n(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.JSONWebKeys.n)
}
inline void JSONWebKeys::set_n(const char* value, size_t size) {
  
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.JSONWebKeys.n)
}
inline ::std::string* JSONWebKeys::mutable_n() {
  
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.n)
  return n_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSONWebKeys::release_n() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.n)
  
  return n_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSONWebKeys::set_allocated_n(::std::string* n) {
  if (n != NULL) {
    
  } else {
    
  }
  n_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), n);
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.n)
}

// string e = 5;
inline void JSONWebKeys::clear_e() {
  e_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JSONWebKeys::e() const {
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.e)
  return e_.GetNoArena();
}
inline void JSONWebKeys::set_e(const ::std::string& value) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.JSONWebKeys.e)
}
#if LANG_CXX11
inline void JSONWebKeys::set_e(::std::string&& value) {
  
  e_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.JSONWebKeys.e)
}
#endif
inline void JSONWebKeys::set_e(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.JSONWebKeys.e)
}
inline void JSONWebKeys::set_e(const char* value, size_t size) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.JSONWebKeys.e)
}
inline ::std::string* JSONWebKeys::mutable_e() {
  
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.e)
  return e_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSONWebKeys::release_e() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.e)
  
  return e_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSONWebKeys::set_allocated_e(::std::string* e) {
  if (e != NULL) {
    
  } else {
    
  }
  e_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e);
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.e)
}

// repeated string x5c = 6;
inline int JSONWebKeys::x5c_size() const {
  return x5c_.size();
}
inline void JSONWebKeys::clear_x5c() {
  x5c_.Clear();
}
inline const ::std::string& JSONWebKeys::x5c(int index) const {
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.x5c)
  return x5c_.Get(index);
}
inline ::std::string* JSONWebKeys::mutable_x5c(int index) {
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.x5c)
  return x5c_.Mutable(index);
}
inline void JSONWebKeys::set_x5c(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.JSONWebKeys.x5c)
  x5c_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JSONWebKeys::set_x5c(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.JSONWebKeys.x5c)
  x5c_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JSONWebKeys::set_x5c(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  x5c_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.JSONWebKeys.x5c)
}
inline void JSONWebKeys::set_x5c(int index, const char* value, size_t size) {
  x5c_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.JSONWebKeys.x5c)
}
inline ::std::string* JSONWebKeys::add_x5c() {
  // @@protoc_insertion_point(field_add_mutable:api.JSONWebKeys.x5c)
  return x5c_.Add();
}
inline void JSONWebKeys::add_x5c(const ::std::string& value) {
  x5c_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.JSONWebKeys.x5c)
}
#if LANG_CXX11
inline void JSONWebKeys::add_x5c(::std::string&& value) {
  x5c_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.JSONWebKeys.x5c)
}
#endif
inline void JSONWebKeys::add_x5c(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  x5c_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.JSONWebKeys.x5c)
}
inline void JSONWebKeys::add_x5c(const char* value, size_t size) {
  x5c_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.JSONWebKeys.x5c)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JSONWebKeys::x5c() const {
  // @@protoc_insertion_point(field_list:api.JSONWebKeys.x5c)
  return x5c_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JSONWebKeys::mutable_x5c() {
  // @@protoc_insertion_point(field_mutable_list:api.JSONWebKeys.x5c)
  return &x5c_;
}

// -------------------------------------------------------------------

// Jwks

// repeated .api.JSONWebKeys keys = 1;
inline int Jwks::keys_size() const {
  return keys_.size();
}
inline void Jwks::clear_keys() {
  keys_.Clear();
}
inline ::api::JSONWebKeys* Jwks::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:api.Jwks.keys)
  return keys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >*
Jwks::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:api.Jwks.keys)
  return &keys_;
}
inline const ::api::JSONWebKeys& Jwks::keys(int index) const {
  // @@protoc_insertion_point(field_get:api.Jwks.keys)
  return keys_.Get(index);
}
inline ::api::JSONWebKeys* Jwks::add_keys() {
  // @@protoc_insertion_point(field_add:api.Jwks.keys)
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >&
Jwks::keys() const {
  // @@protoc_insertion_point(field_list:api.Jwks.keys)
  return keys_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HTTPRequest

// .api.HTTPMethod method = 1;
inline void HTTPRequest::clear_method() {
  method_ = 0;
}
inline ::api::HTTPMethod HTTPRequest::method() const {
  // @@protoc_insertion_point(field_get:api.HTTPRequest.method)
  return static_cast< ::api::HTTPMethod >(method_);
}
inline void HTTPRequest::set_method(::api::HTTPMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:api.HTTPRequest.method)
}

// string url = 2;
inline void HTTPRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPRequest::url() const {
  // @@protoc_insertion_point(field_get:api.HTTPRequest.url)
  return url_.GetNoArena();
}
inline void HTTPRequest::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.HTTPRequest.url)
}
#if LANG_CXX11
inline void HTTPRequest::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.HTTPRequest.url)
}
#endif
inline void HTTPRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.HTTPRequest.url)
}
inline void HTTPRequest::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.HTTPRequest.url)
}
inline ::std::string* HTTPRequest::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:api.HTTPRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPRequest::release_url() {
  // @@protoc_insertion_point(field_release:api.HTTPRequest.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:api.HTTPRequest.url)
}

// string token = 3;
inline void HTTPRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPRequest::token() const {
  // @@protoc_insertion_point(field_get:api.HTTPRequest.token)
  return token_.GetNoArena();
}
inline void HTTPRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.HTTPRequest.token)
}
#if LANG_CXX11
inline void HTTPRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.HTTPRequest.token)
}
#endif
inline void HTTPRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.HTTPRequest.token)
}
inline void HTTPRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.HTTPRequest.token)
}
inline ::std::string* HTTPRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:api.HTTPRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPRequest::release_token() {
  // @@protoc_insertion_point(field_release:api.HTTPRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:api.HTTPRequest.token)
}

// string account = 4;
inline void HTTPRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPRequest::account() const {
  // @@protoc_insertion_point(field_get:api.HTTPRequest.account)
  return account_.GetNoArena();
}
inline void HTTPRequest::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.HTTPRequest.account)
}
#if LANG_CXX11
inline void HTTPRequest::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.HTTPRequest.account)
}
#endif
inline void HTTPRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.HTTPRequest.account)
}
inline void HTTPRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.HTTPRequest.account)
}
inline ::std::string* HTTPRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:api.HTTPRequest.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPRequest::release_account() {
  // @@protoc_insertion_point(field_release:api.HTTPRequest.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPRequest::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:api.HTTPRequest.account)
}

// string contentType = 5;
inline void HTTPRequest::clear_contenttype() {
  contenttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HTTPRequest::contenttype() const {
  // @@protoc_insertion_point(field_get:api.HTTPRequest.contentType)
  return contenttype_.GetNoArena();
}
inline void HTTPRequest::set_contenttype(const ::std::string& value) {
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.HTTPRequest.contentType)
}
#if LANG_CXX11
inline void HTTPRequest::set_contenttype(::std::string&& value) {
  
  contenttype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.HTTPRequest.contentType)
}
#endif
inline void HTTPRequest::set_contenttype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.HTTPRequest.contentType)
}
inline void HTTPRequest::set_contenttype(const char* value, size_t size) {
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.HTTPRequest.contentType)
}
inline ::std::string* HTTPRequest::mutable_contenttype() {
  
  // @@protoc_insertion_point(field_mutable:api.HTTPRequest.contentType)
  return contenttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HTTPRequest::release_contenttype() {
  // @@protoc_insertion_point(field_release:api.HTTPRequest.contentType)
  
  return contenttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HTTPRequest::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype != NULL) {
    
  } else {
    
  }
  contenttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contenttype);
  // @@protoc_insertion_point(field_set_allocated:api.HTTPRequest.contentType)
}

// map<string, string> headers = 6;
inline int HTTPRequest::headers_size() const {
  return headers_.size();
}
inline void HTTPRequest::clear_headers() {
  headers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HTTPRequest::headers() const {
  // @@protoc_insertion_point(field_map:api.HTTPRequest.headers)
  return headers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HTTPRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:api.HTTPRequest.headers)
  return headers_.MutableMap();
}

// map<string, string> form = 7;
inline int HTTPRequest::form_size() const {
  return form_.size();
}
inline void HTTPRequest::clear_form() {
  form_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HTTPRequest::form() const {
  // @@protoc_insertion_point(field_map:api.HTTPRequest.form)
  return form_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HTTPRequest::mutable_form() {
  // @@protoc_insertion_point(field_mutable_map:api.HTTPRequest.form)
  return form_.MutableMap();
}

// map<string, string> cookies = 8;
inline int HTTPRequest::cookies_size() const {
  return cookies_.size();
}
inline void HTTPRequest::clear_cookies() {
  cookies_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
HTTPRequest::cookies() const {
  // @@protoc_insertion_point(field_map:api.HTTPRequest.cookies)
  return cookies_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
HTTPRequest::mutable_cookies() {
  // @@protoc_insertion_point(field_mutable_map:api.HTTPRequest.cookies)
  return cookies_.MutableMap();
}

// .api.Bytes body = 9;
inline bool HTTPRequest::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void HTTPRequest::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
inline const ::api::Bytes& HTTPRequest::_internal_body() const {
  return *body_;
}
inline const ::api::Bytes& HTTPRequest::body() const {
  const ::api::Bytes* p = body_;
  // @@protoc_insertion_point(field_get:api.HTTPRequest.body)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Bytes*>(
      &::api::_Bytes_default_instance_);
}
inline ::api::Bytes* HTTPRequest::release_body() {
  // @@protoc_insertion_point(field_release:api.HTTPRequest.body)
  
  ::api::Bytes* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::api::Bytes* HTTPRequest::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Bytes>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.HTTPRequest.body)
  return body_;
}
inline void HTTPRequest::set_allocated_body(::api::Bytes* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:api.HTTPRequest.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::api::Scope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::Scope>() {
  return ::api::Scope_descriptor();
}
template <> struct is_proto_enum< ::api::HTTPMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::HTTPMethod>() {
  return ::api::HTTPMethod_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
