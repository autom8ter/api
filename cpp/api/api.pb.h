// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class GetProfileByEmail;
class GetProfileByEmailDefaultTypeInternal;
extern GetProfileByEmailDefaultTypeInternal _GetProfileByEmail_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class UserMetadata;
class UserMetadataDefaultTypeInternal;
extern UserMetadataDefaultTypeInternal _UserMetadata_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::GetProfileByEmail* Arena::CreateMaybeMessage<::api::GetProfileByEmail>(Arena*);
template<> ::api::Identity* Arena::CreateMaybeMessage<::api::Identity>(Arena*);
template<> ::api::Profile* Arena::CreateMaybeMessage<::api::Profile>(Arena*);
template<> ::api::UserMetadata* Arena::CreateMaybeMessage<::api::UserMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

// ===================================================================

class GetProfileByEmail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.GetProfileByEmail) */ {
 public:
  GetProfileByEmail();
  virtual ~GetProfileByEmail();

  GetProfileByEmail(const GetProfileByEmail& from);

  inline GetProfileByEmail& operator=(const GetProfileByEmail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetProfileByEmail(GetProfileByEmail&& from) noexcept
    : GetProfileByEmail() {
    *this = ::std::move(from);
  }

  inline GetProfileByEmail& operator=(GetProfileByEmail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetProfileByEmail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProfileByEmail* internal_default_instance() {
    return reinterpret_cast<const GetProfileByEmail*>(
               &_GetProfileByEmail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetProfileByEmail* other);
  friend void swap(GetProfileByEmail& a, GetProfileByEmail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetProfileByEmail* New() const final {
    return CreateMaybeMessage<GetProfileByEmail>(NULL);
  }

  GetProfileByEmail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetProfileByEmail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetProfileByEmail& from);
  void MergeFrom(const GetProfileByEmail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProfileByEmail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:api.GetProfileByEmail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Profile) */ {
 public:
  Profile();
  virtual ~Profile();

  Profile(const Profile& from);

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Profile* other);
  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const final {
    return CreateMaybeMessage<Profile>(NULL);
  }

  Profile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Profile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.Identity identities = 11;
  int identities_size() const;
  void clear_identities();
  static const int kIdentitiesFieldNumber = 11;
  ::api::Identity* mutable_identities(int index);
  ::google::protobuf::RepeatedPtrField< ::api::Identity >*
      mutable_identities();
  const ::api::Identity& identities(int index) const;
  ::api::Identity* add_identities();
  const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
      identities() const;

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string given_name = 4;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 4;
  const ::std::string& given_name() const;
  void set_given_name(const ::std::string& value);
  #if LANG_CXX11
  void set_given_name(::std::string&& value);
  #endif
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  ::std::string* mutable_given_name();
  ::std::string* release_given_name();
  void set_allocated_given_name(::std::string* given_name);

  // string family_name = 5;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 5;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  #if LANG_CXX11
  void set_family_name(::std::string&& value);
  #endif
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // string picture = 6;
  void clear_picture();
  static const int kPictureFieldNumber = 6;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  #if LANG_CXX11
  void set_picture(::std::string&& value);
  #endif
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // string locale = 7;
  void clear_locale();
  static const int kLocaleFieldNumber = 7;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  #if LANG_CXX11
  void set_locale(::std::string&& value);
  #endif
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);

  // string user_id = 8;
  void clear_user_id();
  static const int kUserIdFieldNumber = 8;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string nickname = 9;
  void clear_nickname();
  static const int kNicknameFieldNumber = 9;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string connection = 10;
  void clear_connection();
  static const int kConnectionFieldNumber = 10;
  const ::std::string& connection() const;
  void set_connection(const ::std::string& value);
  #if LANG_CXX11
  void set_connection(::std::string&& value);
  #endif
  void set_connection(const char* value);
  void set_connection(const char* value, size_t size);
  ::std::string* mutable_connection();
  ::std::string* release_connection();
  void set_allocated_connection(::std::string* connection);

  // string last_ip = 12;
  void clear_last_ip();
  static const int kLastIpFieldNumber = 12;
  const ::std::string& last_ip() const;
  void set_last_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_last_ip(::std::string&& value);
  #endif
  void set_last_ip(const char* value);
  void set_last_ip(const char* value, size_t size);
  ::std::string* mutable_last_ip();
  ::std::string* release_last_ip();
  void set_allocated_last_ip(::std::string* last_ip);

  // string updated_at = 14;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 14;
  const ::std::string& updated_at() const;
  void set_updated_at(const ::std::string& value);
  #if LANG_CXX11
  void set_updated_at(::std::string&& value);
  #endif
  void set_updated_at(const char* value);
  void set_updated_at(const char* value, size_t size);
  ::std::string* mutable_updated_at();
  ::std::string* release_updated_at();
  void set_allocated_updated_at(::std::string* updated_at);

  // string created_at = 15;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 15;
  const ::std::string& created_at() const;
  void set_created_at(const ::std::string& value);
  #if LANG_CXX11
  void set_created_at(::std::string&& value);
  #endif
  void set_created_at(const char* value);
  void set_created_at(const char* value, size_t size);
  ::std::string* mutable_created_at();
  ::std::string* release_created_at();
  void set_allocated_created_at(::std::string* created_at);

  // .api.UserMetadata user_metadata = 20;
  bool has_user_metadata() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 20;
  private:
  const ::api::UserMetadata& _internal_user_metadata() const;
  public:
  const ::api::UserMetadata& user_metadata() const;
  ::api::UserMetadata* release_user_metadata();
  ::api::UserMetadata* mutable_user_metadata();
  void set_allocated_user_metadata(::api::UserMetadata* user_metadata);

  // int64 login_count = 13;
  void clear_login_count();
  static const int kLoginCountFieldNumber = 13;
  ::google::protobuf::int64 login_count() const;
  void set_login_count(::google::protobuf::int64 value);

  // bool email_verified = 2;
  void clear_email_verified();
  static const int kEmailVerifiedFieldNumber = 2;
  bool email_verified() const;
  void set_email_verified(bool value);

  // @@protoc_insertion_point(class_scope:api.Profile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::Identity > identities_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr given_name_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr connection_;
  ::google::protobuf::internal::ArenaStringPtr last_ip_;
  ::google::protobuf::internal::ArenaStringPtr updated_at_;
  ::google::protobuf::internal::ArenaStringPtr created_at_;
  ::api::UserMetadata* user_metadata_;
  ::google::protobuf::int64 login_count_;
  bool email_verified_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserMetadata) */ {
 public:
  UserMetadata();
  virtual ~UserMetadata();

  UserMetadata(const UserMetadata& from);

  inline UserMetadata& operator=(const UserMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetadata(UserMetadata&& from) noexcept
    : UserMetadata() {
    *this = ::std::move(from);
  }

  inline UserMetadata& operator=(UserMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMetadata* internal_default_instance() {
    return reinterpret_cast<const UserMetadata*>(
               &_UserMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserMetadata* other);
  friend void swap(UserMetadata& a, UserMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetadata* New() const final {
    return CreateMaybeMessage<UserMetadata>(NULL);
  }

  UserMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMetadata& from);
  void MergeFrom(const UserMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string phone = 1;
  void clear_phone();
  static const int kPhoneFieldNumber = 1;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string pay_token = 3;
  void clear_pay_token();
  static const int kPayTokenFieldNumber = 3;
  const ::std::string& pay_token() const;
  void set_pay_token(const ::std::string& value);
  #if LANG_CXX11
  void set_pay_token(::std::string&& value);
  #endif
  void set_pay_token(const char* value);
  void set_pay_token(const char* value, size_t size);
  ::std::string* mutable_pay_token();
  ::std::string* release_pay_token();
  void set_allocated_pay_token(::std::string* pay_token);

  // string last_contact = 4;
  void clear_last_contact();
  static const int kLastContactFieldNumber = 4;
  const ::std::string& last_contact() const;
  void set_last_contact(const ::std::string& value);
  #if LANG_CXX11
  void set_last_contact(::std::string&& value);
  #endif
  void set_last_contact(const char* value);
  void set_last_contact(const char* value, size_t size);
  ::std::string* mutable_last_contact();
  ::std::string* release_last_contact();
  void set_allocated_last_contact(::std::string* last_contact);

  // @@protoc_insertion_point(class_scope:api.UserMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr pay_token_;
  ::google::protobuf::internal::ArenaStringPtr last_contact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Identity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Identity* other);
  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(NULL);
  }

  Identity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string provider = 1;
  void clear_provider();
  static const int kProviderFieldNumber = 1;
  const ::std::string& provider() const;
  void set_provider(const ::std::string& value);
  #if LANG_CXX11
  void set_provider(::std::string&& value);
  #endif
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  ::std::string* mutable_provider();
  ::std::string* release_provider();
  void set_allocated_provider(::std::string* provider);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string connection = 3;
  void clear_connection();
  static const int kConnectionFieldNumber = 3;
  const ::std::string& connection() const;
  void set_connection(const ::std::string& value);
  #if LANG_CXX11
  void set_connection(::std::string&& value);
  #endif
  void set_connection(const char* value);
  void set_connection(const char* value, size_t size);
  ::std::string* mutable_connection();
  ::std::string* release_connection();
  void set_allocated_connection(::std::string* connection);

  // bool isSocial = 4;
  void clear_issocial();
  static const int kIsSocialFieldNumber = 4;
  bool issocial() const;
  void set_issocial(bool value);

  // @@protoc_insertion_point(class_scope:api.Identity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr provider_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr connection_;
  bool issocial_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetProfileByEmail

// string email = 1;
inline void GetProfileByEmail::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetProfileByEmail::email() const {
  // @@protoc_insertion_point(field_get:api.GetProfileByEmail.email)
  return email_.GetNoArena();
}
inline void GetProfileByEmail::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.GetProfileByEmail.email)
}
#if LANG_CXX11
inline void GetProfileByEmail::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.GetProfileByEmail.email)
}
#endif
inline void GetProfileByEmail::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.GetProfileByEmail.email)
}
inline void GetProfileByEmail::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.GetProfileByEmail.email)
}
inline ::std::string* GetProfileByEmail::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.GetProfileByEmail.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetProfileByEmail::release_email() {
  // @@protoc_insertion_point(field_release:api.GetProfileByEmail.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetProfileByEmail::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.GetProfileByEmail.email)
}

// -------------------------------------------------------------------

// Profile

// string email = 1;
inline void Profile::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::email() const {
  // @@protoc_insertion_point(field_get:api.Profile.email)
  return email_.GetNoArena();
}
inline void Profile::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.email)
}
#if LANG_CXX11
inline void Profile::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.email)
}
#endif
inline void Profile::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.email)
}
inline void Profile::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.email)
}
inline ::std::string* Profile::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_email() {
  // @@protoc_insertion_point(field_release:api.Profile.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.email)
}

// bool email_verified = 2;
inline void Profile::clear_email_verified() {
  email_verified_ = false;
}
inline bool Profile::email_verified() const {
  // @@protoc_insertion_point(field_get:api.Profile.email_verified)
  return email_verified_;
}
inline void Profile::set_email_verified(bool value) {
  
  email_verified_ = value;
  // @@protoc_insertion_point(field_set:api.Profile.email_verified)
}

// string name = 3;
inline void Profile::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::name() const {
  // @@protoc_insertion_point(field_get:api.Profile.name)
  return name_.GetNoArena();
}
inline void Profile::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.name)
}
#if LANG_CXX11
inline void Profile::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.name)
}
#endif
inline void Profile::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.name)
}
inline void Profile::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.name)
}
inline ::std::string* Profile::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_name() {
  // @@protoc_insertion_point(field_release:api.Profile.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.name)
}

// string given_name = 4;
inline void Profile::clear_given_name() {
  given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::given_name() const {
  // @@protoc_insertion_point(field_get:api.Profile.given_name)
  return given_name_.GetNoArena();
}
inline void Profile::set_given_name(const ::std::string& value) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.given_name)
}
#if LANG_CXX11
inline void Profile::set_given_name(::std::string&& value) {
  
  given_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.given_name)
}
#endif
inline void Profile::set_given_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.given_name)
}
inline void Profile::set_given_name(const char* value, size_t size) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.given_name)
}
inline ::std::string* Profile::mutable_given_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.given_name)
  return given_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_given_name() {
  // @@protoc_insertion_point(field_release:api.Profile.given_name)
  
  return given_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_given_name(::std::string* given_name) {
  if (given_name != NULL) {
    
  } else {
    
  }
  given_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), given_name);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.given_name)
}

// string family_name = 5;
inline void Profile::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::family_name() const {
  // @@protoc_insertion_point(field_get:api.Profile.family_name)
  return family_name_.GetNoArena();
}
inline void Profile::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.family_name)
}
#if LANG_CXX11
inline void Profile::set_family_name(::std::string&& value) {
  
  family_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.family_name)
}
#endif
inline void Profile::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.family_name)
}
inline void Profile::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.family_name)
}
inline ::std::string* Profile::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_family_name() {
  // @@protoc_insertion_point(field_release:api.Profile.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.family_name)
}

// string picture = 6;
inline void Profile::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::picture() const {
  // @@protoc_insertion_point(field_get:api.Profile.picture)
  return picture_.GetNoArena();
}
inline void Profile::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.picture)
}
#if LANG_CXX11
inline void Profile::set_picture(::std::string&& value) {
  
  picture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.picture)
}
#endif
inline void Profile::set_picture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.picture)
}
inline void Profile::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.picture)
}
inline ::std::string* Profile::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_picture() {
  // @@protoc_insertion_point(field_release:api.Profile.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.picture)
}

// string locale = 7;
inline void Profile::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::locale() const {
  // @@protoc_insertion_point(field_get:api.Profile.locale)
  return locale_.GetNoArena();
}
inline void Profile::set_locale(const ::std::string& value) {
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.locale)
}
#if LANG_CXX11
inline void Profile::set_locale(::std::string&& value) {
  
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.locale)
}
#endif
inline void Profile::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.locale)
}
inline void Profile::set_locale(const char* value, size_t size) {
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.locale)
}
inline ::std::string* Profile::mutable_locale() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_locale() {
  // @@protoc_insertion_point(field_release:api.Profile.locale)
  
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    
  } else {
    
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.locale)
}

// string user_id = 8;
inline void Profile::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::user_id() const {
  // @@protoc_insertion_point(field_get:api.Profile.user_id)
  return user_id_.GetNoArena();
}
inline void Profile::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.user_id)
}
#if LANG_CXX11
inline void Profile::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.user_id)
}
#endif
inline void Profile::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.user_id)
}
inline void Profile::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.user_id)
}
inline ::std::string* Profile::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_user_id() {
  // @@protoc_insertion_point(field_release:api.Profile.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.user_id)
}

// string nickname = 9;
inline void Profile::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::nickname() const {
  // @@protoc_insertion_point(field_get:api.Profile.nickname)
  return nickname_.GetNoArena();
}
inline void Profile::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.nickname)
}
#if LANG_CXX11
inline void Profile::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.nickname)
}
#endif
inline void Profile::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.nickname)
}
inline void Profile::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.nickname)
}
inline ::std::string* Profile::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_nickname() {
  // @@protoc_insertion_point(field_release:api.Profile.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.nickname)
}

// string connection = 10;
inline void Profile::clear_connection() {
  connection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::connection() const {
  // @@protoc_insertion_point(field_get:api.Profile.connection)
  return connection_.GetNoArena();
}
inline void Profile::set_connection(const ::std::string& value) {
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.connection)
}
#if LANG_CXX11
inline void Profile::set_connection(::std::string&& value) {
  
  connection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.connection)
}
#endif
inline void Profile::set_connection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.connection)
}
inline void Profile::set_connection(const char* value, size_t size) {
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.connection)
}
inline ::std::string* Profile::mutable_connection() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.connection)
  return connection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_connection() {
  // @@protoc_insertion_point(field_release:api.Profile.connection)
  
  return connection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_connection(::std::string* connection) {
  if (connection != NULL) {
    
  } else {
    
  }
  connection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.connection)
}

// repeated .api.Identity identities = 11;
inline int Profile::identities_size() const {
  return identities_.size();
}
inline void Profile::clear_identities() {
  identities_.Clear();
}
inline ::api::Identity* Profile::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:api.Profile.identities)
  return identities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::Identity >*
Profile::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:api.Profile.identities)
  return &identities_;
}
inline const ::api::Identity& Profile::identities(int index) const {
  // @@protoc_insertion_point(field_get:api.Profile.identities)
  return identities_.Get(index);
}
inline ::api::Identity* Profile::add_identities() {
  // @@protoc_insertion_point(field_add:api.Profile.identities)
  return identities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
Profile::identities() const {
  // @@protoc_insertion_point(field_list:api.Profile.identities)
  return identities_;
}

// string last_ip = 12;
inline void Profile::clear_last_ip() {
  last_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::last_ip() const {
  // @@protoc_insertion_point(field_get:api.Profile.last_ip)
  return last_ip_.GetNoArena();
}
inline void Profile::set_last_ip(const ::std::string& value) {
  
  last_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.last_ip)
}
#if LANG_CXX11
inline void Profile::set_last_ip(::std::string&& value) {
  
  last_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.last_ip)
}
#endif
inline void Profile::set_last_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.last_ip)
}
inline void Profile::set_last_ip(const char* value, size_t size) {
  
  last_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.last_ip)
}
inline ::std::string* Profile::mutable_last_ip() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.last_ip)
  return last_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_last_ip() {
  // @@protoc_insertion_point(field_release:api.Profile.last_ip)
  
  return last_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_last_ip(::std::string* last_ip) {
  if (last_ip != NULL) {
    
  } else {
    
  }
  last_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_ip);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.last_ip)
}

// int64 login_count = 13;
inline void Profile::clear_login_count() {
  login_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Profile::login_count() const {
  // @@protoc_insertion_point(field_get:api.Profile.login_count)
  return login_count_;
}
inline void Profile::set_login_count(::google::protobuf::int64 value) {
  
  login_count_ = value;
  // @@protoc_insertion_point(field_set:api.Profile.login_count)
}

// string updated_at = 14;
inline void Profile::clear_updated_at() {
  updated_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::updated_at() const {
  // @@protoc_insertion_point(field_get:api.Profile.updated_at)
  return updated_at_.GetNoArena();
}
inline void Profile::set_updated_at(const ::std::string& value) {
  
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.updated_at)
}
#if LANG_CXX11
inline void Profile::set_updated_at(::std::string&& value) {
  
  updated_at_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.updated_at)
}
#endif
inline void Profile::set_updated_at(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.updated_at)
}
inline void Profile::set_updated_at(const char* value, size_t size) {
  
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.updated_at)
}
inline ::std::string* Profile::mutable_updated_at() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.updated_at)
  return updated_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_updated_at() {
  // @@protoc_insertion_point(field_release:api.Profile.updated_at)
  
  return updated_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_updated_at(::std::string* updated_at) {
  if (updated_at != NULL) {
    
  } else {
    
  }
  updated_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updated_at);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.updated_at)
}

// string created_at = 15;
inline void Profile::clear_created_at() {
  created_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::created_at() const {
  // @@protoc_insertion_point(field_get:api.Profile.created_at)
  return created_at_.GetNoArena();
}
inline void Profile::set_created_at(const ::std::string& value) {
  
  created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.created_at)
}
#if LANG_CXX11
inline void Profile::set_created_at(::std::string&& value) {
  
  created_at_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.created_at)
}
#endif
inline void Profile::set_created_at(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.created_at)
}
inline void Profile::set_created_at(const char* value, size_t size) {
  
  created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.created_at)
}
inline ::std::string* Profile::mutable_created_at() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.created_at)
  return created_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_created_at() {
  // @@protoc_insertion_point(field_release:api.Profile.created_at)
  
  return created_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_created_at(::std::string* created_at) {
  if (created_at != NULL) {
    
  } else {
    
  }
  created_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), created_at);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.created_at)
}

// .api.UserMetadata user_metadata = 20;
inline bool Profile::has_user_metadata() const {
  return this != internal_default_instance() && user_metadata_ != NULL;
}
inline void Profile::clear_user_metadata() {
  if (GetArenaNoVirtual() == NULL && user_metadata_ != NULL) {
    delete user_metadata_;
  }
  user_metadata_ = NULL;
}
inline const ::api::UserMetadata& Profile::_internal_user_metadata() const {
  return *user_metadata_;
}
inline const ::api::UserMetadata& Profile::user_metadata() const {
  const ::api::UserMetadata* p = user_metadata_;
  // @@protoc_insertion_point(field_get:api.Profile.user_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::api::UserMetadata*>(
      &::api::_UserMetadata_default_instance_);
}
inline ::api::UserMetadata* Profile::release_user_metadata() {
  // @@protoc_insertion_point(field_release:api.Profile.user_metadata)
  
  ::api::UserMetadata* temp = user_metadata_;
  user_metadata_ = NULL;
  return temp;
}
inline ::api::UserMetadata* Profile::mutable_user_metadata() {
  
  if (user_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::api::UserMetadata>(GetArenaNoVirtual());
    user_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Profile.user_metadata)
  return user_metadata_;
}
inline void Profile::set_allocated_user_metadata(::api::UserMetadata* user_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_metadata_;
  }
  if (user_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_metadata, submessage_arena);
    }
    
  } else {
    
  }
  user_metadata_ = user_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.Profile.user_metadata)
}

// -------------------------------------------------------------------

// UserMetadata

// string phone = 1;
inline void UserMetadata::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::phone() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.phone)
  return phone_.GetNoArena();
}
inline void UserMetadata::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.phone)
}
#if LANG_CXX11
inline void UserMetadata::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.phone)
}
#endif
inline void UserMetadata::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.phone)
}
inline void UserMetadata::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.phone)
}
inline ::std::string* UserMetadata::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_phone() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.phone)
}

// string plan = 2;
inline void UserMetadata::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::plan() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.plan)
  return plan_.GetNoArena();
}
inline void UserMetadata::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.plan)
}
#if LANG_CXX11
inline void UserMetadata::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.plan)
}
#endif
inline void UserMetadata::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.plan)
}
inline void UserMetadata::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.plan)
}
inline ::std::string* UserMetadata::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_plan() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.plan)
}

// string pay_token = 3;
inline void UserMetadata::clear_pay_token() {
  pay_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::pay_token() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.pay_token)
  return pay_token_.GetNoArena();
}
inline void UserMetadata::set_pay_token(const ::std::string& value) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.pay_token)
}
#if LANG_CXX11
inline void UserMetadata::set_pay_token(::std::string&& value) {
  
  pay_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.pay_token)
}
#endif
inline void UserMetadata::set_pay_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.pay_token)
}
inline void UserMetadata::set_pay_token(const char* value, size_t size) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.pay_token)
}
inline ::std::string* UserMetadata::mutable_pay_token() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.pay_token)
  return pay_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_pay_token() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.pay_token)
  
  return pay_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_pay_token(::std::string* pay_token) {
  if (pay_token != NULL) {
    
  } else {
    
  }
  pay_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pay_token);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.pay_token)
}

// string last_contact = 4;
inline void UserMetadata::clear_last_contact() {
  last_contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::last_contact() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.last_contact)
  return last_contact_.GetNoArena();
}
inline void UserMetadata::set_last_contact(const ::std::string& value) {
  
  last_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.last_contact)
}
#if LANG_CXX11
inline void UserMetadata::set_last_contact(::std::string&& value) {
  
  last_contact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.last_contact)
}
#endif
inline void UserMetadata::set_last_contact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.last_contact)
}
inline void UserMetadata::set_last_contact(const char* value, size_t size) {
  
  last_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.last_contact)
}
inline ::std::string* UserMetadata::mutable_last_contact() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.last_contact)
  return last_contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_last_contact() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.last_contact)
  
  return last_contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_last_contact(::std::string* last_contact) {
  if (last_contact != NULL) {
    
  } else {
    
  }
  last_contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_contact);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.last_contact)
}

// -------------------------------------------------------------------

// Identity

// string provider = 1;
inline void Identity::clear_provider() {
  provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::provider() const {
  // @@protoc_insertion_point(field_get:api.Identity.provider)
  return provider_.GetNoArena();
}
inline void Identity::set_provider(const ::std::string& value) {
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.provider)
}
#if LANG_CXX11
inline void Identity::set_provider(::std::string&& value) {
  
  provider_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.provider)
}
#endif
inline void Identity::set_provider(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.provider)
}
inline void Identity::set_provider(const char* value, size_t size) {
  
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.provider)
}
inline ::std::string* Identity::mutable_provider() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.provider)
  return provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_provider() {
  // @@protoc_insertion_point(field_release:api.Identity.provider)
  
  return provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_provider(::std::string* provider) {
  if (provider != NULL) {
    
  } else {
    
  }
  provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.provider)
}

// string user_id = 2;
inline void Identity::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::user_id() const {
  // @@protoc_insertion_point(field_get:api.Identity.user_id)
  return user_id_.GetNoArena();
}
inline void Identity::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.user_id)
}
#if LANG_CXX11
inline void Identity::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.user_id)
}
#endif
inline void Identity::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.user_id)
}
inline void Identity::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.user_id)
}
inline ::std::string* Identity::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_user_id() {
  // @@protoc_insertion_point(field_release:api.Identity.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.user_id)
}

// string connection = 3;
inline void Identity::clear_connection() {
  connection_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::connection() const {
  // @@protoc_insertion_point(field_get:api.Identity.connection)
  return connection_.GetNoArena();
}
inline void Identity::set_connection(const ::std::string& value) {
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Identity.connection)
}
#if LANG_CXX11
inline void Identity::set_connection(::std::string&& value) {
  
  connection_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Identity.connection)
}
#endif
inline void Identity::set_connection(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Identity.connection)
}
inline void Identity::set_connection(const char* value, size_t size) {
  
  connection_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Identity.connection)
}
inline ::std::string* Identity::mutable_connection() {
  
  // @@protoc_insertion_point(field_mutable:api.Identity.connection)
  return connection_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_connection() {
  // @@protoc_insertion_point(field_release:api.Identity.connection)
  
  return connection_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_connection(::std::string* connection) {
  if (connection != NULL) {
    
  } else {
    
  }
  connection_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection);
  // @@protoc_insertion_point(field_set_allocated:api.Identity.connection)
}

// bool isSocial = 4;
inline void Identity::clear_issocial() {
  issocial_ = false;
}
inline bool Identity::issocial() const {
  // @@protoc_insertion_point(field_get:api.Identity.isSocial)
  return issocial_;
}
inline void Identity::set_issocial(bool value) {
  
  issocial_ = value;
  // @@protoc_insertion_point(field_set:api.Identity.isSocial)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
