// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Api.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ApiRoot

@implementation ApiRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ApiRoot_FileDescriptor

static GPBFileDescriptor *ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Card

@implementation Card

@dynamic number;
@dynamic expMonth;
@dynamic expYear;
@dynamic cvc;

typedef struct Card__storage_ {
  uint32_t _has_storage_[1];
  NSString *number;
  NSString *expMonth;
  NSString *expYear;
  NSString *cvc;
} Card__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = Card_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Card__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expMonth",
        .dataTypeSpecific.className = NULL,
        .number = Card_FieldNumber_ExpMonth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Card__storage_, expMonth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expYear",
        .dataTypeSpecific.className = NULL,
        .number = Card_FieldNumber_ExpYear,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Card__storage_, expYear),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cvc",
        .dataTypeSpecific.className = NULL,
        .number = Card_FieldNumber_Cvc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Card__storage_, cvc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Card class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Card__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - User

@implementation User

@dynamic userId;
@dynamic name;
@dynamic givenName;
@dynamic familyName;
@dynamic gender;
@dynamic birthdate;
@dynamic email;
@dynamic phoneNumber;
@dynamic picture;
@dynamic nickname;
@dynamic userMetadata, userMetadata_Count;
@dynamic appMetadata, appMetadata_Count;
@dynamic lastIp;
@dynamic blocked;
@dynamic multifactorArray, multifactorArray_Count;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic phoneVerified;
@dynamic emailVerified;
@dynamic password;
@dynamic identitiesArray, identitiesArray_Count;
@dynamic rolesArray, rolesArray_Count;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *name;
  NSString *givenName;
  NSString *familyName;
  NSString *gender;
  NSString *birthdate;
  NSString *email;
  NSString *phoneNumber;
  NSString *picture;
  NSMutableDictionary *userMetadata;
  NSMutableDictionary *appMetadata;
  NSString *lastIp;
  NSString *nickname;
  NSMutableArray *multifactorArray;
  NSString *createdAt;
  NSString *updatedAt;
  NSString *password;
  NSMutableArray *identitiesArray;
  NSMutableArray *rolesArray;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "givenName",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_GivenName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, givenName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "familyName",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_FamilyName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(User__storage_, familyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(User__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthdate",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Birthdate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(User__storage_, birthdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Email,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(User__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_PhoneNumber,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(User__storage_, phoneNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Picture,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(User__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userMetadata",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UserMetadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, userMetadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appMetadata",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_AppMetadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, appMetadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastIp",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_LastIp,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(User__storage_, lastIp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blocked",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Blocked,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Nickname,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(User__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "multifactorArray",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_MultifactorArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, multifactorArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_CreatedAt,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(User__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UpdatedAt,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(User__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneVerified",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_PhoneVerified,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "emailVerified",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_EmailVerified,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Password,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(User__storage_, password),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Identity),
        .number = User_FieldNumber_IdentitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, identitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rolesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Role),
        .number = User_FieldNumber_RolesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, rolesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserMetadata

@implementation UserMetadata

@dynamic status;
@dynamic bio, bio_Count;
@dynamic hasAddress, address;
@dynamic tags, tags_Count;

typedef struct UserMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *status;
  NSMutableDictionary *bio;
  Address *address;
  NSMutableDictionary *tags;
} UserMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bio",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_Bio,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, bio),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = UserMetadata_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tags",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_Tags,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, tags),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserMetadata class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Address

@implementation Address

@dynamic city;
@dynamic state;
@dynamic line1;
@dynamic line2;
@dynamic zip;

typedef struct Address__storage_ {
  uint32_t _has_storage_[1];
  NSString *city;
  NSString *state;
  NSString *line1;
  NSString *line2;
  NSString *zip;
} Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_City,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Address__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Address__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "line1",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Line1,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Address__storage_, line1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "line2",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Line2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Address__storage_, line2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "zip",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Zip,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Address__storage_, zip),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Address class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppMetadata

@implementation AppMetadata

@dynamic description_p;
@dynamic accountBalance;
@dynamic hasPlan, plan;
@dynamic tags, tags_Count;
@dynamic hasCard, card;

typedef struct AppMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  NSString *accountBalance;
  Plan *plan;
  NSMutableDictionary *tags;
  Card *card;
} AppMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = AppMetadata_FieldNumber_Description_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "accountBalance",
        .dataTypeSpecific.className = NULL,
        .number = AppMetadata_FieldNumber_AccountBalance,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, accountBalance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = GPBStringifySymbol(Plan),
        .number = AppMetadata_FieldNumber_Plan,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tags",
        .dataTypeSpecific.className = NULL,
        .number = AppMetadata_FieldNumber_Tags,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, tags),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "card",
        .dataTypeSpecific.className = GPBStringifySymbol(Card),
        .number = AppMetadata_FieldNumber_Card,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, card),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppMetadata class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Plan

@implementation Plan

@dynamic id_p;
@dynamic active;
@dynamic amount;
@dynamic interval;
@dynamic nickname;
@dynamic hasProduct, product;

typedef struct Plan__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *interval;
  NSString *nickname;
  Product *product;
  int64_t amount;
} Plan__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Plan_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Plan__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "active",
        .dataTypeSpecific.className = NULL,
        .number = Plan_FieldNumber_Active,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = Plan_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Plan__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "interval",
        .dataTypeSpecific.className = NULL,
        .number = Plan_FieldNumber_Interval,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Plan__storage_, interval),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = Plan_FieldNumber_Nickname,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Plan__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "product",
        .dataTypeSpecific.className = GPBStringifySymbol(Product),
        .number = Plan_FieldNumber_Product,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Plan__storage_, product),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Plan class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Plan__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Product

@implementation Product

@dynamic id_p;
@dynamic description_p;
@dynamic URL;
@dynamic tags, tags_Count;

typedef struct Product__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *description_p;
  NSString *URL;
  NSMutableDictionary *tags;
} Product__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Product_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Product__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Product_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Product__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = Product_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Product__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tags",
        .dataTypeSpecific.className = NULL,
        .number = Product_FieldNumber_Tags,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Product__storage_, tags),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Product class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Product__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Identity

@implementation Identity

@dynamic connection;
@dynamic userId;
@dynamic provider;
@dynamic isSocial;

typedef struct Identity__storage_ {
  uint32_t _has_storage_[1];
  NSString *connection;
  NSString *userId;
  NSString *provider;
} Identity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connection",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Connection,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Identity__storage_, connection),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Identity__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "provider",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Provider,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Identity__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSocial",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_IsSocial,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Identity class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Identity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Role

@implementation Role

@dynamic id_p;
@dynamic name;
@dynamic description_p;

typedef struct Role__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *description_p;
} Role__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Role_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Role__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Role_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Role__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Role_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Role__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Role class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Role__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
