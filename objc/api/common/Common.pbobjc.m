// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "common/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonRoot

@implementation CommonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - CommonRoot_FileDescriptor

static GPBFileDescriptor *CommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"common"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum HTTPMethod

GPBEnumDescriptor *HTTPMethod_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Get\000Post\000Patch\000";
    static const int32_t values[] = {
        HTTPMethod_Get,
        HTTPMethod_Post,
        HTTPMethod_Patch,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HTTPMethod)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HTTPMethod_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HTTPMethod_IsValidValue(int32_t value__) {
  switch (value__) {
    case HTTPMethod_Get:
    case HTTPMethod_Post:
    case HTTPMethod_Patch:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - String

@implementation String

@dynamic text;

typedef struct String__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
} String__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = String_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(String__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[String class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(String__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Bytes

@implementation Bytes

@dynamic bits;

typedef struct Bytes__storage_ {
  uint32_t _has_storage_[1];
  NSData *bits;
} Bytes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bits",
        .dataTypeSpecific.className = NULL,
        .number = Bytes_FieldNumber_Bits,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Bytes__storage_, bits),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Bytes class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Bytes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StringArray

@implementation StringArray

@dynamic stringsArray, stringsArray_Count;

typedef struct StringArray__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *stringsArray;
} StringArray__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stringsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = StringArray_FieldNumber_StringsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StringArray__storage_, stringsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StringArray class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StringArray__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StringMap

@implementation StringMap

@dynamic stringMap, stringMap_Count;

typedef struct StringMap__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *stringMap;
} StringMap__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stringMap",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = StringMap_FieldNumber_StringMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StringMap__storage_, stringMap),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StringMap class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StringMap__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Empty

@implementation Empty


typedef struct Empty__storage_ {
  uint32_t _has_storage_[1];
} Empty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Empty class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Empty__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Identifier

@implementation Identifier

@dynamic hasId_p, id_p;

typedef struct Identifier__storage_ {
  uint32_t _has_storage_[1];
  String *id_p;
} Identifier__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Identifier_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Identifier__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Identifier class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Identifier__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Int64

@implementation Int64

@dynamic num;

typedef struct Int64__storage_ {
  uint32_t _has_storage_[1];
  int64_t num;
} Int64__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = Int64_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Int64__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Int64 class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Int64__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Float64

@implementation Float64

@dynamic num;

typedef struct Float64__storage_ {
  uint32_t _has_storage_[1];
  double num;
} Float64__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = Float64_FieldNumber_Num,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Float64__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Float64 class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Float64__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RGBA

@implementation RGBA

@dynamic hasR, r;
@dynamic hasG, g;
@dynamic hasB, b;
@dynamic hasA, a;

typedef struct RGBA__storage_ {
  uint32_t _has_storage_[1];
  Int64 *r;
  Int64 *g;
  Int64 *b;
  Int64 *a;
} RGBA__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "r",
        .dataTypeSpecific.className = GPBStringifySymbol(Int64),
        .number = RGBA_FieldNumber_R,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RGBA__storage_, r),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "g",
        .dataTypeSpecific.className = GPBStringifySymbol(Int64),
        .number = RGBA_FieldNumber_G,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RGBA__storage_, g),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "b",
        .dataTypeSpecific.className = GPBStringifySymbol(Int64),
        .number = RGBA_FieldNumber_B,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RGBA__storage_, b),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "a",
        .dataTypeSpecific.className = GPBStringifySymbol(Int64),
        .number = RGBA_FieldNumber_A,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RGBA__storage_, a),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RGBA class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RGBA__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HTTPRequest

@implementation HTTPRequest

@dynamic method;
@dynamic hasURL, URL;
@dynamic hasForm, form;
@dynamic hasBody, body;

typedef struct HTTPRequest__storage_ {
  uint32_t _has_storage_[1];
  HTTPMethod method;
  String *URL;
  StringMap *form;
  Bytes *body;
} HTTPRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "method",
        .dataTypeSpecific.enumDescFunc = HTTPMethod_EnumDescriptor,
        .number = HTTPRequest_FieldNumber_Method,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HTTPRequest__storage_, method),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = HTTPRequest_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HTTPRequest__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "form",
        .dataTypeSpecific.className = GPBStringifySymbol(StringMap),
        .number = HTTPRequest_FieldNumber_Form,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HTTPRequest__storage_, form),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = GPBStringifySymbol(Bytes),
        .number = HTTPRequest_FieldNumber_Body,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HTTPRequest__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HTTPRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HTTPRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HTTPRequest_Method_RawValue(HTTPRequest *message) {
  GPBDescriptor *descriptor = [HTTPRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HTTPRequest_FieldNumber_Method];
  return GPBGetMessageInt32Field(message, field);
}

void SetHTTPRequest_Method_RawValue(HTTPRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [HTTPRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HTTPRequest_FieldNumber_Method];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Token

@implementation Token

@dynamic hasAccessToken, accessToken;
@dynamic hasTokenType, tokenType;
@dynamic hasRefreshToken, refreshToken;
@dynamic hasExpiry, expiry;
@dynamic hasIdToken, idToken;

typedef struct Token__storage_ {
  uint32_t _has_storage_[1];
  String *accessToken;
  String *tokenType;
  String *refreshToken;
  String *expiry;
  String *idToken;
} Token__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Token_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Token__storage_, accessToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokenType",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Token_FieldNumber_TokenType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Token__storage_, tokenType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "refreshToken",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Token_FieldNumber_RefreshToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Token__storage_, refreshToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expiry",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Token_FieldNumber_Expiry,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Token__storage_, expiry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "idToken",
        .dataTypeSpecific.className = GPBStringifySymbol(String),
        .number = Token_FieldNumber_IdToken,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Token__storage_, idToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Token class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Token__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
