/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var errors_errors_pb = require('../errors/errors_pb.js');
var voice_voice_pb = require('../voice/voice_pb.js');
goog.exportSymbol('proto.assistant.Action', null, global);
goog.exportSymbol('proto.assistant.ActionResp', null, global);
goog.exportSymbol('proto.assistant.Actions', null, global);
goog.exportSymbol('proto.assistant.AssistantDefaultsResp', null, global);
goog.exportSymbol('proto.assistant.AssistantResp', null, global);
goog.exportSymbol('proto.assistant.Collect', null, global);
goog.exportSymbol('proto.assistant.Confirm', null, global);
goog.exportSymbol('proto.assistant.CreateAssistantReq', null, global);
goog.exportSymbol('proto.assistant.GetAssistantDefaultsReq', null, global);
goog.exportSymbol('proto.assistant.GetAssistantReq', null, global);
goog.exportSymbol('proto.assistant.Handoff', null, global);
goog.exportSymbol('proto.assistant.Image', null, global);
goog.exportSymbol('proto.assistant.Links', null, global);
goog.exportSymbol('proto.assistant.ListAllAssistantsReq', null, global);
goog.exportSymbol('proto.assistant.ListAllAssistantsResp', null, global);
goog.exportSymbol('proto.assistant.Listen', null, global);
goog.exportSymbol('proto.assistant.MaxAttempts', null, global);
goog.exportSymbol('proto.assistant.Messages', null, global);
goog.exportSymbol('proto.assistant.OnComplete', null, global);
goog.exportSymbol('proto.assistant.OnConfirm', null, global);
goog.exportSymbol('proto.assistant.OnFailure', null, global);
goog.exportSymbol('proto.assistant.OnReject', null, global);
goog.exportSymbol('proto.assistant.OnSuccess', null, global);
goog.exportSymbol('proto.assistant.Question', null, global);
goog.exportSymbol('proto.assistant.Redirect', null, global);
goog.exportSymbol('proto.assistant.Remember', null, global);
goog.exportSymbol('proto.assistant.Require', null, global);
goog.exportSymbol('proto.assistant.Say', null, global);
goog.exportSymbol('proto.assistant.Show', null, global);
goog.exportSymbol('proto.assistant.UpdateAssistantDefaultsReq', null, global);
goog.exportSymbol('proto.assistant.UpdateAssistantStyleSheetReq', null, global);
goog.exportSymbol('proto.assistant.Validate', null, global);
goog.exportSymbol('proto.assistant.WebHook', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Links = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Links, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Links.displayName = 'proto.assistant.Links';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Links.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Links.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Links} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Links.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldTypes: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tasks: jspb.Message.getFieldWithDefault(msg, 2, ""),
    modelBuilds: jspb.Message.getFieldWithDefault(msg, 3, ""),
    queries: jspb.Message.getFieldWithDefault(msg, 4, ""),
    styleSheet: jspb.Message.getFieldWithDefault(msg, 5, ""),
    defaults: jspb.Message.getFieldWithDefault(msg, 6, ""),
    dialogues: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Links}
 */
proto.assistant.Links.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Links;
  return proto.assistant.Links.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Links} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Links}
 */
proto.assistant.Links.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldTypes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTasks(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelBuilds(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueries(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStyleSheet(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaults(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialogues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Links.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Links.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Links} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Links.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldTypes();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTasks();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModelBuilds();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQueries();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStyleSheet();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDefaults();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDialogues();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string field_types = 1;
 * @return {string}
 */
proto.assistant.Links.prototype.getFieldTypes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.Links.prototype.setFieldTypes = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tasks = 2;
 * @return {string}
 */
proto.assistant.Links.prototype.getTasks = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.Links.prototype.setTasks = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string model_builds = 3;
 * @return {string}
 */
proto.assistant.Links.prototype.getModelBuilds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.assistant.Links.prototype.setModelBuilds = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string queries = 4;
 * @return {string}
 */
proto.assistant.Links.prototype.getQueries = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.assistant.Links.prototype.setQueries = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string style_sheet = 5;
 * @return {string}
 */
proto.assistant.Links.prototype.getStyleSheet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.assistant.Links.prototype.setStyleSheet = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string defaults = 6;
 * @return {string}
 */
proto.assistant.Links.prototype.getDefaults = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.assistant.Links.prototype.setDefaults = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string dialogues = 7;
 * @return {string}
 */
proto.assistant.Links.prototype.getDialogues = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.assistant.Links.prototype.setDialogues = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.assistant.Action.oneofGroups_);
};
goog.inherits(proto.assistant.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Action.displayName = 'proto.assistant.Action';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.assistant.Action.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.assistant.Action.ActiontypeCase = {
  ACTIONTYPE_NOT_SET: 0,
  SAY: 1,
  SHOW: 2,
  LISTEN: 3,
  REDIRECT: 4,
  HANDOFF: 5,
  REMEMBER: 6,
  COLLECT: 7
};

/**
 * @return {proto.assistant.Action.ActiontypeCase}
 */
proto.assistant.Action.prototype.getActiontypeCase = function() {
  return /** @type {proto.assistant.Action.ActiontypeCase} */(jspb.Message.computeOneofCase(this, proto.assistant.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    say: (f = msg.getSay()) && proto.assistant.Say.toObject(includeInstance, f),
    show: (f = msg.getShow()) && proto.assistant.Show.toObject(includeInstance, f),
    listen: (f = msg.getListen()) && proto.assistant.Listen.toObject(includeInstance, f),
    redirect: (f = msg.getRedirect()) && proto.assistant.Redirect.toObject(includeInstance, f),
    handoff: (f = msg.getHandoff()) && proto.assistant.Handoff.toObject(includeInstance, f),
    remember: (f = msg.getRemember()) && proto.assistant.Remember.toObject(includeInstance, f),
    collect: (f = msg.getCollect()) && proto.assistant.Collect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Action}
 */
proto.assistant.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Action;
  return proto.assistant.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Action}
 */
proto.assistant.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.Say;
      reader.readMessage(value,proto.assistant.Say.deserializeBinaryFromReader);
      msg.setSay(value);
      break;
    case 2:
      var value = new proto.assistant.Show;
      reader.readMessage(value,proto.assistant.Show.deserializeBinaryFromReader);
      msg.setShow(value);
      break;
    case 3:
      var value = new proto.assistant.Listen;
      reader.readMessage(value,proto.assistant.Listen.deserializeBinaryFromReader);
      msg.setListen(value);
      break;
    case 4:
      var value = new proto.assistant.Redirect;
      reader.readMessage(value,proto.assistant.Redirect.deserializeBinaryFromReader);
      msg.setRedirect(value);
      break;
    case 5:
      var value = new proto.assistant.Handoff;
      reader.readMessage(value,proto.assistant.Handoff.deserializeBinaryFromReader);
      msg.setHandoff(value);
      break;
    case 6:
      var value = new proto.assistant.Remember;
      reader.readMessage(value,proto.assistant.Remember.deserializeBinaryFromReader);
      msg.setRemember(value);
      break;
    case 7:
      var value = new proto.assistant.Collect;
      reader.readMessage(value,proto.assistant.Collect.deserializeBinaryFromReader);
      msg.setCollect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.assistant.Say.serializeBinaryToWriter
    );
  }
  f = message.getShow();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.assistant.Show.serializeBinaryToWriter
    );
  }
  f = message.getListen();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.assistant.Listen.serializeBinaryToWriter
    );
  }
  f = message.getRedirect();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.assistant.Redirect.serializeBinaryToWriter
    );
  }
  f = message.getHandoff();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.assistant.Handoff.serializeBinaryToWriter
    );
  }
  f = message.getRemember();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.assistant.Remember.serializeBinaryToWriter
    );
  }
  f = message.getCollect();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.assistant.Collect.serializeBinaryToWriter
    );
  }
};


/**
 * optional Say say = 1;
 * @return {?proto.assistant.Say}
 */
proto.assistant.Action.prototype.getSay = function() {
  return /** @type{?proto.assistant.Say} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Say, 1));
};


/** @param {?proto.assistant.Say|undefined} value */
proto.assistant.Action.prototype.setSay = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.assistant.Action.oneofGroups_[0], value);
};


proto.assistant.Action.prototype.clearSay = function() {
  this.setSay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Action.prototype.hasSay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Show show = 2;
 * @return {?proto.assistant.Show}
 */
proto.assistant.Action.prototype.getShow = function() {
  return /** @type{?proto.assistant.Show} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Show, 2));
};


/** @param {?proto.assistant.Show|undefined} value */
proto.assistant.Action.prototype.setShow = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.assistant.Action.oneofGroups_[0], value);
};


proto.assistant.Action.prototype.clearShow = function() {
  this.setShow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Action.prototype.hasShow = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Listen listen = 3;
 * @return {?proto.assistant.Listen}
 */
proto.assistant.Action.prototype.getListen = function() {
  return /** @type{?proto.assistant.Listen} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Listen, 3));
};


/** @param {?proto.assistant.Listen|undefined} value */
proto.assistant.Action.prototype.setListen = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.assistant.Action.oneofGroups_[0], value);
};


proto.assistant.Action.prototype.clearListen = function() {
  this.setListen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Action.prototype.hasListen = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Redirect redirect = 4;
 * @return {?proto.assistant.Redirect}
 */
proto.assistant.Action.prototype.getRedirect = function() {
  return /** @type{?proto.assistant.Redirect} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Redirect, 4));
};


/** @param {?proto.assistant.Redirect|undefined} value */
proto.assistant.Action.prototype.setRedirect = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.assistant.Action.oneofGroups_[0], value);
};


proto.assistant.Action.prototype.clearRedirect = function() {
  this.setRedirect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Action.prototype.hasRedirect = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Handoff handoff = 5;
 * @return {?proto.assistant.Handoff}
 */
proto.assistant.Action.prototype.getHandoff = function() {
  return /** @type{?proto.assistant.Handoff} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Handoff, 5));
};


/** @param {?proto.assistant.Handoff|undefined} value */
proto.assistant.Action.prototype.setHandoff = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.assistant.Action.oneofGroups_[0], value);
};


proto.assistant.Action.prototype.clearHandoff = function() {
  this.setHandoff(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Action.prototype.hasHandoff = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Remember remember = 6;
 * @return {?proto.assistant.Remember}
 */
proto.assistant.Action.prototype.getRemember = function() {
  return /** @type{?proto.assistant.Remember} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Remember, 6));
};


/** @param {?proto.assistant.Remember|undefined} value */
proto.assistant.Action.prototype.setRemember = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.assistant.Action.oneofGroups_[0], value);
};


proto.assistant.Action.prototype.clearRemember = function() {
  this.setRemember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Action.prototype.hasRemember = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Collect collect = 7;
 * @return {?proto.assistant.Collect}
 */
proto.assistant.Action.prototype.getCollect = function() {
  return /** @type{?proto.assistant.Collect} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Collect, 7));
};


/** @param {?proto.assistant.Collect|undefined} value */
proto.assistant.Action.prototype.setCollect = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.assistant.Action.oneofGroups_[0], value);
};


proto.assistant.Action.prototype.clearCollect = function() {
  this.setCollect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Action.prototype.hasCollect = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Actions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.assistant.Actions.repeatedFields_, null);
};
goog.inherits(proto.assistant.Actions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Actions.displayName = 'proto.assistant.Actions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.assistant.Actions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Actions.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Actions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Actions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Actions.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.assistant.Action.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Actions}
 */
proto.assistant.Actions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Actions;
  return proto.assistant.Actions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Actions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Actions}
 */
proto.assistant.Actions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.Action;
      reader.readMessage(value,proto.assistant.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Actions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Actions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Actions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Actions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.assistant.Action.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array<!proto.assistant.Action>}
 */
proto.assistant.Actions.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.assistant.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.assistant.Action, 1));
};


/** @param {!Array<!proto.assistant.Action>} value */
proto.assistant.Actions.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.assistant.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.assistant.Action}
 */
proto.assistant.Actions.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.assistant.Action, opt_index);
};


proto.assistant.Actions.prototype.clearActionsList = function() {
  this.setActionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Say = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Say, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Say.displayName = 'proto.assistant.Say';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Say.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Say.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Say} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Say.toObject = function(includeInstance, msg) {
  var f, obj = {
    speech: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Say}
 */
proto.assistant.Say.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Say;
  return proto.assistant.Say.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Say} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Say}
 */
proto.assistant.Say.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeech(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Say.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Say.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Say} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Say.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeech();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string speech = 1;
 * @return {string}
 */
proto.assistant.Say.prototype.getSpeech = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.Say.prototype.setSpeech = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.OnSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.OnSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.OnSuccess.displayName = 'proto.assistant.OnSuccess';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.OnSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.OnSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.OnSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    say: (f = msg.getSay()) && proto.assistant.Say.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.OnSuccess}
 */
proto.assistant.OnSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.OnSuccess;
  return proto.assistant.OnSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.OnSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.OnSuccess}
 */
proto.assistant.OnSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.Say;
      reader.readMessage(value,proto.assistant.Say.deserializeBinaryFromReader);
      msg.setSay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.OnSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.OnSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.OnSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.assistant.Say.serializeBinaryToWriter
    );
  }
};


/**
 * optional Say say = 1;
 * @return {?proto.assistant.Say}
 */
proto.assistant.OnSuccess.prototype.getSay = function() {
  return /** @type{?proto.assistant.Say} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Say, 1));
};


/** @param {?proto.assistant.Say|undefined} value */
proto.assistant.OnSuccess.prototype.setSay = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.assistant.OnSuccess.prototype.clearSay = function() {
  this.setSay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.OnSuccess.prototype.hasSay = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.WebHook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.WebHook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.WebHook.displayName = 'proto.assistant.WebHook';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.WebHook.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.WebHook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.WebHook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.WebHook.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    method: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.WebHook}
 */
proto.assistant.WebHook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.WebHook;
  return proto.assistant.WebHook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.WebHook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.WebHook}
 */
proto.assistant.WebHook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.WebHook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.WebHook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.WebHook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.WebHook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.assistant.WebHook.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.WebHook.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string method = 2;
 * @return {string}
 */
proto.assistant.WebHook.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.WebHook.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.OnFailure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.OnFailure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.OnFailure.displayName = 'proto.assistant.OnFailure';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.OnFailure.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.OnFailure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.OnFailure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnFailure.toObject = function(includeInstance, msg) {
  var f, obj = {
    repeatQuestion: jspb.Message.getFieldWithDefault(msg, 1, false),
    messages: (f = msg.getMessages()) && proto.assistant.Messages.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.OnFailure}
 */
proto.assistant.OnFailure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.OnFailure;
  return proto.assistant.OnFailure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.OnFailure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.OnFailure}
 */
proto.assistant.OnFailure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRepeatQuestion(value);
      break;
    case 2:
      var value = new proto.assistant.Messages;
      reader.readMessage(value,proto.assistant.Messages.deserializeBinaryFromReader);
      msg.setMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.OnFailure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.OnFailure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.OnFailure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnFailure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepeatQuestion();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessages();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.assistant.Messages.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool repeat_question = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.assistant.OnFailure.prototype.getRepeatQuestion = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.assistant.OnFailure.prototype.setRepeatQuestion = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Messages messages = 2;
 * @return {?proto.assistant.Messages}
 */
proto.assistant.OnFailure.prototype.getMessages = function() {
  return /** @type{?proto.assistant.Messages} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Messages, 2));
};


/** @param {?proto.assistant.Messages|undefined} value */
proto.assistant.OnFailure.prototype.setMessages = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.assistant.OnFailure.prototype.clearMessages = function() {
  this.setMessages(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.OnFailure.prototype.hasMessages = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.OnConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.OnConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.OnConfirm.displayName = 'proto.assistant.OnConfirm';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.OnConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.OnConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.OnConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    say: (f = msg.getSay()) && proto.assistant.Say.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.OnConfirm}
 */
proto.assistant.OnConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.OnConfirm;
  return proto.assistant.OnConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.OnConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.OnConfirm}
 */
proto.assistant.OnConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.Say;
      reader.readMessage(value,proto.assistant.Say.deserializeBinaryFromReader);
      msg.setSay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.OnConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.OnConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.OnConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.assistant.Say.serializeBinaryToWriter
    );
  }
};


/**
 * optional Say say = 1;
 * @return {?proto.assistant.Say}
 */
proto.assistant.OnConfirm.prototype.getSay = function() {
  return /** @type{?proto.assistant.Say} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Say, 1));
};


/** @param {?proto.assistant.Say|undefined} value */
proto.assistant.OnConfirm.prototype.setSay = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.assistant.OnConfirm.prototype.clearSay = function() {
  this.setSay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.OnConfirm.prototype.hasSay = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.OnReject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.OnReject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.OnReject.displayName = 'proto.assistant.OnReject';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.OnReject.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.OnReject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.OnReject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnReject.toObject = function(includeInstance, msg) {
  var f, obj = {
    messages: (f = msg.getMessages()) && proto.assistant.Messages.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.OnReject}
 */
proto.assistant.OnReject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.OnReject;
  return proto.assistant.OnReject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.OnReject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.OnReject}
 */
proto.assistant.OnReject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.Messages;
      reader.readMessage(value,proto.assistant.Messages.deserializeBinaryFromReader);
      msg.setMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.OnReject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.OnReject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.OnReject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnReject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessages();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.assistant.Messages.serializeBinaryToWriter
    );
  }
};


/**
 * optional Messages messages = 1;
 * @return {?proto.assistant.Messages}
 */
proto.assistant.OnReject.prototype.getMessages = function() {
  return /** @type{?proto.assistant.Messages} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Messages, 1));
};


/** @param {?proto.assistant.Messages|undefined} value */
proto.assistant.OnReject.prototype.setMessages = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.assistant.OnReject.prototype.clearMessages = function() {
  this.setMessages(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.OnReject.prototype.hasMessages = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Require = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Require, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Require.displayName = 'proto.assistant.Require';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Require.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Require.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Require} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Require.toObject = function(includeInstance, msg) {
  var f, obj = {
    messages: (f = msg.getMessages()) && proto.assistant.Messages.toObject(includeInstance, f),
    maxAttempts: (f = msg.getMaxAttempts()) && proto.assistant.MaxAttempts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Require}
 */
proto.assistant.Require.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Require;
  return proto.assistant.Require.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Require} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Require}
 */
proto.assistant.Require.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.Messages;
      reader.readMessage(value,proto.assistant.Messages.deserializeBinaryFromReader);
      msg.setMessages(value);
      break;
    case 4:
      var value = new proto.assistant.MaxAttempts;
      reader.readMessage(value,proto.assistant.MaxAttempts.deserializeBinaryFromReader);
      msg.setMaxAttempts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Require.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Require.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Require} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Require.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessages();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.assistant.Messages.serializeBinaryToWriter
    );
  }
  f = message.getMaxAttempts();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.assistant.MaxAttempts.serializeBinaryToWriter
    );
  }
};


/**
 * optional Messages messages = 1;
 * @return {?proto.assistant.Messages}
 */
proto.assistant.Require.prototype.getMessages = function() {
  return /** @type{?proto.assistant.Messages} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Messages, 1));
};


/** @param {?proto.assistant.Messages|undefined} value */
proto.assistant.Require.prototype.setMessages = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.assistant.Require.prototype.clearMessages = function() {
  this.setMessages(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Require.prototype.hasMessages = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MaxAttempts max_attempts = 4;
 * @return {?proto.assistant.MaxAttempts}
 */
proto.assistant.Require.prototype.getMaxAttempts = function() {
  return /** @type{?proto.assistant.MaxAttempts} */ (
    jspb.Message.getWrapperField(this, proto.assistant.MaxAttempts, 4));
};


/** @param {?proto.assistant.MaxAttempts|undefined} value */
proto.assistant.Require.prototype.setMaxAttempts = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.assistant.Require.prototype.clearMaxAttempts = function() {
  this.setMaxAttempts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Require.prototype.hasMaxAttempts = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Confirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Confirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Confirm.displayName = 'proto.assistant.Confirm';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Confirm.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Confirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Confirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Confirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    say: (f = msg.getSay()) && proto.assistant.Say.toObject(includeInstance, f),
    onConfirm: (f = msg.getOnConfirm()) && proto.assistant.OnConfirm.toObject(includeInstance, f),
    onReject: (f = msg.getOnReject()) && proto.assistant.OnReject.toObject(includeInstance, f),
    maxAttempts: (f = msg.getMaxAttempts()) && proto.assistant.MaxAttempts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Confirm}
 */
proto.assistant.Confirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Confirm;
  return proto.assistant.Confirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Confirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Confirm}
 */
proto.assistant.Confirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.Say;
      reader.readMessage(value,proto.assistant.Say.deserializeBinaryFromReader);
      msg.setSay(value);
      break;
    case 2:
      var value = new proto.assistant.OnConfirm;
      reader.readMessage(value,proto.assistant.OnConfirm.deserializeBinaryFromReader);
      msg.setOnConfirm(value);
      break;
    case 3:
      var value = new proto.assistant.OnReject;
      reader.readMessage(value,proto.assistant.OnReject.deserializeBinaryFromReader);
      msg.setOnReject(value);
      break;
    case 4:
      var value = new proto.assistant.MaxAttempts;
      reader.readMessage(value,proto.assistant.MaxAttempts.deserializeBinaryFromReader);
      msg.setMaxAttempts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Confirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Confirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Confirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Confirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.assistant.Say.serializeBinaryToWriter
    );
  }
  f = message.getOnConfirm();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.assistant.OnConfirm.serializeBinaryToWriter
    );
  }
  f = message.getOnReject();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.assistant.OnReject.serializeBinaryToWriter
    );
  }
  f = message.getMaxAttempts();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.assistant.MaxAttempts.serializeBinaryToWriter
    );
  }
};


/**
 * optional Say say = 1;
 * @return {?proto.assistant.Say}
 */
proto.assistant.Confirm.prototype.getSay = function() {
  return /** @type{?proto.assistant.Say} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Say, 1));
};


/** @param {?proto.assistant.Say|undefined} value */
proto.assistant.Confirm.prototype.setSay = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.assistant.Confirm.prototype.clearSay = function() {
  this.setSay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Confirm.prototype.hasSay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OnConfirm on_confirm = 2;
 * @return {?proto.assistant.OnConfirm}
 */
proto.assistant.Confirm.prototype.getOnConfirm = function() {
  return /** @type{?proto.assistant.OnConfirm} */ (
    jspb.Message.getWrapperField(this, proto.assistant.OnConfirm, 2));
};


/** @param {?proto.assistant.OnConfirm|undefined} value */
proto.assistant.Confirm.prototype.setOnConfirm = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.assistant.Confirm.prototype.clearOnConfirm = function() {
  this.setOnConfirm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Confirm.prototype.hasOnConfirm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OnReject on_reject = 3;
 * @return {?proto.assistant.OnReject}
 */
proto.assistant.Confirm.prototype.getOnReject = function() {
  return /** @type{?proto.assistant.OnReject} */ (
    jspb.Message.getWrapperField(this, proto.assistant.OnReject, 3));
};


/** @param {?proto.assistant.OnReject|undefined} value */
proto.assistant.Confirm.prototype.setOnReject = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.assistant.Confirm.prototype.clearOnReject = function() {
  this.setOnReject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Confirm.prototype.hasOnReject = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MaxAttempts max_attempts = 4;
 * @return {?proto.assistant.MaxAttempts}
 */
proto.assistant.Confirm.prototype.getMaxAttempts = function() {
  return /** @type{?proto.assistant.MaxAttempts} */ (
    jspb.Message.getWrapperField(this, proto.assistant.MaxAttempts, 4));
};


/** @param {?proto.assistant.MaxAttempts|undefined} value */
proto.assistant.Confirm.prototype.setMaxAttempts = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.assistant.Confirm.prototype.clearMaxAttempts = function() {
  this.setMaxAttempts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Confirm.prototype.hasMaxAttempts = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Validate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.assistant.Validate.repeatedFields_, null);
};
goog.inherits(proto.assistant.Validate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Validate.displayName = 'proto.assistant.Validate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.assistant.Validate.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Validate.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Validate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Validate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Validate.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.getRepeatedField(msg, 1),
    webhook: (f = msg.getWebhook()) && proto.assistant.WebHook.toObject(includeInstance, f),
    onSuccess: (f = msg.getOnSuccess()) && proto.assistant.OnSuccess.toObject(includeInstance, f),
    onFailure: (f = msg.getOnFailure()) && proto.assistant.OnFailure.toObject(includeInstance, f),
    maxAttempts: (f = msg.getMaxAttempts()) && proto.assistant.MaxAttempts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Validate}
 */
proto.assistant.Validate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Validate;
  return proto.assistant.Validate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Validate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Validate}
 */
proto.assistant.Validate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addList(value);
      break;
    case 2:
      var value = new proto.assistant.WebHook;
      reader.readMessage(value,proto.assistant.WebHook.deserializeBinaryFromReader);
      msg.setWebhook(value);
      break;
    case 3:
      var value = new proto.assistant.OnSuccess;
      reader.readMessage(value,proto.assistant.OnSuccess.deserializeBinaryFromReader);
      msg.setOnSuccess(value);
      break;
    case 4:
      var value = new proto.assistant.OnFailure;
      reader.readMessage(value,proto.assistant.OnFailure.deserializeBinaryFromReader);
      msg.setOnFailure(value);
      break;
    case 5:
      var value = new proto.assistant.MaxAttempts;
      reader.readMessage(value,proto.assistant.MaxAttempts.deserializeBinaryFromReader);
      msg.setMaxAttempts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Validate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Validate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Validate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Validate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getWebhook();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.assistant.WebHook.serializeBinaryToWriter
    );
  }
  f = message.getOnSuccess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.assistant.OnSuccess.serializeBinaryToWriter
    );
  }
  f = message.getOnFailure();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.assistant.OnFailure.serializeBinaryToWriter
    );
  }
  f = message.getMaxAttempts();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.assistant.MaxAttempts.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string list = 1;
 * @return {!Array<string>}
 */
proto.assistant.Validate.prototype.getListList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.assistant.Validate.prototype.setListList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.assistant.Validate.prototype.addList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.assistant.Validate.prototype.clearListList = function() {
  this.setListList([]);
};


/**
 * optional WebHook webhook = 2;
 * @return {?proto.assistant.WebHook}
 */
proto.assistant.Validate.prototype.getWebhook = function() {
  return /** @type{?proto.assistant.WebHook} */ (
    jspb.Message.getWrapperField(this, proto.assistant.WebHook, 2));
};


/** @param {?proto.assistant.WebHook|undefined} value */
proto.assistant.Validate.prototype.setWebhook = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.assistant.Validate.prototype.clearWebhook = function() {
  this.setWebhook(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Validate.prototype.hasWebhook = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OnSuccess on_success = 3;
 * @return {?proto.assistant.OnSuccess}
 */
proto.assistant.Validate.prototype.getOnSuccess = function() {
  return /** @type{?proto.assistant.OnSuccess} */ (
    jspb.Message.getWrapperField(this, proto.assistant.OnSuccess, 3));
};


/** @param {?proto.assistant.OnSuccess|undefined} value */
proto.assistant.Validate.prototype.setOnSuccess = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.assistant.Validate.prototype.clearOnSuccess = function() {
  this.setOnSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Validate.prototype.hasOnSuccess = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OnFailure on_failure = 4;
 * @return {?proto.assistant.OnFailure}
 */
proto.assistant.Validate.prototype.getOnFailure = function() {
  return /** @type{?proto.assistant.OnFailure} */ (
    jspb.Message.getWrapperField(this, proto.assistant.OnFailure, 4));
};


/** @param {?proto.assistant.OnFailure|undefined} value */
proto.assistant.Validate.prototype.setOnFailure = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.assistant.Validate.prototype.clearOnFailure = function() {
  this.setOnFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Validate.prototype.hasOnFailure = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MaxAttempts max_attempts = 5;
 * @return {?proto.assistant.MaxAttempts}
 */
proto.assistant.Validate.prototype.getMaxAttempts = function() {
  return /** @type{?proto.assistant.MaxAttempts} */ (
    jspb.Message.getWrapperField(this, proto.assistant.MaxAttempts, 5));
};


/** @param {?proto.assistant.MaxAttempts|undefined} value */
proto.assistant.Validate.prototype.setMaxAttempts = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.assistant.Validate.prototype.clearMaxAttempts = function() {
  this.setMaxAttempts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Validate.prototype.hasMaxAttempts = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Question = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Question, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Question.displayName = 'proto.assistant.Question';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Question.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Question.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Question} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Question.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    question: (f = msg.getQuestion()) && proto.assistant.Say.toObject(includeInstance, f),
    validate: (f = msg.getValidate()) && proto.assistant.Validate.toObject(includeInstance, f),
    confirm: (f = msg.getConfirm()) && proto.assistant.Confirm.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Question}
 */
proto.assistant.Question.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Question;
  return proto.assistant.Question.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Question} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Question}
 */
proto.assistant.Question.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.assistant.Say;
      reader.readMessage(value,proto.assistant.Say.deserializeBinaryFromReader);
      msg.setQuestion(value);
      break;
    case 3:
      var value = new proto.assistant.Validate;
      reader.readMessage(value,proto.assistant.Validate.deserializeBinaryFromReader);
      msg.setValidate(value);
      break;
    case 4:
      var value = new proto.assistant.Confirm;
      reader.readMessage(value,proto.assistant.Confirm.deserializeBinaryFromReader);
      msg.setConfirm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Question.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Question.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Question} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Question.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuestion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.assistant.Say.serializeBinaryToWriter
    );
  }
  f = message.getValidate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.assistant.Validate.serializeBinaryToWriter
    );
  }
  f = message.getConfirm();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.assistant.Confirm.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.assistant.Question.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.Question.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Say question = 2;
 * @return {?proto.assistant.Say}
 */
proto.assistant.Question.prototype.getQuestion = function() {
  return /** @type{?proto.assistant.Say} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Say, 2));
};


/** @param {?proto.assistant.Say|undefined} value */
proto.assistant.Question.prototype.setQuestion = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.assistant.Question.prototype.clearQuestion = function() {
  this.setQuestion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Question.prototype.hasQuestion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Validate validate = 3;
 * @return {?proto.assistant.Validate}
 */
proto.assistant.Question.prototype.getValidate = function() {
  return /** @type{?proto.assistant.Validate} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Validate, 3));
};


/** @param {?proto.assistant.Validate|undefined} value */
proto.assistant.Question.prototype.setValidate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.assistant.Question.prototype.clearValidate = function() {
  this.setValidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Question.prototype.hasValidate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Confirm confirm = 4;
 * @return {?proto.assistant.Confirm}
 */
proto.assistant.Question.prototype.getConfirm = function() {
  return /** @type{?proto.assistant.Confirm} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Confirm, 4));
};


/** @param {?proto.assistant.Confirm|undefined} value */
proto.assistant.Question.prototype.setConfirm = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.assistant.Question.prototype.clearConfirm = function() {
  this.setConfirm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Question.prototype.hasConfirm = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.OnComplete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.OnComplete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.OnComplete.displayName = 'proto.assistant.OnComplete';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.OnComplete.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.OnComplete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.OnComplete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnComplete.toObject = function(includeInstance, msg) {
  var f, obj = {
    redirect: (f = msg.getRedirect()) && proto.assistant.Redirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.OnComplete}
 */
proto.assistant.OnComplete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.OnComplete;
  return proto.assistant.OnComplete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.OnComplete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.OnComplete}
 */
proto.assistant.OnComplete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.Redirect;
      reader.readMessage(value,proto.assistant.Redirect.deserializeBinaryFromReader);
      msg.setRedirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.OnComplete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.OnComplete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.OnComplete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.OnComplete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRedirect();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.assistant.Redirect.serializeBinaryToWriter
    );
  }
};


/**
 * optional Redirect redirect = 1;
 * @return {?proto.assistant.Redirect}
 */
proto.assistant.OnComplete.prototype.getRedirect = function() {
  return /** @type{?proto.assistant.Redirect} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Redirect, 1));
};


/** @param {?proto.assistant.Redirect|undefined} value */
proto.assistant.OnComplete.prototype.setRedirect = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.assistant.OnComplete.prototype.clearRedirect = function() {
  this.setRedirect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.OnComplete.prototype.hasRedirect = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Collect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.assistant.Collect.repeatedFields_, null);
};
goog.inherits(proto.assistant.Collect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Collect.displayName = 'proto.assistant.Collect';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.assistant.Collect.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Collect.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Collect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Collect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Collect.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    questionsList: jspb.Message.toObjectList(msg.getQuestionsList(),
    proto.assistant.Question.toObject, includeInstance),
    onComplete: (f = msg.getOnComplete()) && proto.assistant.OnComplete.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Collect}
 */
proto.assistant.Collect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Collect;
  return proto.assistant.Collect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Collect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Collect}
 */
proto.assistant.Collect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.assistant.Question;
      reader.readMessage(value,proto.assistant.Question.deserializeBinaryFromReader);
      msg.addQuestions(value);
      break;
    case 3:
      var value = new proto.assistant.OnComplete;
      reader.readMessage(value,proto.assistant.OnComplete.deserializeBinaryFromReader);
      msg.setOnComplete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Collect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Collect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Collect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Collect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.assistant.Question.serializeBinaryToWriter
    );
  }
  f = message.getOnComplete();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.assistant.OnComplete.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.assistant.Collect.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.Collect.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Question questions = 2;
 * @return {!Array<!proto.assistant.Question>}
 */
proto.assistant.Collect.prototype.getQuestionsList = function() {
  return /** @type{!Array<!proto.assistant.Question>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.assistant.Question, 2));
};


/** @param {!Array<!proto.assistant.Question>} value */
proto.assistant.Collect.prototype.setQuestionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.assistant.Question=} opt_value
 * @param {number=} opt_index
 * @return {!proto.assistant.Question}
 */
proto.assistant.Collect.prototype.addQuestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.assistant.Question, opt_index);
};


proto.assistant.Collect.prototype.clearQuestionsList = function() {
  this.setQuestionsList([]);
};


/**
 * optional OnComplete on_complete = 3;
 * @return {?proto.assistant.OnComplete}
 */
proto.assistant.Collect.prototype.getOnComplete = function() {
  return /** @type{?proto.assistant.OnComplete} */ (
    jspb.Message.getWrapperField(this, proto.assistant.OnComplete, 3));
};


/** @param {?proto.assistant.OnComplete|undefined} value */
proto.assistant.Collect.prototype.setOnComplete = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.assistant.Collect.prototype.clearOnComplete = function() {
  this.setOnComplete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Collect.prototype.hasOnComplete = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Messages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Messages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Messages.displayName = 'proto.assistant.Messages';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Messages.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Messages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Messages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Messages.toObject = function(includeInstance, msg) {
  var f, obj = {
    say: (f = msg.getSay()) && proto.assistant.Say.toObject(includeInstance, f),
    show: (f = msg.getShow()) && proto.assistant.Show.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Messages}
 */
proto.assistant.Messages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Messages;
  return proto.assistant.Messages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Messages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Messages}
 */
proto.assistant.Messages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.Say;
      reader.readMessage(value,proto.assistant.Say.deserializeBinaryFromReader);
      msg.setSay(value);
      break;
    case 2:
      var value = new proto.assistant.Show;
      reader.readMessage(value,proto.assistant.Show.deserializeBinaryFromReader);
      msg.setShow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Messages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Messages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Messages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Messages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.assistant.Say.serializeBinaryToWriter
    );
  }
  f = message.getShow();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.assistant.Show.serializeBinaryToWriter
    );
  }
};


/**
 * optional Say say = 1;
 * @return {?proto.assistant.Say}
 */
proto.assistant.Messages.prototype.getSay = function() {
  return /** @type{?proto.assistant.Say} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Say, 1));
};


/** @param {?proto.assistant.Say|undefined} value */
proto.assistant.Messages.prototype.setSay = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.assistant.Messages.prototype.clearSay = function() {
  this.setSay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Messages.prototype.hasSay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Show show = 2;
 * @return {?proto.assistant.Show}
 */
proto.assistant.Messages.prototype.getShow = function() {
  return /** @type{?proto.assistant.Show} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Show, 2));
};


/** @param {?proto.assistant.Show|undefined} value */
proto.assistant.Messages.prototype.setShow = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.assistant.Messages.prototype.clearShow = function() {
  this.setShow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.Messages.prototype.hasShow = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.MaxAttempts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.MaxAttempts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.MaxAttempts.displayName = 'proto.assistant.MaxAttempts';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.MaxAttempts.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.MaxAttempts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.MaxAttempts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.MaxAttempts.toObject = function(includeInstance, msg) {
  var f, obj = {
    numAttempts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    redirect: (f = msg.getRedirect()) && proto.assistant.Redirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.MaxAttempts}
 */
proto.assistant.MaxAttempts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.MaxAttempts;
  return proto.assistant.MaxAttempts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.MaxAttempts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.MaxAttempts}
 */
proto.assistant.MaxAttempts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumAttempts(value);
      break;
    case 2:
      var value = new proto.assistant.Redirect;
      reader.readMessage(value,proto.assistant.Redirect.deserializeBinaryFromReader);
      msg.setRedirect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.MaxAttempts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.MaxAttempts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.MaxAttempts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.MaxAttempts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumAttempts();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRedirect();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.assistant.Redirect.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 num_attempts = 1;
 * @return {number}
 */
proto.assistant.MaxAttempts.prototype.getNumAttempts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.assistant.MaxAttempts.prototype.setNumAttempts = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Redirect redirect = 2;
 * @return {?proto.assistant.Redirect}
 */
proto.assistant.MaxAttempts.prototype.getRedirect = function() {
  return /** @type{?proto.assistant.Redirect} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Redirect, 2));
};


/** @param {?proto.assistant.Redirect|undefined} value */
proto.assistant.MaxAttempts.prototype.setRedirect = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.assistant.MaxAttempts.prototype.clearRedirect = function() {
  this.setRedirect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.MaxAttempts.prototype.hasRedirect = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Handoff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.assistant.Handoff.repeatedFields_, null);
};
goog.inherits(proto.assistant.Handoff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Handoff.displayName = 'proto.assistant.Handoff';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.assistant.Handoff.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Handoff.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Handoff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Handoff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Handoff.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, ""),
    paramsList: jspb.Message.getRepeatedField(msg, 4),
    waitUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    waitUrlMethod: jspb.Message.getFieldWithDefault(msg, 6, ""),
    action: jspb.Message.getFieldWithDefault(msg, 7, ""),
    actionMethod: jspb.Message.getFieldWithDefault(msg, 8, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 9, ""),
    timeout: jspb.Message.getFieldWithDefault(msg, 10, ""),
    voiceStatusCallbackUrl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    voiceStatusCallbackMethod: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Handoff}
 */
proto.assistant.Handoff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Handoff;
  return proto.assistant.Handoff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Handoff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Handoff}
 */
proto.assistant.Handoff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addParams(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitUrlMethod(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionMethod(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeout(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoiceStatusCallbackUrl(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoiceStatusCallbackMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Handoff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Handoff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Handoff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Handoff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getWaitUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWaitUrlMethod();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getActionMethod();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPriority();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTimeout();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getVoiceStatusCallbackUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getVoiceStatusCallbackMethod();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string params = 4;
 * @return {!Array<string>}
 */
proto.assistant.Handoff.prototype.getParamsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.assistant.Handoff.prototype.setParamsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.assistant.Handoff.prototype.addParams = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.assistant.Handoff.prototype.clearParamsList = function() {
  this.setParamsList([]);
};


/**
 * optional string wait_url = 5;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getWaitUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setWaitUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string wait_url_method = 6;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getWaitUrlMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setWaitUrlMethod = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string action = 7;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setAction = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string action_method = 8;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getActionMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setActionMethod = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string priority = 9;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setPriority = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string timeout = 10;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getTimeout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setTimeout = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string voice_status_callback_url = 11;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getVoiceStatusCallbackUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setVoiceStatusCallbackUrl = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string voice_status_callback_method = 12;
 * @return {string}
 */
proto.assistant.Handoff.prototype.getVoiceStatusCallbackMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.assistant.Handoff.prototype.setVoiceStatusCallbackMethod = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Listen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Listen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Listen.displayName = 'proto.assistant.Listen';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Listen.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Listen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Listen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Listen.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsMap: (f = msg.getItemsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Listen}
 */
proto.assistant.Listen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Listen;
  return proto.assistant.Listen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Listen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Listen}
 */
proto.assistant.Listen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getItemsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Listen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Listen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Listen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Listen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
};


/**
 * map<string, bool> items = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.assistant.Listen.prototype.getItemsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.assistant.Listen.prototype.clearItemsMap = function() {
  this.getItemsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Redirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Redirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Redirect.displayName = 'proto.assistant.Redirect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Redirect.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Redirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Redirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Redirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    method: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Redirect}
 */
proto.assistant.Redirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Redirect;
  return proto.assistant.Redirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Redirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Redirect}
 */
proto.assistant.Redirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Redirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Redirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Redirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Redirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.assistant.Redirect.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.Redirect.prototype.setUri = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string method = 2;
 * @return {string}
 */
proto.assistant.Redirect.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.Redirect.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Remember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Remember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Remember.displayName = 'proto.assistant.Remember';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Remember.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Remember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Remember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Remember.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Remember}
 */
proto.assistant.Remember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Remember;
  return proto.assistant.Remember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Remember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Remember}
 */
proto.assistant.Remember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Remember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Remember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Remember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Remember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Image.displayName = 'proto.assistant.Image';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 3, ""),
    url: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Image}
 */
proto.assistant.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Image;
  return proto.assistant.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Image}
 */
proto.assistant.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string label = 3;
 * @return {string}
 */
proto.assistant.Image.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.assistant.Image.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.assistant.Image.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.assistant.Image.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.Show = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.assistant.Show.repeatedFields_, null);
};
goog.inherits(proto.assistant.Show, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.Show.displayName = 'proto.assistant.Show';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.assistant.Show.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.Show.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.Show.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.Show} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Show.toObject = function(includeInstance, msg) {
  var f, obj = {
    subject: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, ""),
    imagesList: jspb.Message.toObjectList(msg.getImagesList(),
    proto.assistant.Image.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.Show}
 */
proto.assistant.Show.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.Show;
  return proto.assistant.Show.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.Show} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.Show}
 */
proto.assistant.Show.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = new proto.assistant.Image;
      reader.readMessage(value,proto.assistant.Image.deserializeBinaryFromReader);
      msg.addImages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.Show.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.Show.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.Show} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.Show.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.assistant.Image.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subject = 1;
 * @return {string}
 */
proto.assistant.Show.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.Show.prototype.setSubject = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.assistant.Show.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.Show.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Image images = 3;
 * @return {!Array<!proto.assistant.Image>}
 */
proto.assistant.Show.prototype.getImagesList = function() {
  return /** @type{!Array<!proto.assistant.Image>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.assistant.Image, 3));
};


/** @param {!Array<!proto.assistant.Image>} value */
proto.assistant.Show.prototype.setImagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.assistant.Image=} opt_value
 * @param {number=} opt_index
 * @return {!proto.assistant.Image}
 */
proto.assistant.Show.prototype.addImages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.assistant.Image, opt_index);
};


proto.assistant.Show.prototype.clearImagesList = function() {
  this.setImagesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.ActionResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.ActionResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.ActionResp.displayName = 'proto.assistant.ActionResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.ActionResp.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.ActionResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.ActionResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.ActionResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    dateCreated: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dateUpdated: jspb.Message.getFieldWithDefault(msg, 2, ""),
    friendlyName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uniqueName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    url: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    actionsUrl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    assistantSid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    accountSid: jspb.Message.getFieldWithDefault(msg, 12, ""),
    links: (f = msg.getLinks()) && proto.assistant.Links.toObject(includeInstance, f),
    exception: (f = msg.getException()) && errors_errors_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.ActionResp}
 */
proto.assistant.ActionResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.ActionResp;
  return proto.assistant.ActionResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.ActionResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.ActionResp}
 */
proto.assistant.ActionResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateCreated(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateUpdated(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendlyName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqueName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionsUrl(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantSid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountSid(value);
      break;
    case 8:
      var value = new proto.assistant.Links;
      reader.readMessage(value,proto.assistant.Links.deserializeBinaryFromReader);
      msg.setLinks(value);
      break;
    case 10:
      var value = new errors_errors_pb.Error;
      reader.readMessage(value,errors_errors_pb.Error.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.ActionResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.ActionResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.ActionResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.ActionResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDateCreated();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDateUpdated();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFriendlyName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUniqueName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getActionsUrl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAssistantSid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAccountSid();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getLinks();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.assistant.Links.serializeBinaryToWriter
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      errors_errors_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string date_created = 1;
 * @return {string}
 */
proto.assistant.ActionResp.prototype.getDateCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.ActionResp.prototype.setDateCreated = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string date_updated = 2;
 * @return {string}
 */
proto.assistant.ActionResp.prototype.getDateUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.ActionResp.prototype.setDateUpdated = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string friendly_name = 3;
 * @return {string}
 */
proto.assistant.ActionResp.prototype.getFriendlyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.assistant.ActionResp.prototype.setFriendlyName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string unique_name = 4;
 * @return {string}
 */
proto.assistant.ActionResp.prototype.getUniqueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.assistant.ActionResp.prototype.setUniqueName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.assistant.ActionResp.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.assistant.ActionResp.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string sid = 6;
 * @return {string}
 */
proto.assistant.ActionResp.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.assistant.ActionResp.prototype.setSid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string actions_url = 9;
 * @return {string}
 */
proto.assistant.ActionResp.prototype.getActionsUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.assistant.ActionResp.prototype.setActionsUrl = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string assistant_sid = 11;
 * @return {string}
 */
proto.assistant.ActionResp.prototype.getAssistantSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.assistant.ActionResp.prototype.setAssistantSid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string account_sid = 12;
 * @return {string}
 */
proto.assistant.ActionResp.prototype.getAccountSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.assistant.ActionResp.prototype.setAccountSid = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional Links links = 8;
 * @return {?proto.assistant.Links}
 */
proto.assistant.ActionResp.prototype.getLinks = function() {
  return /** @type{?proto.assistant.Links} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Links, 8));
};


/** @param {?proto.assistant.Links|undefined} value */
proto.assistant.ActionResp.prototype.setLinks = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.assistant.ActionResp.prototype.clearLinks = function() {
  this.setLinks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.ActionResp.prototype.hasLinks = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional errors.Error exception = 10;
 * @return {?proto.errors.Error}
 */
proto.assistant.ActionResp.prototype.getException = function() {
  return /** @type{?proto.errors.Error} */ (
    jspb.Message.getWrapperField(this, errors_errors_pb.Error, 10));
};


/** @param {?proto.errors.Error|undefined} value */
proto.assistant.ActionResp.prototype.setException = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.assistant.ActionResp.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.ActionResp.prototype.hasException = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.CreateAssistantReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.CreateAssistantReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.CreateAssistantReq.displayName = 'proto.assistant.CreateAssistantReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.CreateAssistantReq.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.CreateAssistantReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.CreateAssistantReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.CreateAssistantReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantSid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    friendlyName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uniqueName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    logQueries: jspb.Message.getFieldWithDefault(msg, 4, false),
    callbackEvents: jspb.Message.getFieldWithDefault(msg, 5, ""),
    styleSheet: (f = msg.getStyleSheet()) && voice_voice_pb.StyleSheet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.CreateAssistantReq}
 */
proto.assistant.CreateAssistantReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.CreateAssistantReq;
  return proto.assistant.CreateAssistantReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.CreateAssistantReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.CreateAssistantReq}
 */
proto.assistant.CreateAssistantReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendlyName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqueName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLogQueries(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackEvents(value);
      break;
    case 6:
      var value = new voice_voice_pb.StyleSheet;
      reader.readMessage(value,voice_voice_pb.StyleSheet.deserializeBinaryFromReader);
      msg.setStyleSheet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.CreateAssistantReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.CreateAssistantReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.CreateAssistantReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.CreateAssistantReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFriendlyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUniqueName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLogQueries();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCallbackEvents();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStyleSheet();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      voice_voice_pb.StyleSheet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string assistant_sid = 1;
 * @return {string}
 */
proto.assistant.CreateAssistantReq.prototype.getAssistantSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.CreateAssistantReq.prototype.setAssistantSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string friendly_name = 2;
 * @return {string}
 */
proto.assistant.CreateAssistantReq.prototype.getFriendlyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.CreateAssistantReq.prototype.setFriendlyName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string unique_name = 3;
 * @return {string}
 */
proto.assistant.CreateAssistantReq.prototype.getUniqueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.assistant.CreateAssistantReq.prototype.setUniqueName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool log_queries = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.assistant.CreateAssistantReq.prototype.getLogQueries = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.assistant.CreateAssistantReq.prototype.setLogQueries = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string callback_events = 5;
 * @return {string}
 */
proto.assistant.CreateAssistantReq.prototype.getCallbackEvents = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.assistant.CreateAssistantReq.prototype.setCallbackEvents = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional voice.StyleSheet style_sheet = 6;
 * @return {?proto.voice.StyleSheet}
 */
proto.assistant.CreateAssistantReq.prototype.getStyleSheet = function() {
  return /** @type{?proto.voice.StyleSheet} */ (
    jspb.Message.getWrapperField(this, voice_voice_pb.StyleSheet, 6));
};


/** @param {?proto.voice.StyleSheet|undefined} value */
proto.assistant.CreateAssistantReq.prototype.setStyleSheet = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.assistant.CreateAssistantReq.prototype.clearStyleSheet = function() {
  this.setStyleSheet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.CreateAssistantReq.prototype.hasStyleSheet = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.GetAssistantReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.GetAssistantReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.GetAssistantReq.displayName = 'proto.assistant.GetAssistantReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.GetAssistantReq.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.GetAssistantReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.GetAssistantReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.GetAssistantReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantSid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.GetAssistantReq}
 */
proto.assistant.GetAssistantReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.GetAssistantReq;
  return proto.assistant.GetAssistantReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.GetAssistantReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.GetAssistantReq}
 */
proto.assistant.GetAssistantReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantSid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.GetAssistantReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.GetAssistantReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.GetAssistantReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.GetAssistantReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string assistant_sid = 1;
 * @return {string}
 */
proto.assistant.GetAssistantReq.prototype.getAssistantSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.GetAssistantReq.prototype.setAssistantSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.ListAllAssistantsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.ListAllAssistantsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.ListAllAssistantsReq.displayName = 'proto.assistant.ListAllAssistantsReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.ListAllAssistantsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.ListAllAssistantsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.ListAllAssistantsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.ListAllAssistantsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantSid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.ListAllAssistantsReq}
 */
proto.assistant.ListAllAssistantsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.ListAllAssistantsReq;
  return proto.assistant.ListAllAssistantsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.ListAllAssistantsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.ListAllAssistantsReq}
 */
proto.assistant.ListAllAssistantsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantSid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.ListAllAssistantsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.ListAllAssistantsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.ListAllAssistantsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.ListAllAssistantsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string assistant_sid = 1;
 * @return {string}
 */
proto.assistant.ListAllAssistantsReq.prototype.getAssistantSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.ListAllAssistantsReq.prototype.setAssistantSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.UpdateAssistantStyleSheetReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.UpdateAssistantStyleSheetReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.UpdateAssistantStyleSheetReq.displayName = 'proto.assistant.UpdateAssistantStyleSheetReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.UpdateAssistantStyleSheetReq.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.UpdateAssistantStyleSheetReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.UpdateAssistantStyleSheetReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.UpdateAssistantStyleSheetReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantSid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    styleSheet: (f = msg.getStyleSheet()) && voice_voice_pb.StyleSheet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.UpdateAssistantStyleSheetReq}
 */
proto.assistant.UpdateAssistantStyleSheetReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.UpdateAssistantStyleSheetReq;
  return proto.assistant.UpdateAssistantStyleSheetReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.UpdateAssistantStyleSheetReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.UpdateAssistantStyleSheetReq}
 */
proto.assistant.UpdateAssistantStyleSheetReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantSid(value);
      break;
    case 2:
      var value = new voice_voice_pb.StyleSheet;
      reader.readMessage(value,voice_voice_pb.StyleSheet.deserializeBinaryFromReader);
      msg.setStyleSheet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.UpdateAssistantStyleSheetReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.UpdateAssistantStyleSheetReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.UpdateAssistantStyleSheetReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.UpdateAssistantStyleSheetReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStyleSheet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      voice_voice_pb.StyleSheet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string assistant_sid = 1;
 * @return {string}
 */
proto.assistant.UpdateAssistantStyleSheetReq.prototype.getAssistantSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.UpdateAssistantStyleSheetReq.prototype.setAssistantSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional voice.StyleSheet style_sheet = 2;
 * @return {?proto.voice.StyleSheet}
 */
proto.assistant.UpdateAssistantStyleSheetReq.prototype.getStyleSheet = function() {
  return /** @type{?proto.voice.StyleSheet} */ (
    jspb.Message.getWrapperField(this, voice_voice_pb.StyleSheet, 2));
};


/** @param {?proto.voice.StyleSheet|undefined} value */
proto.assistant.UpdateAssistantStyleSheetReq.prototype.setStyleSheet = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.assistant.UpdateAssistantStyleSheetReq.prototype.clearStyleSheet = function() {
  this.setStyleSheet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.UpdateAssistantStyleSheetReq.prototype.hasStyleSheet = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.GetAssistantDefaultsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.GetAssistantDefaultsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.GetAssistantDefaultsReq.displayName = 'proto.assistant.GetAssistantDefaultsReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.GetAssistantDefaultsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.GetAssistantDefaultsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.GetAssistantDefaultsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.GetAssistantDefaultsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantSid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.GetAssistantDefaultsReq}
 */
proto.assistant.GetAssistantDefaultsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.GetAssistantDefaultsReq;
  return proto.assistant.GetAssistantDefaultsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.GetAssistantDefaultsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.GetAssistantDefaultsReq}
 */
proto.assistant.GetAssistantDefaultsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantSid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.GetAssistantDefaultsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.GetAssistantDefaultsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.GetAssistantDefaultsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.GetAssistantDefaultsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string assistant_sid = 1;
 * @return {string}
 */
proto.assistant.GetAssistantDefaultsReq.prototype.getAssistantSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.GetAssistantDefaultsReq.prototype.setAssistantSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.UpdateAssistantDefaultsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.UpdateAssistantDefaultsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.UpdateAssistantDefaultsReq.displayName = 'proto.assistant.UpdateAssistantDefaultsReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.UpdateAssistantDefaultsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.UpdateAssistantDefaultsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.UpdateAssistantDefaultsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.UpdateAssistantDefaultsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantSid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assistantInitiation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fallback: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.UpdateAssistantDefaultsReq}
 */
proto.assistant.UpdateAssistantDefaultsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.UpdateAssistantDefaultsReq;
  return proto.assistant.UpdateAssistantDefaultsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.UpdateAssistantDefaultsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.UpdateAssistantDefaultsReq}
 */
proto.assistant.UpdateAssistantDefaultsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantInitiation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFallback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.UpdateAssistantDefaultsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.UpdateAssistantDefaultsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.UpdateAssistantDefaultsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.UpdateAssistantDefaultsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssistantInitiation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFallback();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string assistant_sid = 1;
 * @return {string}
 */
proto.assistant.UpdateAssistantDefaultsReq.prototype.getAssistantSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.UpdateAssistantDefaultsReq.prototype.setAssistantSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string assistant_initiation = 2;
 * @return {string}
 */
proto.assistant.UpdateAssistantDefaultsReq.prototype.getAssistantInitiation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.UpdateAssistantDefaultsReq.prototype.setAssistantInitiation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fallback = 3;
 * @return {string}
 */
proto.assistant.UpdateAssistantDefaultsReq.prototype.getFallback = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.assistant.UpdateAssistantDefaultsReq.prototype.setFallback = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.AssistantDefaultsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.AssistantDefaultsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.AssistantDefaultsResp.displayName = 'proto.assistant.AssistantDefaultsResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.AssistantDefaultsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.AssistantDefaultsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.AssistantDefaultsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.AssistantDefaultsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantSid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assistantInitiation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fallback: jspb.Message.getFieldWithDefault(msg, 3, ""),
    url: jspb.Message.getFieldWithDefault(msg, 4, ""),
    accountSid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    exception: (f = msg.getException()) && errors_errors_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.AssistantDefaultsResp}
 */
proto.assistant.AssistantDefaultsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.AssistantDefaultsResp;
  return proto.assistant.AssistantDefaultsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.AssistantDefaultsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.AssistantDefaultsResp}
 */
proto.assistant.AssistantDefaultsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantInitiation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFallback(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountSid(value);
      break;
    case 6:
      var value = new errors_errors_pb.Error;
      reader.readMessage(value,errors_errors_pb.Error.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.AssistantDefaultsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.AssistantDefaultsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.AssistantDefaultsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.AssistantDefaultsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssistantInitiation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFallback();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAccountSid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      errors_errors_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string assistant_sid = 1;
 * @return {string}
 */
proto.assistant.AssistantDefaultsResp.prototype.getAssistantSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.AssistantDefaultsResp.prototype.setAssistantSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string assistant_initiation = 2;
 * @return {string}
 */
proto.assistant.AssistantDefaultsResp.prototype.getAssistantInitiation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.AssistantDefaultsResp.prototype.setAssistantInitiation = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fallback = 3;
 * @return {string}
 */
proto.assistant.AssistantDefaultsResp.prototype.getFallback = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.assistant.AssistantDefaultsResp.prototype.setFallback = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.assistant.AssistantDefaultsResp.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.assistant.AssistantDefaultsResp.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string account_sid = 5;
 * @return {string}
 */
proto.assistant.AssistantDefaultsResp.prototype.getAccountSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.assistant.AssistantDefaultsResp.prototype.setAccountSid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional errors.Error exception = 6;
 * @return {?proto.errors.Error}
 */
proto.assistant.AssistantDefaultsResp.prototype.getException = function() {
  return /** @type{?proto.errors.Error} */ (
    jspb.Message.getWrapperField(this, errors_errors_pb.Error, 6));
};


/** @param {?proto.errors.Error|undefined} value */
proto.assistant.AssistantDefaultsResp.prototype.setException = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.assistant.AssistantDefaultsResp.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.AssistantDefaultsResp.prototype.hasException = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.AssistantResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.assistant.AssistantResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.AssistantResp.displayName = 'proto.assistant.AssistantResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.AssistantResp.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.AssistantResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.AssistantResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.AssistantResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    dateCreated: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dateUpdated: jspb.Message.getFieldWithDefault(msg, 2, ""),
    friendlyName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uniqueName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    url: jspb.Message.getFieldWithDefault(msg, 5, ""),
    callbackUrl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    callbackEvents: jspb.Message.getFieldWithDefault(msg, 7, ""),
    accountSid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    assistantSid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    links: (f = msg.getLinks()) && proto.assistant.Links.toObject(includeInstance, f),
    exception: (f = msg.getException()) && errors_errors_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.AssistantResp}
 */
proto.assistant.AssistantResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.AssistantResp;
  return proto.assistant.AssistantResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.AssistantResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.AssistantResp}
 */
proto.assistant.AssistantResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateCreated(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateUpdated(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendlyName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqueName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackUrl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackEvents(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountSid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssistantSid(value);
      break;
    case 8:
      var value = new proto.assistant.Links;
      reader.readMessage(value,proto.assistant.Links.deserializeBinaryFromReader);
      msg.setLinks(value);
      break;
    case 9:
      var value = new errors_errors_pb.Error;
      reader.readMessage(value,errors_errors_pb.Error.deserializeBinaryFromReader);
      msg.setException(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.AssistantResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.AssistantResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.AssistantResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.AssistantResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDateCreated();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDateUpdated();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFriendlyName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUniqueName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCallbackUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCallbackEvents();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAccountSid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getAssistantSid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getLinks();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.assistant.Links.serializeBinaryToWriter
    );
  }
  f = message.getException();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      errors_errors_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional string date_created = 1;
 * @return {string}
 */
proto.assistant.AssistantResp.prototype.getDateCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.assistant.AssistantResp.prototype.setDateCreated = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string date_updated = 2;
 * @return {string}
 */
proto.assistant.AssistantResp.prototype.getDateUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.assistant.AssistantResp.prototype.setDateUpdated = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string friendly_name = 3;
 * @return {string}
 */
proto.assistant.AssistantResp.prototype.getFriendlyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.assistant.AssistantResp.prototype.setFriendlyName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string unique_name = 4;
 * @return {string}
 */
proto.assistant.AssistantResp.prototype.getUniqueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.assistant.AssistantResp.prototype.setUniqueName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.assistant.AssistantResp.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.assistant.AssistantResp.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string callback_url = 6;
 * @return {string}
 */
proto.assistant.AssistantResp.prototype.getCallbackUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.assistant.AssistantResp.prototype.setCallbackUrl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string callback_events = 7;
 * @return {string}
 */
proto.assistant.AssistantResp.prototype.getCallbackEvents = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.assistant.AssistantResp.prototype.setCallbackEvents = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string account_sid = 10;
 * @return {string}
 */
proto.assistant.AssistantResp.prototype.getAccountSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.assistant.AssistantResp.prototype.setAccountSid = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string assistant_sid = 11;
 * @return {string}
 */
proto.assistant.AssistantResp.prototype.getAssistantSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.assistant.AssistantResp.prototype.setAssistantSid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional Links links = 8;
 * @return {?proto.assistant.Links}
 */
proto.assistant.AssistantResp.prototype.getLinks = function() {
  return /** @type{?proto.assistant.Links} */ (
    jspb.Message.getWrapperField(this, proto.assistant.Links, 8));
};


/** @param {?proto.assistant.Links|undefined} value */
proto.assistant.AssistantResp.prototype.setLinks = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.assistant.AssistantResp.prototype.clearLinks = function() {
  this.setLinks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.AssistantResp.prototype.hasLinks = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional errors.Error exception = 9;
 * @return {?proto.errors.Error}
 */
proto.assistant.AssistantResp.prototype.getException = function() {
  return /** @type{?proto.errors.Error} */ (
    jspb.Message.getWrapperField(this, errors_errors_pb.Error, 9));
};


/** @param {?proto.errors.Error|undefined} value */
proto.assistant.AssistantResp.prototype.setException = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.assistant.AssistantResp.prototype.clearException = function() {
  this.setException(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.assistant.AssistantResp.prototype.hasException = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.assistant.ListAllAssistantsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.assistant.ListAllAssistantsResp.repeatedFields_, null);
};
goog.inherits(proto.assistant.ListAllAssistantsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.assistant.ListAllAssistantsResp.displayName = 'proto.assistant.ListAllAssistantsResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.assistant.ListAllAssistantsResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.assistant.ListAllAssistantsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.assistant.ListAllAssistantsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.assistant.ListAllAssistantsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.ListAllAssistantsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    assistantsList: jspb.Message.toObjectList(msg.getAssistantsList(),
    proto.assistant.AssistantResp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.assistant.ListAllAssistantsResp}
 */
proto.assistant.ListAllAssistantsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.assistant.ListAllAssistantsResp;
  return proto.assistant.ListAllAssistantsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.assistant.ListAllAssistantsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.assistant.ListAllAssistantsResp}
 */
proto.assistant.ListAllAssistantsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.assistant.AssistantResp;
      reader.readMessage(value,proto.assistant.AssistantResp.deserializeBinaryFromReader);
      msg.addAssistants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.assistant.ListAllAssistantsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.assistant.ListAllAssistantsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.assistant.ListAllAssistantsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.assistant.ListAllAssistantsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssistantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.assistant.AssistantResp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AssistantResp assistants = 1;
 * @return {!Array<!proto.assistant.AssistantResp>}
 */
proto.assistant.ListAllAssistantsResp.prototype.getAssistantsList = function() {
  return /** @type{!Array<!proto.assistant.AssistantResp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.assistant.AssistantResp, 1));
};


/** @param {!Array<!proto.assistant.AssistantResp>} value */
proto.assistant.ListAllAssistantsResp.prototype.setAssistantsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.assistant.AssistantResp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.assistant.AssistantResp}
 */
proto.assistant.ListAllAssistantsResp.prototype.addAssistants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.assistant.AssistantResp, opt_index);
};


proto.assistant.ListAllAssistantsResp.prototype.clearAssistantsList = function() {
  this.setAssistantsList([]);
};


goog.object.extend(exports, proto.assistant);
