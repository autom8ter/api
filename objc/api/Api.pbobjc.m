// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Api.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
#import "google/api/Auth.pbobjc.h"
#import "google/pubsub/v1/Pubsub.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ApiRoot

@implementation ApiRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ApiRoot_FileDescriptor

static GPBFileDescriptor *ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum CustomerIndex

GPBEnumDescriptor *CustomerIndex_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Id\000Email\000Phone\000";
    static const int32_t values[] = {
        CustomerIndex_Id,
        CustomerIndex_Email,
        CustomerIndex_Phone,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CustomerIndex)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CustomerIndex_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CustomerIndex_IsValidValue(int32_t value__) {
  switch (value__) {
    case CustomerIndex_Id:
    case CustomerIndex_Email:
    case CustomerIndex_Phone:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Grant

GPBEnumDescriptor *Grant_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Twilio\000Sendgrid\000Stripe\000Slack\000Gcp\000";
    static const int32_t values[] = {
        Grant_Twilio,
        Grant_Sendgrid,
        Grant_Stripe,
        Grant_Slack,
        Grant_Gcp,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Grant)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Grant_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Grant_IsValidValue(int32_t value__) {
  switch (value__) {
    case Grant_Twilio:
    case Grant_Sendgrid:
    case Grant_Stripe:
    case Grant_Slack:
    case Grant_Gcp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Empty

@implementation Empty


typedef struct Empty__storage_ {
  uint32_t _has_storage_[1];
} Empty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Empty class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Empty__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Customer

@implementation Customer

@dynamic userId;
@dynamic plan;
@dynamic name;
@dynamic email;
@dynamic description_p;
@dynamic phone;
@dynamic hasAddress, address;
@dynamic metadata, metadata_Count;
@dynamic deleted;
@dynamic createDate;

typedef struct Customer__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *plan;
  NSString *name;
  NSString *email;
  NSString *description_p;
  NSString *phone;
  Address *address;
  NSMutableDictionary *metadata;
  int64_t createDate;
} Customer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Customer_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Customer__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = Customer_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Customer__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Customer_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Customer__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = Customer_FieldNumber_Email,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Customer__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Customer_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Customer__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = Customer_FieldNumber_Phone,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Customer__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = Customer_FieldNumber_Address,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Customer__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = Customer_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Customer__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deleted",
        .dataTypeSpecific.className = NULL,
        .number = Customer_FieldNumber_Deleted,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "createDate",
        .dataTypeSpecific.className = NULL,
        .number = Customer_FieldNumber_CreateDate,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Customer__storage_, createDate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Customer class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Customer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AddCustomerRequest

@implementation AddCustomerRequest

@dynamic email;
@dynamic plan;
@dynamic phone;
@dynamic name;
@dynamic description_p;
@dynamic hasAddress, address;

typedef struct AddCustomerRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
  NSString *plan;
  NSString *phone;
  NSString *name;
  NSString *description_p;
  Address *address;
} AddCustomerRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = AddCustomerRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddCustomerRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = AddCustomerRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddCustomerRequest__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = AddCustomerRequest_FieldNumber_Phone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddCustomerRequest__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AddCustomerRequest_FieldNumber_Name,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddCustomerRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = AddCustomerRequest_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddCustomerRequest__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = GPBStringifySymbol(Address),
        .number = AddCustomerRequest_FieldNumber_Address,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AddCustomerRequest__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddCustomerRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddCustomerRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeCustomerRequest

@implementation SubscribeCustomerRequest

@dynamic email;
@dynamic plan;
@dynamic cardNumber;
@dynamic expMonth;
@dynamic expYear;
@dynamic cvc;

typedef struct SubscribeCustomerRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
  NSString *plan;
  NSString *cardNumber;
  NSString *expMonth;
  NSString *expYear;
  NSString *cvc;
} SubscribeCustomerRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeCustomerRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeCustomerRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeCustomerRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubscribeCustomerRequest__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cardNumber",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeCustomerRequest_FieldNumber_CardNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubscribeCustomerRequest__storage_, cardNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expMonth",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeCustomerRequest_FieldNumber_ExpMonth,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SubscribeCustomerRequest__storage_, expMonth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expYear",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeCustomerRequest_FieldNumber_ExpYear,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SubscribeCustomerRequest__storage_, expYear),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cvc",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeCustomerRequest_FieldNumber_Cvc,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SubscribeCustomerRequest__storage_, cvc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeCustomerRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeCustomerRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Address

@implementation Address

@dynamic city;
@dynamic country;
@dynamic line1;
@dynamic line2;
@dynamic postalCode;
@dynamic state;

typedef struct Address__storage_ {
  uint32_t _has_storage_[1];
  NSString *city;
  NSString *country;
  NSString *line1;
  NSString *line2;
  NSString *postalCode;
  NSString *state;
} Address__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_City,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Address__storage_, city),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Country,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Address__storage_, country),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "line1",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Line1,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Address__storage_, line1),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "line2",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_Line2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Address__storage_, line2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "postalCode",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_PostalCode,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Address__storage_, postalCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.className = NULL,
        .number = Address_FieldNumber_State,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Address__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Address class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Address__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SubscribeCustomerResponse

@implementation SubscribeCustomerResponse

@dynamic subscriptionId;

typedef struct SubscribeCustomerResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *subscriptionId;
} SubscribeCustomerResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscriptionId",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeCustomerResponse_FieldNumber_SubscriptionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeCustomerResponse__storage_, subscriptionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeCustomerResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeCustomerResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreatePlanResponse

@implementation CreatePlanResponse

@dynamic planId;

typedef struct CreatePlanResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *planId;
} CreatePlanResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "planId",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanResponse_FieldNumber_PlanId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreatePlanResponse__storage_, planId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreatePlanResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreatePlanResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelSubscriptionRequest

@implementation CancelSubscriptionRequest

@dynamic email;

typedef struct CancelSubscriptionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
} CancelSubscriptionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = CancelSubscriptionRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelSubscriptionRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelSubscriptionRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelSubscriptionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreatePlanRequest

@implementation CreatePlanRequest

@dynamic planId;
@dynamic amount;
@dynamic serviceId;
@dynamic serviceName;
@dynamic friendlyName;

typedef struct CreatePlanRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *planId;
  NSString *serviceId;
  NSString *serviceName;
  NSString *friendlyName;
  int64_t amount;
} CreatePlanRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "planId",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_PlanId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, planId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "serviceId",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_ServiceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, serviceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serviceName",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_ServiceName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, serviceName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "friendlyName",
        .dataTypeSpecific.className = NULL,
        .number = CreatePlanRequest_FieldNumber_FriendlyName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreatePlanRequest__storage_, friendlyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreatePlanRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreatePlanRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMSRequest

@implementation SMSRequest

@dynamic userId;
@dynamic body;

typedef struct SMSRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *body;
} SMSRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SMSRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMSRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = SMSRequest_FieldNumber_Body,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SMSRequest__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMSRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMSRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CallRequest

@implementation CallRequest

@dynamic userId;
@dynamic callbackURL;

typedef struct CallRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *callbackURL;
} CallRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CallRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CallRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callbackURL",
        .dataTypeSpecific.className = NULL,
        .number = CallRequest_FieldNumber_CallbackURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CallRequest__storage_, callbackURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CallRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CallRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MMSRequest

@implementation MMSRequest

@dynamic userId;
@dynamic body;
@dynamic mediaURL;

typedef struct MMSRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *body;
  NSString *mediaURL;
} MMSRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = MMSRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MMSRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = MMSRequest_FieldNumber_Body,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MMSRequest__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = MMSRequest_FieldNumber_MediaURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MMSRequest__storage_, mediaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MMSRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MMSRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailRequest

@implementation EmailRequest

@dynamic userId;
@dynamic subject;
@dynamic plainText;
@dynamic htmlAlt;

typedef struct EmailRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *subject;
  NSString *plainText;
  NSString *htmlAlt;
} EmailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_Subject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plainText",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_PlainText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, plainText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "htmlAlt",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_HtmlAlt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, htmlAlt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelReminder

@implementation ChannelReminder

@dynamic channelId;
@dynamic text;
@dynamic time;

typedef struct ChannelReminder__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *text;
  NSString *time;
} ChannelReminder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelReminder_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelReminder__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = ChannelReminder_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelReminder__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = ChannelReminder_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChannelReminder__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelReminder class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelReminder__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserReminder

@implementation UserReminder

@dynamic userId;
@dynamic text;
@dynamic time;
@dynamic hasItem, item;

typedef struct UserReminder__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *text;
  NSString *time;
  ItemRef *item;
} UserReminder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = UserReminder_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserReminder__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = UserReminder_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserReminder__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = UserReminder_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserReminder__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "item",
        .dataTypeSpecific.className = GPBStringifySymbol(ItemRef),
        .number = UserReminder_FieldNumber_Item,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserReminder__storage_, item),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserReminder class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserReminder__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ItemRef

@implementation ItemRef

@dynamic channel;
@dynamic file;
@dynamic comment;

typedef struct ItemRef__storage_ {
  uint32_t _has_storage_[1];
  NSString *channel;
  NSString *file;
  NSString *comment;
} ItemRef__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = ItemRef_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ItemRef__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "file",
        .dataTypeSpecific.className = NULL,
        .number = ItemRef_FieldNumber_File,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ItemRef__storage_, file),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "comment",
        .dataTypeSpecific.className = NULL,
        .number = ItemRef_FieldNumber_Comment,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ItemRef__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ItemRef class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ItemRef__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Star

@implementation Star

@dynamic text;
@dynamic hasItem, item;

typedef struct Star__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
  ItemRef *item;
} Star__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = Star_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Star__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "item",
        .dataTypeSpecific.className = GPBStringifySymbol(ItemRef),
        .number = Star_FieldNumber_Item,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Star__storage_, item),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Star class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Star__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Pin

@implementation Pin

@dynamic text;
@dynamic hasItem, item;

typedef struct Pin__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
  ItemRef *item;
} Pin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = Pin_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Pin__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "item",
        .dataTypeSpecific.className = GPBStringifySymbol(ItemRef),
        .number = Pin_FieldNumber_Item,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Pin__storage_, item),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Pin class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Pin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Access

@implementation Access

@dynamic twilioAccount;
@dynamic twilioKey;
@dynamic sendgridAccount;
@dynamic sendgridKey;
@dynamic stripeAccount;
@dynamic stripeKey;
@dynamic slackAccount;
@dynamic slackKey;
@dynamic gcpProject;
@dynamic gcpKey;

typedef struct Access__storage_ {
  uint32_t _has_storage_[1];
  NSString *twilioAccount;
  NSString *twilioKey;
  NSString *sendgridAccount;
  NSString *sendgridKey;
  NSString *stripeAccount;
  NSString *stripeKey;
  NSString *slackAccount;
  NSString *slackKey;
  NSString *gcpProject;
  NSString *gcpKey;
} Access__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "twilioAccount",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_TwilioAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Access__storage_, twilioAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "twilioKey",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_TwilioKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Access__storage_, twilioKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendgridAccount",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_SendgridAccount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Access__storage_, sendgridAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendgridKey",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_SendgridKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Access__storage_, sendgridKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stripeAccount",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_StripeAccount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Access__storage_, stripeAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stripeKey",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_StripeKey,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Access__storage_, stripeKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "slackAccount",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_SlackAccount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Access__storage_, slackAccount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "slackKey",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_SlackKey,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Access__storage_, slackKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gcpProject",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_GcpProject,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Access__storage_, gcpProject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gcpKey",
        .dataTypeSpecific.className = NULL,
        .number = Access_FieldNumber_GcpKey,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Access__storage_, gcpKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Access class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Access__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Token

@implementation Token

@dynamic hasAccess, access;
@dynamic audience;
@dynamic subject;
@dynamic expiresAt;
@dynamic id_p;
@dynamic issuedAt;
@dynamic notBefore;
@dynamic grantsArray, grantsArray_Count;

typedef struct Token__storage_ {
  uint32_t _has_storage_[1];
  Access *access;
  NSString *audience;
  NSString *subject;
  NSString *id_p;
  GPBEnumArray *grantsArray;
  int64_t expiresAt;
  int64_t issuedAt;
  int64_t notBefore;
} Token__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "access",
        .dataTypeSpecific.className = GPBStringifySymbol(Access),
        .number = Token_FieldNumber_Access,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Token__storage_, access),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audience",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_Audience,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Token__storage_, audience),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_Subject,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Token__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresAt",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_ExpiresAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Token__storage_, expiresAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_Id_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Token__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "issuedAt",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_IssuedAt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Token__storage_, issuedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "notBefore",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_NotBefore,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Token__storage_, notBefore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "grantsArray",
        .dataTypeSpecific.enumDescFunc = Grant_EnumDescriptor,
        .number = Token_FieldNumber_GrantsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Token__storage_, grantsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Token class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Token__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogConfig

@implementation LogConfig

@dynamic username;
@dynamic channel;

typedef struct LogConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *username;
  NSString *channel;
} LogConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = LogConfig_FieldNumber_Username,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LogConfig__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = LogConfig_FieldNumber_Channel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LogConfig__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogConfig class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailAddress

@implementation EmailAddress

@dynamic name;
@dynamic address;

typedef struct EmailAddress__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *address;
} EmailAddress__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = EmailAddress_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailAddress__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = EmailAddress_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailAddress__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailAddress class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailAddress__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Email

@implementation Email

@dynamic hasFrom, from;
@dynamic hasRecipient, recipient;

typedef struct Email__storage_ {
  uint32_t _has_storage_[1];
  EmailAddress *from;
  RecipientEmail *recipient;
} Email__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = GPBStringifySymbol(EmailAddress),
        .number = Email_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Email__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "recipient",
        .dataTypeSpecific.className = GPBStringifySymbol(RecipientEmail),
        .number = Email_FieldNumber_Recipient,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Email__storage_, recipient),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Email class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Email__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RecipientEmail

@implementation RecipientEmail

@dynamic hasTo, to;
@dynamic subject;
@dynamic plainText;
@dynamic html;

typedef struct RecipientEmail__storage_ {
  uint32_t _has_storage_[1];
  EmailAddress *to;
  NSString *subject;
  NSString *plainText;
  NSString *html;
} RecipientEmail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "to",
        .dataTypeSpecific.className = GPBStringifySymbol(EmailAddress),
        .number = RecipientEmail_FieldNumber_To,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RecipientEmail__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = RecipientEmail_FieldNumber_Subject,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RecipientEmail__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plainText",
        .dataTypeSpecific.className = NULL,
        .number = RecipientEmail_FieldNumber_PlainText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RecipientEmail__storage_, plainText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "html",
        .dataTypeSpecific.className = NULL,
        .number = RecipientEmail_FieldNumber_Html,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RecipientEmail__storage_, html),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RecipientEmail class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RecipientEmail__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMS

@implementation SMS

@dynamic to;
@dynamic from;
@dynamic body;
@dynamic mediaURL;
@dynamic callback;
@dynamic app;

typedef struct SMS__storage_ {
  uint32_t _has_storage_[1];
  NSString *to;
  NSString *from;
  NSString *body;
  NSString *mediaURL;
  NSString *callback;
  NSString *app;
} SMS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_To,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMS__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SMS__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_Body,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SMS__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_MediaURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SMS__storage_, mediaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callback",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_Callback,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SMS__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "app",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_App,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SMS__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMS class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMS__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Call

@implementation Call

@dynamic to;
@dynamic from;
@dynamic callback;

typedef struct Call__storage_ {
  uint32_t _has_storage_[1];
  NSString *to;
  NSString *from;
  NSString *callback;
} Call__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = Call_FieldNumber_To,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Call__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = Call_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Call__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callback",
        .dataTypeSpecific.className = NULL,
        .number = Call_FieldNumber_Callback,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Call__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Call class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Call__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Fax

@implementation Fax

@dynamic to;
@dynamic from;
@dynamic mediaURL;
@dynamic quality;
@dynamic callback;
@dynamic storeMedia;

typedef struct Fax__storage_ {
  uint32_t _has_storage_[1];
  NSString *to;
  NSString *from;
  NSString *mediaURL;
  NSString *quality;
  NSString *callback;
} Fax__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = Fax_FieldNumber_To,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Fax__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = Fax_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Fax__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = Fax_FieldNumber_MediaURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Fax__storage_, mediaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quality",
        .dataTypeSpecific.className = NULL,
        .number = Fax_FieldNumber_Quality,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Fax__storage_, quality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callback",
        .dataTypeSpecific.className = NULL,
        .number = Fax_FieldNumber_Callback,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Fax__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "storeMedia",
        .dataTypeSpecific.className = NULL,
        .number = Fax_FieldNumber_StoreMedia,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Fax class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Fax__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogHook

@implementation LogHook

@dynamic author;
@dynamic icon;
@dynamic title;

typedef struct LogHook__storage_ {
  uint32_t _has_storage_[1];
  NSString *author;
  NSString *icon;
  NSString *title;
} LogHook__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "author",
        .dataTypeSpecific.className = NULL,
        .number = LogHook_FieldNumber_Author,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LogHook__storage_, author),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = NULL,
        .number = LogHook_FieldNumber_Icon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LogHook__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = LogHook_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LogHook__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogHook class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogHook__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Attachment

@implementation Attachment

@dynamic color;
@dynamic fallback;
@dynamic callbackId;
@dynamic id_p;
@dynamic authorId;
@dynamic authorName;
@dynamic authorLink;
@dynamic authorIcon;
@dynamic title;
@dynamic titlePrefix;
@dynamic pretext;
@dynamic text;
@dynamic imageURL;
@dynamic thumbURL;
@dynamic fieldsArray, fieldsArray_Count;

typedef struct Attachment__storage_ {
  uint32_t _has_storage_[1];
  NSString *color;
  NSString *fallback;
  NSString *callbackId;
  NSString *authorId;
  NSString *authorName;
  NSString *authorLink;
  NSString *authorIcon;
  NSString *title;
  NSString *titlePrefix;
  NSString *pretext;
  NSString *text;
  NSString *imageURL;
  NSString *thumbURL;
  NSMutableArray *fieldsArray;
  int64_t id_p;
} Attachment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "color",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_Color,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Attachment__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fallback",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_Fallback,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Attachment__storage_, fallback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callbackId",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_CallbackId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Attachment__storage_, callbackId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_Id_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Attachment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "authorId",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_AuthorId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Attachment__storage_, authorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authorName",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_AuthorName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Attachment__storage_, authorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authorLink",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_AuthorLink,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Attachment__storage_, authorLink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authorIcon",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_AuthorIcon,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Attachment__storage_, authorIcon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_Title,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Attachment__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titlePrefix",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_TitlePrefix,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Attachment__storage_, titlePrefix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pretext",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_Pretext,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Attachment__storage_, pretext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_Text,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Attachment__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_ImageURL,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Attachment__storage_, imageURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbURL",
        .dataTypeSpecific.className = NULL,
        .number = Attachment_FieldNumber_ThumbURL,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(Attachment__storage_, thumbURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fieldsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AttachmentField),
        .number = Attachment_FieldNumber_FieldsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Attachment__storage_, fieldsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Attachment class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Attachment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\r\005\241!!\000\016\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AttachmentAction

@implementation AttachmentAction

@dynamic name;
@dynamic text;
@dynamic style;
@dynamic type;
@dynamic value;
@dynamic dataSource;
@dynamic minQueryLength;
@dynamic optionsArray, optionsArray_Count;
@dynamic selectedOptionsArray, selectedOptionsArray_Count;
@dynamic optionGroupsArray, optionGroupsArray_Count;
@dynamic hasConfirm, confirm;
@dynamic URL;

typedef struct AttachmentAction__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *text;
  NSString *style;
  NSString *type;
  NSString *value;
  NSString *dataSource;
  NSMutableArray *optionsArray;
  NSMutableArray *selectedOptionsArray;
  NSMutableArray *optionGroupsArray;
  AttachmentConfirmationField *confirm;
  NSString *URL;
  int64_t minQueryLength;
} AttachmentAction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentAction_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentAction_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "style",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentAction_FieldNumber_Style,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, style),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentAction_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentAction_FieldNumber_Value,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dataSource",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentAction_FieldNumber_DataSource,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, dataSource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "minQueryLength",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentAction_FieldNumber_MinQueryLength,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, minQueryLength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AttachmentActionOption),
        .number = AttachmentAction_FieldNumber_OptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, optionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selectedOptionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AttachmentActionOption),
        .number = AttachmentAction_FieldNumber_SelectedOptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, selectedOptionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "optionGroupsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AttachmentActionOptionGroup),
        .number = AttachmentAction_FieldNumber_OptionGroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, optionGroupsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confirm",
        .dataTypeSpecific.className = GPBStringifySymbol(AttachmentConfirmationField),
        .number = AttachmentAction_FieldNumber_Confirm,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, confirm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentAction_FieldNumber_URL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AttachmentAction__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AttachmentAction class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AttachmentAction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\014!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AttachmentConfirmationField

@implementation AttachmentConfirmationField

@dynamic title;
@dynamic text;
@dynamic okText;
@dynamic dismissText;

typedef struct AttachmentConfirmationField__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *text;
  NSString *okText;
  NSString *dismissText;
} AttachmentConfirmationField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentConfirmationField_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AttachmentConfirmationField__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentConfirmationField_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AttachmentConfirmationField__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "okText",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentConfirmationField_FieldNumber_OkText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AttachmentConfirmationField__storage_, okText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dismissText",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentConfirmationField_FieldNumber_DismissText,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AttachmentConfirmationField__storage_, dismissText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AttachmentConfirmationField class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AttachmentConfirmationField__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AttachmentActionOptionGroup

@implementation AttachmentActionOptionGroup

@dynamic text;
@dynamic optionsArray, optionsArray_Count;

typedef struct AttachmentActionOptionGroup__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
  NSMutableArray *optionsArray;
} AttachmentActionOptionGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentActionOptionGroup_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AttachmentActionOptionGroup__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "optionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AttachmentActionOption),
        .number = AttachmentActionOptionGroup_FieldNumber_OptionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttachmentActionOptionGroup__storage_, optionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AttachmentActionOptionGroup class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AttachmentActionOptionGroup__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AttachmentActionOption

@implementation AttachmentActionOption

@dynamic title;
@dynamic value;
@dynamic description_p;

typedef struct AttachmentActionOption__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *value;
  NSString *description_p;
} AttachmentActionOption__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentActionOption_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AttachmentActionOption__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentActionOption_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AttachmentActionOption__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentActionOption_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AttachmentActionOption__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AttachmentActionOption class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AttachmentActionOption__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AttachmentField

@implementation AttachmentField

@dynamic title;
@dynamic value;
@dynamic short_p;

typedef struct AttachmentField__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *value;
} AttachmentField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentField_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AttachmentField__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentField_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AttachmentField__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "short_p",
        .dataTypeSpecific.className = NULL,
        .number = AttachmentField_FieldNumber_Short_p,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AttachmentField class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AttachmentField__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JSONMap

@implementation JSONMap

@dynamic jsonMap, jsonMap_Count;

typedef struct JSONMap__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *jsonMap;
} JSONMap__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "jsonMap",
        .dataTypeSpecific.className = GPBStringifySymbol(JSON),
        .number = JSONMap_FieldNumber_JsonMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JSONMap__storage_, jsonMap),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JSONMap class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JSONMap__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JSON

@implementation JSON

@dynamic data_p;
@dynamic size;

typedef struct JSON__storage_ {
  uint32_t _has_storage_[1];
  NSData *data_p;
  int64_t size;
} JSON__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = JSON_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JSON__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = JSON_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JSON__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JSON class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JSON__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SignedKey

@implementation SignedKey

@dynamic signedKey;

typedef struct SignedKey__storage_ {
  uint32_t _has_storage_[1];
  NSString *signedKey;
} SignedKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signedKey",
        .dataTypeSpecific.className = NULL,
        .number = SignedKey_FieldNumber_SignedKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SignedKey__storage_, signedKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SignedKey class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignedKey__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PubSubMessage

@implementation PubSubMessage

@dynamic hasMessage, message;

typedef struct PubSubMessage__storage_ {
  uint32_t _has_storage_[1];
  PubsubMessage *message;
} PubSubMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(PubsubMessage),
        .number = PubSubMessage_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PubSubMessage__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PubSubMessage class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PubSubMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PubSubTopic

@implementation PubSubTopic

@dynamic hasTopic, topic;

typedef struct PubSubTopic__storage_ {
  uint32_t _has_storage_[1];
  Topic *topic;
} PubSubTopic__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topic",
        .dataTypeSpecific.className = GPBStringifySymbol(Topic),
        .number = PubSubTopic_FieldNumber_Topic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PubSubTopic__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PubSubTopic class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PubSubTopic__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
