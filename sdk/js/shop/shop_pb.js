/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var time_time_pb = require('../time/time_pb.js');
var geo_geo_pb = require('../geo/geo_pb.js');
goog.exportSymbol('proto.shop.Card', null, global);
goog.exportSymbol('proto.shop.CardType', null, global);
goog.exportSymbol('proto.shop.Cart', null, global);
goog.exportSymbol('proto.shop.Inventory', null, global);
goog.exportSymbol('proto.shop.Picture', null, global);
goog.exportSymbol('proto.shop.Product', null, global);
goog.exportSymbol('proto.shop.ProductType', null, global);
goog.exportSymbol('proto.shop.Rating', null, global);
goog.exportSymbol('proto.shop.Receipt', null, global);
goog.exportSymbol('proto.shop.Reminder', null, global);
goog.exportSymbol('proto.shop.Review', null, global);
goog.exportSymbol('proto.shop.Slideshow', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shop.Card = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shop.Card, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shop.Card.displayName = 'proto.shop.Card';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shop.Card.prototype.toObject = function(opt_includeInstance) {
  return proto.shop.Card.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shop.Card} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Card.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fullName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    number: jspb.Message.getFieldWithDefault(msg, 3, 0),
    code: jspb.Message.getFieldWithDefault(msg, 4, 0),
    expiration: jspb.Message.getFieldWithDefault(msg, 5, ""),
    postal: (f = msg.getPostal()) && geo_geo_pb.PostalAddress.toObject(includeInstance, f),
    owner: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shop.Card}
 */
proto.shop.Card.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shop.Card;
  return proto.shop.Card.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shop.Card} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shop.Card}
 */
proto.shop.Card.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.shop.CardType} */ (reader.readEnum());
      msg.setCardType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpiration(value);
      break;
    case 6:
      var value = new geo_geo_pb.PostalAddress;
      reader.readMessage(value,geo_geo_pb.PostalAddress.deserializeBinaryFromReader);
      msg.setPostal(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shop.Card.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shop.Card.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shop.Card} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Card.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getExpiration();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPostal();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      geo_geo_pb.PostalAddress.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional CardType card_type = 1;
 * @return {!proto.shop.CardType}
 */
proto.shop.Card.prototype.getCardType = function() {
  return /** @type {!proto.shop.CardType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.shop.CardType} value */
proto.shop.Card.prototype.setCardType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string full_name = 2;
 * @return {string}
 */
proto.shop.Card.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.shop.Card.prototype.setFullName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 number = 3;
 * @return {number}
 */
proto.shop.Card.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.shop.Card.prototype.setNumber = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 code = 4;
 * @return {number}
 */
proto.shop.Card.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.shop.Card.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string expiration = 5;
 * @return {string}
 */
proto.shop.Card.prototype.getExpiration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.shop.Card.prototype.setExpiration = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional geo.PostalAddress postal = 6;
 * @return {?proto.geo.PostalAddress}
 */
proto.shop.Card.prototype.getPostal = function() {
  return /** @type{?proto.geo.PostalAddress} */ (
    jspb.Message.getWrapperField(this, geo_geo_pb.PostalAddress, 6));
};


/** @param {?proto.geo.PostalAddress|undefined} value */
proto.shop.Card.prototype.setPostal = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.shop.Card.prototype.clearPostal = function() {
  this.setPostal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.shop.Card.prototype.hasPostal = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string owner = 7;
 * @return {string}
 */
proto.shop.Card.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.shop.Card.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shop.Review = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shop.Review, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shop.Review.displayName = 'proto.shop.Review';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shop.Review.prototype.toObject = function(opt_includeInstance) {
  return proto.shop.Review.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shop.Review} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Review.toObject = function(includeInstance, msg) {
  var f, obj = {
    author: jspb.Message.getFieldWithDefault(msg, 1, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rating: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tracker: (f = msg.getTracker()) && time_time_pb.Tracker.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shop.Review}
 */
proto.shop.Review.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shop.Review;
  return proto.shop.Review.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shop.Review} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shop.Review}
 */
proto.shop.Review.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRating(value);
      break;
    case 4:
      var value = new time_time_pb.Tracker;
      reader.readMessage(value,time_time_pb.Tracker.deserializeBinaryFromReader);
      msg.setTracker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shop.Review.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shop.Review.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shop.Review} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Review.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRating();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTracker();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      time_time_pb.Tracker.serializeBinaryToWriter
    );
  }
};


/**
 * optional string author = 1;
 * @return {string}
 */
proto.shop.Review.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.shop.Review.prototype.setAuthor = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string comment = 2;
 * @return {string}
 */
proto.shop.Review.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.shop.Review.prototype.setComment = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 rating = 3;
 * @return {number}
 */
proto.shop.Review.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.shop.Review.prototype.setRating = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional time.Tracker tracker = 4;
 * @return {?proto.time.Tracker}
 */
proto.shop.Review.prototype.getTracker = function() {
  return /** @type{?proto.time.Tracker} */ (
    jspb.Message.getWrapperField(this, time_time_pb.Tracker, 4));
};


/** @param {?proto.time.Tracker|undefined} value */
proto.shop.Review.prototype.setTracker = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.shop.Review.prototype.clearTracker = function() {
  this.setTracker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.shop.Review.prototype.hasTracker = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shop.Picture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shop.Picture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shop.Picture.displayName = 'proto.shop.Picture';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shop.Picture.prototype.toObject = function(opt_includeInstance) {
  return proto.shop.Picture.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shop.Picture} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Picture.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    info: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shop.Picture}
 */
proto.shop.Picture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shop.Picture;
  return proto.shop.Picture.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shop.Picture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shop.Picture}
 */
proto.shop.Picture.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shop.Picture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shop.Picture.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shop.Picture} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Picture.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.shop.Picture.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.shop.Picture.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.shop.Picture.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.shop.Picture.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shop.Slideshow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shop.Slideshow.repeatedFields_, null);
};
goog.inherits(proto.shop.Slideshow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shop.Slideshow.displayName = 'proto.shop.Slideshow';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shop.Slideshow.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shop.Slideshow.prototype.toObject = function(opt_includeInstance) {
  return proto.shop.Slideshow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shop.Slideshow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Slideshow.toObject = function(includeInstance, msg) {
  var f, obj = {
    picturesList: jspb.Message.toObjectList(msg.getPicturesList(),
    proto.shop.Picture.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shop.Slideshow}
 */
proto.shop.Slideshow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shop.Slideshow;
  return proto.shop.Slideshow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shop.Slideshow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shop.Slideshow}
 */
proto.shop.Slideshow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.shop.Picture;
      reader.readMessage(value,proto.shop.Picture.deserializeBinaryFromReader);
      msg.addPictures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shop.Slideshow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shop.Slideshow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shop.Slideshow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Slideshow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPicturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.shop.Picture.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Picture pictures = 2;
 * @return {!Array<!proto.shop.Picture>}
 */
proto.shop.Slideshow.prototype.getPicturesList = function() {
  return /** @type{!Array<!proto.shop.Picture>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shop.Picture, 2));
};


/** @param {!Array<!proto.shop.Picture>} value */
proto.shop.Slideshow.prototype.setPicturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.shop.Picture=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shop.Picture}
 */
proto.shop.Slideshow.prototype.addPictures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.shop.Picture, opt_index);
};


proto.shop.Slideshow.prototype.clearPicturesList = function() {
  this.setPicturesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shop.Inventory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shop.Inventory.repeatedFields_, null);
};
goog.inherits(proto.shop.Inventory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shop.Inventory.displayName = 'proto.shop.Inventory';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shop.Inventory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shop.Inventory.prototype.toObject = function(opt_includeInstance) {
  return proto.shop.Inventory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shop.Inventory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Inventory.toObject = function(includeInstance, msg) {
  var f, obj = {
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.shop.Product.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shop.Inventory}
 */
proto.shop.Inventory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shop.Inventory;
  return proto.shop.Inventory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shop.Inventory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shop.Inventory}
 */
proto.shop.Inventory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shop.Product;
      reader.readMessage(value,proto.shop.Product.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shop.Inventory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shop.Inventory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shop.Inventory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Inventory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.shop.Product.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Product products = 1;
 * @return {!Array<!proto.shop.Product>}
 */
proto.shop.Inventory.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.shop.Product>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shop.Product, 1));
};


/** @param {!Array<!proto.shop.Product>} value */
proto.shop.Inventory.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.shop.Product=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shop.Product}
 */
proto.shop.Inventory.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shop.Product, opt_index);
};


proto.shop.Inventory.prototype.clearProductsList = function() {
  this.setProductsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shop.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shop.Product.repeatedFields_, null);
};
goog.inherits(proto.shop.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shop.Product.displayName = 'proto.shop.Product';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shop.Product.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shop.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.shop.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shop.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    info: jspb.Message.getFieldWithDefault(msg, 2, ""),
    slideshow: (f = msg.getSlideshow()) && proto.shop.Slideshow.toObject(includeInstance, f),
    price: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    remaining: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rating: jspb.Message.getFieldWithDefault(msg, 6, 0),
    reviewsList: jspb.Message.toObjectList(msg.getReviewsList(),
    proto.shop.Review.toObject, includeInstance),
    deliveryDate: jspb.Message.getFieldWithDefault(msg, 8, ""),
    refundPolicy: jspb.Message.getFieldWithDefault(msg, 9, ""),
    cogs: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    prodType: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tracker: (f = msg.getTracker()) && time_time_pb.Tracker.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shop.Product}
 */
proto.shop.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shop.Product;
  return proto.shop.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shop.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shop.Product}
 */
proto.shop.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 3:
      var value = new proto.shop.Slideshow;
      reader.readMessage(value,proto.shop.Slideshow.deserializeBinaryFromReader);
      msg.setSlideshow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRemaining(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRating(value);
      break;
    case 7:
      var value = new proto.shop.Review;
      reader.readMessage(value,proto.shop.Review.deserializeBinaryFromReader);
      msg.addReviews(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeliveryDate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefundPolicy(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCogs(value);
      break;
    case 11:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 12:
      var value = /** @type {!proto.shop.ProductType} */ (reader.readEnum());
      msg.setProdType(value);
      break;
    case 13:
      var value = new time_time_pb.Tracker;
      reader.readMessage(value,time_time_pb.Tracker.deserializeBinaryFromReader);
      msg.setTracker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shop.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shop.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shop.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSlideshow();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shop.Slideshow.serializeBinaryToWriter
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getRemaining();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getRating();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getReviewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.shop.Review.serializeBinaryToWriter
    );
  }
  f = message.getDeliveryDate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRefundPolicy();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCogs();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getProdType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getTracker();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      time_time_pb.Tracker.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.shop.Product.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.shop.Product.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.shop.Product.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.shop.Product.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Slideshow slideshow = 3;
 * @return {?proto.shop.Slideshow}
 */
proto.shop.Product.prototype.getSlideshow = function() {
  return /** @type{?proto.shop.Slideshow} */ (
    jspb.Message.getWrapperField(this, proto.shop.Slideshow, 3));
};


/** @param {?proto.shop.Slideshow|undefined} value */
proto.shop.Product.prototype.setSlideshow = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.shop.Product.prototype.clearSlideshow = function() {
  this.setSlideshow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.shop.Product.prototype.hasSlideshow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float price = 4;
 * @return {number}
 */
proto.shop.Product.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.shop.Product.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int64 remaining = 5;
 * @return {number}
 */
proto.shop.Product.prototype.getRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.shop.Product.prototype.setRemaining = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 rating = 6;
 * @return {number}
 */
proto.shop.Product.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.shop.Product.prototype.setRating = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Review reviews = 7;
 * @return {!Array<!proto.shop.Review>}
 */
proto.shop.Product.prototype.getReviewsList = function() {
  return /** @type{!Array<!proto.shop.Review>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shop.Review, 7));
};


/** @param {!Array<!proto.shop.Review>} value */
proto.shop.Product.prototype.setReviewsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.shop.Review=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shop.Review}
 */
proto.shop.Product.prototype.addReviews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.shop.Review, opt_index);
};


proto.shop.Product.prototype.clearReviewsList = function() {
  this.setReviewsList([]);
};


/**
 * optional string delivery_date = 8;
 * @return {string}
 */
proto.shop.Product.prototype.getDeliveryDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.shop.Product.prototype.setDeliveryDate = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string refund_policy = 9;
 * @return {string}
 */
proto.shop.Product.prototype.getRefundPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.shop.Product.prototype.setRefundPolicy = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional float cogs = 10;
 * @return {number}
 */
proto.shop.Product.prototype.getCogs = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.shop.Product.prototype.setCogs = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * map<string, string> labels = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.shop.Product.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


proto.shop.Product.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
};


/**
 * optional ProductType prod_type = 12;
 * @return {!proto.shop.ProductType}
 */
proto.shop.Product.prototype.getProdType = function() {
  return /** @type {!proto.shop.ProductType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.shop.ProductType} value */
proto.shop.Product.prototype.setProdType = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional time.Tracker tracker = 13;
 * @return {?proto.time.Tracker}
 */
proto.shop.Product.prototype.getTracker = function() {
  return /** @type{?proto.time.Tracker} */ (
    jspb.Message.getWrapperField(this, time_time_pb.Tracker, 13));
};


/** @param {?proto.time.Tracker|undefined} value */
proto.shop.Product.prototype.setTracker = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.shop.Product.prototype.clearTracker = function() {
  this.setTracker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.shop.Product.prototype.hasTracker = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shop.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shop.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shop.Receipt.displayName = 'proto.shop.Receipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shop.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.shop.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shop.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastFourDigits: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cart: (f = msg.getCart()) && proto.shop.Cart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shop.Receipt}
 */
proto.shop.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shop.Receipt;
  return proto.shop.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shop.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shop.Receipt}
 */
proto.shop.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastFourDigits(value);
      break;
    case 2:
      var value = new proto.shop.Cart;
      reader.readMessage(value,proto.shop.Cart.deserializeBinaryFromReader);
      msg.setCart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shop.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shop.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shop.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastFourDigits();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.shop.Cart.serializeBinaryToWriter
    );
  }
};


/**
 * optional string last_four_digits = 1;
 * @return {string}
 */
proto.shop.Receipt.prototype.getLastFourDigits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.shop.Receipt.prototype.setLastFourDigits = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Cart cart = 2;
 * @return {?proto.shop.Cart}
 */
proto.shop.Receipt.prototype.getCart = function() {
  return /** @type{?proto.shop.Cart} */ (
    jspb.Message.getWrapperField(this, proto.shop.Cart, 2));
};


/** @param {?proto.shop.Cart|undefined} value */
proto.shop.Receipt.prototype.setCart = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.shop.Receipt.prototype.clearCart = function() {
  this.setCart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.shop.Receipt.prototype.hasCart = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shop.Cart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.shop.Cart.repeatedFields_, null);
};
goog.inherits(proto.shop.Cart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shop.Cart.displayName = 'proto.shop.Cart';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.shop.Cart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shop.Cart.prototype.toObject = function(opt_includeInstance) {
  return proto.shop.Cart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shop.Cart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Cart.toObject = function(includeInstance, msg) {
  var f, obj = {
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.shop.Product.toObject, includeInstance),
    total: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    reminder: (f = msg.getReminder()) && proto.shop.Reminder.toObject(includeInstance, f),
    tracker: (f = msg.getTracker()) && time_time_pb.Tracker.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shop.Cart}
 */
proto.shop.Cart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shop.Cart;
  return proto.shop.Cart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shop.Cart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shop.Cart}
 */
proto.shop.Cart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shop.Product;
      reader.readMessage(value,proto.shop.Product.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotal(value);
      break;
    case 3:
      var value = new proto.shop.Reminder;
      reader.readMessage(value,proto.shop.Reminder.deserializeBinaryFromReader);
      msg.setReminder(value);
      break;
    case 4:
      var value = new time_time_pb.Tracker;
      reader.readMessage(value,time_time_pb.Tracker.deserializeBinaryFromReader);
      msg.setTracker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shop.Cart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shop.Cart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shop.Cart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Cart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.shop.Product.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getReminder();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.shop.Reminder.serializeBinaryToWriter
    );
  }
  f = message.getTracker();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      time_time_pb.Tracker.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Product products = 1;
 * @return {!Array<!proto.shop.Product>}
 */
proto.shop.Cart.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.shop.Product>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.shop.Product, 1));
};


/** @param {!Array<!proto.shop.Product>} value */
proto.shop.Cart.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.shop.Product=} opt_value
 * @param {number=} opt_index
 * @return {!proto.shop.Product}
 */
proto.shop.Cart.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.shop.Product, opt_index);
};


proto.shop.Cart.prototype.clearProductsList = function() {
  this.setProductsList([]);
};


/**
 * optional float total = 2;
 * @return {number}
 */
proto.shop.Cart.prototype.getTotal = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.shop.Cart.prototype.setTotal = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional Reminder reminder = 3;
 * @return {?proto.shop.Reminder}
 */
proto.shop.Cart.prototype.getReminder = function() {
  return /** @type{?proto.shop.Reminder} */ (
    jspb.Message.getWrapperField(this, proto.shop.Reminder, 3));
};


/** @param {?proto.shop.Reminder|undefined} value */
proto.shop.Cart.prototype.setReminder = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.shop.Cart.prototype.clearReminder = function() {
  this.setReminder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.shop.Cart.prototype.hasReminder = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional time.Tracker tracker = 4;
 * @return {?proto.time.Tracker}
 */
proto.shop.Cart.prototype.getTracker = function() {
  return /** @type{?proto.time.Tracker} */ (
    jspb.Message.getWrapperField(this, time_time_pb.Tracker, 4));
};


/** @param {?proto.time.Tracker|undefined} value */
proto.shop.Cart.prototype.setTracker = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.shop.Cart.prototype.clearTracker = function() {
  this.setTracker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.shop.Cart.prototype.hasTracker = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shop.Reminder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shop.Reminder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shop.Reminder.displayName = 'proto.shop.Reminder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shop.Reminder.prototype.toObject = function(opt_includeInstance) {
  return proto.shop.Reminder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shop.Reminder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Reminder.toObject = function(includeInstance, msg) {
  var f, obj = {
    emailAfter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    smsAfter: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shop.Reminder}
 */
proto.shop.Reminder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shop.Reminder;
  return proto.shop.Reminder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shop.Reminder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shop.Reminder}
 */
proto.shop.Reminder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEmailAfter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSmsAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shop.Reminder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.shop.Reminder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.shop.Reminder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.shop.Reminder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmailAfter();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSmsAfter();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 email_after = 1;
 * @return {number}
 */
proto.shop.Reminder.prototype.getEmailAfter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.shop.Reminder.prototype.setEmailAfter = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 sms_after = 2;
 * @return {number}
 */
proto.shop.Reminder.prototype.getSmsAfter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.shop.Reminder.prototype.setSmsAfter = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.shop.ProductType = {
  SERVICE: 0,
  CONTRACT: 1,
  PRODUCT: 2,
  DIGITAL: 3
};

/**
 * @enum {number}
 */
proto.shop.Rating = {
  EXCELLENT: 0,
  GOOD: 1,
  AVERAGE: 2,
  POOR: 3,
  BAD: 4
};

/**
 * @enum {number}
 */
proto.shop.CardType = {
  VISA: 0,
  MASTERCARD: 1
};

goog.object.extend(exports, proto.shop);
