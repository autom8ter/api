/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.geo.Country', null, global);
goog.exportSymbol('proto.geo.CountryAlpha2Code', null, global);
goog.exportSymbol('proto.geo.CountryAlpha3Code', null, global);
goog.exportSymbol('proto.geo.LatLng', null, global);
goog.exportSymbol('proto.geo.PostalAddress', null, global);
goog.exportSymbol('proto.geo.SimplePostalAddress', null, global);
goog.exportSymbol('proto.geo.StreetDirection', null, global);
goog.exportSymbol('proto.geo.URL', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.Country = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.Country, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.Country.displayName = 'proto.geo.Country';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.Country.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.Country.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.Country} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.Country.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    alpha2Code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    alpha3Code: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numericCode: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.Country}
 */
proto.geo.Country.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.Country;
  return proto.geo.Country.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.Country} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.Country}
 */
proto.geo.Country.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.geo.CountryAlpha2Code} */ (reader.readEnum());
      msg.setAlpha2Code(value);
      break;
    case 3:
      var value = /** @type {!proto.geo.CountryAlpha3Code} */ (reader.readEnum());
      msg.setAlpha3Code(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumericCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.Country.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.Country.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.Country} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.Country.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlpha2Code();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAlpha3Code();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getNumericCode();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.geo.Country.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.geo.Country.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CountryAlpha2Code alpha_2_code = 2;
 * @return {!proto.geo.CountryAlpha2Code}
 */
proto.geo.Country.prototype.getAlpha2Code = function() {
  return /** @type {!proto.geo.CountryAlpha2Code} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.geo.CountryAlpha2Code} value */
proto.geo.Country.prototype.setAlpha2Code = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional CountryAlpha3Code alpha_3_code = 3;
 * @return {!proto.geo.CountryAlpha3Code}
 */
proto.geo.Country.prototype.getAlpha3Code = function() {
  return /** @type {!proto.geo.CountryAlpha3Code} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.geo.CountryAlpha3Code} value */
proto.geo.Country.prototype.setAlpha3Code = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 numeric_code = 4;
 * @return {number}
 */
proto.geo.Country.prototype.getNumericCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.geo.Country.prototype.setNumericCode = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.LatLng = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.LatLng, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.LatLng.displayName = 'proto.geo.LatLng';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.LatLng.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.LatLng.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.LatLng} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.LatLng.toObject = function(includeInstance, msg) {
  var f, obj = {
    latPicos: jspb.Message.getFieldWithDefault(msg, 1, 0),
    longPicos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.LatLng}
 */
proto.geo.LatLng.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.LatLng;
  return proto.geo.LatLng.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.LatLng} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.LatLng}
 */
proto.geo.LatLng.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatPicos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLongPicos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.LatLng.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.LatLng.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.LatLng} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.LatLng.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatPicos();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLongPicos();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 lat_picos = 1;
 * @return {number}
 */
proto.geo.LatLng.prototype.getLatPicos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.geo.LatLng.prototype.setLatPicos = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 long_picos = 2;
 * @return {number}
 */
proto.geo.LatLng.prototype.getLongPicos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.geo.LatLng.prototype.setLongPicos = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.PostalAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.PostalAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.PostalAddress.displayName = 'proto.geo.PostalAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.PostalAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.PostalAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.PostalAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.PostalAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    streetNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    streetNumberPostfix: jspb.Message.getFieldWithDefault(msg, 2, ""),
    streetName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    preStreetDirection: jspb.Message.getFieldWithDefault(msg, 4, 0),
    postStreetDirection: jspb.Message.getFieldWithDefault(msg, 5, 0),
    streetTypeAbbreviation: jspb.Message.getFieldWithDefault(msg, 6, ""),
    secondaryAddressTypeAbbreviation: jspb.Message.getFieldWithDefault(msg, 7, ""),
    secondaryAddressValue: jspb.Message.getFieldWithDefault(msg, 8, ""),
    localityName: jspb.Message.getFieldWithDefault(msg, 9, ""),
    regionCode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    postalCode: jspb.Message.getFieldWithDefault(msg, 11, ""),
    countryAlpha2Code: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.PostalAddress}
 */
proto.geo.PostalAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.PostalAddress;
  return proto.geo.PostalAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.PostalAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.PostalAddress}
 */
proto.geo.PostalAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStreetNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetNumberPostfix(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetName(value);
      break;
    case 4:
      var value = /** @type {!proto.geo.StreetDirection} */ (reader.readEnum());
      msg.setPreStreetDirection(value);
      break;
    case 5:
      var value = /** @type {!proto.geo.StreetDirection} */ (reader.readEnum());
      msg.setPostStreetDirection(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetTypeAbbreviation(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondaryAddressTypeAbbreviation(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecondaryAddressValue(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalityName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegionCode(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostalCode(value);
      break;
    case 12:
      var value = /** @type {!proto.geo.CountryAlpha2Code} */ (reader.readEnum());
      msg.setCountryAlpha2Code(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.PostalAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.PostalAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.PostalAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.PostalAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreetNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStreetNumberPostfix();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStreetName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPreStreetDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPostStreetDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStreetTypeAbbreviation();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSecondaryAddressTypeAbbreviation();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSecondaryAddressValue();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLocalityName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRegionCode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPostalCode();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCountryAlpha2Code();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional uint64 street_number = 1;
 * @return {number}
 */
proto.geo.PostalAddress.prototype.getStreetNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.geo.PostalAddress.prototype.setStreetNumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string street_number_postfix = 2;
 * @return {string}
 */
proto.geo.PostalAddress.prototype.getStreetNumberPostfix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.geo.PostalAddress.prototype.setStreetNumberPostfix = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string street_name = 3;
 * @return {string}
 */
proto.geo.PostalAddress.prototype.getStreetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.geo.PostalAddress.prototype.setStreetName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional StreetDirection pre_street_direction = 4;
 * @return {!proto.geo.StreetDirection}
 */
proto.geo.PostalAddress.prototype.getPreStreetDirection = function() {
  return /** @type {!proto.geo.StreetDirection} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.geo.StreetDirection} value */
proto.geo.PostalAddress.prototype.setPreStreetDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional StreetDirection post_street_direction = 5;
 * @return {!proto.geo.StreetDirection}
 */
proto.geo.PostalAddress.prototype.getPostStreetDirection = function() {
  return /** @type {!proto.geo.StreetDirection} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.geo.StreetDirection} value */
proto.geo.PostalAddress.prototype.setPostStreetDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string street_type_abbreviation = 6;
 * @return {string}
 */
proto.geo.PostalAddress.prototype.getStreetTypeAbbreviation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.geo.PostalAddress.prototype.setStreetTypeAbbreviation = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string secondary_address_type_abbreviation = 7;
 * @return {string}
 */
proto.geo.PostalAddress.prototype.getSecondaryAddressTypeAbbreviation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.geo.PostalAddress.prototype.setSecondaryAddressTypeAbbreviation = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string secondary_address_value = 8;
 * @return {string}
 */
proto.geo.PostalAddress.prototype.getSecondaryAddressValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.geo.PostalAddress.prototype.setSecondaryAddressValue = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string locality_name = 9;
 * @return {string}
 */
proto.geo.PostalAddress.prototype.getLocalityName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.geo.PostalAddress.prototype.setLocalityName = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string region_code = 10;
 * @return {string}
 */
proto.geo.PostalAddress.prototype.getRegionCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.geo.PostalAddress.prototype.setRegionCode = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string postal_code = 11;
 * @return {string}
 */
proto.geo.PostalAddress.prototype.getPostalCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.geo.PostalAddress.prototype.setPostalCode = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional CountryAlpha2Code country_alpha_2_code = 12;
 * @return {!proto.geo.CountryAlpha2Code}
 */
proto.geo.PostalAddress.prototype.getCountryAlpha2Code = function() {
  return /** @type {!proto.geo.CountryAlpha2Code} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.geo.CountryAlpha2Code} value */
proto.geo.PostalAddress.prototype.setCountryAlpha2Code = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.SimplePostalAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.SimplePostalAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.SimplePostalAddress.displayName = 'proto.geo.SimplePostalAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.SimplePostalAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.SimplePostalAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.SimplePostalAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.SimplePostalAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    streetAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    streetAddress2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    localityName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    regionCode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    postalCode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    countryAlpha2Code: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.SimplePostalAddress}
 */
proto.geo.SimplePostalAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.SimplePostalAddress;
  return proto.geo.SimplePostalAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.SimplePostalAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.SimplePostalAddress}
 */
proto.geo.SimplePostalAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetAddress2(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalityName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegionCode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostalCode(value);
      break;
    case 6:
      var value = /** @type {!proto.geo.CountryAlpha2Code} */ (reader.readEnum());
      msg.setCountryAlpha2Code(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.SimplePostalAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.SimplePostalAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.SimplePostalAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.SimplePostalAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreetAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStreetAddress2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocalityName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegionCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPostalCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCountryAlpha2Code();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string street_address = 1;
 * @return {string}
 */
proto.geo.SimplePostalAddress.prototype.getStreetAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.geo.SimplePostalAddress.prototype.setStreetAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string street_address_2 = 2;
 * @return {string}
 */
proto.geo.SimplePostalAddress.prototype.getStreetAddress2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.geo.SimplePostalAddress.prototype.setStreetAddress2 = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string locality_name = 3;
 * @return {string}
 */
proto.geo.SimplePostalAddress.prototype.getLocalityName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.geo.SimplePostalAddress.prototype.setLocalityName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string region_code = 4;
 * @return {string}
 */
proto.geo.SimplePostalAddress.prototype.getRegionCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.geo.SimplePostalAddress.prototype.setRegionCode = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string postal_code = 5;
 * @return {string}
 */
proto.geo.SimplePostalAddress.prototype.getPostalCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.geo.SimplePostalAddress.prototype.setPostalCode = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional CountryAlpha2Code country_alpha_2_code = 6;
 * @return {!proto.geo.CountryAlpha2Code}
 */
proto.geo.SimplePostalAddress.prototype.getCountryAlpha2Code = function() {
  return /** @type {!proto.geo.CountryAlpha2Code} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.geo.CountryAlpha2Code} value */
proto.geo.SimplePostalAddress.prototype.setCountryAlpha2Code = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.URL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.URL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.URL.displayName = 'proto.geo.URL';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.URL.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.URL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.URL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.URL.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheme: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    host: jspb.Message.getFieldWithDefault(msg, 4, ""),
    path: jspb.Message.getFieldWithDefault(msg, 5, ""),
    queryMap: (f = msg.getQueryMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.URL}
 */
proto.geo.URL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.URL;
  return proto.geo.URL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.URL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.URL}
 */
proto.geo.URL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheme(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 6:
      var value = msg.getQueryMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.URL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.URL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.URL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.URL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheme();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getQueryMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string scheme = 1;
 * @return {string}
 */
proto.geo.URL.prototype.getScheme = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.geo.URL.prototype.setScheme = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.geo.URL.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.geo.URL.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.geo.URL.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.geo.URL.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string host = 4;
 * @return {string}
 */
proto.geo.URL.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.geo.URL.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string path = 5;
 * @return {string}
 */
proto.geo.URL.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.geo.URL.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * map<string, string> query = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.geo.URL.prototype.getQueryMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


proto.geo.URL.prototype.clearQueryMap = function() {
  this.getQueryMap().clear();
};


/**
 * @enum {number}
 */
proto.geo.CountryAlpha2Code = {
  COUNTRY_ALPHA_2_CODE_NONE: 0,
  COUNTRY_ALPHA_2_CODE_AD: 1,
  COUNTRY_ALPHA_2_CODE_AE: 2,
  COUNTRY_ALPHA_2_CODE_AF: 3,
  COUNTRY_ALPHA_2_CODE_AG: 4,
  COUNTRY_ALPHA_2_CODE_AI: 5,
  COUNTRY_ALPHA_2_CODE_AL: 6,
  COUNTRY_ALPHA_2_CODE_AM: 7,
  COUNTRY_ALPHA_2_CODE_AO: 8,
  COUNTRY_ALPHA_2_CODE_AR: 9,
  COUNTRY_ALPHA_2_CODE_AS: 10,
  COUNTRY_ALPHA_2_CODE_AT: 11,
  COUNTRY_ALPHA_2_CODE_AU: 12,
  COUNTRY_ALPHA_2_CODE_AW: 13,
  COUNTRY_ALPHA_2_CODE_AX: 14,
  COUNTRY_ALPHA_2_CODE_AZ: 15,
  COUNTRY_ALPHA_2_CODE_BA: 16,
  COUNTRY_ALPHA_2_CODE_BB: 17,
  COUNTRY_ALPHA_2_CODE_BD: 18,
  COUNTRY_ALPHA_2_CODE_BE: 19,
  COUNTRY_ALPHA_2_CODE_BF: 20,
  COUNTRY_ALPHA_2_CODE_BG: 21,
  COUNTRY_ALPHA_2_CODE_BH: 22,
  COUNTRY_ALPHA_2_CODE_BI: 23,
  COUNTRY_ALPHA_2_CODE_BJ: 24,
  COUNTRY_ALPHA_2_CODE_BL: 25,
  COUNTRY_ALPHA_2_CODE_BM: 26,
  COUNTRY_ALPHA_2_CODE_BN: 27,
  COUNTRY_ALPHA_2_CODE_BO: 28,
  COUNTRY_ALPHA_2_CODE_BQ: 29,
  COUNTRY_ALPHA_2_CODE_BR: 30,
  COUNTRY_ALPHA_2_CODE_BS: 31,
  COUNTRY_ALPHA_2_CODE_BV: 32,
  COUNTRY_ALPHA_2_CODE_BW: 33,
  COUNTRY_ALPHA_2_CODE_BY: 34,
  COUNTRY_ALPHA_2_CODE_BZ: 35,
  COUNTRY_ALPHA_2_CODE_CA: 36,
  COUNTRY_ALPHA_2_CODE_CC: 37,
  COUNTRY_ALPHA_2_CODE_CD: 38,
  COUNTRY_ALPHA_2_CODE_CF: 39,
  COUNTRY_ALPHA_2_CODE_CG: 40,
  COUNTRY_ALPHA_2_CODE_CH: 41,
  COUNTRY_ALPHA_2_CODE_CI: 42,
  COUNTRY_ALPHA_2_CODE_CK: 43,
  COUNTRY_ALPHA_2_CODE_CL: 44,
  COUNTRY_ALPHA_2_CODE_CM: 45,
  COUNTRY_ALPHA_2_CODE_CN: 46,
  COUNTRY_ALPHA_2_CODE_CO: 47,
  COUNTRY_ALPHA_2_CODE_CR: 48,
  COUNTRY_ALPHA_2_CODE_CV: 49,
  COUNTRY_ALPHA_2_CODE_CW: 50,
  COUNTRY_ALPHA_2_CODE_CX: 51,
  COUNTRY_ALPHA_2_CODE_CY: 52,
  COUNTRY_ALPHA_2_CODE_CZ: 53,
  COUNTRY_ALPHA_2_CODE_DE: 54,
  COUNTRY_ALPHA_2_CODE_DJ: 55,
  COUNTRY_ALPHA_2_CODE_DK: 56,
  COUNTRY_ALPHA_2_CODE_DM: 57,
  COUNTRY_ALPHA_2_CODE_DO: 58,
  COUNTRY_ALPHA_2_CODE_DZ: 59,
  COUNTRY_ALPHA_2_CODE_EC: 60,
  COUNTRY_ALPHA_2_CODE_EE: 61,
  COUNTRY_ALPHA_2_CODE_EG: 62,
  COUNTRY_ALPHA_2_CODE_EH: 63,
  COUNTRY_ALPHA_2_CODE_ER: 64,
  COUNTRY_ALPHA_2_CODE_ES: 65,
  COUNTRY_ALPHA_2_CODE_ET: 66,
  COUNTRY_ALPHA_2_CODE_FI: 67,
  COUNTRY_ALPHA_2_CODE_FJ: 68,
  COUNTRY_ALPHA_2_CODE_FM: 69,
  COUNTRY_ALPHA_2_CODE_FO: 70,
  COUNTRY_ALPHA_2_CODE_FR: 71,
  COUNTRY_ALPHA_2_CODE_GA: 72,
  COUNTRY_ALPHA_2_CODE_GB: 73,
  COUNTRY_ALPHA_2_CODE_GD: 74,
  COUNTRY_ALPHA_2_CODE_GE: 75,
  COUNTRY_ALPHA_2_CODE_GF: 76,
  COUNTRY_ALPHA_2_CODE_GG: 77,
  COUNTRY_ALPHA_2_CODE_GH: 78,
  COUNTRY_ALPHA_2_CODE_GI: 79,
  COUNTRY_ALPHA_2_CODE_GL: 80,
  COUNTRY_ALPHA_2_CODE_GM: 81,
  COUNTRY_ALPHA_2_CODE_GN: 82,
  COUNTRY_ALPHA_2_CODE_GP: 83,
  COUNTRY_ALPHA_2_CODE_GQ: 84,
  COUNTRY_ALPHA_2_CODE_GR: 85,
  COUNTRY_ALPHA_2_CODE_GT: 86,
  COUNTRY_ALPHA_2_CODE_GU: 87,
  COUNTRY_ALPHA_2_CODE_GW: 88,
  COUNTRY_ALPHA_2_CODE_GY: 89,
  COUNTRY_ALPHA_2_CODE_HK: 90,
  COUNTRY_ALPHA_2_CODE_HM: 91,
  COUNTRY_ALPHA_2_CODE_HN: 92,
  COUNTRY_ALPHA_2_CODE_HR: 93,
  COUNTRY_ALPHA_2_CODE_HU: 94,
  COUNTRY_ALPHA_2_CODE_ID: 95,
  COUNTRY_ALPHA_2_CODE_IE: 96,
  COUNTRY_ALPHA_2_CODE_IL: 97,
  COUNTRY_ALPHA_2_CODE_IM: 98,
  COUNTRY_ALPHA_2_CODE_IN: 99,
  COUNTRY_ALPHA_2_CODE_IO: 100,
  COUNTRY_ALPHA_2_CODE_IQ: 101,
  COUNTRY_ALPHA_2_CODE_IR: 102,
  COUNTRY_ALPHA_2_CODE_IS: 103,
  COUNTRY_ALPHA_2_CODE_IT: 104,
  COUNTRY_ALPHA_2_CODE_JE: 105,
  COUNTRY_ALPHA_2_CODE_JM: 106,
  COUNTRY_ALPHA_2_CODE_JO: 107,
  COUNTRY_ALPHA_2_CODE_JP: 108,
  COUNTRY_ALPHA_2_CODE_KE: 109,
  COUNTRY_ALPHA_2_CODE_KG: 110,
  COUNTRY_ALPHA_2_CODE_KH: 111,
  COUNTRY_ALPHA_2_CODE_KI: 112,
  COUNTRY_ALPHA_2_CODE_KM: 113,
  COUNTRY_ALPHA_2_CODE_KN: 114,
  COUNTRY_ALPHA_2_CODE_KP: 115,
  COUNTRY_ALPHA_2_CODE_KR: 116,
  COUNTRY_ALPHA_2_CODE_KW: 117,
  COUNTRY_ALPHA_2_CODE_KY: 118,
  COUNTRY_ALPHA_2_CODE_KZ: 119,
  COUNTRY_ALPHA_2_CODE_LA: 120,
  COUNTRY_ALPHA_2_CODE_LB: 121,
  COUNTRY_ALPHA_2_CODE_LC: 122,
  COUNTRY_ALPHA_2_CODE_LI: 123,
  COUNTRY_ALPHA_2_CODE_LK: 124,
  COUNTRY_ALPHA_2_CODE_LR: 125,
  COUNTRY_ALPHA_2_CODE_LT: 126,
  COUNTRY_ALPHA_2_CODE_LU: 127,
  COUNTRY_ALPHA_2_CODE_LV: 128,
  COUNTRY_ALPHA_2_CODE_LY: 129,
  COUNTRY_ALPHA_2_CODE_MA: 130,
  COUNTRY_ALPHA_2_CODE_MC: 131,
  COUNTRY_ALPHA_2_CODE_MD: 132,
  COUNTRY_ALPHA_2_CODE_ME: 133,
  COUNTRY_ALPHA_2_CODE_MF: 134,
  COUNTRY_ALPHA_2_CODE_MG: 135,
  COUNTRY_ALPHA_2_CODE_MH: 136,
  COUNTRY_ALPHA_2_CODE_MK: 137,
  COUNTRY_ALPHA_2_CODE_ML: 138,
  COUNTRY_ALPHA_2_CODE_MM: 139,
  COUNTRY_ALPHA_2_CODE_MN: 140,
  COUNTRY_ALPHA_2_CODE_MO: 141,
  COUNTRY_ALPHA_2_CODE_MP: 142,
  COUNTRY_ALPHA_2_CODE_MQ: 143,
  COUNTRY_ALPHA_2_CODE_MR: 144,
  COUNTRY_ALPHA_2_CODE_MS: 145,
  COUNTRY_ALPHA_2_CODE_MT: 146,
  COUNTRY_ALPHA_2_CODE_MU: 147,
  COUNTRY_ALPHA_2_CODE_MV: 148,
  COUNTRY_ALPHA_2_CODE_MW: 149,
  COUNTRY_ALPHA_2_CODE_MX: 150,
  COUNTRY_ALPHA_2_CODE_MY: 151,
  COUNTRY_ALPHA_2_CODE_MZ: 152,
  COUNTRY_ALPHA_2_CODE_NC: 153,
  COUNTRY_ALPHA_2_CODE_NE: 154,
  COUNTRY_ALPHA_2_CODE_NF: 155,
  COUNTRY_ALPHA_2_CODE_NG: 156,
  COUNTRY_ALPHA_2_CODE_NI: 157,
  COUNTRY_ALPHA_2_CODE_NL: 158,
  COUNTRY_ALPHA_2_CODE_NO: 159,
  COUNTRY_ALPHA_2_CODE_NP: 160,
  COUNTRY_ALPHA_2_CODE_NR: 161,
  COUNTRY_ALPHA_2_CODE_NU: 162,
  COUNTRY_ALPHA_2_CODE_NZ: 163,
  COUNTRY_ALPHA_2_CODE_OM: 164,
  COUNTRY_ALPHA_2_CODE_PE: 165,
  COUNTRY_ALPHA_2_CODE_PF: 166,
  COUNTRY_ALPHA_2_CODE_PG: 167,
  COUNTRY_ALPHA_2_CODE_PH: 168,
  COUNTRY_ALPHA_2_CODE_PK: 169,
  COUNTRY_ALPHA_2_CODE_PL: 170,
  COUNTRY_ALPHA_2_CODE_PM: 171,
  COUNTRY_ALPHA_2_CODE_PN: 172,
  COUNTRY_ALPHA_2_CODE_PR: 173,
  COUNTRY_ALPHA_2_CODE_PT: 174,
  COUNTRY_ALPHA_2_CODE_PW: 175,
  COUNTRY_ALPHA_2_CODE_PY: 176,
  COUNTRY_ALPHA_2_CODE_QA: 177,
  COUNTRY_ALPHA_2_CODE_RE: 178,
  COUNTRY_ALPHA_2_CODE_RO: 179,
  COUNTRY_ALPHA_2_CODE_RS: 180,
  COUNTRY_ALPHA_2_CODE_RU: 181,
  COUNTRY_ALPHA_2_CODE_RW: 182,
  COUNTRY_ALPHA_2_CODE_SA: 183,
  COUNTRY_ALPHA_2_CODE_SB: 184,
  COUNTRY_ALPHA_2_CODE_SC: 185,
  COUNTRY_ALPHA_2_CODE_SD: 186,
  COUNTRY_ALPHA_2_CODE_SE: 187,
  COUNTRY_ALPHA_2_CODE_SG: 188,
  COUNTRY_ALPHA_2_CODE_SH: 189,
  COUNTRY_ALPHA_2_CODE_SI: 190,
  COUNTRY_ALPHA_2_CODE_SJ: 191,
  COUNTRY_ALPHA_2_CODE_SK: 192,
  COUNTRY_ALPHA_2_CODE_SL: 193,
  COUNTRY_ALPHA_2_CODE_SM: 194,
  COUNTRY_ALPHA_2_CODE_SN: 195,
  COUNTRY_ALPHA_2_CODE_SO: 196,
  COUNTRY_ALPHA_2_CODE_SR: 197,
  COUNTRY_ALPHA_2_CODE_SS: 198,
  COUNTRY_ALPHA_2_CODE_ST: 199,
  COUNTRY_ALPHA_2_CODE_SX: 200,
  COUNTRY_ALPHA_2_CODE_SY: 201,
  COUNTRY_ALPHA_2_CODE_SZ: 202,
  COUNTRY_ALPHA_2_CODE_TC: 203,
  COUNTRY_ALPHA_2_CODE_TD: 204,
  COUNTRY_ALPHA_2_CODE_TF: 205,
  COUNTRY_ALPHA_2_CODE_TG: 206,
  COUNTRY_ALPHA_2_CODE_TH: 207,
  COUNTRY_ALPHA_2_CODE_TJ: 208,
  COUNTRY_ALPHA_2_CODE_TK: 209,
  COUNTRY_ALPHA_2_CODE_TL: 210,
  COUNTRY_ALPHA_2_CODE_TM: 211,
  COUNTRY_ALPHA_2_CODE_TN: 212,
  COUNTRY_ALPHA_2_CODE_TO: 213,
  COUNTRY_ALPHA_2_CODE_TR: 214,
  COUNTRY_ALPHA_2_CODE_TT: 215,
  COUNTRY_ALPHA_2_CODE_TV: 216,
  COUNTRY_ALPHA_2_CODE_TZ: 217,
  COUNTRY_ALPHA_2_CODE_UA: 218,
  COUNTRY_ALPHA_2_CODE_UG: 219,
  COUNTRY_ALPHA_2_CODE_UM: 220,
  COUNTRY_ALPHA_2_CODE_US: 221,
  COUNTRY_ALPHA_2_CODE_UY: 222,
  COUNTRY_ALPHA_2_CODE_UZ: 223,
  COUNTRY_ALPHA_2_CODE_VA: 224,
  COUNTRY_ALPHA_2_CODE_VC: 225,
  COUNTRY_ALPHA_2_CODE_VE: 226,
  COUNTRY_ALPHA_2_CODE_VG: 227,
  COUNTRY_ALPHA_2_CODE_VI: 228,
  COUNTRY_ALPHA_2_CODE_VN: 229,
  COUNTRY_ALPHA_2_CODE_VU: 230,
  COUNTRY_ALPHA_2_CODE_WF: 231,
  COUNTRY_ALPHA_2_CODE_WS: 232,
  COUNTRY_ALPHA_2_CODE_YE: 233,
  COUNTRY_ALPHA_2_CODE_YT: 234,
  COUNTRY_ALPHA_2_CODE_ZA: 235,
  COUNTRY_ALPHA_2_CODE_ZM: 236,
  COUNTRY_ALPHA_2_CODE_ZW: 237
};

/**
 * @enum {number}
 */
proto.geo.CountryAlpha3Code = {
  COUNTRY_ALPHA_3_CODE_NONE: 0,
  COUNTRY_ALPHA_3_CODE_ABW: 1,
  COUNTRY_ALPHA_3_CODE_AFG: 2,
  COUNTRY_ALPHA_3_CODE_AGO: 3,
  COUNTRY_ALPHA_3_CODE_AIA: 4,
  COUNTRY_ALPHA_3_CODE_ALA: 5,
  COUNTRY_ALPHA_3_CODE_ALB: 6,
  COUNTRY_ALPHA_3_CODE_AND: 7,
  COUNTRY_ALPHA_3_CODE_ARE: 8,
  COUNTRY_ALPHA_3_CODE_ARG: 9,
  COUNTRY_ALPHA_3_CODE_ARM: 10,
  COUNTRY_ALPHA_3_CODE_ASM: 11,
  COUNTRY_ALPHA_3_CODE_ATF: 12,
  COUNTRY_ALPHA_3_CODE_ATG: 13,
  COUNTRY_ALPHA_3_CODE_AUS: 14,
  COUNTRY_ALPHA_3_CODE_AUT: 15,
  COUNTRY_ALPHA_3_CODE_AZE: 16,
  COUNTRY_ALPHA_3_CODE_BDI: 17,
  COUNTRY_ALPHA_3_CODE_BEL: 18,
  COUNTRY_ALPHA_3_CODE_BEN: 19,
  COUNTRY_ALPHA_3_CODE_BES: 20,
  COUNTRY_ALPHA_3_CODE_BFA: 21,
  COUNTRY_ALPHA_3_CODE_BGD: 22,
  COUNTRY_ALPHA_3_CODE_BGR: 23,
  COUNTRY_ALPHA_3_CODE_BHR: 24,
  COUNTRY_ALPHA_3_CODE_BHS: 25,
  COUNTRY_ALPHA_3_CODE_BIH: 26,
  COUNTRY_ALPHA_3_CODE_BLM: 27,
  COUNTRY_ALPHA_3_CODE_BLR: 28,
  COUNTRY_ALPHA_3_CODE_BLZ: 29,
  COUNTRY_ALPHA_3_CODE_BMU: 30,
  COUNTRY_ALPHA_3_CODE_BOL: 31,
  COUNTRY_ALPHA_3_CODE_BRA: 32,
  COUNTRY_ALPHA_3_CODE_BRB: 33,
  COUNTRY_ALPHA_3_CODE_BRN: 34,
  COUNTRY_ALPHA_3_CODE_BVT: 35,
  COUNTRY_ALPHA_3_CODE_BWA: 36,
  COUNTRY_ALPHA_3_CODE_CAF: 37,
  COUNTRY_ALPHA_3_CODE_CAN: 38,
  COUNTRY_ALPHA_3_CODE_CCK: 39,
  COUNTRY_ALPHA_3_CODE_CHE: 40,
  COUNTRY_ALPHA_3_CODE_CHL: 41,
  COUNTRY_ALPHA_3_CODE_CHN: 42,
  COUNTRY_ALPHA_3_CODE_CIV: 43,
  COUNTRY_ALPHA_3_CODE_CMR: 44,
  COUNTRY_ALPHA_3_CODE_COD: 45,
  COUNTRY_ALPHA_3_CODE_COG: 46,
  COUNTRY_ALPHA_3_CODE_COK: 47,
  COUNTRY_ALPHA_3_CODE_COL: 48,
  COUNTRY_ALPHA_3_CODE_COM: 49,
  COUNTRY_ALPHA_3_CODE_CPV: 50,
  COUNTRY_ALPHA_3_CODE_CRI: 51,
  COUNTRY_ALPHA_3_CODE_CUW: 52,
  COUNTRY_ALPHA_3_CODE_CXR: 53,
  COUNTRY_ALPHA_3_CODE_CYM: 54,
  COUNTRY_ALPHA_3_CODE_CYP: 55,
  COUNTRY_ALPHA_3_CODE_CZE: 56,
  COUNTRY_ALPHA_3_CODE_DEU: 57,
  COUNTRY_ALPHA_3_CODE_DJI: 58,
  COUNTRY_ALPHA_3_CODE_DMA: 59,
  COUNTRY_ALPHA_3_CODE_DNK: 60,
  COUNTRY_ALPHA_3_CODE_DOM: 61,
  COUNTRY_ALPHA_3_CODE_DZA: 62,
  COUNTRY_ALPHA_3_CODE_ECU: 63,
  COUNTRY_ALPHA_3_CODE_EGY: 64,
  COUNTRY_ALPHA_3_CODE_ERI: 65,
  COUNTRY_ALPHA_3_CODE_ESH: 66,
  COUNTRY_ALPHA_3_CODE_ESP: 67,
  COUNTRY_ALPHA_3_CODE_EST: 68,
  COUNTRY_ALPHA_3_CODE_ETH: 69,
  COUNTRY_ALPHA_3_CODE_FIN: 70,
  COUNTRY_ALPHA_3_CODE_FJI: 71,
  COUNTRY_ALPHA_3_CODE_FRA: 72,
  COUNTRY_ALPHA_3_CODE_FRO: 73,
  COUNTRY_ALPHA_3_CODE_FSM: 74,
  COUNTRY_ALPHA_3_CODE_GAB: 75,
  COUNTRY_ALPHA_3_CODE_GBR: 76,
  COUNTRY_ALPHA_3_CODE_GEO: 77,
  COUNTRY_ALPHA_3_CODE_GGY: 78,
  COUNTRY_ALPHA_3_CODE_GHA: 79,
  COUNTRY_ALPHA_3_CODE_GIB: 80,
  COUNTRY_ALPHA_3_CODE_GIN: 81,
  COUNTRY_ALPHA_3_CODE_GLP: 82,
  COUNTRY_ALPHA_3_CODE_GMB: 83,
  COUNTRY_ALPHA_3_CODE_GNB: 84,
  COUNTRY_ALPHA_3_CODE_GNQ: 85,
  COUNTRY_ALPHA_3_CODE_GRC: 86,
  COUNTRY_ALPHA_3_CODE_GRD: 87,
  COUNTRY_ALPHA_3_CODE_GRL: 88,
  COUNTRY_ALPHA_3_CODE_GTM: 89,
  COUNTRY_ALPHA_3_CODE_GUF: 90,
  COUNTRY_ALPHA_3_CODE_GUM: 91,
  COUNTRY_ALPHA_3_CODE_GUY: 92,
  COUNTRY_ALPHA_3_CODE_HKG: 93,
  COUNTRY_ALPHA_3_CODE_HMD: 94,
  COUNTRY_ALPHA_3_CODE_HND: 95,
  COUNTRY_ALPHA_3_CODE_HRV: 96,
  COUNTRY_ALPHA_3_CODE_HUN: 97,
  COUNTRY_ALPHA_3_CODE_IDN: 98,
  COUNTRY_ALPHA_3_CODE_IMN: 99,
  COUNTRY_ALPHA_3_CODE_IND: 100,
  COUNTRY_ALPHA_3_CODE_IOT: 101,
  COUNTRY_ALPHA_3_CODE_IRL: 102,
  COUNTRY_ALPHA_3_CODE_IRN: 103,
  COUNTRY_ALPHA_3_CODE_IRQ: 104,
  COUNTRY_ALPHA_3_CODE_ISL: 105,
  COUNTRY_ALPHA_3_CODE_ISR: 106,
  COUNTRY_ALPHA_3_CODE_ITA: 107,
  COUNTRY_ALPHA_3_CODE_JAM: 108,
  COUNTRY_ALPHA_3_CODE_JEY: 109,
  COUNTRY_ALPHA_3_CODE_JOR: 110,
  COUNTRY_ALPHA_3_CODE_JPN: 111,
  COUNTRY_ALPHA_3_CODE_KAZ: 112,
  COUNTRY_ALPHA_3_CODE_KEN: 113,
  COUNTRY_ALPHA_3_CODE_KGZ: 114,
  COUNTRY_ALPHA_3_CODE_KHM: 115,
  COUNTRY_ALPHA_3_CODE_KIR: 116,
  COUNTRY_ALPHA_3_CODE_KNA: 117,
  COUNTRY_ALPHA_3_CODE_KOR: 118,
  COUNTRY_ALPHA_3_CODE_KWT: 119,
  COUNTRY_ALPHA_3_CODE_LAO: 120,
  COUNTRY_ALPHA_3_CODE_LBN: 121,
  COUNTRY_ALPHA_3_CODE_LBR: 122,
  COUNTRY_ALPHA_3_CODE_LBY: 123,
  COUNTRY_ALPHA_3_CODE_LCA: 124,
  COUNTRY_ALPHA_3_CODE_LIE: 125,
  COUNTRY_ALPHA_3_CODE_LKA: 126,
  COUNTRY_ALPHA_3_CODE_LTU: 127,
  COUNTRY_ALPHA_3_CODE_LUX: 128,
  COUNTRY_ALPHA_3_CODE_LVA: 129,
  COUNTRY_ALPHA_3_CODE_MAC: 130,
  COUNTRY_ALPHA_3_CODE_MAF: 131,
  COUNTRY_ALPHA_3_CODE_MAR: 132,
  COUNTRY_ALPHA_3_CODE_MCO: 133,
  COUNTRY_ALPHA_3_CODE_MDA: 134,
  COUNTRY_ALPHA_3_CODE_MDG: 135,
  COUNTRY_ALPHA_3_CODE_MDV: 136,
  COUNTRY_ALPHA_3_CODE_MEX: 137,
  COUNTRY_ALPHA_3_CODE_MHL: 138,
  COUNTRY_ALPHA_3_CODE_MKD: 139,
  COUNTRY_ALPHA_3_CODE_MLI: 140,
  COUNTRY_ALPHA_3_CODE_MLT: 141,
  COUNTRY_ALPHA_3_CODE_MMR: 142,
  COUNTRY_ALPHA_3_CODE_MNE: 143,
  COUNTRY_ALPHA_3_CODE_MNG: 144,
  COUNTRY_ALPHA_3_CODE_MNP: 145,
  COUNTRY_ALPHA_3_CODE_MOZ: 146,
  COUNTRY_ALPHA_3_CODE_MRT: 147,
  COUNTRY_ALPHA_3_CODE_MSR: 148,
  COUNTRY_ALPHA_3_CODE_MTQ: 149,
  COUNTRY_ALPHA_3_CODE_MUS: 150,
  COUNTRY_ALPHA_3_CODE_MWI: 151,
  COUNTRY_ALPHA_3_CODE_MYS: 152,
  COUNTRY_ALPHA_3_CODE_MYT: 153,
  COUNTRY_ALPHA_3_CODE_NCL: 154,
  COUNTRY_ALPHA_3_CODE_NER: 155,
  COUNTRY_ALPHA_3_CODE_NFK: 156,
  COUNTRY_ALPHA_3_CODE_NGA: 157,
  COUNTRY_ALPHA_3_CODE_NIC: 158,
  COUNTRY_ALPHA_3_CODE_NIU: 159,
  COUNTRY_ALPHA_3_CODE_NLD: 160,
  COUNTRY_ALPHA_3_CODE_NOR: 161,
  COUNTRY_ALPHA_3_CODE_NPL: 162,
  COUNTRY_ALPHA_3_CODE_NRU: 163,
  COUNTRY_ALPHA_3_CODE_NZL: 164,
  COUNTRY_ALPHA_3_CODE_OMN: 165,
  COUNTRY_ALPHA_3_CODE_PAK: 166,
  COUNTRY_ALPHA_3_CODE_PCN: 167,
  COUNTRY_ALPHA_3_CODE_PER: 168,
  COUNTRY_ALPHA_3_CODE_PHL: 169,
  COUNTRY_ALPHA_3_CODE_PLW: 170,
  COUNTRY_ALPHA_3_CODE_PNG: 171,
  COUNTRY_ALPHA_3_CODE_POL: 172,
  COUNTRY_ALPHA_3_CODE_PRI: 173,
  COUNTRY_ALPHA_3_CODE_PRK: 174,
  COUNTRY_ALPHA_3_CODE_PRT: 175,
  COUNTRY_ALPHA_3_CODE_PRY: 176,
  COUNTRY_ALPHA_3_CODE_PYF: 177,
  COUNTRY_ALPHA_3_CODE_QAT: 178,
  COUNTRY_ALPHA_3_CODE_REU: 179,
  COUNTRY_ALPHA_3_CODE_ROU: 180,
  COUNTRY_ALPHA_3_CODE_RUS: 181,
  COUNTRY_ALPHA_3_CODE_RWA: 182,
  COUNTRY_ALPHA_3_CODE_SAU: 183,
  COUNTRY_ALPHA_3_CODE_SDN: 184,
  COUNTRY_ALPHA_3_CODE_SEN: 185,
  COUNTRY_ALPHA_3_CODE_SGP: 186,
  COUNTRY_ALPHA_3_CODE_SHN: 187,
  COUNTRY_ALPHA_3_CODE_SJM: 188,
  COUNTRY_ALPHA_3_CODE_SLB: 189,
  COUNTRY_ALPHA_3_CODE_SLE: 190,
  COUNTRY_ALPHA_3_CODE_SMR: 191,
  COUNTRY_ALPHA_3_CODE_SOM: 192,
  COUNTRY_ALPHA_3_CODE_SPM: 193,
  COUNTRY_ALPHA_3_CODE_SRB: 194,
  COUNTRY_ALPHA_3_CODE_SSD: 195,
  COUNTRY_ALPHA_3_CODE_STP: 196,
  COUNTRY_ALPHA_3_CODE_SUR: 197,
  COUNTRY_ALPHA_3_CODE_SVK: 198,
  COUNTRY_ALPHA_3_CODE_SVN: 199,
  COUNTRY_ALPHA_3_CODE_SWE: 200,
  COUNTRY_ALPHA_3_CODE_SWZ: 201,
  COUNTRY_ALPHA_3_CODE_SXM: 202,
  COUNTRY_ALPHA_3_CODE_SYC: 203,
  COUNTRY_ALPHA_3_CODE_SYR: 204,
  COUNTRY_ALPHA_3_CODE_TCA: 205,
  COUNTRY_ALPHA_3_CODE_TCD: 206,
  COUNTRY_ALPHA_3_CODE_TGO: 207,
  COUNTRY_ALPHA_3_CODE_THA: 208,
  COUNTRY_ALPHA_3_CODE_TJK: 209,
  COUNTRY_ALPHA_3_CODE_TKL: 210,
  COUNTRY_ALPHA_3_CODE_TKM: 211,
  COUNTRY_ALPHA_3_CODE_TLS: 212,
  COUNTRY_ALPHA_3_CODE_TON: 213,
  COUNTRY_ALPHA_3_CODE_TTO: 214,
  COUNTRY_ALPHA_3_CODE_TUN: 215,
  COUNTRY_ALPHA_3_CODE_TUR: 216,
  COUNTRY_ALPHA_3_CODE_TUV: 217,
  COUNTRY_ALPHA_3_CODE_TZA: 218,
  COUNTRY_ALPHA_3_CODE_UGA: 219,
  COUNTRY_ALPHA_3_CODE_UKR: 220,
  COUNTRY_ALPHA_3_CODE_UMI: 221,
  COUNTRY_ALPHA_3_CODE_URY: 222,
  COUNTRY_ALPHA_3_CODE_USA: 223,
  COUNTRY_ALPHA_3_CODE_UZB: 224,
  COUNTRY_ALPHA_3_CODE_VAT: 225,
  COUNTRY_ALPHA_3_CODE_VCT: 226,
  COUNTRY_ALPHA_3_CODE_VEN: 227,
  COUNTRY_ALPHA_3_CODE_VGB: 228,
  COUNTRY_ALPHA_3_CODE_VIR: 229,
  COUNTRY_ALPHA_3_CODE_VNM: 230,
  COUNTRY_ALPHA_3_CODE_VUT: 231,
  COUNTRY_ALPHA_3_CODE_WLF: 232,
  COUNTRY_ALPHA_3_CODE_WSM: 233,
  COUNTRY_ALPHA_3_CODE_YEM: 234,
  COUNTRY_ALPHA_3_CODE_ZAF: 235,
  COUNTRY_ALPHA_3_CODE_ZMB: 236,
  COUNTRY_ALPHA_3_CODE_ZWE: 237
};

/**
 * @enum {number}
 */
proto.geo.StreetDirection = {
  STREET_DIRECTION_NONE: 0,
  STREET_DIRECTION_N: 1,
  STREET_DIRECTION_S: 2,
  STREET_DIRECTION_E: 3,
  STREET_DIRECTION_W: 4,
  STREET_DIRECTION_NE: 5,
  STREET_DIRECTION_SE: 6,
  STREET_DIRECTION_NW: 7,
  STREET_DIRECTION_SW: 8
};

goog.object.extend(exports, proto.geo);
