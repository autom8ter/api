syntax="proto3";

package api;

import "google/api/annotations.proto";
import "common/common.proto";

service DebugService {
    rpc Echo(common.String) returns (common.String) {
        option (google.api.http) = {
      post: "/debug"
      body: "*"
    };
    }
}

service SubscriptionService {
    rpc Subscribe(SubscribeRequest) returns (User) {
        option (google.api.http) = {
      post: "/subscribe"
      body: "*"
    };
    }
    rpc Unsubscribe(UnSubscribeRequest) returns (User) {
        option (google.api.http) = {
      post: "/unsubscribe"
      body: "*"
    };
    }
}

service AuthenticationService {
    rpc GetUser(common.AuthToken) returns (User) {
        option (google.api.http) = {
      post: "/authentication"
      body: "*"
    };
    }

}

service UserService {
    rpc QueryUsers(Query) returns (stream User) {
        option (google.api.http) = {
      post: "/management/user/query"
      body: "*"
    };
    }

    rpc GetUser(common.Identifier) returns (User) {
        option (google.api.http) = {
      post: "/management/user/get"
      body: "*"
    };
    }

    rpc UpdateUser(User) returns (User) {
        option (google.api.http) = {
      post: "/management/user/update"
      body: "*"
    };
    }
    rpc UserRoles(common.Identifier) returns (stream Role) {
        option (google.api.http) = {
      post: "/management/user/roles"
      body: "*"
    };
    }
    rpc AddUserRoles(AddUserRolesRequest) returns (common.String) {
        option (google.api.http) = {
      post: "/management/user/roles"
      body: "*"
    };
    }
}

service EventService {
    rpc GetEvents(EventQuery) returns (stream Event) {
        option (google.api.http) = {
      post: "/events"
      body: "*"
    };
    }
}

service DocumentService {
    rpc GetDocument(DocumentQuery) returns (Document) {
        option (google.api.http) = {
      post: "/documents"
      body: "*"
    };
    }
    rpc Update(Document) returns (common.Empty) {
        option (google.api.http) = {
      post: "/documents/update"
      body: "*"
    };
    }
    rpc Create(Document) returns (common.Empty) {
        option (google.api.http) = {
      post: "/documents/create"
      body: "*"
    };
    }

    rpc Delete(DocumentQuery) returns (common.Empty) {
        option (google.api.http) = {
      post: "/documents/create"
      body: "*"
    };
    }
    rpc ListDocuments(CategoryQuery) returns (stream Document) {
        option (google.api.http) = {
      post: "/documents/list"
      body: "*"
    };
    }
}

message CategoryQuery {
    common.String category =1;
}

message DocumentQuery {
    common.String category =1;
    common.Identifier name=2;
}

message AddUserRolesRequest {
    common.Identifier email =1;
    repeated Role roles=2;
}

message SubscribeRequest {
    common.Identifier email=1;
    common.Identifier plan =2;
    Card card =3;
}

message UnSubscribeRequest {
    common.Identifier email=1;
    common.String plan =2;
}

message Card {
    common.Identifier number=1;
    common.String exp_month=2;
    common.String exp_year =3;
    common.String cvc=4;
}

message User {
    common.Identifier user_id=1;
    common.String name=2;
    common.String given_name=3;
    common.String family_name=4;
    common.String gender =5;
    common.String birthdate=6;
    common.Identifier email=7;
    common.Identifier phone_number=8;
    common.String picture=9;
    common.String nickname =14;
    common.StringMap user_metadata=10;
    common.StringMap app_metadata=11;
    common.String last_ip =12;
    common.Bool blocked =13;
    common.StringArray multifactor=15;
    common.String created_at=17;
    common.String updated_at=18;
    common.Bool phone_verified=19;
    common.Bool email_verified=20;
    common.String password=21;
    repeated Identity identities =22;
}

message UserMetadata {
    common.String status=1;
    common.StringMap bio=2;
    Address address=3;
    common.StringMap tags=4;
}

message Address {
    common.String city =1;
    common.String state=2;
    common.String line1 =3;
    common.String line2=4;
    common.String zip =5;
}

message AppMetadata {
    common.String description =1;
    common.String account_balance=2;
    Plan plan=3;
    common.StringMap tags=4;
}

message Plan {
    common.Identifier id =1;
    common.Bool active =2;
    common.Int64 amount =3;
    common.String interval=4;
    common.String nickname =5;
    Product product=6;
}

message Product {
    common.Identifier id =1;
    common.String description =2;
    common.String url =3;
}

message Identity{
    common.String connection =1;
    common.Identifier user_id=2;
    common.String provider=3;
    common.Bool isSocial=4;
}

message Role {
    common.Identifier id=1;
    common.String name=2;
    common.String description=3;
}

message OAuth2 {
    common.String client_id=1;
    common.String client_secret=2;
    common.String token_url =3;
    common.String auth_url =4;
    common.StringArray scopes =5;
    common.String redirect =6;
    common.String code =7;
}

message ClientCredentials {
    common.String client_id=1;
    common.String client_secret=2;
    common.String token_url =3;
    common.StringArray scopes =4;
    common.StringMap endpoint_params=5;
}

message JWT {
    common.String email=1;
    bytes private_key=2;
    common.String prive_key_id =3;
    common.String subject =4;
    common.StringArray scopes=5;
    common.String token_url =6;
    common.String expires =7;
    common.String audience =8;
}

message DefaultGCPCredentials {
    common.StringArray scopes =1;
 }

 message Query {
    common.String query=4;
    common.String fields=5;
}

message Event {
    common.String date=1;
    common.String type=2;
    common.String client_id=3;
    common.String client_name=4;
    common.String ip=5;
    common.String location_info=6;
    common.String details=7;
    common.String user_id=8;
    common.StringMap annotations=9;
}

message EventQuery {
    common.String date=1;
    common.String type=2;
    common.String client_id=3;
    common.String user_id=4;
}

message JSONWebKeys {
    common.String kty =1;
    common.Identifier kid =2;
    common.String use =3;
    common.String n =4;
    common.String e =5;
    common.StringArray x5c =6;
}

message Jwks {
    repeated JSONWebKeys keys=1;
}

message Document {
    common.String category=1;
    common.String name=2;
    common.StringMap data=3;
}