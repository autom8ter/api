// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Api.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ApiRoot

@implementation ApiRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ApiRoot_FileDescriptor

static GPBFileDescriptor *ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Scope

GPBEnumDescriptor *Scope_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Openid\000Profile\000Email\000ReadUsers\000ReadUserI"
        "dpTokens\000CreateUsers\000ReadStats\000ReadEmail"
        "Templates\000UpdateEmailTemplates\000CreateEma"
        "ilTemplates\000ReadRules\000UpdateRules\000Create"
        "Rules\000DeleteRules\000ReadRoles\000UpdateRoles\000"
        "CreateRoles\000DeleteRoles\000ReadLogs\000";
    static const int32_t values[] = {
        Scope_Openid,
        Scope_Profile,
        Scope_Email,
        Scope_ReadUsers,
        Scope_ReadUserIdpTokens,
        Scope_CreateUsers,
        Scope_ReadStats,
        Scope_ReadEmailTemplates,
        Scope_UpdateEmailTemplates,
        Scope_CreateEmailTemplates,
        Scope_ReadRules,
        Scope_UpdateRules,
        Scope_CreateRules,
        Scope_DeleteRules,
        Scope_ReadRoles,
        Scope_UpdateRoles,
        Scope_CreateRoles,
        Scope_DeleteRoles,
        Scope_ReadLogs,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Scope)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Scope_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Scope_IsValidValue(int32_t value__) {
  switch (value__) {
    case Scope_Openid:
    case Scope_Profile:
    case Scope_Email:
    case Scope_ReadUsers:
    case Scope_ReadUserIdpTokens:
    case Scope_CreateUsers:
    case Scope_ReadStats:
    case Scope_ReadEmailTemplates:
    case Scope_UpdateEmailTemplates:
    case Scope_CreateEmailTemplates:
    case Scope_ReadRules:
    case Scope_UpdateRules:
    case Scope_CreateRules:
    case Scope_DeleteRules:
    case Scope_ReadRoles:
    case Scope_UpdateRoles:
    case Scope_CreateRoles:
    case Scope_DeleteRoles:
    case Scope_ReadLogs:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SubscribeRequest

@implementation SubscribeRequest

@dynamic email;
@dynamic plan;
@dynamic hasCard, card;

typedef struct SubscribeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
  NSString *plan;
  Card *card;
} SubscribeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SubscribeRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = SubscribeRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SubscribeRequest__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "card",
        .dataTypeSpecific.className = GPBStringifySymbol(Card),
        .number = SubscribeRequest_FieldNumber_Card,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SubscribeRequest__storage_, card),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SubscribeRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SubscribeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnSubscribeRequest

@implementation UnSubscribeRequest

@dynamic email;
@dynamic plan;

typedef struct UnSubscribeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
  NSString *plan;
} UnSubscribeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = UnSubscribeRequest_FieldNumber_Email,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnSubscribeRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = UnSubscribeRequest_FieldNumber_Plan,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnSubscribeRequest__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnSubscribeRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnSubscribeRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Card

@implementation Card

@dynamic number;
@dynamic expMonth;
@dynamic expYear;
@dynamic cvc;

typedef struct Card__storage_ {
  uint32_t _has_storage_[1];
  NSString *number;
  NSString *expMonth;
  NSString *expYear;
  NSString *cvc;
} Card__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "number",
        .dataTypeSpecific.className = NULL,
        .number = Card_FieldNumber_Number,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Card__storage_, number),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expMonth",
        .dataTypeSpecific.className = NULL,
        .number = Card_FieldNumber_ExpMonth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Card__storage_, expMonth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expYear",
        .dataTypeSpecific.className = NULL,
        .number = Card_FieldNumber_ExpYear,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Card__storage_, expYear),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cvc",
        .dataTypeSpecific.className = NULL,
        .number = Card_FieldNumber_Cvc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Card__storage_, cvc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Card class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Card__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Secret

@implementation Secret

@dynamic text;

typedef struct Secret__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
} Secret__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = Secret_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Secret__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Secret class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Secret__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Empty

@implementation Empty


typedef struct Empty__storage_ {
  uint32_t _has_storage_[1];
} Empty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Empty class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Empty__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Identifier

@implementation Identifier

@dynamic id_p;

typedef struct Identifier__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
} Identifier__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Identifier_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Identifier__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Identifier class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Identifier__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMSStatus

@implementation SMSStatus

@dynamic hasId_p, id_p;
@dynamic hasSms, sms;
@dynamic status;
@dynamic uri;

typedef struct SMSStatus__storage_ {
  uint32_t _has_storage_[1];
  Identifier *id_p;
  SMS *sms;
  NSString *status;
  NSString *uri;
} SMSStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Identifier),
        .number = SMSStatus_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMSStatus__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sms",
        .dataTypeSpecific.className = GPBStringifySymbol(SMS),
        .number = SMSStatus_FieldNumber_Sms,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SMSStatus__storage_, sms),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = SMSStatus_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SMSStatus__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uri",
        .dataTypeSpecific.className = NULL,
        .number = SMSStatus_FieldNumber_Uri,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SMSStatus__storage_, uri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMSStatus class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMSStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMS

@implementation SMS

@dynamic service;
@dynamic to;
@dynamic hasMessage, message;
@dynamic mediaURL;
@dynamic callback;
@dynamic app;

typedef struct SMS__storage_ {
  uint32_t _has_storage_[1];
  NSString *service;
  NSString *to;
  Message *message;
  NSString *mediaURL;
  NSString *callback;
  NSString *app;
} SMS__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "service",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_Service,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMS__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SMS__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = SMS_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SMS__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_MediaURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SMS__storage_, mediaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callback",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_Callback,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SMS__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "app",
        .dataTypeSpecific.className = NULL,
        .number = SMS_FieldNumber_App,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SMS__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMS class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMS__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SMSBlast

@implementation SMSBlast

@dynamic service;
@dynamic to;
@dynamic hasMessage, message;
@dynamic mediaURL;
@dynamic callback;
@dynamic app;

typedef struct SMSBlast__storage_ {
  uint32_t _has_storage_[1];
  NSString *service;
  NSString *to;
  Message *message;
  NSString *mediaURL;
  NSString *callback;
  NSString *app;
} SMSBlast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "service",
        .dataTypeSpecific.className = NULL,
        .number = SMSBlast_FieldNumber_Service,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, service),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = SMSBlast_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = SMSBlast_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mediaURL",
        .dataTypeSpecific.className = NULL,
        .number = SMSBlast_FieldNumber_MediaURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, mediaURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callback",
        .dataTypeSpecific.className = NULL,
        .number = SMSBlast_FieldNumber_Callback,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "app",
        .dataTypeSpecific.className = NULL,
        .number = SMSBlast_FieldNumber_App,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SMSBlast__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SMSBlast class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SMSBlast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailRequest

@implementation EmailRequest

@dynamic fromName;
@dynamic fromEmail;
@dynamic hasEmail, email;

typedef struct EmailRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *fromName;
  NSString *fromEmail;
  Email *email;
} EmailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromName",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_FromName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, fromName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromEmail",
        .dataTypeSpecific.className = NULL,
        .number = EmailRequest_FieldNumber_FromEmail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, fromEmail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = GPBStringifySymbol(Email),
        .number = EmailRequest_FieldNumber_Email,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmailRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailBlastRequest

@implementation EmailBlastRequest

@dynamic fromName;
@dynamic fromEmail;
@dynamic hasBlast, blast;

typedef struct EmailBlastRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *fromName;
  NSString *fromEmail;
  EmailBlast *blast;
} EmailBlastRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fromName",
        .dataTypeSpecific.className = NULL,
        .number = EmailBlastRequest_FieldNumber_FromName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailBlastRequest__storage_, fromName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fromEmail",
        .dataTypeSpecific.className = NULL,
        .number = EmailBlastRequest_FieldNumber_FromEmail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailBlastRequest__storage_, fromEmail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blast",
        .dataTypeSpecific.className = GPBStringifySymbol(EmailBlast),
        .number = EmailBlastRequest_FieldNumber_Blast,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmailBlastRequest__storage_, blast),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailBlastRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailBlastRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmailBlast

@implementation EmailBlast

@dynamic nameAddress, nameAddress_Count;
@dynamic subject;
@dynamic plain;
@dynamic html;

typedef struct EmailBlast__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *nameAddress;
  NSString *subject;
  NSString *plain;
  NSString *html;
} EmailBlast__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nameAddress",
        .dataTypeSpecific.className = NULL,
        .number = EmailBlast_FieldNumber_NameAddress,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EmailBlast__storage_, nameAddress),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = EmailBlast_FieldNumber_Subject,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmailBlast__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plain",
        .dataTypeSpecific.className = NULL,
        .number = EmailBlast_FieldNumber_Plain,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmailBlast__storage_, plain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "html",
        .dataTypeSpecific.className = NULL,
        .number = EmailBlast_FieldNumber_Html,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmailBlast__storage_, html),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmailBlast class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmailBlast__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Email

@implementation Email

@dynamic name;
@dynamic address;
@dynamic subject;
@dynamic plain;
@dynamic html;

typedef struct Email__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *address;
  NSString *subject;
  NSString *plain;
  NSString *html;
} Email__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Email_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Email__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = Email_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Email__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = Email_FieldNumber_Subject,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Email__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "plain",
        .dataTypeSpecific.className = NULL,
        .number = Email_FieldNumber_Plain,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Email__storage_, plain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "html",
        .dataTypeSpecific.className = NULL,
        .number = Email_FieldNumber_Html,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Email__storage_, html),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Email class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Email__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Call

@implementation Call

@dynamic from;
@dynamic to;
@dynamic app;

typedef struct Call__storage_ {
  uint32_t _has_storage_[1];
  NSString *from;
  NSString *to;
  NSString *app;
} Call__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = Call_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Call__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = Call_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Call__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "app",
        .dataTypeSpecific.className = NULL,
        .number = Call_FieldNumber_App,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Call__storage_, app),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Call class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Call__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message

@implementation Message

@dynamic value;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - User

@implementation User

@dynamic userId;
@dynamic name;
@dynamic givenName;
@dynamic familyName;
@dynamic gender;
@dynamic birthdate;
@dynamic email;
@dynamic phoneNumber;
@dynamic picture;
@dynamic hasUserMetadata, userMetadata;
@dynamic hasAppMetadata, appMetadata;
@dynamic lastIp;
@dynamic blocked;
@dynamic nickname;
@dynamic multifactorArray, multifactorArray_Count;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic phoneVerified;
@dynamic identitiesArray, identitiesArray_Count;

typedef struct User__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *name;
  NSString *givenName;
  NSString *familyName;
  NSString *gender;
  NSString *birthdate;
  NSString *email;
  NSString *phoneNumber;
  NSString *picture;
  UserMetadata *userMetadata;
  AppMetadata *appMetadata;
  NSString *lastIp;
  NSString *nickname;
  NSMutableArray *multifactorArray;
  NSString *createdAt;
  NSString *updatedAt;
  NSMutableArray *identitiesArray;
} User__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(User__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(User__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "givenName",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_GivenName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(User__storage_, givenName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "familyName",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_FamilyName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(User__storage_, familyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(User__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthdate",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Birthdate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(User__storage_, birthdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Email,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(User__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneNumber",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_PhoneNumber,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(User__storage_, phoneNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Picture,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(User__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(UserMetadata),
        .number = User_FieldNumber_UserMetadata,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(User__storage_, userMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(AppMetadata),
        .number = User_FieldNumber_AppMetadata,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(User__storage_, appMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastIp",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_LastIp,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(User__storage_, lastIp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blocked",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Blocked,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nickname",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_Nickname,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(User__storage_, nickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "multifactorArray",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_MultifactorArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, multifactorArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_CreatedAt,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(User__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_UpdatedAt,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(User__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phoneVerified",
        .dataTypeSpecific.className = NULL,
        .number = User_FieldNumber_PhoneVerified,
        .hasIndex = 17,
        .offset = 18,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "identitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Identity),
        .number = User_FieldNumber_IdentitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(User__storage_, identitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[User class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(User__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Identity

@implementation Identity

@dynamic connection;
@dynamic userId;
@dynamic provider;
@dynamic isSocial;

typedef struct Identity__storage_ {
  uint32_t _has_storage_[1];
  NSString *connection;
  NSString *userId;
  NSString *provider;
  NSString *isSocial;
} Identity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connection",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Connection,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Identity__storage_, connection),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Identity__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "provider",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_Provider,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Identity__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isSocial",
        .dataTypeSpecific.className = NULL,
        .number = Identity_FieldNumber_IsSocial,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Identity__storage_, isSocial),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Identity class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Identity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserMetadata

@implementation UserMetadata

@dynamic metadata, metadata_Count;

typedef struct UserMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *metadata;
} UserMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserMetadata class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppMetadata

@implementation AppMetadata

@dynamic metadata, metadata_Count;

typedef struct AppMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *metadata;
} AppMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = AppMetadata_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppMetadata class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Auth

@implementation Auth

@dynamic domain;
@dynamic clientId;
@dynamic clientSecret;
@dynamic redirect;
@dynamic audience;
@dynamic scopesArray, scopesArray_Count;

typedef struct Auth__storage_ {
  uint32_t _has_storage_[1];
  NSString *domain;
  NSString *clientId;
  NSString *clientSecret;
  NSString *redirect;
  NSString *audience;
  GPBEnumArray *scopesArray;
} Auth__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "domain",
        .dataTypeSpecific.className = NULL,
        .number = Auth_FieldNumber_Domain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Auth__storage_, domain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = Auth_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Auth__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientSecret",
        .dataTypeSpecific.className = NULL,
        .number = Auth_FieldNumber_ClientSecret,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Auth__storage_, clientSecret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "redirect",
        .dataTypeSpecific.className = NULL,
        .number = Auth_FieldNumber_Redirect,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Auth__storage_, redirect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audience",
        .dataTypeSpecific.className = NULL,
        .number = Auth_FieldNumber_Audience,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Auth__storage_, audience),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scopesArray",
        .dataTypeSpecific.enumDescFunc = Scope_EnumDescriptor,
        .number = Auth_FieldNumber_ScopesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Auth__storage_, scopesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Auth class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Auth__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Bytes

@implementation Bytes

@dynamic bits;

typedef struct Bytes__storage_ {
  uint32_t _has_storage_[1];
  NSData *bits;
} Bytes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bits",
        .dataTypeSpecific.className = NULL,
        .number = Bytes_FieldNumber_Bits,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Bytes__storage_, bits),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Bytes class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Bytes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Template

@implementation Template

@dynamic text;
@dynamic data_p;

typedef struct Template__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
  NSData *data_p;
} Template__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = Template_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Template__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = Template_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Template__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Template class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Template__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JSONWebKeys

@implementation JSONWebKeys

@dynamic kty;
@dynamic kid;
@dynamic use;
@dynamic n;
@dynamic e;
@dynamic x5CArray, x5CArray_Count;

typedef struct JSONWebKeys__storage_ {
  uint32_t _has_storage_[1];
  NSString *kty;
  NSString *kid;
  NSString *use;
  NSString *n;
  NSString *e;
  NSMutableArray *x5CArray;
} JSONWebKeys__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "kty",
        .dataTypeSpecific.className = NULL,
        .number = JSONWebKeys_FieldNumber_Kty,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, kty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kid",
        .dataTypeSpecific.className = NULL,
        .number = JSONWebKeys_FieldNumber_Kid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, kid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "use",
        .dataTypeSpecific.className = NULL,
        .number = JSONWebKeys_FieldNumber_Use,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, use),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "n",
        .dataTypeSpecific.className = NULL,
        .number = JSONWebKeys_FieldNumber_N,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, n),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "e",
        .dataTypeSpecific.className = NULL,
        .number = JSONWebKeys_FieldNumber_E,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, e),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "x5CArray",
        .dataTypeSpecific.className = NULL,
        .number = JSONWebKeys_FieldNumber_X5CArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JSONWebKeys__storage_, x5CArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JSONWebKeys class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JSONWebKeys__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\000x5c\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Jwks

@implementation Jwks

@dynamic keysArray, keysArray_Count;

typedef struct Jwks__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *keysArray;
} Jwks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keysArray",
        .dataTypeSpecific.className = GPBStringifySymbol(JSONWebKeys),
        .number = Jwks_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Jwks__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Jwks class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Jwks__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
