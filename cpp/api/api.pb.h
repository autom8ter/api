// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[20];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class AddUserRolesRequest;
class AddUserRolesRequestDefaultTypeInternal;
extern AddUserRolesRequestDefaultTypeInternal _AddUserRolesRequest_default_instance_;
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class AppMetadata;
class AppMetadataDefaultTypeInternal;
extern AppMetadataDefaultTypeInternal _AppMetadata_default_instance_;
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class ClientCredentials;
class ClientCredentialsDefaultTypeInternal;
extern ClientCredentialsDefaultTypeInternal _ClientCredentials_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventQuery;
class EventQueryDefaultTypeInternal;
extern EventQueryDefaultTypeInternal _EventQuery_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class JSONWebKeys;
class JSONWebKeysDefaultTypeInternal;
extern JSONWebKeysDefaultTypeInternal _JSONWebKeys_default_instance_;
class JWT;
class JWTDefaultTypeInternal;
extern JWTDefaultTypeInternal _JWT_default_instance_;
class Jwks;
class JwksDefaultTypeInternal;
extern JwksDefaultTypeInternal _Jwks_default_instance_;
class OAuth2;
class OAuth2DefaultTypeInternal;
extern OAuth2DefaultTypeInternal _OAuth2_default_instance_;
class Plan;
class PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class Product;
class ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class SubscribeRequest;
class SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class UnSubscribeRequest;
class UnSubscribeRequestDefaultTypeInternal;
extern UnSubscribeRequestDefaultTypeInternal _UnSubscribeRequest_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserMetadata;
class UserMetadataDefaultTypeInternal;
extern UserMetadataDefaultTypeInternal _UserMetadata_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::AddUserRolesRequest* Arena::CreateMaybeMessage<::api::AddUserRolesRequest>(Arena*);
template<> ::api::Address* Arena::CreateMaybeMessage<::api::Address>(Arena*);
template<> ::api::AppMetadata* Arena::CreateMaybeMessage<::api::AppMetadata>(Arena*);
template<> ::api::Card* Arena::CreateMaybeMessage<::api::Card>(Arena*);
template<> ::api::ClientCredentials* Arena::CreateMaybeMessage<::api::ClientCredentials>(Arena*);
template<> ::api::Event* Arena::CreateMaybeMessage<::api::Event>(Arena*);
template<> ::api::EventQuery* Arena::CreateMaybeMessage<::api::EventQuery>(Arena*);
template<> ::api::Identity* Arena::CreateMaybeMessage<::api::Identity>(Arena*);
template<> ::api::JSONWebKeys* Arena::CreateMaybeMessage<::api::JSONWebKeys>(Arena*);
template<> ::api::JWT* Arena::CreateMaybeMessage<::api::JWT>(Arena*);
template<> ::api::Jwks* Arena::CreateMaybeMessage<::api::Jwks>(Arena*);
template<> ::api::OAuth2* Arena::CreateMaybeMessage<::api::OAuth2>(Arena*);
template<> ::api::Plan* Arena::CreateMaybeMessage<::api::Plan>(Arena*);
template<> ::api::Product* Arena::CreateMaybeMessage<::api::Product>(Arena*);
template<> ::api::Query* Arena::CreateMaybeMessage<::api::Query>(Arena*);
template<> ::api::Role* Arena::CreateMaybeMessage<::api::Role>(Arena*);
template<> ::api::SubscribeRequest* Arena::CreateMaybeMessage<::api::SubscribeRequest>(Arena*);
template<> ::api::UnSubscribeRequest* Arena::CreateMaybeMessage<::api::UnSubscribeRequest>(Arena*);
template<> ::api::User* Arena::CreateMaybeMessage<::api::User>(Arena*);
template<> ::api::UserMetadata* Arena::CreateMaybeMessage<::api::UserMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

enum BillingInterval {
  DAILY = 0,
  WEEKLY = 1,
  MONTHLY = 2,
  YEARLY = 3,
  BillingInterval_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BillingInterval_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BillingInterval_IsValid(int value);
const BillingInterval BillingInterval_MIN = DAILY;
const BillingInterval BillingInterval_MAX = YEARLY;
const int BillingInterval_ARRAYSIZE = BillingInterval_MAX + 1;

const ::google::protobuf::EnumDescriptor* BillingInterval_descriptor();
inline const ::std::string& BillingInterval_Name(BillingInterval value) {
  return ::google::protobuf::internal::NameOfEnum(
    BillingInterval_descriptor(), value);
}
inline bool BillingInterval_Parse(
    const ::std::string& name, BillingInterval* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BillingInterval>(
    BillingInterval_descriptor(), name, value);
}
enum EventType {
  LOGIN_CODE_SENT = 0,
  DELETED_USER = 1,
  FAILED_LOGIN = 2,
  FAILED_API_OPERATION = 3,
  CON = 4,
  FAILED_CORS = 5,
  SUCCESS_EMAIL_VERIFICATION = 6,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventType_IsValid(int value);
const EventType EventType_MIN = LOGIN_CODE_SENT;
const EventType EventType_MAX = SUCCESS_EMAIL_VERIFICATION;
const int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventType_descriptor();
inline const ::std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventType_descriptor(), value);
}
inline bool EventType_Parse(
    const ::std::string& name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class AddUserRolesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AddUserRolesRequest) */ {
 public:
  AddUserRolesRequest();
  virtual ~AddUserRolesRequest();

  AddUserRolesRequest(const AddUserRolesRequest& from);

  inline AddUserRolesRequest& operator=(const AddUserRolesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddUserRolesRequest(AddUserRolesRequest&& from) noexcept
    : AddUserRolesRequest() {
    *this = ::std::move(from);
  }

  inline AddUserRolesRequest& operator=(AddUserRolesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddUserRolesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddUserRolesRequest* internal_default_instance() {
    return reinterpret_cast<const AddUserRolesRequest*>(
               &_AddUserRolesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddUserRolesRequest* other);
  friend void swap(AddUserRolesRequest& a, AddUserRolesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddUserRolesRequest* New() const final {
    return CreateMaybeMessage<AddUserRolesRequest>(NULL);
  }

  AddUserRolesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddUserRolesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddUserRolesRequest& from);
  void MergeFrom(const AddUserRolesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserRolesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.Role roles = 2;
  int roles_size() const;
  void clear_roles();
  static const int kRolesFieldNumber = 2;
  ::api::Role* mutable_roles(int index);
  ::google::protobuf::RepeatedPtrField< ::api::Role >*
      mutable_roles();
  const ::api::Role& roles(int index) const;
  ::api::Role* add_roles();
  const ::google::protobuf::RepeatedPtrField< ::api::Role >&
      roles() const;

  // .common.Identifier email = 1;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_email() const;
  public:
  const ::common::Identifier& email() const;
  ::common::Identifier* release_email();
  ::common::Identifier* mutable_email();
  void set_allocated_email(::common::Identifier* email);

  // @@protoc_insertion_point(class_scope:api.AddUserRolesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::Role > roles_;
  ::common::Identifier* email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubscribeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SubscribeRequest) */ {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SubscribeRequest* other);
  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const final {
    return CreateMaybeMessage<SubscribeRequest>(NULL);
  }

  SubscribeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier email = 1;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_email() const;
  public:
  const ::common::Identifier& email() const;
  ::common::Identifier* release_email();
  ::common::Identifier* mutable_email();
  void set_allocated_email(::common::Identifier* email);

  // .common.Identifier plan = 2;
  bool has_plan() const;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  private:
  const ::common::Identifier& _internal_plan() const;
  public:
  const ::common::Identifier& plan() const;
  ::common::Identifier* release_plan();
  ::common::Identifier* mutable_plan();
  void set_allocated_plan(::common::Identifier* plan);

  // .api.Card card = 3;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 3;
  private:
  const ::api::Card& _internal_card() const;
  public:
  const ::api::Card& card() const;
  ::api::Card* release_card();
  ::api::Card* mutable_card();
  void set_allocated_card(::api::Card* card);

  // @@protoc_insertion_point(class_scope:api.SubscribeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* email_;
  ::common::Identifier* plan_;
  ::api::Card* card_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnSubscribeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UnSubscribeRequest) */ {
 public:
  UnSubscribeRequest();
  virtual ~UnSubscribeRequest();

  UnSubscribeRequest(const UnSubscribeRequest& from);

  inline UnSubscribeRequest& operator=(const UnSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnSubscribeRequest(UnSubscribeRequest&& from) noexcept
    : UnSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline UnSubscribeRequest& operator=(UnSubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnSubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const UnSubscribeRequest*>(
               &_UnSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UnSubscribeRequest* other);
  friend void swap(UnSubscribeRequest& a, UnSubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnSubscribeRequest* New() const final {
    return CreateMaybeMessage<UnSubscribeRequest>(NULL);
  }

  UnSubscribeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnSubscribeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnSubscribeRequest& from);
  void MergeFrom(const UnSubscribeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnSubscribeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier email = 1;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_email() const;
  public:
  const ::common::Identifier& email() const;
  ::common::Identifier* release_email();
  ::common::Identifier* mutable_email();
  void set_allocated_email(::common::Identifier* email);

  // .common.String plan = 2;
  bool has_plan() const;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  private:
  const ::common::String& _internal_plan() const;
  public:
  const ::common::String& plan() const;
  ::common::String* release_plan();
  ::common::String* mutable_plan();
  void set_allocated_plan(::common::String* plan);

  // @@protoc_insertion_point(class_scope:api.UnSubscribeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* email_;
  ::common::String* plan_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(Card&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Card* other);
  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return CreateMaybeMessage<Card>(NULL);
  }

  Card* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier number = 1;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_number() const;
  public:
  const ::common::Identifier& number() const;
  ::common::Identifier* release_number();
  ::common::Identifier* mutable_number();
  void set_allocated_number(::common::Identifier* number);

  // .common.String exp_month = 2;
  bool has_exp_month() const;
  void clear_exp_month();
  static const int kExpMonthFieldNumber = 2;
  private:
  const ::common::String& _internal_exp_month() const;
  public:
  const ::common::String& exp_month() const;
  ::common::String* release_exp_month();
  ::common::String* mutable_exp_month();
  void set_allocated_exp_month(::common::String* exp_month);

  // .common.String exp_year = 3;
  bool has_exp_year() const;
  void clear_exp_year();
  static const int kExpYearFieldNumber = 3;
  private:
  const ::common::String& _internal_exp_year() const;
  public:
  const ::common::String& exp_year() const;
  ::common::String* release_exp_year();
  ::common::String* mutable_exp_year();
  void set_allocated_exp_year(::common::String* exp_year);

  // .common.String cvc = 4;
  bool has_cvc() const;
  void clear_cvc();
  static const int kCvcFieldNumber = 4;
  private:
  const ::common::String& _internal_cvc() const;
  public:
  const ::common::String& cvc() const;
  ::common::String* release_cvc();
  ::common::String* mutable_cvc();
  void set_allocated_cvc(::common::String* cvc);

  // @@protoc_insertion_point(class_scope:api.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* number_;
  ::common::String* exp_month_;
  ::common::String* exp_year_;
  ::common::String* cvc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.Identity identities = 22;
  int identities_size() const;
  void clear_identities();
  static const int kIdentitiesFieldNumber = 22;
  ::api::Identity* mutable_identities(int index);
  ::google::protobuf::RepeatedPtrField< ::api::Identity >*
      mutable_identities();
  const ::api::Identity& identities(int index) const;
  ::api::Identity* add_identities();
  const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
      identities() const;

  // .common.Identifier user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_user_id() const;
  public:
  const ::common::Identifier& user_id() const;
  ::common::Identifier* release_user_id();
  ::common::Identifier* mutable_user_id();
  void set_allocated_user_id(::common::Identifier* user_id);

  // .common.String name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  private:
  const ::common::String& _internal_name() const;
  public:
  const ::common::String& name() const;
  ::common::String* release_name();
  ::common::String* mutable_name();
  void set_allocated_name(::common::String* name);

  // .common.String given_name = 3;
  bool has_given_name() const;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 3;
  private:
  const ::common::String& _internal_given_name() const;
  public:
  const ::common::String& given_name() const;
  ::common::String* release_given_name();
  ::common::String* mutable_given_name();
  void set_allocated_given_name(::common::String* given_name);

  // .common.String family_name = 4;
  bool has_family_name() const;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 4;
  private:
  const ::common::String& _internal_family_name() const;
  public:
  const ::common::String& family_name() const;
  ::common::String* release_family_name();
  ::common::String* mutable_family_name();
  void set_allocated_family_name(::common::String* family_name);

  // .common.String gender = 5;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 5;
  private:
  const ::common::String& _internal_gender() const;
  public:
  const ::common::String& gender() const;
  ::common::String* release_gender();
  ::common::String* mutable_gender();
  void set_allocated_gender(::common::String* gender);

  // .common.String birthdate = 6;
  bool has_birthdate() const;
  void clear_birthdate();
  static const int kBirthdateFieldNumber = 6;
  private:
  const ::common::String& _internal_birthdate() const;
  public:
  const ::common::String& birthdate() const;
  ::common::String* release_birthdate();
  ::common::String* mutable_birthdate();
  void set_allocated_birthdate(::common::String* birthdate);

  // .common.Identifier email = 7;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 7;
  private:
  const ::common::Identifier& _internal_email() const;
  public:
  const ::common::Identifier& email() const;
  ::common::Identifier* release_email();
  ::common::Identifier* mutable_email();
  void set_allocated_email(::common::Identifier* email);

  // .common.Identifier phone_number = 8;
  bool has_phone_number() const;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 8;
  private:
  const ::common::Identifier& _internal_phone_number() const;
  public:
  const ::common::Identifier& phone_number() const;
  ::common::Identifier* release_phone_number();
  ::common::Identifier* mutable_phone_number();
  void set_allocated_phone_number(::common::Identifier* phone_number);

  // .common.String picture = 9;
  bool has_picture() const;
  void clear_picture();
  static const int kPictureFieldNumber = 9;
  private:
  const ::common::String& _internal_picture() const;
  public:
  const ::common::String& picture() const;
  ::common::String* release_picture();
  ::common::String* mutable_picture();
  void set_allocated_picture(::common::String* picture);

  // .common.StringMap user_metadata = 10;
  bool has_user_metadata() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 10;
  private:
  const ::common::StringMap& _internal_user_metadata() const;
  public:
  const ::common::StringMap& user_metadata() const;
  ::common::StringMap* release_user_metadata();
  ::common::StringMap* mutable_user_metadata();
  void set_allocated_user_metadata(::common::StringMap* user_metadata);

  // .common.StringMap app_metadata = 11;
  bool has_app_metadata() const;
  void clear_app_metadata();
  static const int kAppMetadataFieldNumber = 11;
  private:
  const ::common::StringMap& _internal_app_metadata() const;
  public:
  const ::common::StringMap& app_metadata() const;
  ::common::StringMap* release_app_metadata();
  ::common::StringMap* mutable_app_metadata();
  void set_allocated_app_metadata(::common::StringMap* app_metadata);

  // .common.String last_ip = 12;
  bool has_last_ip() const;
  void clear_last_ip();
  static const int kLastIpFieldNumber = 12;
  private:
  const ::common::String& _internal_last_ip() const;
  public:
  const ::common::String& last_ip() const;
  ::common::String* release_last_ip();
  ::common::String* mutable_last_ip();
  void set_allocated_last_ip(::common::String* last_ip);

  // .common.String nickname = 14;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 14;
  private:
  const ::common::String& _internal_nickname() const;
  public:
  const ::common::String& nickname() const;
  ::common::String* release_nickname();
  ::common::String* mutable_nickname();
  void set_allocated_nickname(::common::String* nickname);

  // .common.StringArray multifactor = 15;
  bool has_multifactor() const;
  void clear_multifactor();
  static const int kMultifactorFieldNumber = 15;
  private:
  const ::common::StringArray& _internal_multifactor() const;
  public:
  const ::common::StringArray& multifactor() const;
  ::common::StringArray* release_multifactor();
  ::common::StringArray* mutable_multifactor();
  void set_allocated_multifactor(::common::StringArray* multifactor);

  // .common.String created_at = 17;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 17;
  private:
  const ::common::String& _internal_created_at() const;
  public:
  const ::common::String& created_at() const;
  ::common::String* release_created_at();
  ::common::String* mutable_created_at();
  void set_allocated_created_at(::common::String* created_at);

  // .common.String updated_at = 18;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 18;
  private:
  const ::common::String& _internal_updated_at() const;
  public:
  const ::common::String& updated_at() const;
  ::common::String* release_updated_at();
  ::common::String* mutable_updated_at();
  void set_allocated_updated_at(::common::String* updated_at);

  // .common.String password = 21;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 21;
  private:
  const ::common::String& _internal_password() const;
  public:
  const ::common::String& password() const;
  ::common::String* release_password();
  ::common::String* mutable_password();
  void set_allocated_password(::common::String* password);

  // bool blocked = 13;
  void clear_blocked();
  static const int kBlockedFieldNumber = 13;
  bool blocked() const;
  void set_blocked(bool value);

  // bool phone_verified = 19;
  void clear_phone_verified();
  static const int kPhoneVerifiedFieldNumber = 19;
  bool phone_verified() const;
  void set_phone_verified(bool value);

  // bool email_verified = 20;
  void clear_email_verified();
  static const int kEmailVerifiedFieldNumber = 20;
  bool email_verified() const;
  void set_email_verified(bool value);

  // @@protoc_insertion_point(class_scope:api.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::Identity > identities_;
  ::common::Identifier* user_id_;
  ::common::String* name_;
  ::common::String* given_name_;
  ::common::String* family_name_;
  ::common::String* gender_;
  ::common::String* birthdate_;
  ::common::Identifier* email_;
  ::common::Identifier* phone_number_;
  ::common::String* picture_;
  ::common::StringMap* user_metadata_;
  ::common::StringMap* app_metadata_;
  ::common::String* last_ip_;
  ::common::String* nickname_;
  ::common::StringArray* multifactor_;
  ::common::String* created_at_;
  ::common::String* updated_at_;
  ::common::String* password_;
  bool blocked_;
  bool phone_verified_;
  bool email_verified_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserMetadata) */ {
 public:
  UserMetadata();
  virtual ~UserMetadata();

  UserMetadata(const UserMetadata& from);

  inline UserMetadata& operator=(const UserMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetadata(UserMetadata&& from) noexcept
    : UserMetadata() {
    *this = ::std::move(from);
  }

  inline UserMetadata& operator=(UserMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMetadata* internal_default_instance() {
    return reinterpret_cast<const UserMetadata*>(
               &_UserMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UserMetadata* other);
  friend void swap(UserMetadata& a, UserMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetadata* New() const final {
    return CreateMaybeMessage<UserMetadata>(NULL);
  }

  UserMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMetadata& from);
  void MergeFrom(const UserMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::common::String& _internal_status() const;
  public:
  const ::common::String& status() const;
  ::common::String* release_status();
  ::common::String* mutable_status();
  void set_allocated_status(::common::String* status);

  // .common.StringMap bio = 2;
  bool has_bio() const;
  void clear_bio();
  static const int kBioFieldNumber = 2;
  private:
  const ::common::StringMap& _internal_bio() const;
  public:
  const ::common::StringMap& bio() const;
  ::common::StringMap* release_bio();
  ::common::StringMap* mutable_bio();
  void set_allocated_bio(::common::StringMap* bio);

  // .api.Address address = 3;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  private:
  const ::api::Address& _internal_address() const;
  public:
  const ::api::Address& address() const;
  ::api::Address* release_address();
  ::api::Address* mutable_address();
  void set_allocated_address(::api::Address* address);

  // .common.StringMap tags = 4;
  bool has_tags() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  private:
  const ::common::StringMap& _internal_tags() const;
  public:
  const ::common::StringMap& tags() const;
  ::common::StringMap* release_tags();
  ::common::StringMap* mutable_tags();
  void set_allocated_tags(::common::StringMap* tags);

  // @@protoc_insertion_point(class_scope:api.UserMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* status_;
  ::common::StringMap* bio_;
  ::api::Address* address_;
  ::common::StringMap* tags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(NULL);
  }

  Address* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string city = 1;
  void clear_city();
  static const int kCityFieldNumber = 1;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string line1 = 3;
  void clear_line1();
  static const int kLine1FieldNumber = 3;
  const ::std::string& line1() const;
  void set_line1(const ::std::string& value);
  #if LANG_CXX11
  void set_line1(::std::string&& value);
  #endif
  void set_line1(const char* value);
  void set_line1(const char* value, size_t size);
  ::std::string* mutable_line1();
  ::std::string* release_line1();
  void set_allocated_line1(::std::string* line1);

  // string line2 = 4;
  void clear_line2();
  static const int kLine2FieldNumber = 4;
  const ::std::string& line2() const;
  void set_line2(const ::std::string& value);
  #if LANG_CXX11
  void set_line2(::std::string&& value);
  #endif
  void set_line2(const char* value);
  void set_line2(const char* value, size_t size);
  ::std::string* mutable_line2();
  ::std::string* release_line2();
  void set_allocated_line2(::std::string* line2);

  // string zip = 5;
  void clear_zip();
  static const int kZipFieldNumber = 5;
  const ::std::string& zip() const;
  void set_zip(const ::std::string& value);
  #if LANG_CXX11
  void set_zip(::std::string&& value);
  #endif
  void set_zip(const char* value);
  void set_zip(const char* value, size_t size);
  ::std::string* mutable_zip();
  ::std::string* release_zip();
  void set_allocated_zip(::std::string* zip);

  // @@protoc_insertion_point(class_scope:api.Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr line1_;
  ::google::protobuf::internal::ArenaStringPtr line2_;
  ::google::protobuf::internal::ArenaStringPtr zip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AppMetadata) */ {
 public:
  AppMetadata();
  virtual ~AppMetadata();

  AppMetadata(const AppMetadata& from);

  inline AppMetadata& operator=(const AppMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppMetadata(AppMetadata&& from) noexcept
    : AppMetadata() {
    *this = ::std::move(from);
  }

  inline AppMetadata& operator=(AppMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppMetadata* internal_default_instance() {
    return reinterpret_cast<const AppMetadata*>(
               &_AppMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AppMetadata* other);
  friend void swap(AppMetadata& a, AppMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppMetadata* New() const final {
    return CreateMaybeMessage<AppMetadata>(NULL);
  }

  AppMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppMetadata& from);
  void MergeFrom(const AppMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String description = 1;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  private:
  const ::common::String& _internal_description() const;
  public:
  const ::common::String& description() const;
  ::common::String* release_description();
  ::common::String* mutable_description();
  void set_allocated_description(::common::String* description);

  // .common.String account_balance = 2;
  bool has_account_balance() const;
  void clear_account_balance();
  static const int kAccountBalanceFieldNumber = 2;
  private:
  const ::common::String& _internal_account_balance() const;
  public:
  const ::common::String& account_balance() const;
  ::common::String* release_account_balance();
  ::common::String* mutable_account_balance();
  void set_allocated_account_balance(::common::String* account_balance);

  // .api.Plan plan = 3;
  bool has_plan() const;
  void clear_plan();
  static const int kPlanFieldNumber = 3;
  private:
  const ::api::Plan& _internal_plan() const;
  public:
  const ::api::Plan& plan() const;
  ::api::Plan* release_plan();
  ::api::Plan* mutable_plan();
  void set_allocated_plan(::api::Plan* plan);

  // .common.StringMap tags = 4;
  bool has_tags() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  private:
  const ::common::StringMap& _internal_tags() const;
  public:
  const ::common::StringMap& tags() const;
  ::common::StringMap* release_tags();
  ::common::StringMap* mutable_tags();
  void set_allocated_tags(::common::StringMap* tags);

  // @@protoc_insertion_point(class_scope:api.AppMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* description_;
  ::common::String* account_balance_;
  ::api::Plan* plan_;
  ::common::StringMap* tags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Plan) */ {
 public:
  Plan();
  virtual ~Plan();

  Plan(const Plan& from);

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(Plan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Plan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Plan* other);
  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Plan* New() const final {
    return CreateMaybeMessage<Plan>(NULL);
  }

  Plan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.Int64 amount = 3;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  private:
  const ::common::Int64& _internal_amount() const;
  public:
  const ::common::Int64& amount() const;
  ::common::Int64* release_amount();
  ::common::Int64* mutable_amount();
  void set_allocated_amount(::common::Int64* amount);

  // .common.String nickname = 5;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  private:
  const ::common::String& _internal_nickname() const;
  public:
  const ::common::String& nickname() const;
  ::common::String* release_nickname();
  ::common::String* mutable_nickname();
  void set_allocated_nickname(::common::String* nickname);

  // .api.Product product = 6;
  bool has_product() const;
  void clear_product();
  static const int kProductFieldNumber = 6;
  private:
  const ::api::Product& _internal_product() const;
  public:
  const ::api::Product& product() const;
  ::api::Product* release_product();
  ::api::Product* mutable_product();
  void set_allocated_product(::api::Product* product);

  // bool active = 2;
  void clear_active();
  static const int kActiveFieldNumber = 2;
  bool active() const;
  void set_active(bool value);

  // .api.BillingInterval interval = 4;
  void clear_interval();
  static const int kIntervalFieldNumber = 4;
  ::api::BillingInterval interval() const;
  void set_interval(::api::BillingInterval value);

  // @@protoc_insertion_point(class_scope:api.Plan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::Int64* amount_;
  ::common::String* nickname_;
  ::api::Product* product_;
  bool active_;
  int interval_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Product : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Product) */ {
 public:
  Product();
  virtual ~Product();

  Product(const Product& from);

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(Product&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Product& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Product* other);
  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const final {
    return CreateMaybeMessage<Product>(NULL);
  }

  Product* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.String description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  private:
  const ::common::String& _internal_description() const;
  public:
  const ::common::String& description() const;
  ::common::String* release_description();
  ::common::String* mutable_description();
  void set_allocated_description(::common::String* description);

  // .common.String url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  private:
  const ::common::String& _internal_url() const;
  public:
  const ::common::String& url() const;
  ::common::String* release_url();
  ::common::String* mutable_url();
  void set_allocated_url(::common::String* url);

  // @@protoc_insertion_point(class_scope:api.Product)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::String* description_;
  ::common::String* url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Identity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Identity* other);
  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(NULL);
  }

  Identity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String connection = 1;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 1;
  private:
  const ::common::String& _internal_connection() const;
  public:
  const ::common::String& connection() const;
  ::common::String* release_connection();
  ::common::String* mutable_connection();
  void set_allocated_connection(::common::String* connection);

  // .common.Identifier user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  private:
  const ::common::Identifier& _internal_user_id() const;
  public:
  const ::common::Identifier& user_id() const;
  ::common::Identifier* release_user_id();
  ::common::Identifier* mutable_user_id();
  void set_allocated_user_id(::common::Identifier* user_id);

  // .common.String provider = 3;
  bool has_provider() const;
  void clear_provider();
  static const int kProviderFieldNumber = 3;
  private:
  const ::common::String& _internal_provider() const;
  public:
  const ::common::String& provider() const;
  ::common::String* release_provider();
  ::common::String* mutable_provider();
  void set_allocated_provider(::common::String* provider);

  // bool isSocial = 4;
  void clear_issocial();
  static const int kIsSocialFieldNumber = 4;
  bool issocial() const;
  void set_issocial(bool value);

  // @@protoc_insertion_point(class_scope:api.Identity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* connection_;
  ::common::Identifier* user_id_;
  ::common::String* provider_;
  bool issocial_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Role* other);
  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(NULL);
  }

  Role* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.String name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  private:
  const ::common::String& _internal_name() const;
  public:
  const ::common::String& name() const;
  ::common::String* release_name();
  ::common::String* mutable_name();
  void set_allocated_name(::common::String* name);

  // .common.String description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  private:
  const ::common::String& _internal_description() const;
  public:
  const ::common::String& description() const;
  ::common::String* release_description();
  ::common::String* mutable_description();
  void set_allocated_description(::common::String* description);

  // @@protoc_insertion_point(class_scope:api.Role)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::String* name_;
  ::common::String* description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OAuth2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.OAuth2) */ {
 public:
  OAuth2();
  virtual ~OAuth2();

  OAuth2(const OAuth2& from);

  inline OAuth2& operator=(const OAuth2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OAuth2(OAuth2&& from) noexcept
    : OAuth2() {
    *this = ::std::move(from);
  }

  inline OAuth2& operator=(OAuth2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OAuth2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OAuth2* internal_default_instance() {
    return reinterpret_cast<const OAuth2*>(
               &_OAuth2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(OAuth2* other);
  friend void swap(OAuth2& a, OAuth2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OAuth2* New() const final {
    return CreateMaybeMessage<OAuth2>(NULL);
  }

  OAuth2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OAuth2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OAuth2& from);
  void MergeFrom(const OAuth2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OAuth2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String client_id = 1;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  private:
  const ::common::String& _internal_client_id() const;
  public:
  const ::common::String& client_id() const;
  ::common::String* release_client_id();
  ::common::String* mutable_client_id();
  void set_allocated_client_id(::common::String* client_id);

  // .common.String client_secret = 2;
  bool has_client_secret() const;
  void clear_client_secret();
  static const int kClientSecretFieldNumber = 2;
  private:
  const ::common::String& _internal_client_secret() const;
  public:
  const ::common::String& client_secret() const;
  ::common::String* release_client_secret();
  ::common::String* mutable_client_secret();
  void set_allocated_client_secret(::common::String* client_secret);

  // .common.String token_url = 3;
  bool has_token_url() const;
  void clear_token_url();
  static const int kTokenUrlFieldNumber = 3;
  private:
  const ::common::String& _internal_token_url() const;
  public:
  const ::common::String& token_url() const;
  ::common::String* release_token_url();
  ::common::String* mutable_token_url();
  void set_allocated_token_url(::common::String* token_url);

  // .common.String auth_url = 4;
  bool has_auth_url() const;
  void clear_auth_url();
  static const int kAuthUrlFieldNumber = 4;
  private:
  const ::common::String& _internal_auth_url() const;
  public:
  const ::common::String& auth_url() const;
  ::common::String* release_auth_url();
  ::common::String* mutable_auth_url();
  void set_allocated_auth_url(::common::String* auth_url);

  // .common.StringArray scopes = 5;
  bool has_scopes() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 5;
  private:
  const ::common::StringArray& _internal_scopes() const;
  public:
  const ::common::StringArray& scopes() const;
  ::common::StringArray* release_scopes();
  ::common::StringArray* mutable_scopes();
  void set_allocated_scopes(::common::StringArray* scopes);

  // .common.String redirect = 6;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 6;
  private:
  const ::common::String& _internal_redirect() const;
  public:
  const ::common::String& redirect() const;
  ::common::String* release_redirect();
  ::common::String* mutable_redirect();
  void set_allocated_redirect(::common::String* redirect);

  // .common.String code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  private:
  const ::common::String& _internal_code() const;
  public:
  const ::common::String& code() const;
  ::common::String* release_code();
  ::common::String* mutable_code();
  void set_allocated_code(::common::String* code);

  // @@protoc_insertion_point(class_scope:api.OAuth2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* client_id_;
  ::common::String* client_secret_;
  ::common::String* token_url_;
  ::common::String* auth_url_;
  ::common::StringArray* scopes_;
  ::common::String* redirect_;
  ::common::String* code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientCredentials : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ClientCredentials) */ {
 public:
  ClientCredentials();
  virtual ~ClientCredentials();

  ClientCredentials(const ClientCredentials& from);

  inline ClientCredentials& operator=(const ClientCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientCredentials(ClientCredentials&& from) noexcept
    : ClientCredentials() {
    *this = ::std::move(from);
  }

  inline ClientCredentials& operator=(ClientCredentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientCredentials& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientCredentials* internal_default_instance() {
    return reinterpret_cast<const ClientCredentials*>(
               &_ClientCredentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ClientCredentials* other);
  friend void swap(ClientCredentials& a, ClientCredentials& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientCredentials* New() const final {
    return CreateMaybeMessage<ClientCredentials>(NULL);
  }

  ClientCredentials* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientCredentials>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientCredentials& from);
  void MergeFrom(const ClientCredentials& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientCredentials* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String client_id = 1;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  private:
  const ::common::String& _internal_client_id() const;
  public:
  const ::common::String& client_id() const;
  ::common::String* release_client_id();
  ::common::String* mutable_client_id();
  void set_allocated_client_id(::common::String* client_id);

  // .common.String client_secret = 2;
  bool has_client_secret() const;
  void clear_client_secret();
  static const int kClientSecretFieldNumber = 2;
  private:
  const ::common::String& _internal_client_secret() const;
  public:
  const ::common::String& client_secret() const;
  ::common::String* release_client_secret();
  ::common::String* mutable_client_secret();
  void set_allocated_client_secret(::common::String* client_secret);

  // .common.String token_url = 3;
  bool has_token_url() const;
  void clear_token_url();
  static const int kTokenUrlFieldNumber = 3;
  private:
  const ::common::String& _internal_token_url() const;
  public:
  const ::common::String& token_url() const;
  ::common::String* release_token_url();
  ::common::String* mutable_token_url();
  void set_allocated_token_url(::common::String* token_url);

  // .common.StringArray scopes = 4;
  bool has_scopes() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 4;
  private:
  const ::common::StringArray& _internal_scopes() const;
  public:
  const ::common::StringArray& scopes() const;
  ::common::StringArray* release_scopes();
  ::common::StringArray* mutable_scopes();
  void set_allocated_scopes(::common::StringArray* scopes);

  // .common.StringMap endpoint_params = 5;
  bool has_endpoint_params() const;
  void clear_endpoint_params();
  static const int kEndpointParamsFieldNumber = 5;
  private:
  const ::common::StringMap& _internal_endpoint_params() const;
  public:
  const ::common::StringMap& endpoint_params() const;
  ::common::StringMap* release_endpoint_params();
  ::common::StringMap* mutable_endpoint_params();
  void set_allocated_endpoint_params(::common::StringMap* endpoint_params);

  // @@protoc_insertion_point(class_scope:api.ClientCredentials)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* client_id_;
  ::common::String* client_secret_;
  ::common::String* token_url_;
  ::common::StringArray* scopes_;
  ::common::StringMap* endpoint_params_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JWT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.JWT) */ {
 public:
  JWT();
  virtual ~JWT();

  JWT(const JWT& from);

  inline JWT& operator=(const JWT& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JWT(JWT&& from) noexcept
    : JWT() {
    *this = ::std::move(from);
  }

  inline JWT& operator=(JWT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JWT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JWT* internal_default_instance() {
    return reinterpret_cast<const JWT*>(
               &_JWT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(JWT* other);
  friend void swap(JWT& a, JWT& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JWT* New() const final {
    return CreateMaybeMessage<JWT>(NULL);
  }

  JWT* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JWT>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JWT& from);
  void MergeFrom(const JWT& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JWT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes private_key = 2;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 2;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // .common.String email = 1;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  private:
  const ::common::String& _internal_email() const;
  public:
  const ::common::String& email() const;
  ::common::String* release_email();
  ::common::String* mutable_email();
  void set_allocated_email(::common::String* email);

  // .common.String prive_key_id = 3;
  bool has_prive_key_id() const;
  void clear_prive_key_id();
  static const int kPriveKeyIdFieldNumber = 3;
  private:
  const ::common::String& _internal_prive_key_id() const;
  public:
  const ::common::String& prive_key_id() const;
  ::common::String* release_prive_key_id();
  ::common::String* mutable_prive_key_id();
  void set_allocated_prive_key_id(::common::String* prive_key_id);

  // .common.String subject = 4;
  bool has_subject() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 4;
  private:
  const ::common::String& _internal_subject() const;
  public:
  const ::common::String& subject() const;
  ::common::String* release_subject();
  ::common::String* mutable_subject();
  void set_allocated_subject(::common::String* subject);

  // .common.StringArray scopes = 5;
  bool has_scopes() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 5;
  private:
  const ::common::StringArray& _internal_scopes() const;
  public:
  const ::common::StringArray& scopes() const;
  ::common::StringArray* release_scopes();
  ::common::StringArray* mutable_scopes();
  void set_allocated_scopes(::common::StringArray* scopes);

  // .common.String token_url = 6;
  bool has_token_url() const;
  void clear_token_url();
  static const int kTokenUrlFieldNumber = 6;
  private:
  const ::common::String& _internal_token_url() const;
  public:
  const ::common::String& token_url() const;
  ::common::String* release_token_url();
  ::common::String* mutable_token_url();
  void set_allocated_token_url(::common::String* token_url);

  // .common.String expires = 7;
  bool has_expires() const;
  void clear_expires();
  static const int kExpiresFieldNumber = 7;
  private:
  const ::common::String& _internal_expires() const;
  public:
  const ::common::String& expires() const;
  ::common::String* release_expires();
  ::common::String* mutable_expires();
  void set_allocated_expires(::common::String* expires);

  // .common.String audience = 8;
  bool has_audience() const;
  void clear_audience();
  static const int kAudienceFieldNumber = 8;
  private:
  const ::common::String& _internal_audience() const;
  public:
  const ::common::String& audience() const;
  ::common::String* release_audience();
  ::common::String* mutable_audience();
  void set_allocated_audience(::common::String* audience);

  // @@protoc_insertion_point(class_scope:api.JWT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::common::String* email_;
  ::common::String* prive_key_id_;
  ::common::String* subject_;
  ::common::StringArray* scopes_;
  ::common::String* token_url_;
  ::common::String* expires_;
  ::common::String* audience_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(NULL);
  }

  Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String query = 4;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 4;
  private:
  const ::common::String& _internal_query() const;
  public:
  const ::common::String& query() const;
  ::common::String* release_query();
  ::common::String* mutable_query();
  void set_allocated_query(::common::String* query);

  // .common.String fields = 5;
  bool has_fields() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 5;
  private:
  const ::common::String& _internal_fields() const;
  public:
  const ::common::String& fields() const;
  ::common::String* release_fields();
  ::common::String* mutable_fields();
  void set_allocated_fields(::common::String* fields);

  // @@protoc_insertion_point(class_scope:api.Query)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* query_;
  ::common::String* fields_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  private:
  const ::common::String& _internal_date() const;
  public:
  const ::common::String& date() const;
  ::common::String* release_date();
  ::common::String* mutable_date();
  void set_allocated_date(::common::String* date);

  // .common.String type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::common::String& _internal_type() const;
  public:
  const ::common::String& type() const;
  ::common::String* release_type();
  ::common::String* mutable_type();
  void set_allocated_type(::common::String* type);

  // .common.String client_id = 3;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  private:
  const ::common::String& _internal_client_id() const;
  public:
  const ::common::String& client_id() const;
  ::common::String* release_client_id();
  ::common::String* mutable_client_id();
  void set_allocated_client_id(::common::String* client_id);

  // .common.String client_name = 4;
  bool has_client_name() const;
  void clear_client_name();
  static const int kClientNameFieldNumber = 4;
  private:
  const ::common::String& _internal_client_name() const;
  public:
  const ::common::String& client_name() const;
  ::common::String* release_client_name();
  ::common::String* mutable_client_name();
  void set_allocated_client_name(::common::String* client_name);

  // .common.String ip = 5;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 5;
  private:
  const ::common::String& _internal_ip() const;
  public:
  const ::common::String& ip() const;
  ::common::String* release_ip();
  ::common::String* mutable_ip();
  void set_allocated_ip(::common::String* ip);

  // .common.String location_info = 6;
  bool has_location_info() const;
  void clear_location_info();
  static const int kLocationInfoFieldNumber = 6;
  private:
  const ::common::String& _internal_location_info() const;
  public:
  const ::common::String& location_info() const;
  ::common::String* release_location_info();
  ::common::String* mutable_location_info();
  void set_allocated_location_info(::common::String* location_info);

  // .common.String details = 7;
  bool has_details() const;
  void clear_details();
  static const int kDetailsFieldNumber = 7;
  private:
  const ::common::String& _internal_details() const;
  public:
  const ::common::String& details() const;
  ::common::String* release_details();
  ::common::String* mutable_details();
  void set_allocated_details(::common::String* details);

  // .common.String user_id = 8;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 8;
  private:
  const ::common::String& _internal_user_id() const;
  public:
  const ::common::String& user_id() const;
  ::common::String* release_user_id();
  ::common::String* mutable_user_id();
  void set_allocated_user_id(::common::String* user_id);

  // .common.StringMap annotations = 9;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 9;
  private:
  const ::common::StringMap& _internal_annotations() const;
  public:
  const ::common::StringMap& annotations() const;
  ::common::StringMap* release_annotations();
  ::common::StringMap* mutable_annotations();
  void set_allocated_annotations(::common::StringMap* annotations);

  // @@protoc_insertion_point(class_scope:api.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* date_;
  ::common::String* type_;
  ::common::String* client_id_;
  ::common::String* client_name_;
  ::common::String* ip_;
  ::common::String* location_info_;
  ::common::String* details_;
  ::common::String* user_id_;
  ::common::StringMap* annotations_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EventQuery) */ {
 public:
  EventQuery();
  virtual ~EventQuery();

  EventQuery(const EventQuery& from);

  inline EventQuery& operator=(const EventQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventQuery(EventQuery&& from) noexcept
    : EventQuery() {
    *this = ::std::move(from);
  }

  inline EventQuery& operator=(EventQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventQuery* internal_default_instance() {
    return reinterpret_cast<const EventQuery*>(
               &_EventQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(EventQuery* other);
  friend void swap(EventQuery& a, EventQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventQuery* New() const final {
    return CreateMaybeMessage<EventQuery>(NULL);
  }

  EventQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventQuery& from);
  void MergeFrom(const EventQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string date = 1;
  void clear_date();
  static const int kDateFieldNumber = 1;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string client_id = 3;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:api.EventQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JSONWebKeys : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.JSONWebKeys) */ {
 public:
  JSONWebKeys();
  virtual ~JSONWebKeys();

  JSONWebKeys(const JSONWebKeys& from);

  inline JSONWebKeys& operator=(const JSONWebKeys& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JSONWebKeys(JSONWebKeys&& from) noexcept
    : JSONWebKeys() {
    *this = ::std::move(from);
  }

  inline JSONWebKeys& operator=(JSONWebKeys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JSONWebKeys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JSONWebKeys* internal_default_instance() {
    return reinterpret_cast<const JSONWebKeys*>(
               &_JSONWebKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(JSONWebKeys* other);
  friend void swap(JSONWebKeys& a, JSONWebKeys& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JSONWebKeys* New() const final {
    return CreateMaybeMessage<JSONWebKeys>(NULL);
  }

  JSONWebKeys* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JSONWebKeys>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JSONWebKeys& from);
  void MergeFrom(const JSONWebKeys& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSONWebKeys* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String kty = 1;
  bool has_kty() const;
  void clear_kty();
  static const int kKtyFieldNumber = 1;
  private:
  const ::common::String& _internal_kty() const;
  public:
  const ::common::String& kty() const;
  ::common::String* release_kty();
  ::common::String* mutable_kty();
  void set_allocated_kty(::common::String* kty);

  // .common.Identifier kid = 2;
  bool has_kid() const;
  void clear_kid();
  static const int kKidFieldNumber = 2;
  private:
  const ::common::Identifier& _internal_kid() const;
  public:
  const ::common::Identifier& kid() const;
  ::common::Identifier* release_kid();
  ::common::Identifier* mutable_kid();
  void set_allocated_kid(::common::Identifier* kid);

  // .common.String use = 3;
  bool has_use() const;
  void clear_use();
  static const int kUseFieldNumber = 3;
  private:
  const ::common::String& _internal_use() const;
  public:
  const ::common::String& use() const;
  ::common::String* release_use();
  ::common::String* mutable_use();
  void set_allocated_use(::common::String* use);

  // .common.String n = 4;
  bool has_n() const;
  void clear_n();
  static const int kNFieldNumber = 4;
  private:
  const ::common::String& _internal_n() const;
  public:
  const ::common::String& n() const;
  ::common::String* release_n();
  ::common::String* mutable_n();
  void set_allocated_n(::common::String* n);

  // .common.String e = 5;
  bool has_e() const;
  void clear_e();
  static const int kEFieldNumber = 5;
  private:
  const ::common::String& _internal_e() const;
  public:
  const ::common::String& e() const;
  ::common::String* release_e();
  ::common::String* mutable_e();
  void set_allocated_e(::common::String* e);

  // .common.StringArray x5c = 6;
  bool has_x5c() const;
  void clear_x5c();
  static const int kX5CFieldNumber = 6;
  private:
  const ::common::StringArray& _internal_x5c() const;
  public:
  const ::common::StringArray& x5c() const;
  ::common::StringArray* release_x5c();
  ::common::StringArray* mutable_x5c();
  void set_allocated_x5c(::common::StringArray* x5c);

  // @@protoc_insertion_point(class_scope:api.JSONWebKeys)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* kty_;
  ::common::Identifier* kid_;
  ::common::String* use_;
  ::common::String* n_;
  ::common::String* e_;
  ::common::StringArray* x5c_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Jwks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Jwks) */ {
 public:
  Jwks();
  virtual ~Jwks();

  Jwks(const Jwks& from);

  inline Jwks& operator=(const Jwks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Jwks(Jwks&& from) noexcept
    : Jwks() {
    *this = ::std::move(from);
  }

  inline Jwks& operator=(Jwks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Jwks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jwks* internal_default_instance() {
    return reinterpret_cast<const Jwks*>(
               &_Jwks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Jwks* other);
  friend void swap(Jwks& a, Jwks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Jwks* New() const final {
    return CreateMaybeMessage<Jwks>(NULL);
  }

  Jwks* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Jwks>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Jwks& from);
  void MergeFrom(const Jwks& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Jwks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.JSONWebKeys keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  ::api::JSONWebKeys* mutable_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >*
      mutable_keys();
  const ::api::JSONWebKeys& keys(int index) const;
  ::api::JSONWebKeys* add_keys();
  const ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >&
      keys() const;

  // @@protoc_insertion_point(class_scope:api.Jwks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys > keys_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddUserRolesRequest

// .common.Identifier email = 1;
inline bool AddUserRolesRequest::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline const ::common::Identifier& AddUserRolesRequest::_internal_email() const {
  return *email_;
}
inline const ::common::Identifier& AddUserRolesRequest::email() const {
  const ::common::Identifier* p = email_;
  // @@protoc_insertion_point(field_get:api.AddUserRolesRequest.email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* AddUserRolesRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.AddUserRolesRequest.email)
  
  ::common::Identifier* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::common::Identifier* AddUserRolesRequest::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.AddUserRolesRequest.email)
  return email_;
}
inline void AddUserRolesRequest::set_allocated_email(::common::Identifier* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(email_);
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.AddUserRolesRequest.email)
}

// repeated .api.Role roles = 2;
inline int AddUserRolesRequest::roles_size() const {
  return roles_.size();
}
inline void AddUserRolesRequest::clear_roles() {
  roles_.Clear();
}
inline ::api::Role* AddUserRolesRequest::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:api.AddUserRolesRequest.roles)
  return roles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::Role >*
AddUserRolesRequest::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:api.AddUserRolesRequest.roles)
  return &roles_;
}
inline const ::api::Role& AddUserRolesRequest::roles(int index) const {
  // @@protoc_insertion_point(field_get:api.AddUserRolesRequest.roles)
  return roles_.Get(index);
}
inline ::api::Role* AddUserRolesRequest::add_roles() {
  // @@protoc_insertion_point(field_add:api.AddUserRolesRequest.roles)
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::Role >&
AddUserRolesRequest::roles() const {
  // @@protoc_insertion_point(field_list:api.AddUserRolesRequest.roles)
  return roles_;
}

// -------------------------------------------------------------------

// SubscribeRequest

// .common.Identifier email = 1;
inline bool SubscribeRequest::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline const ::common::Identifier& SubscribeRequest::_internal_email() const {
  return *email_;
}
inline const ::common::Identifier& SubscribeRequest::email() const {
  const ::common::Identifier* p = email_;
  // @@protoc_insertion_point(field_get:api.SubscribeRequest.email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* SubscribeRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.SubscribeRequest.email)
  
  ::common::Identifier* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::common::Identifier* SubscribeRequest::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscribeRequest.email)
  return email_;
}
inline void SubscribeRequest::set_allocated_email(::common::Identifier* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(email_);
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeRequest.email)
}

// .common.Identifier plan = 2;
inline bool SubscribeRequest::has_plan() const {
  return this != internal_default_instance() && plan_ != NULL;
}
inline const ::common::Identifier& SubscribeRequest::_internal_plan() const {
  return *plan_;
}
inline const ::common::Identifier& SubscribeRequest::plan() const {
  const ::common::Identifier* p = plan_;
  // @@protoc_insertion_point(field_get:api.SubscribeRequest.plan)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* SubscribeRequest::release_plan() {
  // @@protoc_insertion_point(field_release:api.SubscribeRequest.plan)
  
  ::common::Identifier* temp = plan_;
  plan_ = NULL;
  return temp;
}
inline ::common::Identifier* SubscribeRequest::mutable_plan() {
  
  if (plan_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    plan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscribeRequest.plan)
  return plan_;
}
inline void SubscribeRequest::set_allocated_plan(::common::Identifier* plan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(plan_);
  }
  if (plan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeRequest.plan)
}

// .api.Card card = 3;
inline bool SubscribeRequest::has_card() const {
  return this != internal_default_instance() && card_ != NULL;
}
inline void SubscribeRequest::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) {
    delete card_;
  }
  card_ = NULL;
}
inline const ::api::Card& SubscribeRequest::_internal_card() const {
  return *card_;
}
inline const ::api::Card& SubscribeRequest::card() const {
  const ::api::Card* p = card_;
  // @@protoc_insertion_point(field_get:api.SubscribeRequest.card)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Card*>(
      &::api::_Card_default_instance_);
}
inline ::api::Card* SubscribeRequest::release_card() {
  // @@protoc_insertion_point(field_release:api.SubscribeRequest.card)
  
  ::api::Card* temp = card_;
  card_ = NULL;
  return temp;
}
inline ::api::Card* SubscribeRequest::mutable_card() {
  
  if (card_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Card>(GetArenaNoVirtual());
    card_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscribeRequest.card)
  return card_;
}
inline void SubscribeRequest::set_allocated_card(::api::Card* card) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete card_;
  }
  if (card) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      card = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeRequest.card)
}

// -------------------------------------------------------------------

// UnSubscribeRequest

// .common.Identifier email = 1;
inline bool UnSubscribeRequest::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline const ::common::Identifier& UnSubscribeRequest::_internal_email() const {
  return *email_;
}
inline const ::common::Identifier& UnSubscribeRequest::email() const {
  const ::common::Identifier* p = email_;
  // @@protoc_insertion_point(field_get:api.UnSubscribeRequest.email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* UnSubscribeRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.UnSubscribeRequest.email)
  
  ::common::Identifier* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::common::Identifier* UnSubscribeRequest::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UnSubscribeRequest.email)
  return email_;
}
inline void UnSubscribeRequest::set_allocated_email(::common::Identifier* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(email_);
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.UnSubscribeRequest.email)
}

// .common.String plan = 2;
inline bool UnSubscribeRequest::has_plan() const {
  return this != internal_default_instance() && plan_ != NULL;
}
inline const ::common::String& UnSubscribeRequest::_internal_plan() const {
  return *plan_;
}
inline const ::common::String& UnSubscribeRequest::plan() const {
  const ::common::String* p = plan_;
  // @@protoc_insertion_point(field_get:api.UnSubscribeRequest.plan)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* UnSubscribeRequest::release_plan() {
  // @@protoc_insertion_point(field_release:api.UnSubscribeRequest.plan)
  
  ::common::String* temp = plan_;
  plan_ = NULL;
  return temp;
}
inline ::common::String* UnSubscribeRequest::mutable_plan() {
  
  if (plan_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    plan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UnSubscribeRequest.plan)
  return plan_;
}
inline void UnSubscribeRequest::set_allocated_plan(::common::String* plan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(plan_);
  }
  if (plan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:api.UnSubscribeRequest.plan)
}

// -------------------------------------------------------------------

// Card

// .common.Identifier number = 1;
inline bool Card::has_number() const {
  return this != internal_default_instance() && number_ != NULL;
}
inline const ::common::Identifier& Card::_internal_number() const {
  return *number_;
}
inline const ::common::Identifier& Card::number() const {
  const ::common::Identifier* p = number_;
  // @@protoc_insertion_point(field_get:api.Card.number)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* Card::release_number() {
  // @@protoc_insertion_point(field_release:api.Card.number)
  
  ::common::Identifier* temp = number_;
  number_ = NULL;
  return temp;
}
inline ::common::Identifier* Card::mutable_number() {
  
  if (number_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    number_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Card.number)
  return number_;
}
inline void Card::set_allocated_number(::common::Identifier* number) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(number_);
  }
  if (number) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      number = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, number, submessage_arena);
    }
    
  } else {
    
  }
  number_ = number;
  // @@protoc_insertion_point(field_set_allocated:api.Card.number)
}

// .common.String exp_month = 2;
inline bool Card::has_exp_month() const {
  return this != internal_default_instance() && exp_month_ != NULL;
}
inline const ::common::String& Card::_internal_exp_month() const {
  return *exp_month_;
}
inline const ::common::String& Card::exp_month() const {
  const ::common::String* p = exp_month_;
  // @@protoc_insertion_point(field_get:api.Card.exp_month)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Card::release_exp_month() {
  // @@protoc_insertion_point(field_release:api.Card.exp_month)
  
  ::common::String* temp = exp_month_;
  exp_month_ = NULL;
  return temp;
}
inline ::common::String* Card::mutable_exp_month() {
  
  if (exp_month_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    exp_month_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Card.exp_month)
  return exp_month_;
}
inline void Card::set_allocated_exp_month(::common::String* exp_month) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exp_month_);
  }
  if (exp_month) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exp_month = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exp_month, submessage_arena);
    }
    
  } else {
    
  }
  exp_month_ = exp_month;
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_month)
}

// .common.String exp_year = 3;
inline bool Card::has_exp_year() const {
  return this != internal_default_instance() && exp_year_ != NULL;
}
inline const ::common::String& Card::_internal_exp_year() const {
  return *exp_year_;
}
inline const ::common::String& Card::exp_year() const {
  const ::common::String* p = exp_year_;
  // @@protoc_insertion_point(field_get:api.Card.exp_year)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Card::release_exp_year() {
  // @@protoc_insertion_point(field_release:api.Card.exp_year)
  
  ::common::String* temp = exp_year_;
  exp_year_ = NULL;
  return temp;
}
inline ::common::String* Card::mutable_exp_year() {
  
  if (exp_year_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    exp_year_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Card.exp_year)
  return exp_year_;
}
inline void Card::set_allocated_exp_year(::common::String* exp_year) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exp_year_);
  }
  if (exp_year) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exp_year = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exp_year, submessage_arena);
    }
    
  } else {
    
  }
  exp_year_ = exp_year;
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_year)
}

// .common.String cvc = 4;
inline bool Card::has_cvc() const {
  return this != internal_default_instance() && cvc_ != NULL;
}
inline const ::common::String& Card::_internal_cvc() const {
  return *cvc_;
}
inline const ::common::String& Card::cvc() const {
  const ::common::String* p = cvc_;
  // @@protoc_insertion_point(field_get:api.Card.cvc)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Card::release_cvc() {
  // @@protoc_insertion_point(field_release:api.Card.cvc)
  
  ::common::String* temp = cvc_;
  cvc_ = NULL;
  return temp;
}
inline ::common::String* Card::mutable_cvc() {
  
  if (cvc_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    cvc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Card.cvc)
  return cvc_;
}
inline void Card::set_allocated_cvc(::common::String* cvc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cvc_);
  }
  if (cvc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cvc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cvc, submessage_arena);
    }
    
  } else {
    
  }
  cvc_ = cvc;
  // @@protoc_insertion_point(field_set_allocated:api.Card.cvc)
}

// -------------------------------------------------------------------

// User

// .common.Identifier user_id = 1;
inline bool User::has_user_id() const {
  return this != internal_default_instance() && user_id_ != NULL;
}
inline const ::common::Identifier& User::_internal_user_id() const {
  return *user_id_;
}
inline const ::common::Identifier& User::user_id() const {
  const ::common::Identifier* p = user_id_;
  // @@protoc_insertion_point(field_get:api.User.user_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* User::release_user_id() {
  // @@protoc_insertion_point(field_release:api.User.user_id)
  
  ::common::Identifier* temp = user_id_;
  user_id_ = NULL;
  return temp;
}
inline ::common::Identifier* User::mutable_user_id() {
  
  if (user_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    user_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.user_id)
  return user_id_;
}
inline void User::set_allocated_user_id(::common::Identifier* user_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_id_);
  }
  if (user_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_id, submessage_arena);
    }
    
  } else {
    
  }
  user_id_ = user_id;
  // @@protoc_insertion_point(field_set_allocated:api.User.user_id)
}

// .common.String name = 2;
inline bool User::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::common::String& User::_internal_name() const {
  return *name_;
}
inline const ::common::String& User::name() const {
  const ::common::String* p = name_;
  // @@protoc_insertion_point(field_get:api.User.name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_name() {
  // @@protoc_insertion_point(field_release:api.User.name)
  
  ::common::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.name)
  return name_;
}
inline void User::set_allocated_name(::common::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:api.User.name)
}

// .common.String given_name = 3;
inline bool User::has_given_name() const {
  return this != internal_default_instance() && given_name_ != NULL;
}
inline const ::common::String& User::_internal_given_name() const {
  return *given_name_;
}
inline const ::common::String& User::given_name() const {
  const ::common::String* p = given_name_;
  // @@protoc_insertion_point(field_get:api.User.given_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_given_name() {
  // @@protoc_insertion_point(field_release:api.User.given_name)
  
  ::common::String* temp = given_name_;
  given_name_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_given_name() {
  
  if (given_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    given_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.given_name)
  return given_name_;
}
inline void User::set_allocated_given_name(::common::String* given_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(given_name_);
  }
  if (given_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      given_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, given_name, submessage_arena);
    }
    
  } else {
    
  }
  given_name_ = given_name;
  // @@protoc_insertion_point(field_set_allocated:api.User.given_name)
}

// .common.String family_name = 4;
inline bool User::has_family_name() const {
  return this != internal_default_instance() && family_name_ != NULL;
}
inline const ::common::String& User::_internal_family_name() const {
  return *family_name_;
}
inline const ::common::String& User::family_name() const {
  const ::common::String* p = family_name_;
  // @@protoc_insertion_point(field_get:api.User.family_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_family_name() {
  // @@protoc_insertion_point(field_release:api.User.family_name)
  
  ::common::String* temp = family_name_;
  family_name_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_family_name() {
  
  if (family_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    family_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.family_name)
  return family_name_;
}
inline void User::set_allocated_family_name(::common::String* family_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(family_name_);
  }
  if (family_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      family_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, family_name, submessage_arena);
    }
    
  } else {
    
  }
  family_name_ = family_name;
  // @@protoc_insertion_point(field_set_allocated:api.User.family_name)
}

// .common.String gender = 5;
inline bool User::has_gender() const {
  return this != internal_default_instance() && gender_ != NULL;
}
inline const ::common::String& User::_internal_gender() const {
  return *gender_;
}
inline const ::common::String& User::gender() const {
  const ::common::String* p = gender_;
  // @@protoc_insertion_point(field_get:api.User.gender)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_gender() {
  // @@protoc_insertion_point(field_release:api.User.gender)
  
  ::common::String* temp = gender_;
  gender_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_gender() {
  
  if (gender_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    gender_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.gender)
  return gender_;
}
inline void User::set_allocated_gender(::common::String* gender) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gender_);
  }
  if (gender) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gender = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gender, submessage_arena);
    }
    
  } else {
    
  }
  gender_ = gender;
  // @@protoc_insertion_point(field_set_allocated:api.User.gender)
}

// .common.String birthdate = 6;
inline bool User::has_birthdate() const {
  return this != internal_default_instance() && birthdate_ != NULL;
}
inline const ::common::String& User::_internal_birthdate() const {
  return *birthdate_;
}
inline const ::common::String& User::birthdate() const {
  const ::common::String* p = birthdate_;
  // @@protoc_insertion_point(field_get:api.User.birthdate)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_birthdate() {
  // @@protoc_insertion_point(field_release:api.User.birthdate)
  
  ::common::String* temp = birthdate_;
  birthdate_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_birthdate() {
  
  if (birthdate_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    birthdate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.birthdate)
  return birthdate_;
}
inline void User::set_allocated_birthdate(::common::String* birthdate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(birthdate_);
  }
  if (birthdate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      birthdate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, birthdate, submessage_arena);
    }
    
  } else {
    
  }
  birthdate_ = birthdate;
  // @@protoc_insertion_point(field_set_allocated:api.User.birthdate)
}

// .common.Identifier email = 7;
inline bool User::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline const ::common::Identifier& User::_internal_email() const {
  return *email_;
}
inline const ::common::Identifier& User::email() const {
  const ::common::Identifier* p = email_;
  // @@protoc_insertion_point(field_get:api.User.email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* User::release_email() {
  // @@protoc_insertion_point(field_release:api.User.email)
  
  ::common::Identifier* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::common::Identifier* User::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.email)
  return email_;
}
inline void User::set_allocated_email(::common::Identifier* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(email_);
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.User.email)
}

// .common.Identifier phone_number = 8;
inline bool User::has_phone_number() const {
  return this != internal_default_instance() && phone_number_ != NULL;
}
inline const ::common::Identifier& User::_internal_phone_number() const {
  return *phone_number_;
}
inline const ::common::Identifier& User::phone_number() const {
  const ::common::Identifier* p = phone_number_;
  // @@protoc_insertion_point(field_get:api.User.phone_number)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* User::release_phone_number() {
  // @@protoc_insertion_point(field_release:api.User.phone_number)
  
  ::common::Identifier* temp = phone_number_;
  phone_number_ = NULL;
  return temp;
}
inline ::common::Identifier* User::mutable_phone_number() {
  
  if (phone_number_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    phone_number_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.phone_number)
  return phone_number_;
}
inline void User::set_allocated_phone_number(::common::Identifier* phone_number) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(phone_number_);
  }
  if (phone_number) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      phone_number = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phone_number, submessage_arena);
    }
    
  } else {
    
  }
  phone_number_ = phone_number;
  // @@protoc_insertion_point(field_set_allocated:api.User.phone_number)
}

// .common.String picture = 9;
inline bool User::has_picture() const {
  return this != internal_default_instance() && picture_ != NULL;
}
inline const ::common::String& User::_internal_picture() const {
  return *picture_;
}
inline const ::common::String& User::picture() const {
  const ::common::String* p = picture_;
  // @@protoc_insertion_point(field_get:api.User.picture)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_picture() {
  // @@protoc_insertion_point(field_release:api.User.picture)
  
  ::common::String* temp = picture_;
  picture_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_picture() {
  
  if (picture_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    picture_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.picture)
  return picture_;
}
inline void User::set_allocated_picture(::common::String* picture) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(picture_);
  }
  if (picture) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      picture = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, picture, submessage_arena);
    }
    
  } else {
    
  }
  picture_ = picture;
  // @@protoc_insertion_point(field_set_allocated:api.User.picture)
}

// .common.String nickname = 14;
inline bool User::has_nickname() const {
  return this != internal_default_instance() && nickname_ != NULL;
}
inline const ::common::String& User::_internal_nickname() const {
  return *nickname_;
}
inline const ::common::String& User::nickname() const {
  const ::common::String* p = nickname_;
  // @@protoc_insertion_point(field_get:api.User.nickname)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_nickname() {
  // @@protoc_insertion_point(field_release:api.User.nickname)
  
  ::common::String* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_nickname() {
  
  if (nickname_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    nickname_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.nickname)
  return nickname_;
}
inline void User::set_allocated_nickname(::common::String* nickname) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(nickname_);
  }
  if (nickname) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nickname = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nickname, submessage_arena);
    }
    
  } else {
    
  }
  nickname_ = nickname;
  // @@protoc_insertion_point(field_set_allocated:api.User.nickname)
}

// .common.StringMap user_metadata = 10;
inline bool User::has_user_metadata() const {
  return this != internal_default_instance() && user_metadata_ != NULL;
}
inline const ::common::StringMap& User::_internal_user_metadata() const {
  return *user_metadata_;
}
inline const ::common::StringMap& User::user_metadata() const {
  const ::common::StringMap* p = user_metadata_;
  // @@protoc_insertion_point(field_get:api.User.user_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* User::release_user_metadata() {
  // @@protoc_insertion_point(field_release:api.User.user_metadata)
  
  ::common::StringMap* temp = user_metadata_;
  user_metadata_ = NULL;
  return temp;
}
inline ::common::StringMap* User::mutable_user_metadata() {
  
  if (user_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    user_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.user_metadata)
  return user_metadata_;
}
inline void User::set_allocated_user_metadata(::common::StringMap* user_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_metadata_);
  }
  if (user_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_metadata, submessage_arena);
    }
    
  } else {
    
  }
  user_metadata_ = user_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.User.user_metadata)
}

// .common.StringMap app_metadata = 11;
inline bool User::has_app_metadata() const {
  return this != internal_default_instance() && app_metadata_ != NULL;
}
inline const ::common::StringMap& User::_internal_app_metadata() const {
  return *app_metadata_;
}
inline const ::common::StringMap& User::app_metadata() const {
  const ::common::StringMap* p = app_metadata_;
  // @@protoc_insertion_point(field_get:api.User.app_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* User::release_app_metadata() {
  // @@protoc_insertion_point(field_release:api.User.app_metadata)
  
  ::common::StringMap* temp = app_metadata_;
  app_metadata_ = NULL;
  return temp;
}
inline ::common::StringMap* User::mutable_app_metadata() {
  
  if (app_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    app_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.app_metadata)
  return app_metadata_;
}
inline void User::set_allocated_app_metadata(::common::StringMap* app_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(app_metadata_);
  }
  if (app_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app_metadata, submessage_arena);
    }
    
  } else {
    
  }
  app_metadata_ = app_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.User.app_metadata)
}

// .common.String last_ip = 12;
inline bool User::has_last_ip() const {
  return this != internal_default_instance() && last_ip_ != NULL;
}
inline const ::common::String& User::_internal_last_ip() const {
  return *last_ip_;
}
inline const ::common::String& User::last_ip() const {
  const ::common::String* p = last_ip_;
  // @@protoc_insertion_point(field_get:api.User.last_ip)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_last_ip() {
  // @@protoc_insertion_point(field_release:api.User.last_ip)
  
  ::common::String* temp = last_ip_;
  last_ip_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_last_ip() {
  
  if (last_ip_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    last_ip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.last_ip)
  return last_ip_;
}
inline void User::set_allocated_last_ip(::common::String* last_ip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_ip_);
  }
  if (last_ip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_ip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_ip, submessage_arena);
    }
    
  } else {
    
  }
  last_ip_ = last_ip;
  // @@protoc_insertion_point(field_set_allocated:api.User.last_ip)
}

// bool blocked = 13;
inline void User::clear_blocked() {
  blocked_ = false;
}
inline bool User::blocked() const {
  // @@protoc_insertion_point(field_get:api.User.blocked)
  return blocked_;
}
inline void User::set_blocked(bool value) {
  
  blocked_ = value;
  // @@protoc_insertion_point(field_set:api.User.blocked)
}

// .common.StringArray multifactor = 15;
inline bool User::has_multifactor() const {
  return this != internal_default_instance() && multifactor_ != NULL;
}
inline const ::common::StringArray& User::_internal_multifactor() const {
  return *multifactor_;
}
inline const ::common::StringArray& User::multifactor() const {
  const ::common::StringArray* p = multifactor_;
  // @@protoc_insertion_point(field_get:api.User.multifactor)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* User::release_multifactor() {
  // @@protoc_insertion_point(field_release:api.User.multifactor)
  
  ::common::StringArray* temp = multifactor_;
  multifactor_ = NULL;
  return temp;
}
inline ::common::StringArray* User::mutable_multifactor() {
  
  if (multifactor_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    multifactor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.multifactor)
  return multifactor_;
}
inline void User::set_allocated_multifactor(::common::StringArray* multifactor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(multifactor_);
  }
  if (multifactor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multifactor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multifactor, submessage_arena);
    }
    
  } else {
    
  }
  multifactor_ = multifactor;
  // @@protoc_insertion_point(field_set_allocated:api.User.multifactor)
}

// .common.String created_at = 17;
inline bool User::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
inline const ::common::String& User::_internal_created_at() const {
  return *created_at_;
}
inline const ::common::String& User::created_at() const {
  const ::common::String* p = created_at_;
  // @@protoc_insertion_point(field_get:api.User.created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_created_at() {
  // @@protoc_insertion_point(field_release:api.User.created_at)
  
  ::common::String* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_created_at() {
  
  if (created_at_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    created_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.created_at)
  return created_at_;
}
inline void User::set_allocated_created_at(::common::String* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:api.User.created_at)
}

// .common.String updated_at = 18;
inline bool User::has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != NULL;
}
inline const ::common::String& User::_internal_updated_at() const {
  return *updated_at_;
}
inline const ::common::String& User::updated_at() const {
  const ::common::String* p = updated_at_;
  // @@protoc_insertion_point(field_get:api.User.updated_at)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_updated_at() {
  // @@protoc_insertion_point(field_release:api.User.updated_at)
  
  ::common::String* temp = updated_at_;
  updated_at_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_updated_at() {
  
  if (updated_at_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    updated_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.updated_at)
  return updated_at_;
}
inline void User::set_allocated_updated_at(::common::String* updated_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      updated_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:api.User.updated_at)
}

// bool phone_verified = 19;
inline void User::clear_phone_verified() {
  phone_verified_ = false;
}
inline bool User::phone_verified() const {
  // @@protoc_insertion_point(field_get:api.User.phone_verified)
  return phone_verified_;
}
inline void User::set_phone_verified(bool value) {
  
  phone_verified_ = value;
  // @@protoc_insertion_point(field_set:api.User.phone_verified)
}

// bool email_verified = 20;
inline void User::clear_email_verified() {
  email_verified_ = false;
}
inline bool User::email_verified() const {
  // @@protoc_insertion_point(field_get:api.User.email_verified)
  return email_verified_;
}
inline void User::set_email_verified(bool value) {
  
  email_verified_ = value;
  // @@protoc_insertion_point(field_set:api.User.email_verified)
}

// .common.String password = 21;
inline bool User::has_password() const {
  return this != internal_default_instance() && password_ != NULL;
}
inline const ::common::String& User::_internal_password() const {
  return *password_;
}
inline const ::common::String& User::password() const {
  const ::common::String* p = password_;
  // @@protoc_insertion_point(field_get:api.User.password)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_password() {
  // @@protoc_insertion_point(field_release:api.User.password)
  
  ::common::String* temp = password_;
  password_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_password() {
  
  if (password_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    password_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.password)
  return password_;
}
inline void User::set_allocated_password(::common::String* password) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(password_);
  }
  if (password) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      password = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    
  } else {
    
  }
  password_ = password;
  // @@protoc_insertion_point(field_set_allocated:api.User.password)
}

// repeated .api.Identity identities = 22;
inline int User::identities_size() const {
  return identities_.size();
}
inline void User::clear_identities() {
  identities_.Clear();
}
inline ::api::Identity* User::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:api.User.identities)
  return identities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::Identity >*
User::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:api.User.identities)
  return &identities_;
}
inline const ::api::Identity& User::identities(int index) const {
  // @@protoc_insertion_point(field_get:api.User.identities)
  return identities_.Get(index);
}
inline ::api::Identity* User::add_identities() {
  // @@protoc_insertion_point(field_add:api.User.identities)
  return identities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
User::identities() const {
  // @@protoc_insertion_point(field_list:api.User.identities)
  return identities_;
}

// -------------------------------------------------------------------

// UserMetadata

// .common.String status = 1;
inline bool UserMetadata::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::common::String& UserMetadata::_internal_status() const {
  return *status_;
}
inline const ::common::String& UserMetadata::status() const {
  const ::common::String* p = status_;
  // @@protoc_insertion_point(field_get:api.UserMetadata.status)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* UserMetadata::release_status() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.status)
  
  ::common::String* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::common::String* UserMetadata::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.status)
  return status_;
}
inline void UserMetadata::set_allocated_status(::common::String* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.status)
}

// .common.StringMap bio = 2;
inline bool UserMetadata::has_bio() const {
  return this != internal_default_instance() && bio_ != NULL;
}
inline const ::common::StringMap& UserMetadata::_internal_bio() const {
  return *bio_;
}
inline const ::common::StringMap& UserMetadata::bio() const {
  const ::common::StringMap* p = bio_;
  // @@protoc_insertion_point(field_get:api.UserMetadata.bio)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* UserMetadata::release_bio() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.bio)
  
  ::common::StringMap* temp = bio_;
  bio_ = NULL;
  return temp;
}
inline ::common::StringMap* UserMetadata::mutable_bio() {
  
  if (bio_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    bio_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.bio)
  return bio_;
}
inline void UserMetadata::set_allocated_bio(::common::StringMap* bio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bio_);
  }
  if (bio) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bio = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bio, submessage_arena);
    }
    
  } else {
    
  }
  bio_ = bio;
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.bio)
}

// .api.Address address = 3;
inline bool UserMetadata::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void UserMetadata::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::api::Address& UserMetadata::_internal_address() const {
  return *address_;
}
inline const ::api::Address& UserMetadata::address() const {
  const ::api::Address* p = address_;
  // @@protoc_insertion_point(field_get:api.UserMetadata.address)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Address*>(
      &::api::_Address_default_instance_);
}
inline ::api::Address* UserMetadata::release_address() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.address)
  
  ::api::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::api::Address* UserMetadata::mutable_address() {
  
  if (address_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.address)
  return address_;
}
inline void UserMetadata::set_allocated_address(::api::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.address)
}

// .common.StringMap tags = 4;
inline bool UserMetadata::has_tags() const {
  return this != internal_default_instance() && tags_ != NULL;
}
inline const ::common::StringMap& UserMetadata::_internal_tags() const {
  return *tags_;
}
inline const ::common::StringMap& UserMetadata::tags() const {
  const ::common::StringMap* p = tags_;
  // @@protoc_insertion_point(field_get:api.UserMetadata.tags)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* UserMetadata::release_tags() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.tags)
  
  ::common::StringMap* temp = tags_;
  tags_ = NULL;
  return temp;
}
inline ::common::StringMap* UserMetadata::mutable_tags() {
  
  if (tags_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    tags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.tags)
  return tags_;
}
inline void UserMetadata::set_allocated_tags(::common::StringMap* tags) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tags_);
  }
  if (tags) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tags = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tags, submessage_arena);
    }
    
  } else {
    
  }
  tags_ = tags;
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.tags)
}

// -------------------------------------------------------------------

// Address

// string city = 1;
inline void Address::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:api.Address.city)
  return city_.GetNoArena();
}
inline void Address::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.city)
}
#if LANG_CXX11
inline void Address::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.city)
}
#endif
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.city)
}
inline void Address::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.city)
}
inline ::std::string* Address::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:api.Address.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:api.Address.city)
}

// string state = 2;
inline void Address::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::state() const {
  // @@protoc_insertion_point(field_get:api.Address.state)
  return state_.GetNoArena();
}
inline void Address::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.state)
}
#if LANG_CXX11
inline void Address::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.state)
}
#endif
inline void Address::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.state)
}
inline void Address::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.state)
}
inline ::std::string* Address::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_state() {
  // @@protoc_insertion_point(field_release:api.Address.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:api.Address.state)
}

// string line1 = 3;
inline void Address::clear_line1() {
  line1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::line1() const {
  // @@protoc_insertion_point(field_get:api.Address.line1)
  return line1_.GetNoArena();
}
inline void Address::set_line1(const ::std::string& value) {
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.line1)
}
#if LANG_CXX11
inline void Address::set_line1(::std::string&& value) {
  
  line1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.line1)
}
#endif
inline void Address::set_line1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.line1)
}
inline void Address::set_line1(const char* value, size_t size) {
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.line1)
}
inline ::std::string* Address::mutable_line1() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.line1)
  return line1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_line1() {
  // @@protoc_insertion_point(field_release:api.Address.line1)
  
  return line1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_line1(::std::string* line1) {
  if (line1 != NULL) {
    
  } else {
    
  }
  line1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line1);
  // @@protoc_insertion_point(field_set_allocated:api.Address.line1)
}

// string line2 = 4;
inline void Address::clear_line2() {
  line2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::line2() const {
  // @@protoc_insertion_point(field_get:api.Address.line2)
  return line2_.GetNoArena();
}
inline void Address::set_line2(const ::std::string& value) {
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.line2)
}
#if LANG_CXX11
inline void Address::set_line2(::std::string&& value) {
  
  line2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.line2)
}
#endif
inline void Address::set_line2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.line2)
}
inline void Address::set_line2(const char* value, size_t size) {
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.line2)
}
inline ::std::string* Address::mutable_line2() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.line2)
  return line2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_line2() {
  // @@protoc_insertion_point(field_release:api.Address.line2)
  
  return line2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_line2(::std::string* line2) {
  if (line2 != NULL) {
    
  } else {
    
  }
  line2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line2);
  // @@protoc_insertion_point(field_set_allocated:api.Address.line2)
}

// string zip = 5;
inline void Address::clear_zip() {
  zip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::zip() const {
  // @@protoc_insertion_point(field_get:api.Address.zip)
  return zip_.GetNoArena();
}
inline void Address::set_zip(const ::std::string& value) {
  
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.zip)
}
#if LANG_CXX11
inline void Address::set_zip(::std::string&& value) {
  
  zip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.zip)
}
#endif
inline void Address::set_zip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.zip)
}
inline void Address::set_zip(const char* value, size_t size) {
  
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.zip)
}
inline ::std::string* Address::mutable_zip() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.zip)
  return zip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_zip() {
  // @@protoc_insertion_point(field_release:api.Address.zip)
  
  return zip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_zip(::std::string* zip) {
  if (zip != NULL) {
    
  } else {
    
  }
  zip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zip);
  // @@protoc_insertion_point(field_set_allocated:api.Address.zip)
}

// -------------------------------------------------------------------

// AppMetadata

// .common.String description = 1;
inline bool AppMetadata::has_description() const {
  return this != internal_default_instance() && description_ != NULL;
}
inline const ::common::String& AppMetadata::_internal_description() const {
  return *description_;
}
inline const ::common::String& AppMetadata::description() const {
  const ::common::String* p = description_;
  // @@protoc_insertion_point(field_get:api.AppMetadata.description)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* AppMetadata::release_description() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.description)
  
  ::common::String* temp = description_;
  description_ = NULL;
  return temp;
}
inline ::common::String* AppMetadata::mutable_description() {
  
  if (description_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.description)
  return description_;
}
inline void AppMetadata::set_allocated_description(::common::String* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(description_);
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.description)
}

// .common.String account_balance = 2;
inline bool AppMetadata::has_account_balance() const {
  return this != internal_default_instance() && account_balance_ != NULL;
}
inline const ::common::String& AppMetadata::_internal_account_balance() const {
  return *account_balance_;
}
inline const ::common::String& AppMetadata::account_balance() const {
  const ::common::String* p = account_balance_;
  // @@protoc_insertion_point(field_get:api.AppMetadata.account_balance)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* AppMetadata::release_account_balance() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.account_balance)
  
  ::common::String* temp = account_balance_;
  account_balance_ = NULL;
  return temp;
}
inline ::common::String* AppMetadata::mutable_account_balance() {
  
  if (account_balance_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    account_balance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.account_balance)
  return account_balance_;
}
inline void AppMetadata::set_allocated_account_balance(::common::String* account_balance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(account_balance_);
  }
  if (account_balance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      account_balance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, account_balance, submessage_arena);
    }
    
  } else {
    
  }
  account_balance_ = account_balance;
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.account_balance)
}

// .api.Plan plan = 3;
inline bool AppMetadata::has_plan() const {
  return this != internal_default_instance() && plan_ != NULL;
}
inline void AppMetadata::clear_plan() {
  if (GetArenaNoVirtual() == NULL && plan_ != NULL) {
    delete plan_;
  }
  plan_ = NULL;
}
inline const ::api::Plan& AppMetadata::_internal_plan() const {
  return *plan_;
}
inline const ::api::Plan& AppMetadata::plan() const {
  const ::api::Plan* p = plan_;
  // @@protoc_insertion_point(field_get:api.AppMetadata.plan)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Plan*>(
      &::api::_Plan_default_instance_);
}
inline ::api::Plan* AppMetadata::release_plan() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.plan)
  
  ::api::Plan* temp = plan_;
  plan_ = NULL;
  return temp;
}
inline ::api::Plan* AppMetadata::mutable_plan() {
  
  if (plan_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Plan>(GetArenaNoVirtual());
    plan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.plan)
  return plan_;
}
inline void AppMetadata::set_allocated_plan(::api::Plan* plan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete plan_;
  }
  if (plan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    
  } else {
    
  }
  plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.plan)
}

// .common.StringMap tags = 4;
inline bool AppMetadata::has_tags() const {
  return this != internal_default_instance() && tags_ != NULL;
}
inline const ::common::StringMap& AppMetadata::_internal_tags() const {
  return *tags_;
}
inline const ::common::StringMap& AppMetadata::tags() const {
  const ::common::StringMap* p = tags_;
  // @@protoc_insertion_point(field_get:api.AppMetadata.tags)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* AppMetadata::release_tags() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.tags)
  
  ::common::StringMap* temp = tags_;
  tags_ = NULL;
  return temp;
}
inline ::common::StringMap* AppMetadata::mutable_tags() {
  
  if (tags_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    tags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.tags)
  return tags_;
}
inline void AppMetadata::set_allocated_tags(::common::StringMap* tags) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tags_);
  }
  if (tags) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tags = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tags, submessage_arena);
    }
    
  } else {
    
  }
  tags_ = tags;
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.tags)
}

// -------------------------------------------------------------------

// Plan

// .common.Identifier id = 1;
inline bool Plan::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& Plan::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& Plan::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.Plan.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* Plan::release_id() {
  // @@protoc_insertion_point(field_release:api.Plan.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* Plan::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Plan.id)
  return id_;
}
inline void Plan::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.Plan.id)
}

// bool active = 2;
inline void Plan::clear_active() {
  active_ = false;
}
inline bool Plan::active() const {
  // @@protoc_insertion_point(field_get:api.Plan.active)
  return active_;
}
inline void Plan::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:api.Plan.active)
}

// .common.Int64 amount = 3;
inline bool Plan::has_amount() const {
  return this != internal_default_instance() && amount_ != NULL;
}
inline const ::common::Int64& Plan::_internal_amount() const {
  return *amount_;
}
inline const ::common::Int64& Plan::amount() const {
  const ::common::Int64* p = amount_;
  // @@protoc_insertion_point(field_get:api.Plan.amount)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Int64*>(
      &::common::_Int64_default_instance_);
}
inline ::common::Int64* Plan::release_amount() {
  // @@protoc_insertion_point(field_release:api.Plan.amount)
  
  ::common::Int64* temp = amount_;
  amount_ = NULL;
  return temp;
}
inline ::common::Int64* Plan::mutable_amount() {
  
  if (amount_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Int64>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Plan.amount)
  return amount_;
}
inline void Plan::set_allocated_amount(::common::Int64* amount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(amount_);
  }
  if (amount) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      amount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:api.Plan.amount)
}

// .api.BillingInterval interval = 4;
inline void Plan::clear_interval() {
  interval_ = 0;
}
inline ::api::BillingInterval Plan::interval() const {
  // @@protoc_insertion_point(field_get:api.Plan.interval)
  return static_cast< ::api::BillingInterval >(interval_);
}
inline void Plan::set_interval(::api::BillingInterval value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:api.Plan.interval)
}

// .common.String nickname = 5;
inline bool Plan::has_nickname() const {
  return this != internal_default_instance() && nickname_ != NULL;
}
inline const ::common::String& Plan::_internal_nickname() const {
  return *nickname_;
}
inline const ::common::String& Plan::nickname() const {
  const ::common::String* p = nickname_;
  // @@protoc_insertion_point(field_get:api.Plan.nickname)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Plan::release_nickname() {
  // @@protoc_insertion_point(field_release:api.Plan.nickname)
  
  ::common::String* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline ::common::String* Plan::mutable_nickname() {
  
  if (nickname_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    nickname_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Plan.nickname)
  return nickname_;
}
inline void Plan::set_allocated_nickname(::common::String* nickname) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(nickname_);
  }
  if (nickname) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nickname = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nickname, submessage_arena);
    }
    
  } else {
    
  }
  nickname_ = nickname;
  // @@protoc_insertion_point(field_set_allocated:api.Plan.nickname)
}

// .api.Product product = 6;
inline bool Plan::has_product() const {
  return this != internal_default_instance() && product_ != NULL;
}
inline void Plan::clear_product() {
  if (GetArenaNoVirtual() == NULL && product_ != NULL) {
    delete product_;
  }
  product_ = NULL;
}
inline const ::api::Product& Plan::_internal_product() const {
  return *product_;
}
inline const ::api::Product& Plan::product() const {
  const ::api::Product* p = product_;
  // @@protoc_insertion_point(field_get:api.Plan.product)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Product*>(
      &::api::_Product_default_instance_);
}
inline ::api::Product* Plan::release_product() {
  // @@protoc_insertion_point(field_release:api.Plan.product)
  
  ::api::Product* temp = product_;
  product_ = NULL;
  return temp;
}
inline ::api::Product* Plan::mutable_product() {
  
  if (product_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Product>(GetArenaNoVirtual());
    product_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Plan.product)
  return product_;
}
inline void Plan::set_allocated_product(::api::Product* product) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_;
  }
  if (product) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:api.Plan.product)
}

// -------------------------------------------------------------------

// Product

// .common.Identifier id = 1;
inline bool Product::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& Product::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& Product::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.Product.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* Product::release_id() {
  // @@protoc_insertion_point(field_release:api.Product.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* Product::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Product.id)
  return id_;
}
inline void Product::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.Product.id)
}

// .common.String description = 2;
inline bool Product::has_description() const {
  return this != internal_default_instance() && description_ != NULL;
}
inline const ::common::String& Product::_internal_description() const {
  return *description_;
}
inline const ::common::String& Product::description() const {
  const ::common::String* p = description_;
  // @@protoc_insertion_point(field_get:api.Product.description)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Product::release_description() {
  // @@protoc_insertion_point(field_release:api.Product.description)
  
  ::common::String* temp = description_;
  description_ = NULL;
  return temp;
}
inline ::common::String* Product::mutable_description() {
  
  if (description_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Product.description)
  return description_;
}
inline void Product::set_allocated_description(::common::String* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(description_);
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:api.Product.description)
}

// .common.String url = 3;
inline bool Product::has_url() const {
  return this != internal_default_instance() && url_ != NULL;
}
inline const ::common::String& Product::_internal_url() const {
  return *url_;
}
inline const ::common::String& Product::url() const {
  const ::common::String* p = url_;
  // @@protoc_insertion_point(field_get:api.Product.url)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Product::release_url() {
  // @@protoc_insertion_point(field_release:api.Product.url)
  
  ::common::String* temp = url_;
  url_ = NULL;
  return temp;
}
inline ::common::String* Product::mutable_url() {
  
  if (url_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Product.url)
  return url_;
}
inline void Product::set_allocated_url(::common::String* url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(url_);
  }
  if (url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, url, submessage_arena);
    }
    
  } else {
    
  }
  url_ = url;
  // @@protoc_insertion_point(field_set_allocated:api.Product.url)
}

// -------------------------------------------------------------------

// Identity

// .common.String connection = 1;
inline bool Identity::has_connection() const {
  return this != internal_default_instance() && connection_ != NULL;
}
inline const ::common::String& Identity::_internal_connection() const {
  return *connection_;
}
inline const ::common::String& Identity::connection() const {
  const ::common::String* p = connection_;
  // @@protoc_insertion_point(field_get:api.Identity.connection)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Identity::release_connection() {
  // @@protoc_insertion_point(field_release:api.Identity.connection)
  
  ::common::String* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline ::common::String* Identity::mutable_connection() {
  
  if (connection_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    connection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Identity.connection)
  return connection_;
}
inline void Identity::set_allocated_connection(::common::String* connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(connection_);
  }
  if (connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:api.Identity.connection)
}

// .common.Identifier user_id = 2;
inline bool Identity::has_user_id() const {
  return this != internal_default_instance() && user_id_ != NULL;
}
inline const ::common::Identifier& Identity::_internal_user_id() const {
  return *user_id_;
}
inline const ::common::Identifier& Identity::user_id() const {
  const ::common::Identifier* p = user_id_;
  // @@protoc_insertion_point(field_get:api.Identity.user_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* Identity::release_user_id() {
  // @@protoc_insertion_point(field_release:api.Identity.user_id)
  
  ::common::Identifier* temp = user_id_;
  user_id_ = NULL;
  return temp;
}
inline ::common::Identifier* Identity::mutable_user_id() {
  
  if (user_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    user_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Identity.user_id)
  return user_id_;
}
inline void Identity::set_allocated_user_id(::common::Identifier* user_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_id_);
  }
  if (user_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_id, submessage_arena);
    }
    
  } else {
    
  }
  user_id_ = user_id;
  // @@protoc_insertion_point(field_set_allocated:api.Identity.user_id)
}

// .common.String provider = 3;
inline bool Identity::has_provider() const {
  return this != internal_default_instance() && provider_ != NULL;
}
inline const ::common::String& Identity::_internal_provider() const {
  return *provider_;
}
inline const ::common::String& Identity::provider() const {
  const ::common::String* p = provider_;
  // @@protoc_insertion_point(field_get:api.Identity.provider)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Identity::release_provider() {
  // @@protoc_insertion_point(field_release:api.Identity.provider)
  
  ::common::String* temp = provider_;
  provider_ = NULL;
  return temp;
}
inline ::common::String* Identity::mutable_provider() {
  
  if (provider_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    provider_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Identity.provider)
  return provider_;
}
inline void Identity::set_allocated_provider(::common::String* provider) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(provider_);
  }
  if (provider) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      provider = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    
  } else {
    
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:api.Identity.provider)
}

// bool isSocial = 4;
inline void Identity::clear_issocial() {
  issocial_ = false;
}
inline bool Identity::issocial() const {
  // @@protoc_insertion_point(field_get:api.Identity.isSocial)
  return issocial_;
}
inline void Identity::set_issocial(bool value) {
  
  issocial_ = value;
  // @@protoc_insertion_point(field_set:api.Identity.isSocial)
}

// -------------------------------------------------------------------

// Role

// .common.Identifier id = 1;
inline bool Role::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& Role::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& Role::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.Role.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* Role::release_id() {
  // @@protoc_insertion_point(field_release:api.Role.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* Role::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Role.id)
  return id_;
}
inline void Role::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.Role.id)
}

// .common.String name = 2;
inline bool Role::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::common::String& Role::_internal_name() const {
  return *name_;
}
inline const ::common::String& Role::name() const {
  const ::common::String* p = name_;
  // @@protoc_insertion_point(field_get:api.Role.name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Role::release_name() {
  // @@protoc_insertion_point(field_release:api.Role.name)
  
  ::common::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::common::String* Role::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Role.name)
  return name_;
}
inline void Role::set_allocated_name(::common::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:api.Role.name)
}

// .common.String description = 3;
inline bool Role::has_description() const {
  return this != internal_default_instance() && description_ != NULL;
}
inline const ::common::String& Role::_internal_description() const {
  return *description_;
}
inline const ::common::String& Role::description() const {
  const ::common::String* p = description_;
  // @@protoc_insertion_point(field_get:api.Role.description)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Role::release_description() {
  // @@protoc_insertion_point(field_release:api.Role.description)
  
  ::common::String* temp = description_;
  description_ = NULL;
  return temp;
}
inline ::common::String* Role::mutable_description() {
  
  if (description_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Role.description)
  return description_;
}
inline void Role::set_allocated_description(::common::String* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(description_);
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:api.Role.description)
}

// -------------------------------------------------------------------

// OAuth2

// .common.String client_id = 1;
inline bool OAuth2::has_client_id() const {
  return this != internal_default_instance() && client_id_ != NULL;
}
inline const ::common::String& OAuth2::_internal_client_id() const {
  return *client_id_;
}
inline const ::common::String& OAuth2::client_id() const {
  const ::common::String* p = client_id_;
  // @@protoc_insertion_point(field_get:api.OAuth2.client_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* OAuth2::release_client_id() {
  // @@protoc_insertion_point(field_release:api.OAuth2.client_id)
  
  ::common::String* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
inline ::common::String* OAuth2::mutable_client_id() {
  
  if (client_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    client_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.OAuth2.client_id)
  return client_id_;
}
inline void OAuth2::set_allocated_client_id(::common::String* client_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:api.OAuth2.client_id)
}

// .common.String client_secret = 2;
inline bool OAuth2::has_client_secret() const {
  return this != internal_default_instance() && client_secret_ != NULL;
}
inline const ::common::String& OAuth2::_internal_client_secret() const {
  return *client_secret_;
}
inline const ::common::String& OAuth2::client_secret() const {
  const ::common::String* p = client_secret_;
  // @@protoc_insertion_point(field_get:api.OAuth2.client_secret)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* OAuth2::release_client_secret() {
  // @@protoc_insertion_point(field_release:api.OAuth2.client_secret)
  
  ::common::String* temp = client_secret_;
  client_secret_ = NULL;
  return temp;
}
inline ::common::String* OAuth2::mutable_client_secret() {
  
  if (client_secret_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    client_secret_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.OAuth2.client_secret)
  return client_secret_;
}
inline void OAuth2::set_allocated_client_secret(::common::String* client_secret) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_secret_);
  }
  if (client_secret) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_secret = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_secret, submessage_arena);
    }
    
  } else {
    
  }
  client_secret_ = client_secret;
  // @@protoc_insertion_point(field_set_allocated:api.OAuth2.client_secret)
}

// .common.String token_url = 3;
inline bool OAuth2::has_token_url() const {
  return this != internal_default_instance() && token_url_ != NULL;
}
inline const ::common::String& OAuth2::_internal_token_url() const {
  return *token_url_;
}
inline const ::common::String& OAuth2::token_url() const {
  const ::common::String* p = token_url_;
  // @@protoc_insertion_point(field_get:api.OAuth2.token_url)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* OAuth2::release_token_url() {
  // @@protoc_insertion_point(field_release:api.OAuth2.token_url)
  
  ::common::String* temp = token_url_;
  token_url_ = NULL;
  return temp;
}
inline ::common::String* OAuth2::mutable_token_url() {
  
  if (token_url_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    token_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.OAuth2.token_url)
  return token_url_;
}
inline void OAuth2::set_allocated_token_url(::common::String* token_url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(token_url_);
  }
  if (token_url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      token_url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, token_url, submessage_arena);
    }
    
  } else {
    
  }
  token_url_ = token_url;
  // @@protoc_insertion_point(field_set_allocated:api.OAuth2.token_url)
}

// .common.String auth_url = 4;
inline bool OAuth2::has_auth_url() const {
  return this != internal_default_instance() && auth_url_ != NULL;
}
inline const ::common::String& OAuth2::_internal_auth_url() const {
  return *auth_url_;
}
inline const ::common::String& OAuth2::auth_url() const {
  const ::common::String* p = auth_url_;
  // @@protoc_insertion_point(field_get:api.OAuth2.auth_url)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* OAuth2::release_auth_url() {
  // @@protoc_insertion_point(field_release:api.OAuth2.auth_url)
  
  ::common::String* temp = auth_url_;
  auth_url_ = NULL;
  return temp;
}
inline ::common::String* OAuth2::mutable_auth_url() {
  
  if (auth_url_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    auth_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.OAuth2.auth_url)
  return auth_url_;
}
inline void OAuth2::set_allocated_auth_url(::common::String* auth_url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_url_);
  }
  if (auth_url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      auth_url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth_url, submessage_arena);
    }
    
  } else {
    
  }
  auth_url_ = auth_url;
  // @@protoc_insertion_point(field_set_allocated:api.OAuth2.auth_url)
}

// .common.StringArray scopes = 5;
inline bool OAuth2::has_scopes() const {
  return this != internal_default_instance() && scopes_ != NULL;
}
inline const ::common::StringArray& OAuth2::_internal_scopes() const {
  return *scopes_;
}
inline const ::common::StringArray& OAuth2::scopes() const {
  const ::common::StringArray* p = scopes_;
  // @@protoc_insertion_point(field_get:api.OAuth2.scopes)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* OAuth2::release_scopes() {
  // @@protoc_insertion_point(field_release:api.OAuth2.scopes)
  
  ::common::StringArray* temp = scopes_;
  scopes_ = NULL;
  return temp;
}
inline ::common::StringArray* OAuth2::mutable_scopes() {
  
  if (scopes_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    scopes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.OAuth2.scopes)
  return scopes_;
}
inline void OAuth2::set_allocated_scopes(::common::StringArray* scopes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scopes_);
  }
  if (scopes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scopes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scopes, submessage_arena);
    }
    
  } else {
    
  }
  scopes_ = scopes;
  // @@protoc_insertion_point(field_set_allocated:api.OAuth2.scopes)
}

// .common.String redirect = 6;
inline bool OAuth2::has_redirect() const {
  return this != internal_default_instance() && redirect_ != NULL;
}
inline const ::common::String& OAuth2::_internal_redirect() const {
  return *redirect_;
}
inline const ::common::String& OAuth2::redirect() const {
  const ::common::String* p = redirect_;
  // @@protoc_insertion_point(field_get:api.OAuth2.redirect)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* OAuth2::release_redirect() {
  // @@protoc_insertion_point(field_release:api.OAuth2.redirect)
  
  ::common::String* temp = redirect_;
  redirect_ = NULL;
  return temp;
}
inline ::common::String* OAuth2::mutable_redirect() {
  
  if (redirect_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    redirect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.OAuth2.redirect)
  return redirect_;
}
inline void OAuth2::set_allocated_redirect(::common::String* redirect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(redirect_);
  }
  if (redirect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      redirect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, redirect, submessage_arena);
    }
    
  } else {
    
  }
  redirect_ = redirect;
  // @@protoc_insertion_point(field_set_allocated:api.OAuth2.redirect)
}

// .common.String code = 7;
inline bool OAuth2::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline const ::common::String& OAuth2::_internal_code() const {
  return *code_;
}
inline const ::common::String& OAuth2::code() const {
  const ::common::String* p = code_;
  // @@protoc_insertion_point(field_get:api.OAuth2.code)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* OAuth2::release_code() {
  // @@protoc_insertion_point(field_release:api.OAuth2.code)
  
  ::common::String* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::common::String* OAuth2::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.OAuth2.code)
  return code_;
}
inline void OAuth2::set_allocated_code(::common::String* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(code_);
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:api.OAuth2.code)
}

// -------------------------------------------------------------------

// ClientCredentials

// .common.String client_id = 1;
inline bool ClientCredentials::has_client_id() const {
  return this != internal_default_instance() && client_id_ != NULL;
}
inline const ::common::String& ClientCredentials::_internal_client_id() const {
  return *client_id_;
}
inline const ::common::String& ClientCredentials::client_id() const {
  const ::common::String* p = client_id_;
  // @@protoc_insertion_point(field_get:api.ClientCredentials.client_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* ClientCredentials::release_client_id() {
  // @@protoc_insertion_point(field_release:api.ClientCredentials.client_id)
  
  ::common::String* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
inline ::common::String* ClientCredentials::mutable_client_id() {
  
  if (client_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    client_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.ClientCredentials.client_id)
  return client_id_;
}
inline void ClientCredentials::set_allocated_client_id(::common::String* client_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:api.ClientCredentials.client_id)
}

// .common.String client_secret = 2;
inline bool ClientCredentials::has_client_secret() const {
  return this != internal_default_instance() && client_secret_ != NULL;
}
inline const ::common::String& ClientCredentials::_internal_client_secret() const {
  return *client_secret_;
}
inline const ::common::String& ClientCredentials::client_secret() const {
  const ::common::String* p = client_secret_;
  // @@protoc_insertion_point(field_get:api.ClientCredentials.client_secret)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* ClientCredentials::release_client_secret() {
  // @@protoc_insertion_point(field_release:api.ClientCredentials.client_secret)
  
  ::common::String* temp = client_secret_;
  client_secret_ = NULL;
  return temp;
}
inline ::common::String* ClientCredentials::mutable_client_secret() {
  
  if (client_secret_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    client_secret_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.ClientCredentials.client_secret)
  return client_secret_;
}
inline void ClientCredentials::set_allocated_client_secret(::common::String* client_secret) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_secret_);
  }
  if (client_secret) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_secret = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_secret, submessage_arena);
    }
    
  } else {
    
  }
  client_secret_ = client_secret;
  // @@protoc_insertion_point(field_set_allocated:api.ClientCredentials.client_secret)
}

// .common.String token_url = 3;
inline bool ClientCredentials::has_token_url() const {
  return this != internal_default_instance() && token_url_ != NULL;
}
inline const ::common::String& ClientCredentials::_internal_token_url() const {
  return *token_url_;
}
inline const ::common::String& ClientCredentials::token_url() const {
  const ::common::String* p = token_url_;
  // @@protoc_insertion_point(field_get:api.ClientCredentials.token_url)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* ClientCredentials::release_token_url() {
  // @@protoc_insertion_point(field_release:api.ClientCredentials.token_url)
  
  ::common::String* temp = token_url_;
  token_url_ = NULL;
  return temp;
}
inline ::common::String* ClientCredentials::mutable_token_url() {
  
  if (token_url_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    token_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.ClientCredentials.token_url)
  return token_url_;
}
inline void ClientCredentials::set_allocated_token_url(::common::String* token_url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(token_url_);
  }
  if (token_url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      token_url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, token_url, submessage_arena);
    }
    
  } else {
    
  }
  token_url_ = token_url;
  // @@protoc_insertion_point(field_set_allocated:api.ClientCredentials.token_url)
}

// .common.StringArray scopes = 4;
inline bool ClientCredentials::has_scopes() const {
  return this != internal_default_instance() && scopes_ != NULL;
}
inline const ::common::StringArray& ClientCredentials::_internal_scopes() const {
  return *scopes_;
}
inline const ::common::StringArray& ClientCredentials::scopes() const {
  const ::common::StringArray* p = scopes_;
  // @@protoc_insertion_point(field_get:api.ClientCredentials.scopes)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* ClientCredentials::release_scopes() {
  // @@protoc_insertion_point(field_release:api.ClientCredentials.scopes)
  
  ::common::StringArray* temp = scopes_;
  scopes_ = NULL;
  return temp;
}
inline ::common::StringArray* ClientCredentials::mutable_scopes() {
  
  if (scopes_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    scopes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.ClientCredentials.scopes)
  return scopes_;
}
inline void ClientCredentials::set_allocated_scopes(::common::StringArray* scopes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scopes_);
  }
  if (scopes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scopes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scopes, submessage_arena);
    }
    
  } else {
    
  }
  scopes_ = scopes;
  // @@protoc_insertion_point(field_set_allocated:api.ClientCredentials.scopes)
}

// .common.StringMap endpoint_params = 5;
inline bool ClientCredentials::has_endpoint_params() const {
  return this != internal_default_instance() && endpoint_params_ != NULL;
}
inline const ::common::StringMap& ClientCredentials::_internal_endpoint_params() const {
  return *endpoint_params_;
}
inline const ::common::StringMap& ClientCredentials::endpoint_params() const {
  const ::common::StringMap* p = endpoint_params_;
  // @@protoc_insertion_point(field_get:api.ClientCredentials.endpoint_params)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* ClientCredentials::release_endpoint_params() {
  // @@protoc_insertion_point(field_release:api.ClientCredentials.endpoint_params)
  
  ::common::StringMap* temp = endpoint_params_;
  endpoint_params_ = NULL;
  return temp;
}
inline ::common::StringMap* ClientCredentials::mutable_endpoint_params() {
  
  if (endpoint_params_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    endpoint_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.ClientCredentials.endpoint_params)
  return endpoint_params_;
}
inline void ClientCredentials::set_allocated_endpoint_params(::common::StringMap* endpoint_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(endpoint_params_);
  }
  if (endpoint_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      endpoint_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, endpoint_params, submessage_arena);
    }
    
  } else {
    
  }
  endpoint_params_ = endpoint_params;
  // @@protoc_insertion_point(field_set_allocated:api.ClientCredentials.endpoint_params)
}

// -------------------------------------------------------------------

// JWT

// .common.String email = 1;
inline bool JWT::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline const ::common::String& JWT::_internal_email() const {
  return *email_;
}
inline const ::common::String& JWT::email() const {
  const ::common::String* p = email_;
  // @@protoc_insertion_point(field_get:api.JWT.email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JWT::release_email() {
  // @@protoc_insertion_point(field_release:api.JWT.email)
  
  ::common::String* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::common::String* JWT::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JWT.email)
  return email_;
}
inline void JWT::set_allocated_email(::common::String* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(email_);
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.JWT.email)
}

// bytes private_key = 2;
inline void JWT::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JWT::private_key() const {
  // @@protoc_insertion_point(field_get:api.JWT.private_key)
  return private_key_.GetNoArena();
}
inline void JWT::set_private_key(const ::std::string& value) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.JWT.private_key)
}
#if LANG_CXX11
inline void JWT::set_private_key(::std::string&& value) {
  
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.JWT.private_key)
}
#endif
inline void JWT::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.JWT.private_key)
}
inline void JWT::set_private_key(const void* value, size_t size) {
  
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.JWT.private_key)
}
inline ::std::string* JWT::mutable_private_key() {
  
  // @@protoc_insertion_point(field_mutable:api.JWT.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JWT::release_private_key() {
  // @@protoc_insertion_point(field_release:api.JWT.private_key)
  
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JWT::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    
  } else {
    
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:api.JWT.private_key)
}

// .common.String prive_key_id = 3;
inline bool JWT::has_prive_key_id() const {
  return this != internal_default_instance() && prive_key_id_ != NULL;
}
inline const ::common::String& JWT::_internal_prive_key_id() const {
  return *prive_key_id_;
}
inline const ::common::String& JWT::prive_key_id() const {
  const ::common::String* p = prive_key_id_;
  // @@protoc_insertion_point(field_get:api.JWT.prive_key_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JWT::release_prive_key_id() {
  // @@protoc_insertion_point(field_release:api.JWT.prive_key_id)
  
  ::common::String* temp = prive_key_id_;
  prive_key_id_ = NULL;
  return temp;
}
inline ::common::String* JWT::mutable_prive_key_id() {
  
  if (prive_key_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    prive_key_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JWT.prive_key_id)
  return prive_key_id_;
}
inline void JWT::set_allocated_prive_key_id(::common::String* prive_key_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(prive_key_id_);
  }
  if (prive_key_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prive_key_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prive_key_id, submessage_arena);
    }
    
  } else {
    
  }
  prive_key_id_ = prive_key_id;
  // @@protoc_insertion_point(field_set_allocated:api.JWT.prive_key_id)
}

// .common.String subject = 4;
inline bool JWT::has_subject() const {
  return this != internal_default_instance() && subject_ != NULL;
}
inline const ::common::String& JWT::_internal_subject() const {
  return *subject_;
}
inline const ::common::String& JWT::subject() const {
  const ::common::String* p = subject_;
  // @@protoc_insertion_point(field_get:api.JWT.subject)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JWT::release_subject() {
  // @@protoc_insertion_point(field_release:api.JWT.subject)
  
  ::common::String* temp = subject_;
  subject_ = NULL;
  return temp;
}
inline ::common::String* JWT::mutable_subject() {
  
  if (subject_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    subject_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JWT.subject)
  return subject_;
}
inline void JWT::set_allocated_subject(::common::String* subject) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(subject_);
  }
  if (subject) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subject = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:api.JWT.subject)
}

// .common.StringArray scopes = 5;
inline bool JWT::has_scopes() const {
  return this != internal_default_instance() && scopes_ != NULL;
}
inline const ::common::StringArray& JWT::_internal_scopes() const {
  return *scopes_;
}
inline const ::common::StringArray& JWT::scopes() const {
  const ::common::StringArray* p = scopes_;
  // @@protoc_insertion_point(field_get:api.JWT.scopes)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* JWT::release_scopes() {
  // @@protoc_insertion_point(field_release:api.JWT.scopes)
  
  ::common::StringArray* temp = scopes_;
  scopes_ = NULL;
  return temp;
}
inline ::common::StringArray* JWT::mutable_scopes() {
  
  if (scopes_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    scopes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JWT.scopes)
  return scopes_;
}
inline void JWT::set_allocated_scopes(::common::StringArray* scopes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scopes_);
  }
  if (scopes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scopes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scopes, submessage_arena);
    }
    
  } else {
    
  }
  scopes_ = scopes;
  // @@protoc_insertion_point(field_set_allocated:api.JWT.scopes)
}

// .common.String token_url = 6;
inline bool JWT::has_token_url() const {
  return this != internal_default_instance() && token_url_ != NULL;
}
inline const ::common::String& JWT::_internal_token_url() const {
  return *token_url_;
}
inline const ::common::String& JWT::token_url() const {
  const ::common::String* p = token_url_;
  // @@protoc_insertion_point(field_get:api.JWT.token_url)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JWT::release_token_url() {
  // @@protoc_insertion_point(field_release:api.JWT.token_url)
  
  ::common::String* temp = token_url_;
  token_url_ = NULL;
  return temp;
}
inline ::common::String* JWT::mutable_token_url() {
  
  if (token_url_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    token_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JWT.token_url)
  return token_url_;
}
inline void JWT::set_allocated_token_url(::common::String* token_url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(token_url_);
  }
  if (token_url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      token_url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, token_url, submessage_arena);
    }
    
  } else {
    
  }
  token_url_ = token_url;
  // @@protoc_insertion_point(field_set_allocated:api.JWT.token_url)
}

// .common.String expires = 7;
inline bool JWT::has_expires() const {
  return this != internal_default_instance() && expires_ != NULL;
}
inline const ::common::String& JWT::_internal_expires() const {
  return *expires_;
}
inline const ::common::String& JWT::expires() const {
  const ::common::String* p = expires_;
  // @@protoc_insertion_point(field_get:api.JWT.expires)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JWT::release_expires() {
  // @@protoc_insertion_point(field_release:api.JWT.expires)
  
  ::common::String* temp = expires_;
  expires_ = NULL;
  return temp;
}
inline ::common::String* JWT::mutable_expires() {
  
  if (expires_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    expires_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JWT.expires)
  return expires_;
}
inline void JWT::set_allocated_expires(::common::String* expires) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expires_);
  }
  if (expires) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      expires = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expires, submessage_arena);
    }
    
  } else {
    
  }
  expires_ = expires;
  // @@protoc_insertion_point(field_set_allocated:api.JWT.expires)
}

// .common.String audience = 8;
inline bool JWT::has_audience() const {
  return this != internal_default_instance() && audience_ != NULL;
}
inline const ::common::String& JWT::_internal_audience() const {
  return *audience_;
}
inline const ::common::String& JWT::audience() const {
  const ::common::String* p = audience_;
  // @@protoc_insertion_point(field_get:api.JWT.audience)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JWT::release_audience() {
  // @@protoc_insertion_point(field_release:api.JWT.audience)
  
  ::common::String* temp = audience_;
  audience_ = NULL;
  return temp;
}
inline ::common::String* JWT::mutable_audience() {
  
  if (audience_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    audience_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JWT.audience)
  return audience_;
}
inline void JWT::set_allocated_audience(::common::String* audience) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(audience_);
  }
  if (audience) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      audience = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, audience, submessage_arena);
    }
    
  } else {
    
  }
  audience_ = audience;
  // @@protoc_insertion_point(field_set_allocated:api.JWT.audience)
}

// -------------------------------------------------------------------

// Query

// .common.String query = 4;
inline bool Query::has_query() const {
  return this != internal_default_instance() && query_ != NULL;
}
inline const ::common::String& Query::_internal_query() const {
  return *query_;
}
inline const ::common::String& Query::query() const {
  const ::common::String* p = query_;
  // @@protoc_insertion_point(field_get:api.Query.query)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Query::release_query() {
  // @@protoc_insertion_point(field_release:api.Query.query)
  
  ::common::String* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::common::String* Query::mutable_query() {
  
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Query.query)
  return query_;
}
inline void Query::set_allocated_query(::common::String* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_);
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:api.Query.query)
}

// .common.String fields = 5;
inline bool Query::has_fields() const {
  return this != internal_default_instance() && fields_ != NULL;
}
inline const ::common::String& Query::_internal_fields() const {
  return *fields_;
}
inline const ::common::String& Query::fields() const {
  const ::common::String* p = fields_;
  // @@protoc_insertion_point(field_get:api.Query.fields)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Query::release_fields() {
  // @@protoc_insertion_point(field_release:api.Query.fields)
  
  ::common::String* temp = fields_;
  fields_ = NULL;
  return temp;
}
inline ::common::String* Query::mutable_fields() {
  
  if (fields_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Query.fields)
  return fields_;
}
inline void Query::set_allocated_fields(::common::String* fields) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fields_);
  }
  if (fields) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fields = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fields, submessage_arena);
    }
    
  } else {
    
  }
  fields_ = fields;
  // @@protoc_insertion_point(field_set_allocated:api.Query.fields)
}

// -------------------------------------------------------------------

// Event

// .common.String date = 1;
inline bool Event::has_date() const {
  return this != internal_default_instance() && date_ != NULL;
}
inline const ::common::String& Event::_internal_date() const {
  return *date_;
}
inline const ::common::String& Event::date() const {
  const ::common::String* p = date_;
  // @@protoc_insertion_point(field_get:api.Event.date)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Event::release_date() {
  // @@protoc_insertion_point(field_release:api.Event.date)
  
  ::common::String* temp = date_;
  date_ = NULL;
  return temp;
}
inline ::common::String* Event::mutable_date() {
  
  if (date_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Event.date)
  return date_;
}
inline void Event::set_allocated_date(::common::String* date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(date_);
  }
  if (date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:api.Event.date)
}

// .common.String type = 2;
inline bool Event::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline const ::common::String& Event::_internal_type() const {
  return *type_;
}
inline const ::common::String& Event::type() const {
  const ::common::String* p = type_;
  // @@protoc_insertion_point(field_get:api.Event.type)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Event::release_type() {
  // @@protoc_insertion_point(field_release:api.Event.type)
  
  ::common::String* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::common::String* Event::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Event.type)
  return type_;
}
inline void Event::set_allocated_type(::common::String* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:api.Event.type)
}

// .common.String client_id = 3;
inline bool Event::has_client_id() const {
  return this != internal_default_instance() && client_id_ != NULL;
}
inline const ::common::String& Event::_internal_client_id() const {
  return *client_id_;
}
inline const ::common::String& Event::client_id() const {
  const ::common::String* p = client_id_;
  // @@protoc_insertion_point(field_get:api.Event.client_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Event::release_client_id() {
  // @@protoc_insertion_point(field_release:api.Event.client_id)
  
  ::common::String* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
inline ::common::String* Event::mutable_client_id() {
  
  if (client_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    client_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Event.client_id)
  return client_id_;
}
inline void Event::set_allocated_client_id(::common::String* client_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:api.Event.client_id)
}

// .common.String client_name = 4;
inline bool Event::has_client_name() const {
  return this != internal_default_instance() && client_name_ != NULL;
}
inline const ::common::String& Event::_internal_client_name() const {
  return *client_name_;
}
inline const ::common::String& Event::client_name() const {
  const ::common::String* p = client_name_;
  // @@protoc_insertion_point(field_get:api.Event.client_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Event::release_client_name() {
  // @@protoc_insertion_point(field_release:api.Event.client_name)
  
  ::common::String* temp = client_name_;
  client_name_ = NULL;
  return temp;
}
inline ::common::String* Event::mutable_client_name() {
  
  if (client_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    client_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Event.client_name)
  return client_name_;
}
inline void Event::set_allocated_client_name(::common::String* client_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_name_);
  }
  if (client_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_name, submessage_arena);
    }
    
  } else {
    
  }
  client_name_ = client_name;
  // @@protoc_insertion_point(field_set_allocated:api.Event.client_name)
}

// .common.String ip = 5;
inline bool Event::has_ip() const {
  return this != internal_default_instance() && ip_ != NULL;
}
inline const ::common::String& Event::_internal_ip() const {
  return *ip_;
}
inline const ::common::String& Event::ip() const {
  const ::common::String* p = ip_;
  // @@protoc_insertion_point(field_get:api.Event.ip)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Event::release_ip() {
  // @@protoc_insertion_point(field_release:api.Event.ip)
  
  ::common::String* temp = ip_;
  ip_ = NULL;
  return temp;
}
inline ::common::String* Event::mutable_ip() {
  
  if (ip_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    ip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Event.ip)
  return ip_;
}
inline void Event::set_allocated_ip(::common::String* ip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ip_);
  }
  if (ip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip, submessage_arena);
    }
    
  } else {
    
  }
  ip_ = ip;
  // @@protoc_insertion_point(field_set_allocated:api.Event.ip)
}

// .common.String location_info = 6;
inline bool Event::has_location_info() const {
  return this != internal_default_instance() && location_info_ != NULL;
}
inline const ::common::String& Event::_internal_location_info() const {
  return *location_info_;
}
inline const ::common::String& Event::location_info() const {
  const ::common::String* p = location_info_;
  // @@protoc_insertion_point(field_get:api.Event.location_info)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Event::release_location_info() {
  // @@protoc_insertion_point(field_release:api.Event.location_info)
  
  ::common::String* temp = location_info_;
  location_info_ = NULL;
  return temp;
}
inline ::common::String* Event::mutable_location_info() {
  
  if (location_info_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    location_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Event.location_info)
  return location_info_;
}
inline void Event::set_allocated_location_info(::common::String* location_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_info_);
  }
  if (location_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location_info, submessage_arena);
    }
    
  } else {
    
  }
  location_info_ = location_info;
  // @@protoc_insertion_point(field_set_allocated:api.Event.location_info)
}

// .common.String details = 7;
inline bool Event::has_details() const {
  return this != internal_default_instance() && details_ != NULL;
}
inline const ::common::String& Event::_internal_details() const {
  return *details_;
}
inline const ::common::String& Event::details() const {
  const ::common::String* p = details_;
  // @@protoc_insertion_point(field_get:api.Event.details)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Event::release_details() {
  // @@protoc_insertion_point(field_release:api.Event.details)
  
  ::common::String* temp = details_;
  details_ = NULL;
  return temp;
}
inline ::common::String* Event::mutable_details() {
  
  if (details_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Event.details)
  return details_;
}
inline void Event::set_allocated_details(::common::String* details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(details_);
  }
  if (details) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:api.Event.details)
}

// .common.String user_id = 8;
inline bool Event::has_user_id() const {
  return this != internal_default_instance() && user_id_ != NULL;
}
inline const ::common::String& Event::_internal_user_id() const {
  return *user_id_;
}
inline const ::common::String& Event::user_id() const {
  const ::common::String* p = user_id_;
  // @@protoc_insertion_point(field_get:api.Event.user_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Event::release_user_id() {
  // @@protoc_insertion_point(field_release:api.Event.user_id)
  
  ::common::String* temp = user_id_;
  user_id_ = NULL;
  return temp;
}
inline ::common::String* Event::mutable_user_id() {
  
  if (user_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    user_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Event.user_id)
  return user_id_;
}
inline void Event::set_allocated_user_id(::common::String* user_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_id_);
  }
  if (user_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_id, submessage_arena);
    }
    
  } else {
    
  }
  user_id_ = user_id;
  // @@protoc_insertion_point(field_set_allocated:api.Event.user_id)
}

// .common.StringMap annotations = 9;
inline bool Event::has_annotations() const {
  return this != internal_default_instance() && annotations_ != NULL;
}
inline const ::common::StringMap& Event::_internal_annotations() const {
  return *annotations_;
}
inline const ::common::StringMap& Event::annotations() const {
  const ::common::StringMap* p = annotations_;
  // @@protoc_insertion_point(field_get:api.Event.annotations)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* Event::release_annotations() {
  // @@protoc_insertion_point(field_release:api.Event.annotations)
  
  ::common::StringMap* temp = annotations_;
  annotations_ = NULL;
  return temp;
}
inline ::common::StringMap* Event::mutable_annotations() {
  
  if (annotations_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Event.annotations)
  return annotations_;
}
inline void Event::set_allocated_annotations(::common::StringMap* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:api.Event.annotations)
}

// -------------------------------------------------------------------

// EventQuery

// string date = 1;
inline void EventQuery::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventQuery::date() const {
  // @@protoc_insertion_point(field_get:api.EventQuery.date)
  return date_.GetNoArena();
}
inline void EventQuery::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EventQuery.date)
}
#if LANG_CXX11
inline void EventQuery::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EventQuery.date)
}
#endif
inline void EventQuery::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EventQuery.date)
}
inline void EventQuery::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EventQuery.date)
}
inline ::std::string* EventQuery::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:api.EventQuery.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventQuery::release_date() {
  // @@protoc_insertion_point(field_release:api.EventQuery.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventQuery::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:api.EventQuery.date)
}

// string type = 2;
inline void EventQuery::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventQuery::type() const {
  // @@protoc_insertion_point(field_get:api.EventQuery.type)
  return type_.GetNoArena();
}
inline void EventQuery::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EventQuery.type)
}
#if LANG_CXX11
inline void EventQuery::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EventQuery.type)
}
#endif
inline void EventQuery::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EventQuery.type)
}
inline void EventQuery::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EventQuery.type)
}
inline ::std::string* EventQuery::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:api.EventQuery.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventQuery::release_type() {
  // @@protoc_insertion_point(field_release:api.EventQuery.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventQuery::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:api.EventQuery.type)
}

// string client_id = 3;
inline void EventQuery::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventQuery::client_id() const {
  // @@protoc_insertion_point(field_get:api.EventQuery.client_id)
  return client_id_.GetNoArena();
}
inline void EventQuery::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EventQuery.client_id)
}
#if LANG_CXX11
inline void EventQuery::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EventQuery.client_id)
}
#endif
inline void EventQuery::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EventQuery.client_id)
}
inline void EventQuery::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EventQuery.client_id)
}
inline ::std::string* EventQuery::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:api.EventQuery.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventQuery::release_client_id() {
  // @@protoc_insertion_point(field_release:api.EventQuery.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventQuery::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:api.EventQuery.client_id)
}

// string user_id = 4;
inline void EventQuery::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventQuery::user_id() const {
  // @@protoc_insertion_point(field_get:api.EventQuery.user_id)
  return user_id_.GetNoArena();
}
inline void EventQuery::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EventQuery.user_id)
}
#if LANG_CXX11
inline void EventQuery::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EventQuery.user_id)
}
#endif
inline void EventQuery::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EventQuery.user_id)
}
inline void EventQuery::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EventQuery.user_id)
}
inline ::std::string* EventQuery::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:api.EventQuery.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventQuery::release_user_id() {
  // @@protoc_insertion_point(field_release:api.EventQuery.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventQuery::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:api.EventQuery.user_id)
}

// -------------------------------------------------------------------

// JSONWebKeys

// .common.String kty = 1;
inline bool JSONWebKeys::has_kty() const {
  return this != internal_default_instance() && kty_ != NULL;
}
inline const ::common::String& JSONWebKeys::_internal_kty() const {
  return *kty_;
}
inline const ::common::String& JSONWebKeys::kty() const {
  const ::common::String* p = kty_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.kty)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JSONWebKeys::release_kty() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.kty)
  
  ::common::String* temp = kty_;
  kty_ = NULL;
  return temp;
}
inline ::common::String* JSONWebKeys::mutable_kty() {
  
  if (kty_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    kty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.kty)
  return kty_;
}
inline void JSONWebKeys::set_allocated_kty(::common::String* kty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kty_);
  }
  if (kty) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kty, submessage_arena);
    }
    
  } else {
    
  }
  kty_ = kty;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.kty)
}

// .common.Identifier kid = 2;
inline bool JSONWebKeys::has_kid() const {
  return this != internal_default_instance() && kid_ != NULL;
}
inline const ::common::Identifier& JSONWebKeys::_internal_kid() const {
  return *kid_;
}
inline const ::common::Identifier& JSONWebKeys::kid() const {
  const ::common::Identifier* p = kid_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.kid)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* JSONWebKeys::release_kid() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.kid)
  
  ::common::Identifier* temp = kid_;
  kid_ = NULL;
  return temp;
}
inline ::common::Identifier* JSONWebKeys::mutable_kid() {
  
  if (kid_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    kid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.kid)
  return kid_;
}
inline void JSONWebKeys::set_allocated_kid(::common::Identifier* kid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kid_);
  }
  if (kid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kid, submessage_arena);
    }
    
  } else {
    
  }
  kid_ = kid;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.kid)
}

// .common.String use = 3;
inline bool JSONWebKeys::has_use() const {
  return this != internal_default_instance() && use_ != NULL;
}
inline const ::common::String& JSONWebKeys::_internal_use() const {
  return *use_;
}
inline const ::common::String& JSONWebKeys::use() const {
  const ::common::String* p = use_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.use)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JSONWebKeys::release_use() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.use)
  
  ::common::String* temp = use_;
  use_ = NULL;
  return temp;
}
inline ::common::String* JSONWebKeys::mutable_use() {
  
  if (use_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    use_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.use)
  return use_;
}
inline void JSONWebKeys::set_allocated_use(::common::String* use) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_);
  }
  if (use) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      use = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use, submessage_arena);
    }
    
  } else {
    
  }
  use_ = use;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.use)
}

// .common.String n = 4;
inline bool JSONWebKeys::has_n() const {
  return this != internal_default_instance() && n_ != NULL;
}
inline const ::common::String& JSONWebKeys::_internal_n() const {
  return *n_;
}
inline const ::common::String& JSONWebKeys::n() const {
  const ::common::String* p = n_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.n)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JSONWebKeys::release_n() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.n)
  
  ::common::String* temp = n_;
  n_ = NULL;
  return temp;
}
inline ::common::String* JSONWebKeys::mutable_n() {
  
  if (n_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    n_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.n)
  return n_;
}
inline void JSONWebKeys::set_allocated_n(::common::String* n) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(n_);
  }
  if (n) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      n = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, n, submessage_arena);
    }
    
  } else {
    
  }
  n_ = n;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.n)
}

// .common.String e = 5;
inline bool JSONWebKeys::has_e() const {
  return this != internal_default_instance() && e_ != NULL;
}
inline const ::common::String& JSONWebKeys::_internal_e() const {
  return *e_;
}
inline const ::common::String& JSONWebKeys::e() const {
  const ::common::String* p = e_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.e)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JSONWebKeys::release_e() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.e)
  
  ::common::String* temp = e_;
  e_ = NULL;
  return temp;
}
inline ::common::String* JSONWebKeys::mutable_e() {
  
  if (e_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    e_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.e)
  return e_;
}
inline void JSONWebKeys::set_allocated_e(::common::String* e) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(e_);
  }
  if (e) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      e = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, e, submessage_arena);
    }
    
  } else {
    
  }
  e_ = e;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.e)
}

// .common.StringArray x5c = 6;
inline bool JSONWebKeys::has_x5c() const {
  return this != internal_default_instance() && x5c_ != NULL;
}
inline const ::common::StringArray& JSONWebKeys::_internal_x5c() const {
  return *x5c_;
}
inline const ::common::StringArray& JSONWebKeys::x5c() const {
  const ::common::StringArray* p = x5c_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.x5c)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* JSONWebKeys::release_x5c() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.x5c)
  
  ::common::StringArray* temp = x5c_;
  x5c_ = NULL;
  return temp;
}
inline ::common::StringArray* JSONWebKeys::mutable_x5c() {
  
  if (x5c_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    x5c_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.x5c)
  return x5c_;
}
inline void JSONWebKeys::set_allocated_x5c(::common::StringArray* x5c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(x5c_);
  }
  if (x5c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      x5c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x5c, submessage_arena);
    }
    
  } else {
    
  }
  x5c_ = x5c;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.x5c)
}

// -------------------------------------------------------------------

// Jwks

// repeated .api.JSONWebKeys keys = 1;
inline int Jwks::keys_size() const {
  return keys_.size();
}
inline void Jwks::clear_keys() {
  keys_.Clear();
}
inline ::api::JSONWebKeys* Jwks::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:api.Jwks.keys)
  return keys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >*
Jwks::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:api.Jwks.keys)
  return &keys_;
}
inline const ::api::JSONWebKeys& Jwks::keys(int index) const {
  // @@protoc_insertion_point(field_get:api.Jwks.keys)
  return keys_.Get(index);
}
inline ::api::JSONWebKeys* Jwks::add_keys() {
  // @@protoc_insertion_point(field_add:api.Jwks.keys)
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >&
Jwks::keys() const {
  // @@protoc_insertion_point(field_list:api.Jwks.keys)
  return keys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::api::BillingInterval> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::BillingInterval>() {
  return ::api::BillingInterval_descriptor();
}
template <> struct is_proto_enum< ::api::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::EventType>() {
  return ::api::EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
