// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	common "github.com/autom8ter/api/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BillingInterval int32

const (
	BillingInterval_DAILY   BillingInterval = 0
	BillingInterval_WEEKLY  BillingInterval = 1
	BillingInterval_MONTHLY BillingInterval = 2
	BillingInterval_YEARLY  BillingInterval = 3
)

var BillingInterval_name = map[int32]string{
	0: "DAILY",
	1: "WEEKLY",
	2: "MONTHLY",
	3: "YEARLY",
}

var BillingInterval_value = map[string]int32{
	"DAILY":   0,
	"WEEKLY":  1,
	"MONTHLY": 2,
	"YEARLY":  3,
}

func (x BillingInterval) String() string {
	return proto.EnumName(BillingInterval_name, int32(x))
}

func (BillingInterval) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type EventType int32

const (
	EventType_LOGIN_CODE_SENT            EventType = 0
	EventType_DELETED_USER               EventType = 1
	EventType_FAILED_LOGIN               EventType = 2
	EventType_FAILED_API_OPERATION       EventType = 3
	EventType_CON                        EventType = 4
	EventType_FAILED_CORS                EventType = 5
	EventType_SUCCESS_EMAIL_VERIFICATION EventType = 6
)

var EventType_name = map[int32]string{
	0: "LOGIN_CODE_SENT",
	1: "DELETED_USER",
	2: "FAILED_LOGIN",
	3: "FAILED_API_OPERATION",
	4: "CON",
	5: "FAILED_CORS",
	6: "SUCCESS_EMAIL_VERIFICATION",
}

var EventType_value = map[string]int32{
	"LOGIN_CODE_SENT":            0,
	"DELETED_USER":               1,
	"FAILED_LOGIN":               2,
	"FAILED_API_OPERATION":       3,
	"CON":                        4,
	"FAILED_CORS":                5,
	"SUCCESS_EMAIL_VERIFICATION": 6,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type AddUserRolesRequest struct {
	Email                *common.Identifier `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Roles                []*Role            `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AddUserRolesRequest) Reset()         { *m = AddUserRolesRequest{} }
func (m *AddUserRolesRequest) String() string { return proto.CompactTextString(m) }
func (*AddUserRolesRequest) ProtoMessage()    {}
func (*AddUserRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *AddUserRolesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddUserRolesRequest.Unmarshal(m, b)
}
func (m *AddUserRolesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddUserRolesRequest.Marshal(b, m, deterministic)
}
func (m *AddUserRolesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUserRolesRequest.Merge(m, src)
}
func (m *AddUserRolesRequest) XXX_Size() int {
	return xxx_messageInfo_AddUserRolesRequest.Size(m)
}
func (m *AddUserRolesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUserRolesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddUserRolesRequest proto.InternalMessageInfo

func (m *AddUserRolesRequest) GetEmail() *common.Identifier {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *AddUserRolesRequest) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type SubscribeRequest struct {
	Email                *common.Identifier `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Plan                 *common.Identifier `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	Card                 *Card              `protobuf:"bytes,3,opt,name=card,proto3" json:"card,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetEmail() *common.Identifier {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *SubscribeRequest) GetPlan() *common.Identifier {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *SubscribeRequest) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

type UnSubscribeRequest struct {
	Email                *common.Identifier `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Plan                 *common.String     `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UnSubscribeRequest) Reset()         { *m = UnSubscribeRequest{} }
func (m *UnSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*UnSubscribeRequest) ProtoMessage()    {}
func (*UnSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *UnSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnSubscribeRequest.Unmarshal(m, b)
}
func (m *UnSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *UnSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnSubscribeRequest.Merge(m, src)
}
func (m *UnSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_UnSubscribeRequest.Size(m)
}
func (m *UnSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnSubscribeRequest proto.InternalMessageInfo

func (m *UnSubscribeRequest) GetEmail() *common.Identifier {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *UnSubscribeRequest) GetPlan() *common.String {
	if m != nil {
		return m.Plan
	}
	return nil
}

type Card struct {
	Number               *common.Identifier `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	ExpMonth             *common.String     `protobuf:"bytes,2,opt,name=exp_month,json=expMonth,proto3" json:"exp_month,omitempty"`
	ExpYear              *common.String     `protobuf:"bytes,3,opt,name=exp_year,json=expYear,proto3" json:"exp_year,omitempty"`
	Cvc                  *common.String     `protobuf:"bytes,4,opt,name=cvc,proto3" json:"cvc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Card) Reset()         { *m = Card{} }
func (m *Card) String() string { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()    {}
func (*Card) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Card) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Card.Unmarshal(m, b)
}
func (m *Card) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Card.Marshal(b, m, deterministic)
}
func (m *Card) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card.Merge(m, src)
}
func (m *Card) XXX_Size() int {
	return xxx_messageInfo_Card.Size(m)
}
func (m *Card) XXX_DiscardUnknown() {
	xxx_messageInfo_Card.DiscardUnknown(m)
}

var xxx_messageInfo_Card proto.InternalMessageInfo

func (m *Card) GetNumber() *common.Identifier {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *Card) GetExpMonth() *common.String {
	if m != nil {
		return m.ExpMonth
	}
	return nil
}

func (m *Card) GetExpYear() *common.String {
	if m != nil {
		return m.ExpYear
	}
	return nil
}

func (m *Card) GetCvc() *common.String {
	if m != nil {
		return m.Cvc
	}
	return nil
}

type User struct {
	UserId               *common.Identifier  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 *common.String      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GivenName            *common.String      `protobuf:"bytes,3,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	FamilyName           *common.String      `protobuf:"bytes,4,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	Gender               *common.String      `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthdate            *common.String      `protobuf:"bytes,6,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	Email                *common.Identifier  `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber          *common.Identifier  `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Picture              *common.String      `protobuf:"bytes,9,opt,name=picture,proto3" json:"picture,omitempty"`
	Nickname             *common.String      `protobuf:"bytes,14,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UserMetadata         *common.StringMap   `protobuf:"bytes,10,opt,name=user_metadata,json=userMetadata,proto3" json:"user_metadata,omitempty"`
	AppMetadata          *common.StringMap   `protobuf:"bytes,11,opt,name=app_metadata,json=appMetadata,proto3" json:"app_metadata,omitempty"`
	LastIp               *common.String      `protobuf:"bytes,12,opt,name=last_ip,json=lastIp,proto3" json:"last_ip,omitempty"`
	Blocked              bool                `protobuf:"varint,13,opt,name=blocked,proto3" json:"blocked,omitempty"`
	Multifactor          *common.StringArray `protobuf:"bytes,15,opt,name=multifactor,proto3" json:"multifactor,omitempty"`
	CreatedAt            *common.String      `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *common.String      `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PhoneVerified        bool                `protobuf:"varint,19,opt,name=phone_verified,json=phoneVerified,proto3" json:"phone_verified,omitempty"`
	EmailVerified        bool                `protobuf:"varint,20,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	Password             *common.String      `protobuf:"bytes,21,opt,name=password,proto3" json:"password,omitempty"`
	Identities           []*Identity         `protobuf:"bytes,22,rep,name=identities,proto3" json:"identities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() *common.Identifier {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *User) GetName() *common.String {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *User) GetGivenName() *common.String {
	if m != nil {
		return m.GivenName
	}
	return nil
}

func (m *User) GetFamilyName() *common.String {
	if m != nil {
		return m.FamilyName
	}
	return nil
}

func (m *User) GetGender() *common.String {
	if m != nil {
		return m.Gender
	}
	return nil
}

func (m *User) GetBirthdate() *common.String {
	if m != nil {
		return m.Birthdate
	}
	return nil
}

func (m *User) GetEmail() *common.Identifier {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *User) GetPhoneNumber() *common.Identifier {
	if m != nil {
		return m.PhoneNumber
	}
	return nil
}

func (m *User) GetPicture() *common.String {
	if m != nil {
		return m.Picture
	}
	return nil
}

func (m *User) GetNickname() *common.String {
	if m != nil {
		return m.Nickname
	}
	return nil
}

func (m *User) GetUserMetadata() *common.StringMap {
	if m != nil {
		return m.UserMetadata
	}
	return nil
}

func (m *User) GetAppMetadata() *common.StringMap {
	if m != nil {
		return m.AppMetadata
	}
	return nil
}

func (m *User) GetLastIp() *common.String {
	if m != nil {
		return m.LastIp
	}
	return nil
}

func (m *User) GetBlocked() bool {
	if m != nil {
		return m.Blocked
	}
	return false
}

func (m *User) GetMultifactor() *common.StringArray {
	if m != nil {
		return m.Multifactor
	}
	return nil
}

func (m *User) GetCreatedAt() *common.String {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetUpdatedAt() *common.String {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *User) GetPhoneVerified() bool {
	if m != nil {
		return m.PhoneVerified
	}
	return false
}

func (m *User) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

func (m *User) GetPassword() *common.String {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *User) GetIdentities() []*Identity {
	if m != nil {
		return m.Identities
	}
	return nil
}

type UserMetadata struct {
	Status               *common.String    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Bio                  *common.StringMap `protobuf:"bytes,2,opt,name=bio,proto3" json:"bio,omitempty"`
	Address              *Address          `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Tags                 *common.StringMap `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UserMetadata) Reset()         { *m = UserMetadata{} }
func (m *UserMetadata) String() string { return proto.CompactTextString(m) }
func (*UserMetadata) ProtoMessage()    {}
func (*UserMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *UserMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMetadata.Unmarshal(m, b)
}
func (m *UserMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMetadata.Marshal(b, m, deterministic)
}
func (m *UserMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMetadata.Merge(m, src)
}
func (m *UserMetadata) XXX_Size() int {
	return xxx_messageInfo_UserMetadata.Size(m)
}
func (m *UserMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UserMetadata proto.InternalMessageInfo

func (m *UserMetadata) GetStatus() *common.String {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *UserMetadata) GetBio() *common.StringMap {
	if m != nil {
		return m.Bio
	}
	return nil
}

func (m *UserMetadata) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *UserMetadata) GetTags() *common.StringMap {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Address struct {
	City                 string   `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Line1                string   `protobuf:"bytes,3,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2                string   `protobuf:"bytes,4,opt,name=line2,proto3" json:"line2,omitempty"`
	Zip                  string   `protobuf:"bytes,5,opt,name=zip,proto3" json:"zip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetLine1() string {
	if m != nil {
		return m.Line1
	}
	return ""
}

func (m *Address) GetLine2() string {
	if m != nil {
		return m.Line2
	}
	return ""
}

func (m *Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

type AppMetadata struct {
	Description          *common.String    `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	AccountBalance       *common.String    `protobuf:"bytes,2,opt,name=account_balance,json=accountBalance,proto3" json:"account_balance,omitempty"`
	Plan                 *Plan             `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	Tags                 *common.StringMap `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AppMetadata) Reset()         { *m = AppMetadata{} }
func (m *AppMetadata) String() string { return proto.CompactTextString(m) }
func (*AppMetadata) ProtoMessage()    {}
func (*AppMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *AppMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppMetadata.Unmarshal(m, b)
}
func (m *AppMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppMetadata.Marshal(b, m, deterministic)
}
func (m *AppMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMetadata.Merge(m, src)
}
func (m *AppMetadata) XXX_Size() int {
	return xxx_messageInfo_AppMetadata.Size(m)
}
func (m *AppMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AppMetadata proto.InternalMessageInfo

func (m *AppMetadata) GetDescription() *common.String {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *AppMetadata) GetAccountBalance() *common.String {
	if m != nil {
		return m.AccountBalance
	}
	return nil
}

func (m *AppMetadata) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *AppMetadata) GetTags() *common.StringMap {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Plan struct {
	Id                   *common.Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Active               bool               `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	Amount               *common.Int64      `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Interval             BillingInterval    `protobuf:"varint,4,opt,name=interval,proto3,enum=api.BillingInterval" json:"interval,omitempty"`
	Nickname             *common.String     `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Product              *Product           `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *Plan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plan.Unmarshal(m, b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return xxx_messageInfo_Plan.Size(m)
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetId() *common.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Plan) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Plan) GetAmount() *common.Int64 {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Plan) GetInterval() BillingInterval {
	if m != nil {
		return m.Interval
	}
	return BillingInterval_DAILY
}

func (m *Plan) GetNickname() *common.String {
	if m != nil {
		return m.Nickname
	}
	return nil
}

func (m *Plan) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

type Product struct {
	Id                   *common.Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description          *common.String     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Url                  *common.String     `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *Product) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Product.Unmarshal(m, b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Product.Marshal(b, m, deterministic)
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return xxx_messageInfo_Product.Size(m)
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetId() *common.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Product) GetDescription() *common.String {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Product) GetUrl() *common.String {
	if m != nil {
		return m.Url
	}
	return nil
}

type Identity struct {
	Connection           *common.String     `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	UserId               *common.Identifier `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Provider             *common.String     `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	IsSocial             bool               `protobuf:"varint,4,opt,name=isSocial,proto3" json:"isSocial,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Identity) Reset()         { *m = Identity{} }
func (m *Identity) String() string { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()    {}
func (*Identity) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *Identity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identity.Unmarshal(m, b)
}
func (m *Identity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identity.Marshal(b, m, deterministic)
}
func (m *Identity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identity.Merge(m, src)
}
func (m *Identity) XXX_Size() int {
	return xxx_messageInfo_Identity.Size(m)
}
func (m *Identity) XXX_DiscardUnknown() {
	xxx_messageInfo_Identity.DiscardUnknown(m)
}

var xxx_messageInfo_Identity proto.InternalMessageInfo

func (m *Identity) GetConnection() *common.String {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *Identity) GetUserId() *common.Identifier {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *Identity) GetProvider() *common.String {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *Identity) GetIsSocial() bool {
	if m != nil {
		return m.IsSocial
	}
	return false
}

type Role struct {
	Id                   *common.Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 *common.String     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          *common.String     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Role) Reset()         { *m = Role{} }
func (m *Role) String() string { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()    {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *Role) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Role.Unmarshal(m, b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Role.Marshal(b, m, deterministic)
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return xxx_messageInfo_Role.Size(m)
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetId() *common.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Role) GetName() *common.String {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Role) GetDescription() *common.String {
	if m != nil {
		return m.Description
	}
	return nil
}

type OAuth2 struct {
	ClientId             *common.String      `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret         *common.String      `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	TokenUrl             *common.String      `protobuf:"bytes,3,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	AuthUrl              *common.String      `protobuf:"bytes,4,opt,name=auth_url,json=authUrl,proto3" json:"auth_url,omitempty"`
	Scopes               *common.StringArray `protobuf:"bytes,5,opt,name=scopes,proto3" json:"scopes,omitempty"`
	Redirect             *common.String      `protobuf:"bytes,6,opt,name=redirect,proto3" json:"redirect,omitempty"`
	Code                 *common.String      `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *OAuth2) Reset()         { *m = OAuth2{} }
func (m *OAuth2) String() string { return proto.CompactTextString(m) }
func (*OAuth2) ProtoMessage()    {}
func (*OAuth2) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *OAuth2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OAuth2.Unmarshal(m, b)
}
func (m *OAuth2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OAuth2.Marshal(b, m, deterministic)
}
func (m *OAuth2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuth2.Merge(m, src)
}
func (m *OAuth2) XXX_Size() int {
	return xxx_messageInfo_OAuth2.Size(m)
}
func (m *OAuth2) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuth2.DiscardUnknown(m)
}

var xxx_messageInfo_OAuth2 proto.InternalMessageInfo

func (m *OAuth2) GetClientId() *common.String {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *OAuth2) GetClientSecret() *common.String {
	if m != nil {
		return m.ClientSecret
	}
	return nil
}

func (m *OAuth2) GetTokenUrl() *common.String {
	if m != nil {
		return m.TokenUrl
	}
	return nil
}

func (m *OAuth2) GetAuthUrl() *common.String {
	if m != nil {
		return m.AuthUrl
	}
	return nil
}

func (m *OAuth2) GetScopes() *common.StringArray {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *OAuth2) GetRedirect() *common.String {
	if m != nil {
		return m.Redirect
	}
	return nil
}

func (m *OAuth2) GetCode() *common.String {
	if m != nil {
		return m.Code
	}
	return nil
}

type ClientCredentials struct {
	ClientId             *common.String      `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret         *common.String      `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	TokenUrl             *common.String      `protobuf:"bytes,3,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	Scopes               *common.StringArray `protobuf:"bytes,4,opt,name=scopes,proto3" json:"scopes,omitempty"`
	EndpointParams       *common.StringMap   `protobuf:"bytes,5,opt,name=endpoint_params,json=endpointParams,proto3" json:"endpoint_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClientCredentials) Reset()         { *m = ClientCredentials{} }
func (m *ClientCredentials) String() string { return proto.CompactTextString(m) }
func (*ClientCredentials) ProtoMessage()    {}
func (*ClientCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

func (m *ClientCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientCredentials.Unmarshal(m, b)
}
func (m *ClientCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientCredentials.Marshal(b, m, deterministic)
}
func (m *ClientCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientCredentials.Merge(m, src)
}
func (m *ClientCredentials) XXX_Size() int {
	return xxx_messageInfo_ClientCredentials.Size(m)
}
func (m *ClientCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_ClientCredentials proto.InternalMessageInfo

func (m *ClientCredentials) GetClientId() *common.String {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *ClientCredentials) GetClientSecret() *common.String {
	if m != nil {
		return m.ClientSecret
	}
	return nil
}

func (m *ClientCredentials) GetTokenUrl() *common.String {
	if m != nil {
		return m.TokenUrl
	}
	return nil
}

func (m *ClientCredentials) GetScopes() *common.StringArray {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *ClientCredentials) GetEndpointParams() *common.StringMap {
	if m != nil {
		return m.EndpointParams
	}
	return nil
}

type JWT struct {
	Email                *common.String      `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	PrivateKey           []byte              `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	PriveKeyId           *common.String      `protobuf:"bytes,3,opt,name=prive_key_id,json=priveKeyId,proto3" json:"prive_key_id,omitempty"`
	Subject              *common.String      `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Scopes               *common.StringArray `protobuf:"bytes,5,opt,name=scopes,proto3" json:"scopes,omitempty"`
	TokenUrl             *common.String      `protobuf:"bytes,6,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	Expires              *common.String      `protobuf:"bytes,7,opt,name=expires,proto3" json:"expires,omitempty"`
	Audience             *common.String      `protobuf:"bytes,8,opt,name=audience,proto3" json:"audience,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *JWT) Reset()         { *m = JWT{} }
func (m *JWT) String() string { return proto.CompactTextString(m) }
func (*JWT) ProtoMessage()    {}
func (*JWT) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

func (m *JWT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWT.Unmarshal(m, b)
}
func (m *JWT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWT.Marshal(b, m, deterministic)
}
func (m *JWT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWT.Merge(m, src)
}
func (m *JWT) XXX_Size() int {
	return xxx_messageInfo_JWT.Size(m)
}
func (m *JWT) XXX_DiscardUnknown() {
	xxx_messageInfo_JWT.DiscardUnknown(m)
}

var xxx_messageInfo_JWT proto.InternalMessageInfo

func (m *JWT) GetEmail() *common.String {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *JWT) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *JWT) GetPriveKeyId() *common.String {
	if m != nil {
		return m.PriveKeyId
	}
	return nil
}

func (m *JWT) GetSubject() *common.String {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *JWT) GetScopes() *common.StringArray {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func (m *JWT) GetTokenUrl() *common.String {
	if m != nil {
		return m.TokenUrl
	}
	return nil
}

func (m *JWT) GetExpires() *common.String {
	if m != nil {
		return m.Expires
	}
	return nil
}

func (m *JWT) GetAudience() *common.String {
	if m != nil {
		return m.Audience
	}
	return nil
}

type Query struct {
	Query                *common.String `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Fields               *common.String `protobuf:"bytes,5,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetQuery() *common.String {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *Query) GetFields() *common.String {
	if m != nil {
		return m.Fields
	}
	return nil
}

type Event struct {
	Date                 *common.String    `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Type                 *common.String    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ClientId             *common.String    `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientName           *common.String    `protobuf:"bytes,4,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	Ip                   *common.String    `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	LocationInfo         *common.String    `protobuf:"bytes,6,opt,name=location_info,json=locationInfo,proto3" json:"location_info,omitempty"`
	Details              *common.String    `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
	UserId               *common.String    `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Annotations          *common.StringMap `protobuf:"bytes,9,opt,name=annotations,proto3" json:"annotations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetDate() *common.String {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Event) GetType() *common.String {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Event) GetClientId() *common.String {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *Event) GetClientName() *common.String {
	if m != nil {
		return m.ClientName
	}
	return nil
}

func (m *Event) GetIp() *common.String {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Event) GetLocationInfo() *common.String {
	if m != nil {
		return m.LocationInfo
	}
	return nil
}

func (m *Event) GetDetails() *common.String {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Event) GetUserId() *common.String {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *Event) GetAnnotations() *common.StringMap {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type EventQuery struct {
	Date                 string   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ClientId             string   `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	UserId               string   `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventQuery) Reset()         { *m = EventQuery{} }
func (m *EventQuery) String() string { return proto.CompactTextString(m) }
func (*EventQuery) ProtoMessage()    {}
func (*EventQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}

func (m *EventQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventQuery.Unmarshal(m, b)
}
func (m *EventQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventQuery.Marshal(b, m, deterministic)
}
func (m *EventQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventQuery.Merge(m, src)
}
func (m *EventQuery) XXX_Size() int {
	return xxx_messageInfo_EventQuery.Size(m)
}
func (m *EventQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_EventQuery.DiscardUnknown(m)
}

var xxx_messageInfo_EventQuery proto.InternalMessageInfo

func (m *EventQuery) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *EventQuery) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventQuery) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *EventQuery) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type JSONWebKeys struct {
	Kty                  *common.String      `protobuf:"bytes,1,opt,name=kty,proto3" json:"kty,omitempty"`
	Kid                  *common.Identifier  `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
	Use                  *common.String      `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	N                    *common.String      `protobuf:"bytes,4,opt,name=n,proto3" json:"n,omitempty"`
	E                    *common.String      `protobuf:"bytes,5,opt,name=e,proto3" json:"e,omitempty"`
	X5C                  *common.StringArray `protobuf:"bytes,6,opt,name=x5c,proto3" json:"x5c,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *JSONWebKeys) Reset()         { *m = JSONWebKeys{} }
func (m *JSONWebKeys) String() string { return proto.CompactTextString(m) }
func (*JSONWebKeys) ProtoMessage()    {}
func (*JSONWebKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}

func (m *JSONWebKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JSONWebKeys.Unmarshal(m, b)
}
func (m *JSONWebKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JSONWebKeys.Marshal(b, m, deterministic)
}
func (m *JSONWebKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONWebKeys.Merge(m, src)
}
func (m *JSONWebKeys) XXX_Size() int {
	return xxx_messageInfo_JSONWebKeys.Size(m)
}
func (m *JSONWebKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONWebKeys.DiscardUnknown(m)
}

var xxx_messageInfo_JSONWebKeys proto.InternalMessageInfo

func (m *JSONWebKeys) GetKty() *common.String {
	if m != nil {
		return m.Kty
	}
	return nil
}

func (m *JSONWebKeys) GetKid() *common.Identifier {
	if m != nil {
		return m.Kid
	}
	return nil
}

func (m *JSONWebKeys) GetUse() *common.String {
	if m != nil {
		return m.Use
	}
	return nil
}

func (m *JSONWebKeys) GetN() *common.String {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *JSONWebKeys) GetE() *common.String {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *JSONWebKeys) GetX5C() *common.StringArray {
	if m != nil {
		return m.X5C
	}
	return nil
}

type Jwks struct {
	Keys                 []*JSONWebKeys `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Jwks) Reset()         { *m = Jwks{} }
func (m *Jwks) String() string { return proto.CompactTextString(m) }
func (*Jwks) ProtoMessage()    {}
func (*Jwks) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}

func (m *Jwks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Jwks.Unmarshal(m, b)
}
func (m *Jwks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Jwks.Marshal(b, m, deterministic)
}
func (m *Jwks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Jwks.Merge(m, src)
}
func (m *Jwks) XXX_Size() int {
	return xxx_messageInfo_Jwks.Size(m)
}
func (m *Jwks) XXX_DiscardUnknown() {
	xxx_messageInfo_Jwks.DiscardUnknown(m)
}

var xxx_messageInfo_Jwks proto.InternalMessageInfo

func (m *Jwks) GetKeys() []*JSONWebKeys {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.BillingInterval", BillingInterval_name, BillingInterval_value)
	proto.RegisterEnum("api.EventType", EventType_name, EventType_value)
	proto.RegisterType((*AddUserRolesRequest)(nil), "api.AddUserRolesRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "api.SubscribeRequest")
	proto.RegisterType((*UnSubscribeRequest)(nil), "api.UnSubscribeRequest")
	proto.RegisterType((*Card)(nil), "api.Card")
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*UserMetadata)(nil), "api.UserMetadata")
	proto.RegisterType((*Address)(nil), "api.Address")
	proto.RegisterType((*AppMetadata)(nil), "api.AppMetadata")
	proto.RegisterType((*Plan)(nil), "api.Plan")
	proto.RegisterType((*Product)(nil), "api.Product")
	proto.RegisterType((*Identity)(nil), "api.Identity")
	proto.RegisterType((*Role)(nil), "api.Role")
	proto.RegisterType((*OAuth2)(nil), "api.OAuth2")
	proto.RegisterType((*ClientCredentials)(nil), "api.ClientCredentials")
	proto.RegisterType((*JWT)(nil), "api.JWT")
	proto.RegisterType((*Query)(nil), "api.Query")
	proto.RegisterType((*Event)(nil), "api.Event")
	proto.RegisterType((*EventQuery)(nil), "api.EventQuery")
	proto.RegisterType((*JSONWebKeys)(nil), "api.JSONWebKeys")
	proto.RegisterType((*Jwks)(nil), "api.Jwks")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 2000 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0xdf, 0x91, 0x64, 0xfd, 0x79, 0x92, 0x6d, 0xb9, 0xed, 0x24, 0xc2, 0x1b, 0x76, 0xcd, 0xb0,
	0x31, 0xc6, 0x59, 0xa2, 0xa0, 0x6c, 0x96, 0x22, 0x07, 0xaa, 0xb4, 0xb2, 0x92, 0x55, 0x62, 0x5b,
	0x66, 0x64, 0x6f, 0xca, 0x05, 0x55, 0xa2, 0x35, 0xd3, 0x96, 0x7b, 0x3d, 0xea, 0x99, 0xcc, 0xb4,
	0xbc, 0x11, 0x27, 0xfe, 0xdc, 0xe0, 0xc8, 0x65, 0xbf, 0x01, 0x55, 0x14, 0x55, 0x1c, 0xb8, 0xc3,
	0x87, 0xe0, 0x42, 0x71, 0xe6, 0xce, 0x57, 0xa0, 0x5e, 0x4f, 0x8f, 0x24, 0xcb, 0x33, 0x76, 0xb6,
	0xb8, 0x70, 0xb2, 0xe7, 0xfd, 0x7e, 0xfd, 0xf4, 0xfa, 0xbd, 0xd7, 0xef, 0xbd, 0x6e, 0x28, 0x51,
	0x9f, 0x3f, 0xf2, 0x03, 0x4f, 0x7a, 0x24, 0x4b, 0x7d, 0xbe, 0x79, 0x7f, 0xe8, 0x79, 0x43, 0x97,
	0xd5, 0xa9, 0xcf, 0xeb, 0x54, 0x08, 0x4f, 0x52, 0xc9, 0x3d, 0x11, 0x46, 0x94, 0xcd, 0x75, 0xdb,
	0x1b, 0x8d, 0x3c, 0x51, 0x8f, 0xfe, 0x44, 0x42, 0xf3, 0x17, 0xb0, 0xde, 0x74, 0x9c, 0x93, 0x90,
	0x05, 0x96, 0xe7, 0xb2, 0xd0, 0x62, 0x6f, 0xc6, 0x2c, 0x94, 0x64, 0x07, 0x96, 0xd8, 0x88, 0x72,
	0xb7, 0x66, 0x6c, 0x19, 0x3b, 0xe5, 0x06, 0x79, 0xa4, 0x17, 0x75, 0x1c, 0x26, 0x24, 0x3f, 0xe3,
	0x2c, 0xb0, 0x22, 0x02, 0xf9, 0x10, 0x96, 0x02, 0x5c, 0x59, 0xcb, 0x6c, 0x65, 0x77, 0xca, 0x8d,
	0xd2, 0x23, 0xb4, 0x09, 0x75, 0x59, 0x91, 0xdc, 0xfc, 0xad, 0x01, 0xd5, 0xde, 0x78, 0x10, 0xda,
	0x01, 0x1f, 0xb0, 0x6f, 0xae, 0x7f, 0x1b, 0x72, 0xbe, 0x4b, 0x45, 0x2d, 0x93, 0x4a, 0x54, 0x38,
	0xf9, 0x36, 0xe4, 0x6c, 0x1a, 0x38, 0xb5, 0xac, 0xe2, 0x45, 0x66, 0xb4, 0x68, 0xe0, 0x58, 0x4a,
	0x6c, 0x0e, 0x80, 0x9c, 0x88, 0xff, 0xc1, 0x0c, 0xf3, 0x8a, 0x19, 0x2b, 0x31, 0xb1, 0x27, 0x03,
	0x2e, 0x86, 0x91, 0x09, 0xe6, 0x9f, 0x0d, 0xc8, 0xe1, 0x4f, 0x92, 0x5d, 0xc8, 0x8b, 0xf1, 0x68,
	0xc0, 0x82, 0x1b, 0xf4, 0x6a, 0x06, 0x79, 0x08, 0x25, 0xf6, 0xd6, 0xef, 0x8f, 0x3c, 0x21, 0xcf,
	0x53, 0xb4, 0x17, 0xd9, 0x5b, 0xff, 0x00, 0x71, 0xf2, 0x7d, 0xc0, 0xff, 0xfb, 0x13, 0x46, 0x03,
	0xbd, 0xd1, 0x45, 0x6e, 0x81, 0xbd, 0xf5, 0x4f, 0x19, 0x0d, 0xc8, 0x16, 0x64, 0xed, 0x4b, 0xbb,
	0x96, 0x4b, 0x64, 0x21, 0x64, 0xfe, 0xb5, 0x00, 0x39, 0x0c, 0x3c, 0x79, 0x08, 0x85, 0x71, 0xc8,
	0x82, 0x3e, 0x77, 0x6e, 0xb2, 0x17, 0x29, 0x1d, 0x07, 0x1d, 0x21, 0xe8, 0x88, 0xa5, 0x39, 0x02,
	0x31, 0xf2, 0x03, 0x80, 0x21, 0xbf, 0x64, 0xa2, 0xaf, 0x98, 0xc9, 0x86, 0x96, 0x14, 0xe3, 0x10,
	0xe9, 0x75, 0x28, 0x9f, 0xd1, 0x11, 0x77, 0x27, 0x11, 0x3f, 0xd9, 0x64, 0x88, 0x28, 0x6a, 0xc1,
	0x36, 0xe4, 0x87, 0x4c, 0x38, 0x2c, 0xa8, 0x2d, 0x25, 0x72, 0x35, 0x4a, 0x3e, 0x86, 0xd2, 0x80,
	0x07, 0xf2, 0xdc, 0xa1, 0x92, 0xd5, 0xf2, 0xc9, 0x66, 0x4c, 0x09, 0xb3, 0x64, 0x28, 0xdc, 0x96,
	0x0c, 0x4f, 0xa1, 0xe2, 0x9f, 0x7b, 0x82, 0xf5, 0x75, 0x94, 0x8b, 0xa9, 0x0b, 0xca, 0x8a, 0x77,
	0x18, 0x85, 0x7a, 0x07, 0x0a, 0x3e, 0xb7, 0xe5, 0x38, 0x60, 0xb5, 0x52, 0x72, 0xf0, 0x34, 0x4c,
	0x76, 0xa1, 0x28, 0xb8, 0x7d, 0xa1, 0xdc, 0xb1, 0x92, 0x9c, 0x13, 0x31, 0x4e, 0x3e, 0x85, 0x65,
	0x15, 0xbd, 0x11, 0x93, 0xd4, 0xa1, 0x92, 0xd6, 0x40, 0x2d, 0x58, 0xbb, 0xba, 0xe0, 0x80, 0xfa,
	0x56, 0x05, 0x79, 0x07, 0x9a, 0x46, 0x3e, 0x81, 0x0a, 0xf5, 0xfd, 0xd9, 0xb2, 0x72, 0xda, 0xb2,
	0x32, 0xf5, 0xfd, 0xe9, 0xaa, 0xef, 0x41, 0xc1, 0xa5, 0xa1, 0xec, 0x73, 0xbf, 0x56, 0x49, 0xf6,
	0x3d, 0xc2, 0x1d, 0x9f, 0xd4, 0xa0, 0x30, 0x70, 0x3d, 0xfb, 0x82, 0x39, 0xb5, 0xe5, 0x2d, 0x63,
	0xa7, 0x68, 0xc5, 0x9f, 0xe4, 0x29, 0x94, 0x47, 0x63, 0x57, 0xf2, 0x33, 0x6a, 0x4b, 0x2f, 0xa8,
	0xad, 0x2a, 0x35, 0xeb, 0x57, 0xd5, 0x34, 0x83, 0x80, 0x4e, 0xac, 0x79, 0x1e, 0x26, 0x95, 0x1d,
	0x30, 0x2a, 0x99, 0xd3, 0xa7, 0xb2, 0xb6, 0x96, 0x1c, 0x4d, 0xcd, 0x68, 0x4a, 0xa4, 0x8f, 0x7d,
	0x27, 0xa6, 0x93, 0x64, 0xba, 0x66, 0x34, 0x25, 0x79, 0x00, 0x2b, 0x51, 0x48, 0x2f, 0x59, 0x80,
	0xa1, 0x73, 0x6a, 0xeb, 0xca, 0xea, 0x65, 0x25, 0xfd, 0x42, 0x0b, 0x91, 0xa6, 0x52, 0x60, 0x46,
	0xdb, 0x88, 0x68, 0x4a, 0x3a, 0xa5, 0xed, 0x42, 0xd1, 0xa7, 0x61, 0xf8, 0x95, 0x17, 0x38, 0xb5,
	0x3b, 0xc9, 0xf1, 0x8b, 0x71, 0x34, 0x94, 0xab, 0x84, 0x91, 0x9c, 0x85, 0xb5, 0xbb, 0xaa, 0x8a,
	0x2e, 0xab, 0xf2, 0x15, 0xe5, 0x91, 0x9c, 0x58, 0x73, 0x04, 0xf3, 0x4f, 0x06, 0x54, 0x4e, 0xe6,
	0xe3, 0xb8, 0x0d, 0xf9, 0x50, 0x52, 0x39, 0x0e, 0xf5, 0xe1, 0xbd, 0x16, 0x90, 0x08, 0x25, 0xdf,
	0x85, 0xec, 0x80, 0x7b, 0xfa, 0xdc, 0x26, 0x84, 0x19, 0x51, 0xb2, 0x0d, 0x05, 0xea, 0x38, 0x01,
	0x0b, 0x43, 0x7d, 0x6c, 0x2b, 0xca, 0x92, 0x66, 0x24, 0xb3, 0x62, 0x90, 0x3c, 0x80, 0x9c, 0xa4,
	0xc3, 0x50, 0x9f, 0xd5, 0x04, 0x6d, 0x0a, 0x36, 0xdf, 0x40, 0x41, 0x2f, 0x25, 0x04, 0x72, 0x36,
	0x97, 0x13, 0x65, 0x64, 0xc9, 0x52, 0xff, 0x93, 0x0d, 0x58, 0x42, 0xe3, 0xa2, 0x62, 0x52, 0xb2,
	0xa2, 0x0f, 0x94, 0xba, 0x5c, 0xb0, 0x1f, 0x2a, 0x0b, 0x4a, 0x56, 0xf4, 0x11, 0x4b, 0x1b, 0xea,
	0x27, 0xb5, 0xb4, 0x41, 0xaa, 0x90, 0xfd, 0x25, 0xf7, 0x55, 0x19, 0x28, 0x59, 0xf8, 0xaf, 0xf9,
	0x37, 0x03, 0xca, 0xcd, 0xb9, 0x84, 0x7d, 0x0c, 0x65, 0x87, 0x61, 0xd5, 0xf7, 0xb1, 0x17, 0xa6,
	0xf8, 0x68, 0x9e, 0x42, 0x7e, 0x04, 0xab, 0xd4, 0xb6, 0xbd, 0xb1, 0x90, 0xfd, 0x01, 0x75, 0xa9,
	0xb0, 0xd3, 0x8a, 0xdd, 0x8a, 0xa6, 0x7d, 0x16, 0xb1, 0xb0, 0x05, 0xa9, 0x1e, 0x31, 0xdf, 0x82,
	0x8e, 0x5c, 0x2a, 0x74, 0x87, 0x7a, 0x47, 0x9f, 0xfd, 0xc7, 0x80, 0x1c, 0xae, 0x22, 0x26, 0x64,
	0x6e, 0xac, 0xc8, 0x19, 0xee, 0x90, 0xbb, 0x90, 0xa7, 0xb6, 0xe4, 0x97, 0x91, 0x89, 0x45, 0x4b,
	0x7f, 0x91, 0x07, 0x90, 0xa7, 0x23, 0xb4, 0x4d, 0x1b, 0xb3, 0x3c, 0x5d, 0x2f, 0xe4, 0xa7, 0x9f,
	0x58, 0x1a, 0x24, 0x8f, 0xa1, 0xc8, 0x85, 0x64, 0xc1, 0x25, 0x75, 0x95, 0x59, 0x2b, 0x8d, 0x0d,
	0x65, 0xf5, 0x67, 0xdc, 0x75, 0xb9, 0x18, 0x76, 0x34, 0x66, 0x4d, 0x59, 0x57, 0x2a, 0xd3, 0xd2,
	0x2d, 0x95, 0x69, 0x1b, 0x0a, 0x7e, 0xe0, 0x39, 0x63, 0x5b, 0xea, 0xe2, 0x1b, 0x25, 0xd3, 0x51,
	0x24, 0xb3, 0x62, 0xd0, 0xfc, 0xb5, 0x01, 0x05, 0x2d, 0x7c, 0xa7, 0x4d, 0x2f, 0x84, 0x34, 0x73,
	0x7b, 0x48, 0xb7, 0x20, 0x3b, 0x0e, 0xdc, 0x94, 0x4e, 0x84, 0x90, 0xf9, 0x17, 0x03, 0x8a, 0xf1,
	0x79, 0x23, 0x8f, 0x00, 0x6c, 0x4f, 0x08, 0x66, 0xdf, 0x90, 0x32, 0x73, 0x8c, 0xf9, 0x06, 0x9a,
	0xb9, 0xb5, 0x81, 0x62, 0x6d, 0x08, 0xbc, 0x4b, 0x8e, 0xed, 0x2b, 0x9b, 0x52, 0x1b, 0x34, 0x4e,
	0x36, 0xa1, 0xc8, 0xc3, 0x9e, 0x67, 0x73, 0x1d, 0x9f, 0xa2, 0x35, 0xfd, 0x36, 0x7f, 0x65, 0x40,
	0x0e, 0xe7, 0xac, 0x77, 0x72, 0xd9, 0xbb, 0x74, 0xed, 0x05, 0xb7, 0x66, 0x6f, 0x75, 0xab, 0xf9,
	0xf7, 0x0c, 0xe4, 0xbb, 0xcd, 0xb1, 0x3c, 0x6f, 0xe0, 0x18, 0x63, 0xbb, 0x9c, 0x09, 0x39, 0x9b,
	0x22, 0xae, 0x6d, 0x2b, 0x22, 0x74, 0x1c, 0xf2, 0x04, 0x96, 0x35, 0x39, 0x64, 0x76, 0xc0, 0x64,
	0x8a, 0x59, 0x95, 0x88, 0xd4, 0x53, 0x1c, 0xfc, 0x05, 0xe9, 0x5d, 0x30, 0xd1, 0x4f, 0x8f, 0x64,
	0x51, 0x11, 0x4e, 0x02, 0x17, 0x07, 0x25, 0x3a, 0x96, 0xe7, 0x8a, 0x9b, 0x3c, 0x4f, 0x14, 0x10,
	0x47, 0xea, 0x43, 0xc8, 0x87, 0xb6, 0xe7, 0xb3, 0x50, 0xe7, 0x73, 0x62, 0x27, 0xd2, 0x14, 0x0c,
	0x5e, 0xc0, 0x1c, 0x1e, 0xb0, 0x69, 0x4e, 0x5f, 0xb3, 0x21, 0xc6, 0xd1, 0xe7, 0xb6, 0xe7, 0x30,
	0x3d, 0x4e, 0x5c, 0xf3, 0x39, 0x62, 0xe6, 0xef, 0x33, 0xb0, 0xd6, 0x52, 0xbb, 0x6c, 0x05, 0x4c,
	0x85, 0x8c, 0xba, 0xe1, 0xff, 0x9b, 0x33, 0x67, 0x1e, 0xca, 0xdd, 0xee, 0xa1, 0x67, 0xb0, 0xca,
	0x84, 0xe3, 0x7b, 0x5c, 0xc8, 0xbe, 0x4f, 0x03, 0x3a, 0x8a, 0xfd, 0x9a, 0x50, 0xf0, 0x56, 0x62,
	0xe6, 0x91, 0x22, 0x9a, 0xff, 0xcc, 0x40, 0xf6, 0xe5, 0xeb, 0x63, 0xf2, 0xd1, 0xd5, 0xb1, 0x7c,
	0xd1, 0xb2, 0xe9, 0xcd, 0xa3, 0xec, 0x07, 0xfc, 0x92, 0x4a, 0xd6, 0xbf, 0x60, 0x13, 0xb5, 0xed,
	0x8a, 0x05, 0x5a, 0xf4, 0x8a, 0x4d, 0xc8, 0x63, 0xa8, 0xe0, 0x97, 0x82, 0xd1, 0x93, 0xc9, 0xfb,
	0x54, 0x2b, 0x90, 0xdf, 0x71, 0x70, 0x42, 0x0b, 0xc7, 0x83, 0x2f, 0x31, 0xba, 0x29, 0x59, 0xa3,
	0xe1, 0x6f, 0x96, 0x35, 0x57, 0xbc, 0x9d, 0xbf, 0xc5, 0xdb, 0x3b, 0x80, 0x33, 0x3c, 0x0f, 0x58,
	0x98, 0x92, 0x39, 0x31, 0x8c, 0xc9, 0x48, 0xc7, 0x0e, 0x67, 0xd8, 0xa1, 0x8a, 0xc9, 0x5a, 0x63,
	0xdc, 0x3c, 0x81, 0xa5, 0x9f, 0x8e, 0x59, 0x30, 0x41, 0xdf, 0xbe, 0xc1, 0x7f, 0x52, 0x36, 0x18,
	0x81, 0x38, 0x54, 0x9c, 0x71, 0xe6, 0x3a, 0x61, 0xda, 0x84, 0x1d, 0xa1, 0xe6, 0xef, 0xb2, 0xb0,
	0xd4, 0xbe, 0x64, 0x42, 0x65, 0xbb, 0x1a, 0xb3, 0x93, 0x43, 0xa6, 0x30, 0xe4, 0xc8, 0x89, 0x9f,
	0x5a, 0x85, 0x10, 0xbb, 0x9a, 0xfb, 0xd9, 0x5b, 0x72, 0xbf, 0x0e, 0x65, 0x4d, 0xbe, 0xe9, 0xe6,
	0x10, 0x51, 0xd4, 0xcd, 0xe1, 0x03, 0xc8, 0xe8, 0x71, 0xe1, 0x3a, 0x2f, 0xc3, 0x7d, 0x3c, 0x4c,
	0xae, 0x67, 0xab, 0x6b, 0x73, 0x9f, 0x8b, 0x33, 0x2f, 0x25, 0x5a, 0x95, 0x98, 0xd4, 0x11, 0x67,
	0x1e, 0x46, 0xcc, 0x61, 0x92, 0x72, 0x37, 0x35, 0x62, 0x1a, 0xc6, 0xe9, 0x39, 0x6e, 0x14, 0xc9,
	0x01, 0x8b, 0x9b, 0xc4, 0x13, 0x28, 0xcf, 0x5d, 0xe0, 0xf5, 0x75, 0x21, 0x71, 0x36, 0x9f, 0xb1,
	0xcc, 0x2f, 0x01, 0x54, 0x2c, 0xa2, 0x40, 0x93, 0xb9, 0x80, 0x94, 0x74, 0x00, 0xc8, 0x5c, 0x00,
	0x4a, 0xda, 0xe1, 0xef, 0x2f, 0x3a, 0xbc, 0x34, 0xe7, 0xe0, 0x7b, 0x33, 0x83, 0xa3, 0xb9, 0x4b,
	0x1b, 0x68, 0xfe, 0xcb, 0x80, 0xf2, 0xcb, 0x5e, 0xf7, 0xf0, 0x35, 0x1b, 0xbc, 0x62, 0x93, 0x10,
	0x3b, 0xec, 0x85, 0x9e, 0xee, 0x12, 0x3a, 0xec, 0x85, 0xc4, 0xc4, 0xcb, 0x5e, 0xdc, 0xd8, 0x20,
	0x11, 0x56, 0x9d, 0x3a, 0x64, 0xa9, 0x9d, 0x3a, 0x64, 0xe4, 0x3e, 0x18, 0x22, 0x25, 0xd2, 0x86,
	0x40, 0x34, 0x6d, 0x30, 0x31, 0x70, 0x2c, 0xca, 0xbe, 0x7d, 0x6a, 0xeb, 0xa0, 0x26, 0x1e, 0x59,
	0xc4, 0xcd, 0x8f, 0x21, 0xf7, 0xf2, 0xab, 0x8b, 0x90, 0x7c, 0x04, 0xb9, 0x0b, 0x36, 0xc1, 0xc1,
	0x1a, 0x87, 0xf2, 0xaa, 0x9a, 0x5e, 0xe6, 0x36, 0x6d, 0x29, 0x74, 0xb7, 0x09, 0xab, 0x0b, 0xf3,
	0x12, 0x29, 0xc1, 0xd2, 0x5e, 0xb3, 0xb3, 0x7f, 0x5a, 0x7d, 0x8f, 0x00, 0xe4, 0x5f, 0xb7, 0xdb,
	0xaf, 0xf6, 0x4f, 0xab, 0x06, 0x29, 0x43, 0xe1, 0xa0, 0x7b, 0x78, 0xfc, 0xf9, 0xfe, 0x69, 0x35,
	0x83, 0xc0, 0x69, 0xbb, 0x69, 0xed, 0x9f, 0x56, 0xb3, 0xbb, 0x5f, 0x1b, 0x50, 0x52, 0xa1, 0x3b,
	0xc6, 0x88, 0xac, 0xc3, 0xea, 0x7e, 0xf7, 0x45, 0xe7, 0xb0, 0xdf, 0xea, 0xee, 0xb5, 0xfb, 0xbd,
	0xf6, 0xe1, 0x71, 0xf5, 0x3d, 0x52, 0x85, 0xca, 0x5e, 0x7b, 0xbf, 0x7d, 0xdc, 0xde, 0xeb, 0x9f,
	0xf4, 0xda, 0x56, 0xd5, 0x40, 0xc9, 0xf3, 0x66, 0x67, 0xbf, 0xbd, 0xd7, 0x57, 0xec, 0x6a, 0x86,
	0xd4, 0x60, 0x43, 0x4b, 0x9a, 0x47, 0x9d, 0x7e, 0xf7, 0xa8, 0x6d, 0x35, 0x8f, 0x3b, 0xdd, 0xc3,
	0x6a, 0x96, 0x14, 0x20, 0xdb, 0xea, 0x1e, 0x56, 0x73, 0x64, 0x15, 0xca, 0x9a, 0xd2, 0xea, 0x5a,
	0xbd, 0xea, 0x12, 0xf9, 0x00, 0x36, 0x7b, 0x27, 0xad, 0x56, 0xbb, 0xd7, 0xeb, 0xb7, 0x0f, 0x9a,
	0x9d, 0xfd, 0xfe, 0x17, 0x6d, 0xab, 0xf3, 0xbc, 0xd3, 0x8a, 0x56, 0xe6, 0x1b, 0x1d, 0xa8, 0xec,
	0xb1, 0xc1, 0x78, 0xd8, 0x63, 0xc1, 0x25, 0xb7, 0x19, 0xf9, 0x31, 0xe4, 0xda, 0xf6, 0xb9, 0x47,
	0x16, 0xbc, 0xbb, 0xb9, 0xf0, 0x6d, 0xae, 0xfd, 0xe6, 0x1f, 0xff, 0xfe, 0x43, 0xa6, 0x6c, 0xe6,
	0xeb, 0x0e, 0x2e, 0x7f, 0x66, 0xec, 0x36, 0xfe, 0x68, 0xc0, 0xba, 0x7e, 0x82, 0x51, 0xf3, 0x43,
	0xac, 0x72, 0x0f, 0x4a, 0xd3, 0x97, 0x19, 0x72, 0x47, 0x79, 0x79, 0xf1, 0xa5, 0x66, 0x33, 0x9a,
	0xa6, 0xf1, 0xe2, 0x63, 0xde, 0x51, 0x9a, 0x57, 0x4d, 0xa8, 0x87, 0x31, 0xeb, 0x99, 0xb1, 0x4b,
	0x5e, 0x42, 0xf9, 0x44, 0x4c, 0x25, 0xe4, 0x5e, 0xb4, 0x40, 0xdc, 0xa4, 0xe9, 0x9e, 0xd2, 0xb4,
	0x66, 0x56, 0xea, 0x63, 0x31, 0xaf, 0xab, 0xf1, 0x73, 0xb8, 0x83, 0x63, 0x0d, 0xa6, 0x66, 0x74,
	0xce, 0x63, 0x53, 0x5b, 0x50, 0x78, 0xc1, 0xa4, 0x7a, 0x35, 0x99, 0x9e, 0x46, 0x64, 0x1e, 0x63,
	0xf5, 0x9e, 0x57, 0xbd, 0xa9, 0x54, 0x6f, 0x98, 0xab, 0x75, 0x7a, 0x45, 0x11, 0x6a, 0xff, 0x3a,
	0x0b, 0x65, 0x24, 0xc5, 0x4a, 0x3f, 0x07, 0x50, 0x47, 0x16, 0x65, 0x21, 0x01, 0xa5, 0x44, 0x09,
	0xe6, 0x15, 0x7e, 0x47, 0x29, 0x7c, 0xdf, 0xbc, 0x5b, 0x1f, 0x51, 0x41, 0x87, 0x6c, 0xc4, 0x84,
	0xac, 0xe3, 0x61, 0xac, 0xab, 0x8a, 0xfd, 0xcc, 0xd8, 0x7d, 0x6c, 0x90, 0xce, 0xcc, 0xbc, 0x84,
	0x13, 0x36, 0xaf, 0xee, 0x43, 0xa5, 0xee, 0x5b, 0xe6, 0xc6, 0x35, 0x75, 0x43, 0x26, 0xd1, 0x9d,
	0xcf, 0x01, 0x4e, 0xd4, 0xed, 0x58, 0x69, 0x9b, 0xad, 0x9c, 0x57, 0x62, 0x2a, 0x25, 0xf7, 0xcd,
	0x7b, 0xd7, 0x94, 0x44, 0x17, 0x6b, 0xd4, 0xd3, 0x85, 0xd2, 0xf4, 0x75, 0xf1, 0x06, 0xa3, 0x10,
	0xbf, 0x61, 0x8f, 0xea, 0x29, 0x31, 0xda, 0xe3, 0xcf, 0xa0, 0x32, 0xff, 0x62, 0x49, 0x6a, 0xf1,
	0x0d, 0x75, 0xf1, 0x11, 0xf3, 0x5a, 0x4a, 0xde, 0xae, 0xbe, 0x71, 0x08, 0x15, 0x75, 0x0e, 0xe3,
	0xd0, 0xfc, 0x04, 0x4a, 0x2f, 0x98, 0x54, 0xa2, 0x90, 0xac, 0xaa, 0x5f, 0x9a, 0x95, 0xd8, 0x4d,
	0x98, 0x09, 0x4c, 0xa2, 0x94, 0x57, 0xcc, 0x42, 0x9d, 0x29, 0xb6, 0x32, 0x76, 0x90, 0x57, 0xaf,
	0xac, 0x4f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xd0, 0xc0, 0xe2, 0xaa, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DebugServiceClient is the client API for DebugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugServiceClient interface {
	Echo(ctx context.Context, in *common.String, opts ...grpc.CallOption) (*common.String, error)
}

type debugServiceClient struct {
	cc *grpc.ClientConn
}

func NewDebugServiceClient(cc *grpc.ClientConn) DebugServiceClient {
	return &debugServiceClient{cc}
}

func (c *debugServiceClient) Echo(ctx context.Context, in *common.String, opts ...grpc.CallOption) (*common.String, error) {
	out := new(common.String)
	err := c.cc.Invoke(ctx, "/api.DebugService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServiceServer is the server API for DebugService service.
type DebugServiceServer interface {
	Echo(context.Context, *common.String) (*common.String, error)
}

func RegisterDebugServiceServer(s *grpc.Server, srv DebugServiceServer) {
	s.RegisterService(&_DebugService_serviceDesc, srv)
}

func _DebugService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DebugService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).Echo(ctx, req.(*common.String))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DebugService",
	HandlerType: (*DebugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _DebugService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*User, error)
	Unsubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...grpc.CallOption) (*User, error)
}

type subscriptionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSubscriptionServiceClient(cc *grpc.ClientConn) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.SubscriptionService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Unsubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.SubscriptionService/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
type SubscriptionServiceServer interface {
	Subscribe(context.Context, *SubscribeRequest) (*User, error)
	Unsubscribe(context.Context, *UnSubscribeRequest) (*User, error)
}

func RegisterSubscriptionServiceServer(s *grpc.Server, srv SubscriptionServiceServer) {
	s.RegisterService(&_SubscriptionService_serviceDesc, srv)
}

func _SubscriptionService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubscriptionService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubscriptionService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Unsubscribe(ctx, req.(*UnSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _SubscriptionService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _SubscriptionService_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	GetUser(ctx context.Context, in *common.AuthToken, opts ...grpc.CallOption) (*User, error)
}

type authenticationServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticationServiceClient(cc *grpc.ClientConn) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) GetUser(ctx context.Context, in *common.AuthToken, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.AuthenticationService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
type AuthenticationServiceServer interface {
	GetUser(context.Context, *common.AuthToken) (*User, error)
}

func RegisterAuthenticationServiceServer(s *grpc.Server, srv AuthenticationServiceServer) {
	s.RegisterService(&_AuthenticationService_serviceDesc, srv)
}

func _AuthenticationService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AuthToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AuthenticationService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).GetUser(ctx, req.(*common.AuthToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenticationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _AuthenticationService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	QueryUsers(ctx context.Context, in *Query, opts ...grpc.CallOption) (UserService_QueryUsersClient, error)
	GetUser(ctx context.Context, in *common.Identifier, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UserRoles(ctx context.Context, in *common.Identifier, opts ...grpc.CallOption) (UserService_UserRolesClient, error)
	AddUserRoles(ctx context.Context, in *AddUserRolesRequest, opts ...grpc.CallOption) (*common.String, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) QueryUsers(ctx context.Context, in *Query, opts ...grpc.CallOption) (UserService_QueryUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[0], "/api.UserService/QueryUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceQueryUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_QueryUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceQueryUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceQueryUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *common.Identifier, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserRoles(ctx context.Context, in *common.Identifier, opts ...grpc.CallOption) (UserService_UserRolesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[1], "/api.UserService/UserRoles", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceUserRolesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_UserRolesClient interface {
	Recv() (*Role, error)
	grpc.ClientStream
}

type userServiceUserRolesClient struct {
	grpc.ClientStream
}

func (x *userServiceUserRolesClient) Recv() (*Role, error) {
	m := new(Role)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) AddUserRoles(ctx context.Context, in *AddUserRolesRequest, opts ...grpc.CallOption) (*common.String, error) {
	out := new(common.String)
	err := c.cc.Invoke(ctx, "/api.UserService/AddUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	QueryUsers(*Query, UserService_QueryUsersServer) error
	GetUser(context.Context, *common.Identifier) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	UserRoles(*common.Identifier, UserService_UserRolesServer) error
	AddUserRoles(context.Context, *AddUserRolesRequest) (*common.String, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_QueryUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).QueryUsers(m, &userServiceQueryUsersServer{stream})
}

type UserService_QueryUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceQueryUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceQueryUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*common.Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserRoles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).UserRoles(m, &userServiceUserRolesServer{stream})
}

type UserService_UserRolesServer interface {
	Send(*Role) error
	grpc.ServerStream
}

type userServiceUserRolesServer struct {
	grpc.ServerStream
}

func (x *userServiceUserRolesServer) Send(m *Role) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_AddUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/AddUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserRoles(ctx, req.(*AddUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "AddUserRoles",
			Handler:    _UserService_AddUserRoles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryUsers",
			Handler:       _UserService_QueryUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UserRoles",
			Handler:       _UserService_UserRoles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	GetEvents(ctx context.Context, in *EventQuery, opts ...grpc.CallOption) (EventService_GetEventsClient, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) GetEvents(ctx context.Context, in *EventQuery, opts ...grpc.CallOption) (EventService_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventService_serviceDesc.Streams[0], "/api.EventService/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_GetEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventServiceGetEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceGetEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	GetEvents(*EventQuery, EventService_GetEventsServer) error
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).GetEvents(m, &eventServiceGetEventsServer{stream})
}

type EventService_GetEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventServiceGetEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceGetEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _EventService_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
