/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.common.Bool', null, global);
goog.exportSymbol('proto.common.Bytes', null, global);
goog.exportSymbol('proto.common.Empty', null, global);
goog.exportSymbol('proto.common.Error', null, global);
goog.exportSymbol('proto.common.Float64', null, global);
goog.exportSymbol('proto.common.Graph', null, global);
goog.exportSymbol('proto.common.GraphMedia', null, global);
goog.exportSymbol('proto.common.GraphShape', null, global);
goog.exportSymbol('proto.common.HTTPMethod', null, global);
goog.exportSymbol('proto.common.HTTPRequest', null, global);
goog.exportSymbol('proto.common.Identifier', null, global);
goog.exportSymbol('proto.common.Int64', null, global);
goog.exportSymbol('proto.common.RGBA', null, global);
goog.exportSymbol('proto.common.ScatterPlot', null, global);
goog.exportSymbol('proto.common.String', null, global);
goog.exportSymbol('proto.common.StringArray', null, global);
goog.exportSymbol('proto.common.StringMap', null, global);
goog.exportSymbol('proto.common.Token', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.String = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.String, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.String.displayName = 'proto.common.String';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.String.prototype.toObject = function(opt_includeInstance) {
  return proto.common.String.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.String} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.String.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.String}
 */
proto.common.String.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.String;
  return proto.common.String.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.String} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.String}
 */
proto.common.String.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.String.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.String.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.String} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.String.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.common.String.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.common.String.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Bytes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Bytes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Bytes.displayName = 'proto.common.Bytes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Bytes.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Bytes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Bytes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Bytes.toObject = function(includeInstance, msg) {
  var f, obj = {
    bits: msg.getBits_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Bytes}
 */
proto.common.Bytes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Bytes;
  return proto.common.Bytes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Bytes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Bytes}
 */
proto.common.Bytes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Bytes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Bytes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Bytes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Bytes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBits_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bits = 1;
 * @return {!(string|Uint8Array)}
 */
proto.common.Bytes.prototype.getBits = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bits = 1;
 * This is a type-conversion wrapper around `getBits()`
 * @return {string}
 */
proto.common.Bytes.prototype.getBits_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBits()));
};


/**
 * optional bytes bits = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBits()`
 * @return {!Uint8Array}
 */
proto.common.Bytes.prototype.getBits_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBits()));
};


/** @param {!(string|Uint8Array)} value */
proto.common.Bytes.prototype.setBits = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Bool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Bool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Bool.displayName = 'proto.common.Bool';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Bool.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Bool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Bool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Bool.toObject = function(includeInstance, msg) {
  var f, obj = {
    answer: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Bool}
 */
proto.common.Bool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Bool;
  return proto.common.Bool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Bool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Bool}
 */
proto.common.Bool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Bool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Bool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Bool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Bool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswer();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool answer = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.common.Bool.prototype.getAnswer = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.common.Bool.prototype.setAnswer = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.StringArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.StringArray.repeatedFields_, null);
};
goog.inherits(proto.common.StringArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.StringArray.displayName = 'proto.common.StringArray';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.StringArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.StringArray.prototype.toObject = function(opt_includeInstance) {
  return proto.common.StringArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.StringArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StringArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringsList: jspb.Message.toObjectList(msg.getStringsList(),
    proto.common.String.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.StringArray}
 */
proto.common.StringArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.StringArray;
  return proto.common.StringArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.StringArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.StringArray}
 */
proto.common.StringArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.addStrings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.StringArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.StringArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.StringArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StringArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
};


/**
 * repeated String strings = 1;
 * @return {!Array<!proto.common.String>}
 */
proto.common.StringArray.prototype.getStringsList = function() {
  return /** @type{!Array<!proto.common.String>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.String, 1));
};


/** @param {!Array<!proto.common.String>} value */
proto.common.StringArray.prototype.setStringsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.String=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.String}
 */
proto.common.StringArray.prototype.addStrings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.String, opt_index);
};


proto.common.StringArray.prototype.clearStringsList = function() {
  this.setStringsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.StringMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.StringMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.StringMap.displayName = 'proto.common.StringMap';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.StringMap.prototype.toObject = function(opt_includeInstance) {
  return proto.common.StringMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.StringMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StringMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringMapMap: (f = msg.getStringMapMap()) ? f.toObject(includeInstance, proto.common.String.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.StringMap}
 */
proto.common.StringMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.StringMap;
  return proto.common.StringMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.StringMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.StringMap}
 */
proto.common.StringMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getStringMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.String.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.StringMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.StringMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.StringMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StringMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.String.serializeBinaryToWriter);
  }
};


/**
 * map<string, String> string_map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.String>}
 */
proto.common.StringMap.prototype.getStringMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.String>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.common.String));
};


proto.common.StringMap.prototype.clearStringMapMap = function() {
  this.getStringMapMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Empty.displayName = 'proto.common.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Empty}
 */
proto.common.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Empty;
  return proto.common.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Empty}
 */
proto.common.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Identifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Identifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Identifier.displayName = 'proto.common.Identifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Identifier.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Identifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Identifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Identifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.common.String.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Identifier}
 */
proto.common.Identifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Identifier;
  return proto.common.Identifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Identifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Identifier}
 */
proto.common.Identifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Identifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Identifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Identifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Identifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
};


/**
 * optional String id = 1;
 * @return {?proto.common.String}
 */
proto.common.Identifier.prototype.getId = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 1));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Identifier.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.common.Identifier.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Identifier.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Int64 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Int64, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Int64.displayName = 'proto.common.Int64';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Int64.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Int64.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Int64} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Int64.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Int64}
 */
proto.common.Int64.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Int64;
  return proto.common.Int64.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Int64} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Int64}
 */
proto.common.Int64.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Int64.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Int64.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Int64} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Int64.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 num = 1;
 * @return {number}
 */
proto.common.Int64.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.common.Int64.prototype.setNum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Float64 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Float64, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Float64.displayName = 'proto.common.Float64';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Float64.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Float64.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Float64} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Float64.toObject = function(includeInstance, msg) {
  var f, obj = {
    num: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Float64}
 */
proto.common.Float64.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Float64;
  return proto.common.Float64.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Float64} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Float64}
 */
proto.common.Float64.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Float64.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Float64.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Float64} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Float64.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNum();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double num = 1;
 * @return {number}
 */
proto.common.Float64.prototype.getNum = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.common.Float64.prototype.setNum = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.Graph.repeatedFields_, null);
};
goog.inherits(proto.common.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Graph.displayName = 'proto.common.Graph';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.Graph.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Graph.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Graph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    xsList: jspb.Message.toObjectList(msg.getXsList(),
    proto.common.Float64.toObject, includeInstance),
    ysList: jspb.Message.toObjectList(msg.getYsList(),
    proto.common.Float64.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Graph}
 */
proto.common.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Graph;
  return proto.common.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Graph}
 */
proto.common.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.Float64;
      reader.readMessage(value,proto.common.Float64.deserializeBinaryFromReader);
      msg.addXs(value);
      break;
    case 2:
      var value = new proto.common.Float64;
      reader.readMessage(value,proto.common.Float64.deserializeBinaryFromReader);
      msg.addYs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Graph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Graph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.Float64.serializeBinaryToWriter
    );
  }
  f = message.getYsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.common.Float64.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Float64 xs = 1;
 * @return {!Array<!proto.common.Float64>}
 */
proto.common.Graph.prototype.getXsList = function() {
  return /** @type{!Array<!proto.common.Float64>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.Float64, 1));
};


/** @param {!Array<!proto.common.Float64>} value */
proto.common.Graph.prototype.setXsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.Float64=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.Float64}
 */
proto.common.Graph.prototype.addXs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.Float64, opt_index);
};


proto.common.Graph.prototype.clearXsList = function() {
  this.setXsList([]);
};


/**
 * repeated Float64 ys = 2;
 * @return {!Array<!proto.common.Float64>}
 */
proto.common.Graph.prototype.getYsList = function() {
  return /** @type{!Array<!proto.common.Float64>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.Float64, 2));
};


/** @param {!Array<!proto.common.Float64>} value */
proto.common.Graph.prototype.setYsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.common.Float64=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.Float64}
 */
proto.common.Graph.prototype.addYs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.common.Float64, opt_index);
};


proto.common.Graph.prototype.clearYsList = function() {
  this.setYsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ScatterPlot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ScatterPlot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.ScatterPlot.displayName = 'proto.common.ScatterPlot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ScatterPlot.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ScatterPlot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ScatterPlot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ScatterPlot.toObject = function(includeInstance, msg) {
  var f, obj = {
    graph: (f = msg.getGraph()) && proto.common.Graph.toObject(includeInstance, f),
    shape: jspb.Message.getFieldWithDefault(msg, 2, 0),
    media: jspb.Message.getFieldWithDefault(msg, 3, 0),
    color: (f = msg.getColor()) && proto.common.RGBA.toObject(includeInstance, f),
    width: (f = msg.getWidth()) && proto.common.Int64.toObject(includeInstance, f),
    hieght: (f = msg.getHieght()) && proto.common.Int64.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ScatterPlot}
 */
proto.common.ScatterPlot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ScatterPlot;
  return proto.common.ScatterPlot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ScatterPlot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ScatterPlot}
 */
proto.common.ScatterPlot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.Graph;
      reader.readMessage(value,proto.common.Graph.deserializeBinaryFromReader);
      msg.setGraph(value);
      break;
    case 2:
      var value = /** @type {!proto.common.GraphShape} */ (reader.readEnum());
      msg.setShape(value);
      break;
    case 3:
      var value = /** @type {!proto.common.GraphMedia} */ (reader.readEnum());
      msg.setMedia(value);
      break;
    case 4:
      var value = new proto.common.RGBA;
      reader.readMessage(value,proto.common.RGBA.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 5:
      var value = new proto.common.Int64;
      reader.readMessage(value,proto.common.Int64.deserializeBinaryFromReader);
      msg.setWidth(value);
      break;
    case 6:
      var value = new proto.common.Int64;
      reader.readMessage(value,proto.common.Int64.deserializeBinaryFromReader);
      msg.setHieght(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ScatterPlot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ScatterPlot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ScatterPlot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ScatterPlot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraph();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.Graph.serializeBinaryToWriter
    );
  }
  f = message.getShape();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMedia();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.RGBA.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.common.Int64.serializeBinaryToWriter
    );
  }
  f = message.getHieght();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.common.Int64.serializeBinaryToWriter
    );
  }
};


/**
 * optional Graph graph = 1;
 * @return {?proto.common.Graph}
 */
proto.common.ScatterPlot.prototype.getGraph = function() {
  return /** @type{?proto.common.Graph} */ (
    jspb.Message.getWrapperField(this, proto.common.Graph, 1));
};


/** @param {?proto.common.Graph|undefined} value */
proto.common.ScatterPlot.prototype.setGraph = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.common.ScatterPlot.prototype.clearGraph = function() {
  this.setGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.ScatterPlot.prototype.hasGraph = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GraphShape shape = 2;
 * @return {!proto.common.GraphShape}
 */
proto.common.ScatterPlot.prototype.getShape = function() {
  return /** @type {!proto.common.GraphShape} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.common.GraphShape} value */
proto.common.ScatterPlot.prototype.setShape = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional GraphMedia media = 3;
 * @return {!proto.common.GraphMedia}
 */
proto.common.ScatterPlot.prototype.getMedia = function() {
  return /** @type {!proto.common.GraphMedia} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.common.GraphMedia} value */
proto.common.ScatterPlot.prototype.setMedia = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional RGBA color = 4;
 * @return {?proto.common.RGBA}
 */
proto.common.ScatterPlot.prototype.getColor = function() {
  return /** @type{?proto.common.RGBA} */ (
    jspb.Message.getWrapperField(this, proto.common.RGBA, 4));
};


/** @param {?proto.common.RGBA|undefined} value */
proto.common.ScatterPlot.prototype.setColor = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.common.ScatterPlot.prototype.clearColor = function() {
  this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.ScatterPlot.prototype.hasColor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Int64 Width = 5;
 * @return {?proto.common.Int64}
 */
proto.common.ScatterPlot.prototype.getWidth = function() {
  return /** @type{?proto.common.Int64} */ (
    jspb.Message.getWrapperField(this, proto.common.Int64, 5));
};


/** @param {?proto.common.Int64|undefined} value */
proto.common.ScatterPlot.prototype.setWidth = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.common.ScatterPlot.prototype.clearWidth = function() {
  this.setWidth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.ScatterPlot.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Int64 Hieght = 6;
 * @return {?proto.common.Int64}
 */
proto.common.ScatterPlot.prototype.getHieght = function() {
  return /** @type{?proto.common.Int64} */ (
    jspb.Message.getWrapperField(this, proto.common.Int64, 6));
};


/** @param {?proto.common.Int64|undefined} value */
proto.common.ScatterPlot.prototype.setHieght = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.common.ScatterPlot.prototype.clearHieght = function() {
  this.setHieght(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.ScatterPlot.prototype.hasHieght = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.RGBA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.RGBA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.RGBA.displayName = 'proto.common.RGBA';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.RGBA.prototype.toObject = function(opt_includeInstance) {
  return proto.common.RGBA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.RGBA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.RGBA.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: (f = msg.getR()) && proto.common.Int64.toObject(includeInstance, f),
    g: (f = msg.getG()) && proto.common.Int64.toObject(includeInstance, f),
    b: (f = msg.getB()) && proto.common.Int64.toObject(includeInstance, f),
    a: (f = msg.getA()) && proto.common.Int64.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.RGBA}
 */
proto.common.RGBA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.RGBA;
  return proto.common.RGBA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.RGBA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.RGBA}
 */
proto.common.RGBA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.Int64;
      reader.readMessage(value,proto.common.Int64.deserializeBinaryFromReader);
      msg.setR(value);
      break;
    case 2:
      var value = new proto.common.Int64;
      reader.readMessage(value,proto.common.Int64.deserializeBinaryFromReader);
      msg.setG(value);
      break;
    case 3:
      var value = new proto.common.Int64;
      reader.readMessage(value,proto.common.Int64.deserializeBinaryFromReader);
      msg.setB(value);
      break;
    case 4:
      var value = new proto.common.Int64;
      reader.readMessage(value,proto.common.Int64.deserializeBinaryFromReader);
      msg.setA(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.RGBA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.RGBA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.RGBA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.RGBA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.Int64.serializeBinaryToWriter
    );
  }
  f = message.getG();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.Int64.serializeBinaryToWriter
    );
  }
  f = message.getB();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.Int64.serializeBinaryToWriter
    );
  }
  f = message.getA();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.Int64.serializeBinaryToWriter
    );
  }
};


/**
 * optional Int64 r = 1;
 * @return {?proto.common.Int64}
 */
proto.common.RGBA.prototype.getR = function() {
  return /** @type{?proto.common.Int64} */ (
    jspb.Message.getWrapperField(this, proto.common.Int64, 1));
};


/** @param {?proto.common.Int64|undefined} value */
proto.common.RGBA.prototype.setR = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.common.RGBA.prototype.clearR = function() {
  this.setR(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.RGBA.prototype.hasR = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Int64 g = 2;
 * @return {?proto.common.Int64}
 */
proto.common.RGBA.prototype.getG = function() {
  return /** @type{?proto.common.Int64} */ (
    jspb.Message.getWrapperField(this, proto.common.Int64, 2));
};


/** @param {?proto.common.Int64|undefined} value */
proto.common.RGBA.prototype.setG = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.common.RGBA.prototype.clearG = function() {
  this.setG(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.RGBA.prototype.hasG = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Int64 b = 3;
 * @return {?proto.common.Int64}
 */
proto.common.RGBA.prototype.getB = function() {
  return /** @type{?proto.common.Int64} */ (
    jspb.Message.getWrapperField(this, proto.common.Int64, 3));
};


/** @param {?proto.common.Int64|undefined} value */
proto.common.RGBA.prototype.setB = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.common.RGBA.prototype.clearB = function() {
  this.setB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.RGBA.prototype.hasB = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Int64 a = 4;
 * @return {?proto.common.Int64}
 */
proto.common.RGBA.prototype.getA = function() {
  return /** @type{?proto.common.Int64} */ (
    jspb.Message.getWrapperField(this, proto.common.Int64, 4));
};


/** @param {?proto.common.Int64|undefined} value */
proto.common.RGBA.prototype.setA = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.common.RGBA.prototype.clearA = function() {
  this.setA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.RGBA.prototype.hasA = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Error.displayName = 'proto.common.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorMsg: (f = msg.getErrorMsg()) && proto.common.String.toObject(includeInstance, f),
    info: (f = msg.getInfo()) && proto.common.String.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Error}
 */
proto.common.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Error;
  return proto.common.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Error}
 */
proto.common.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setErrorMsg(value);
      break;
    case 3:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorMsg();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
};


/**
 * optional String error_msg = 1;
 * @return {?proto.common.String}
 */
proto.common.Error.prototype.getErrorMsg = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 1));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Error.prototype.setErrorMsg = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.common.Error.prototype.clearErrorMsg = function() {
  this.setErrorMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Error.prototype.hasErrorMsg = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional String info = 3;
 * @return {?proto.common.String}
 */
proto.common.Error.prototype.getInfo = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 3));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Error.prototype.setInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.common.Error.prototype.clearInfo = function() {
  this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Error.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.HTTPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.HTTPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.HTTPRequest.displayName = 'proto.common.HTTPRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.HTTPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.common.HTTPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.HTTPRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.HTTPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: (f = msg.getUrl()) && proto.common.String.toObject(includeInstance, f),
    form: (f = msg.getForm()) && proto.common.StringMap.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.common.Bytes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.HTTPRequest}
 */
proto.common.HTTPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.HTTPRequest;
  return proto.common.HTTPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.HTTPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.HTTPRequest}
 */
proto.common.HTTPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.HTTPMethod} */ (reader.readEnum());
      msg.setMethod(value);
      break;
    case 2:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setUrl(value);
      break;
    case 3:
      var value = new proto.common.StringMap;
      reader.readMessage(value,proto.common.StringMap.deserializeBinaryFromReader);
      msg.setForm(value);
      break;
    case 4:
      var value = new proto.common.Bytes;
      reader.readMessage(value,proto.common.Bytes.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.HTTPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.HTTPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.HTTPRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.HTTPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getForm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.StringMap.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.Bytes.serializeBinaryToWriter
    );
  }
};


/**
 * optional HTTPMethod method = 1;
 * @return {!proto.common.HTTPMethod}
 */
proto.common.HTTPRequest.prototype.getMethod = function() {
  return /** @type {!proto.common.HTTPMethod} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.common.HTTPMethod} value */
proto.common.HTTPRequest.prototype.setMethod = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional String url = 2;
 * @return {?proto.common.String}
 */
proto.common.HTTPRequest.prototype.getUrl = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 2));
};


/** @param {?proto.common.String|undefined} value */
proto.common.HTTPRequest.prototype.setUrl = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.common.HTTPRequest.prototype.clearUrl = function() {
  this.setUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.HTTPRequest.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StringMap form = 3;
 * @return {?proto.common.StringMap}
 */
proto.common.HTTPRequest.prototype.getForm = function() {
  return /** @type{?proto.common.StringMap} */ (
    jspb.Message.getWrapperField(this, proto.common.StringMap, 3));
};


/** @param {?proto.common.StringMap|undefined} value */
proto.common.HTTPRequest.prototype.setForm = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.common.HTTPRequest.prototype.clearForm = function() {
  this.setForm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.HTTPRequest.prototype.hasForm = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Bytes body = 4;
 * @return {?proto.common.Bytes}
 */
proto.common.HTTPRequest.prototype.getBody = function() {
  return /** @type{?proto.common.Bytes} */ (
    jspb.Message.getWrapperField(this, proto.common.Bytes, 4));
};


/** @param {?proto.common.Bytes|undefined} value */
proto.common.HTTPRequest.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.common.HTTPRequest.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.HTTPRequest.prototype.hasBody = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.common.Token.displayName = 'proto.common.Token';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessToken: (f = msg.getAccessToken()) && proto.common.String.toObject(includeInstance, f),
    tokenType: (f = msg.getTokenType()) && proto.common.String.toObject(includeInstance, f),
    refreshToken: (f = msg.getRefreshToken()) && proto.common.String.toObject(includeInstance, f),
    expiry: (f = msg.getExpiry()) && proto.common.String.toObject(includeInstance, f),
    idToken: (f = msg.getIdToken()) && proto.common.String.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Token}
 */
proto.common.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Token;
  return proto.common.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Token}
 */
proto.common.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setAccessToken(value);
      break;
    case 2:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setTokenType(value);
      break;
    case 3:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setRefreshToken(value);
      break;
    case 4:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setExpiry(value);
      break;
    case 5:
      var value = new proto.common.String;
      reader.readMessage(value,proto.common.String.deserializeBinaryFromReader);
      msg.setIdToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getTokenType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getRefreshToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getExpiry();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
  f = message.getIdToken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.common.String.serializeBinaryToWriter
    );
  }
};


/**
 * optional String access_token = 1;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getAccessToken = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 1));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setAccessToken = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.common.Token.prototype.clearAccessToken = function() {
  this.setAccessToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasAccessToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional String token_type = 2;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getTokenType = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 2));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setTokenType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.common.Token.prototype.clearTokenType = function() {
  this.setTokenType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasTokenType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional String refresh_token = 3;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getRefreshToken = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 3));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setRefreshToken = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.common.Token.prototype.clearRefreshToken = function() {
  this.setRefreshToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasRefreshToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional String expiry = 4;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getExpiry = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 4));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setExpiry = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.common.Token.prototype.clearExpiry = function() {
  this.setExpiry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasExpiry = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional String id_token = 5;
 * @return {?proto.common.String}
 */
proto.common.Token.prototype.getIdToken = function() {
  return /** @type{?proto.common.String} */ (
    jspb.Message.getWrapperField(this, proto.common.String, 5));
};


/** @param {?proto.common.String|undefined} value */
proto.common.Token.prototype.setIdToken = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.common.Token.prototype.clearIdToken = function() {
  this.setIdToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.common.Token.prototype.hasIdToken = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.common.GraphShape = {
  CIRCLE: 0
};

/**
 * @enum {number}
 */
proto.common.GraphMedia = {
  PNG: 0
};

/**
 * @enum {number}
 */
proto.common.HTTPMethod = {
  GET: 0,
  POST: 1,
  PATCH: 2
};

goog.object.extend(exports, proto.common);
