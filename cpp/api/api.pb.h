// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/auth.pb.h"
#include "google/pubsub/v1/pubsub.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[50];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class Access;
class AccessDefaultTypeInternal;
extern AccessDefaultTypeInternal _Access_default_instance_;
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Attachment;
class AttachmentDefaultTypeInternal;
extern AttachmentDefaultTypeInternal _Attachment_default_instance_;
class AttachmentAction;
class AttachmentActionDefaultTypeInternal;
extern AttachmentActionDefaultTypeInternal _AttachmentAction_default_instance_;
class AttachmentActionOption;
class AttachmentActionOptionDefaultTypeInternal;
extern AttachmentActionOptionDefaultTypeInternal _AttachmentActionOption_default_instance_;
class AttachmentActionOptionGroup;
class AttachmentActionOptionGroupDefaultTypeInternal;
extern AttachmentActionOptionGroupDefaultTypeInternal _AttachmentActionOptionGroup_default_instance_;
class AttachmentConfirmationField;
class AttachmentConfirmationFieldDefaultTypeInternal;
extern AttachmentConfirmationFieldDefaultTypeInternal _AttachmentConfirmationField_default_instance_;
class AttachmentField;
class AttachmentFieldDefaultTypeInternal;
extern AttachmentFieldDefaultTypeInternal _AttachmentField_default_instance_;
class BankAccount;
class BankAccountDefaultTypeInternal;
extern BankAccountDefaultTypeInternal _BankAccount_default_instance_;
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class CallRequest;
class CallRequestDefaultTypeInternal;
extern CallRequestDefaultTypeInternal _CallRequest_default_instance_;
class CancelSubscriptionRequest;
class CancelSubscriptionRequestDefaultTypeInternal;
extern CancelSubscriptionRequestDefaultTypeInternal _CancelSubscriptionRequest_default_instance_;
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class ChannelReminder;
class ChannelReminderDefaultTypeInternal;
extern ChannelReminderDefaultTypeInternal _ChannelReminder_default_instance_;
class ChargeRequest;
class ChargeRequestDefaultTypeInternal;
extern ChargeRequestDefaultTypeInternal _ChargeRequest_default_instance_;
class CreateAccountRequest;
class CreateAccountRequestDefaultTypeInternal;
extern CreateAccountRequestDefaultTypeInternal _CreateAccountRequest_default_instance_;
class CreatePlanRequest;
class CreatePlanRequestDefaultTypeInternal;
extern CreatePlanRequestDefaultTypeInternal _CreatePlanRequest_default_instance_;
class Customer;
class CustomerDefaultTypeInternal;
extern CustomerDefaultTypeInternal _Customer_default_instance_;
class CustomerRequest;
class CustomerRequestDefaultTypeInternal;
extern CustomerRequestDefaultTypeInternal _CustomerRequest_default_instance_;
class Customer_MetadataEntry_DoNotUse;
class Customer_MetadataEntry_DoNotUseDefaultTypeInternal;
extern Customer_MetadataEntry_DoNotUseDefaultTypeInternal _Customer_MetadataEntry_DoNotUse_default_instance_;
class Email;
class EmailDefaultTypeInternal;
extern EmailDefaultTypeInternal _Email_default_instance_;
class EmailAddress;
class EmailAddressDefaultTypeInternal;
extern EmailAddressDefaultTypeInternal _EmailAddress_default_instance_;
class EmailRequest;
class EmailRequestDefaultTypeInternal;
extern EmailRequestDefaultTypeInternal _EmailRequest_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Fax;
class FaxDefaultTypeInternal;
extern FaxDefaultTypeInternal _Fax_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class File_TagsEntry_DoNotUse;
class File_TagsEntry_DoNotUseDefaultTypeInternal;
extern File_TagsEntry_DoNotUseDefaultTypeInternal _File_TagsEntry_DoNotUse_default_instance_;
class Id;
class IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class ItemRef;
class ItemRefDefaultTypeInternal;
extern ItemRefDefaultTypeInternal _ItemRef_default_instance_;
class JSON;
class JSONDefaultTypeInternal;
extern JSONDefaultTypeInternal _JSON_default_instance_;
class LogConfig;
class LogConfigDefaultTypeInternal;
extern LogConfigDefaultTypeInternal _LogConfig_default_instance_;
class LogHook;
class LogHookDefaultTypeInternal;
extern LogHookDefaultTypeInternal _LogHook_default_instance_;
class MMSRequest;
class MMSRequestDefaultTypeInternal;
extern MMSRequestDefaultTypeInternal _MMSRequest_default_instance_;
class MessageUserRequest;
class MessageUserRequestDefaultTypeInternal;
extern MessageUserRequestDefaultTypeInternal _MessageUserRequest_default_instance_;
class Pin;
class PinDefaultTypeInternal;
extern PinDefaultTypeInternal _Pin_default_instance_;
class Product;
class ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class Product_TagsEntry_DoNotUse;
class Product_TagsEntry_DoNotUseDefaultTypeInternal;
extern Product_TagsEntry_DoNotUseDefaultTypeInternal _Product_TagsEntry_DoNotUse_default_instance_;
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class RecipientEmail;
class RecipientEmailDefaultTypeInternal;
extern RecipientEmailDefaultTypeInternal _RecipientEmail_default_instance_;
class RefundRequest;
class RefundRequestDefaultTypeInternal;
extern RefundRequestDefaultTypeInternal _RefundRequest_default_instance_;
class SMS;
class SMSDefaultTypeInternal;
extern SMSDefaultTypeInternal _SMS_default_instance_;
class SMSRequest;
class SMSRequestDefaultTypeInternal;
extern SMSRequestDefaultTypeInternal _SMSRequest_default_instance_;
class SignedKey;
class SignedKeyDefaultTypeInternal;
extern SignedKeyDefaultTypeInternal _SignedKey_default_instance_;
class StandardClaims;
class StandardClaimsDefaultTypeInternal;
extern StandardClaimsDefaultTypeInternal _StandardClaims_default_instance_;
class Star;
class StarDefaultTypeInternal;
extern StarDefaultTypeInternal _Star_default_instance_;
class SubscribeCustomerRequest;
class SubscribeCustomerRequestDefaultTypeInternal;
extern SubscribeCustomerRequestDefaultTypeInternal _SubscribeCustomerRequest_default_instance_;
class UpdateCustomerRequest;
class UpdateCustomerRequestDefaultTypeInternal;
extern UpdateCustomerRequestDefaultTypeInternal _UpdateCustomerRequest_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserReminder;
class UserReminderDefaultTypeInternal;
extern UserReminderDefaultTypeInternal _UserReminder_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::Access* Arena::CreateMaybeMessage<::api::Access>(Arena*);
template<> ::api::Account* Arena::CreateMaybeMessage<::api::Account>(Arena*);
template<> ::api::Address* Arena::CreateMaybeMessage<::api::Address>(Arena*);
template<> ::api::Attachment* Arena::CreateMaybeMessage<::api::Attachment>(Arena*);
template<> ::api::AttachmentAction* Arena::CreateMaybeMessage<::api::AttachmentAction>(Arena*);
template<> ::api::AttachmentActionOption* Arena::CreateMaybeMessage<::api::AttachmentActionOption>(Arena*);
template<> ::api::AttachmentActionOptionGroup* Arena::CreateMaybeMessage<::api::AttachmentActionOptionGroup>(Arena*);
template<> ::api::AttachmentConfirmationField* Arena::CreateMaybeMessage<::api::AttachmentConfirmationField>(Arena*);
template<> ::api::AttachmentField* Arena::CreateMaybeMessage<::api::AttachmentField>(Arena*);
template<> ::api::BankAccount* Arena::CreateMaybeMessage<::api::BankAccount>(Arena*);
template<> ::api::Call* Arena::CreateMaybeMessage<::api::Call>(Arena*);
template<> ::api::CallRequest* Arena::CreateMaybeMessage<::api::CallRequest>(Arena*);
template<> ::api::CancelSubscriptionRequest* Arena::CreateMaybeMessage<::api::CancelSubscriptionRequest>(Arena*);
template<> ::api::Card* Arena::CreateMaybeMessage<::api::Card>(Arena*);
template<> ::api::ChannelReminder* Arena::CreateMaybeMessage<::api::ChannelReminder>(Arena*);
template<> ::api::ChargeRequest* Arena::CreateMaybeMessage<::api::ChargeRequest>(Arena*);
template<> ::api::CreateAccountRequest* Arena::CreateMaybeMessage<::api::CreateAccountRequest>(Arena*);
template<> ::api::CreatePlanRequest* Arena::CreateMaybeMessage<::api::CreatePlanRequest>(Arena*);
template<> ::api::Customer* Arena::CreateMaybeMessage<::api::Customer>(Arena*);
template<> ::api::CustomerRequest* Arena::CreateMaybeMessage<::api::CustomerRequest>(Arena*);
template<> ::api::Customer_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::api::Customer_MetadataEntry_DoNotUse>(Arena*);
template<> ::api::Email* Arena::CreateMaybeMessage<::api::Email>(Arena*);
template<> ::api::EmailAddress* Arena::CreateMaybeMessage<::api::EmailAddress>(Arena*);
template<> ::api::EmailRequest* Arena::CreateMaybeMessage<::api::EmailRequest>(Arena*);
template<> ::api::Empty* Arena::CreateMaybeMessage<::api::Empty>(Arena*);
template<> ::api::Fax* Arena::CreateMaybeMessage<::api::Fax>(Arena*);
template<> ::api::File* Arena::CreateMaybeMessage<::api::File>(Arena*);
template<> ::api::File_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::api::File_TagsEntry_DoNotUse>(Arena*);
template<> ::api::Id* Arena::CreateMaybeMessage<::api::Id>(Arena*);
template<> ::api::ItemRef* Arena::CreateMaybeMessage<::api::ItemRef>(Arena*);
template<> ::api::JSON* Arena::CreateMaybeMessage<::api::JSON>(Arena*);
template<> ::api::LogConfig* Arena::CreateMaybeMessage<::api::LogConfig>(Arena*);
template<> ::api::LogHook* Arena::CreateMaybeMessage<::api::LogHook>(Arena*);
template<> ::api::MMSRequest* Arena::CreateMaybeMessage<::api::MMSRequest>(Arena*);
template<> ::api::MessageUserRequest* Arena::CreateMaybeMessage<::api::MessageUserRequest>(Arena*);
template<> ::api::Pin* Arena::CreateMaybeMessage<::api::Pin>(Arena*);
template<> ::api::Product* Arena::CreateMaybeMessage<::api::Product>(Arena*);
template<> ::api::Product_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::api::Product_TagsEntry_DoNotUse>(Arena*);
template<> ::api::Profile* Arena::CreateMaybeMessage<::api::Profile>(Arena*);
template<> ::api::RecipientEmail* Arena::CreateMaybeMessage<::api::RecipientEmail>(Arena*);
template<> ::api::RefundRequest* Arena::CreateMaybeMessage<::api::RefundRequest>(Arena*);
template<> ::api::SMS* Arena::CreateMaybeMessage<::api::SMS>(Arena*);
template<> ::api::SMSRequest* Arena::CreateMaybeMessage<::api::SMSRequest>(Arena*);
template<> ::api::SignedKey* Arena::CreateMaybeMessage<::api::SignedKey>(Arena*);
template<> ::api::StandardClaims* Arena::CreateMaybeMessage<::api::StandardClaims>(Arena*);
template<> ::api::Star* Arena::CreateMaybeMessage<::api::Star>(Arena*);
template<> ::api::SubscribeCustomerRequest* Arena::CreateMaybeMessage<::api::SubscribeCustomerRequest>(Arena*);
template<> ::api::UpdateCustomerRequest* Arena::CreateMaybeMessage<::api::UpdateCustomerRequest>(Arena*);
template<> ::api::User* Arena::CreateMaybeMessage<::api::User>(Arena*);
template<> ::api::UserReminder* Arena::CreateMaybeMessage<::api::UserReminder>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

enum CustomerIndex {
  ID = 0,
  EMAIL = 1,
  PHONE = 2,
  CustomerIndex_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CustomerIndex_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CustomerIndex_IsValid(int value);
const CustomerIndex CustomerIndex_MIN = ID;
const CustomerIndex CustomerIndex_MAX = PHONE;
const int CustomerIndex_ARRAYSIZE = CustomerIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* CustomerIndex_descriptor();
inline const ::std::string& CustomerIndex_Name(CustomerIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    CustomerIndex_descriptor(), value);
}
inline bool CustomerIndex_Parse(
    const ::std::string& name, CustomerIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CustomerIndex>(
    CustomerIndex_descriptor(), name, value);
}
enum Claim {
  TWILIO = 0,
  SENDGRID = 1,
  STRIPE = 2,
  SLACK = 3,
  GCP = 4,
  AUTOM8TER = 5,
  Claim_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Claim_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Claim_IsValid(int value);
const Claim Claim_MIN = TWILIO;
const Claim Claim_MAX = AUTOM8TER;
const int Claim_ARRAYSIZE = Claim_MAX + 1;

const ::google::protobuf::EnumDescriptor* Claim_descriptor();
inline const ::std::string& Claim_Name(Claim value) {
  return ::google::protobuf::internal::NameOfEnum(
    Claim_descriptor(), value);
}
inline bool Claim_Parse(
    const ::std::string& name, Claim* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Claim>(
    Claim_descriptor(), name, value);
}
enum SigningMethod {
  HMAC = 0,
  ECDSA = 1,
  RSA = 2,
  RSAPPS = 3,
  SigningMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SigningMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SigningMethod_IsValid(int value);
const SigningMethod SigningMethod_MIN = HMAC;
const SigningMethod SigningMethod_MAX = RSAPPS;
const int SigningMethod_ARRAYSIZE = SigningMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigningMethod_descriptor();
inline const ::std::string& SigningMethod_Name(SigningMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigningMethod_descriptor(), value);
}
inline bool SigningMethod_Parse(
    const ::std::string& name, SigningMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigningMethod>(
    SigningMethod_descriptor(), name, value);
}
enum CardType {
  VISA = 0,
  MASTERCARD = 1,
  DISCOVER = 2,
  AMEX = 3,
  CardType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CardType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CardType_IsValid(int value);
const CardType CardType_MIN = VISA;
const CardType CardType_MAX = AMEX;
const int CardType_ARRAYSIZE = CardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CardType_descriptor();
inline const ::std::string& CardType_Name(CardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CardType_descriptor(), value);
}
inline bool CardType_Parse(
    const ::std::string& name, CardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CardType>(
    CardType_descriptor(), name, value);
}
// ===================================================================

class Id : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Id) */ {
 public:
  Id();
  virtual ~Id();

  Id(const Id& from);

  inline Id& operator=(const Id& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Id(Id&& from) noexcept
    : Id() {
    *this = ::std::move(from);
  }

  inline Id& operator=(Id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Id* internal_default_instance() {
    return reinterpret_cast<const Id*>(
               &_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Id* other);
  friend void swap(Id& a, Id& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Id* New() const final {
    return CreateMaybeMessage<Id>(NULL);
  }

  Id* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Id>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Id& from);
  void MergeFrom(const Id& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:api.Id)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.MessageUserRequest) */ {
 public:
  MessageUserRequest();
  virtual ~MessageUserRequest();

  MessageUserRequest(const MessageUserRequest& from);

  inline MessageUserRequest& operator=(const MessageUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageUserRequest(MessageUserRequest&& from) noexcept
    : MessageUserRequest() {
    *this = ::std::move(from);
  }

  inline MessageUserRequest& operator=(MessageUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageUserRequest* internal_default_instance() {
    return reinterpret_cast<const MessageUserRequest*>(
               &_MessageUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MessageUserRequest* other);
  friend void swap(MessageUserRequest& a, MessageUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageUserRequest* New() const final {
    return CreateMaybeMessage<MessageUserRequest>(NULL);
  }

  MessageUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageUserRequest& from);
  void MergeFrom(const MessageUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:api.MessageUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefundRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.RefundRequest) */ {
 public:
  RefundRequest();
  virtual ~RefundRequest();

  RefundRequest(const RefundRequest& from);

  inline RefundRequest& operator=(const RefundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefundRequest(RefundRequest&& from) noexcept
    : RefundRequest() {
    *this = ::std::move(from);
  }

  inline RefundRequest& operator=(RefundRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefundRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefundRequest* internal_default_instance() {
    return reinterpret_cast<const RefundRequest*>(
               &_RefundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RefundRequest* other);
  friend void swap(RefundRequest& a, RefundRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefundRequest* New() const final {
    return CreateMaybeMessage<RefundRequest>(NULL);
  }

  RefundRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefundRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RefundRequest& from);
  void MergeFrom(const RefundRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefundRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // string status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // bool reverse_transfer = 4;
  void clear_reverse_transfer();
  static const int kReverseTransferFieldNumber = 4;
  bool reverse_transfer() const;
  void set_reverse_transfer(bool value);

  // @@protoc_insertion_point(class_scope:api.RefundRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::int64 amount_;
  bool reverse_transfer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChargeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ChargeRequest) */ {
 public:
  ChargeRequest();
  virtual ~ChargeRequest();

  ChargeRequest(const ChargeRequest& from);

  inline ChargeRequest& operator=(const ChargeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChargeRequest(ChargeRequest&& from) noexcept
    : ChargeRequest() {
    *this = ::std::move(from);
  }

  inline ChargeRequest& operator=(ChargeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChargeRequest* internal_default_instance() {
    return reinterpret_cast<const ChargeRequest*>(
               &_ChargeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ChargeRequest* other);
  friend void swap(ChargeRequest& a, ChargeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChargeRequest* New() const final {
    return CreateMaybeMessage<ChargeRequest>(NULL);
  }

  ChargeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChargeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChargeRequest& from);
  void MergeFrom(const ChargeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChargeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .api.Product product = 1;
  bool has_product() const;
  void clear_product();
  static const int kProductFieldNumber = 1;
  private:
  const ::api::Product& _internal_product() const;
  public:
  const ::api::Product& product() const;
  ::api::Product* release_product();
  ::api::Product* mutable_product();
  void set_allocated_product(::api::Product* product);

  // @@protoc_insertion_point(class_scope:api.ChargeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::api::Product* product_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CancelSubscriptionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CancelSubscriptionRequest) */ {
 public:
  CancelSubscriptionRequest();
  virtual ~CancelSubscriptionRequest();

  CancelSubscriptionRequest(const CancelSubscriptionRequest& from);

  inline CancelSubscriptionRequest& operator=(const CancelSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelSubscriptionRequest(CancelSubscriptionRequest&& from) noexcept
    : CancelSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline CancelSubscriptionRequest& operator=(CancelSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const CancelSubscriptionRequest*>(
               &_CancelSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CancelSubscriptionRequest* other);
  friend void swap(CancelSubscriptionRequest& a, CancelSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelSubscriptionRequest* New() const final {
    return CreateMaybeMessage<CancelSubscriptionRequest>(NULL);
  }

  CancelSubscriptionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelSubscriptionRequest& from);
  void MergeFrom(const CancelSubscriptionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelSubscriptionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:api.CancelSubscriptionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreatePlanRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CreatePlanRequest) */ {
 public:
  CreatePlanRequest();
  virtual ~CreatePlanRequest();

  CreatePlanRequest(const CreatePlanRequest& from);

  inline CreatePlanRequest& operator=(const CreatePlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreatePlanRequest(CreatePlanRequest&& from) noexcept
    : CreatePlanRequest() {
    *this = ::std::move(from);
  }

  inline CreatePlanRequest& operator=(CreatePlanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatePlanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePlanRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePlanRequest*>(
               &_CreatePlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CreatePlanRequest* other);
  friend void swap(CreatePlanRequest& a, CreatePlanRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreatePlanRequest* New() const final {
    return CreateMaybeMessage<CreatePlanRequest>(NULL);
  }

  CreatePlanRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreatePlanRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreatePlanRequest& from);
  void MergeFrom(const CreatePlanRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePlanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plan_id = 1;
  void clear_plan_id();
  static const int kPlanIdFieldNumber = 1;
  const ::std::string& plan_id() const;
  void set_plan_id(const ::std::string& value);
  #if LANG_CXX11
  void set_plan_id(::std::string&& value);
  #endif
  void set_plan_id(const char* value);
  void set_plan_id(const char* value, size_t size);
  ::std::string* mutable_plan_id();
  ::std::string* release_plan_id();
  void set_allocated_plan_id(::std::string* plan_id);

  // string service_id = 3;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 3;
  const ::std::string& service_id() const;
  void set_service_id(const ::std::string& value);
  #if LANG_CXX11
  void set_service_id(::std::string&& value);
  #endif
  void set_service_id(const char* value);
  void set_service_id(const char* value, size_t size);
  ::std::string* mutable_service_id();
  ::std::string* release_service_id();
  void set_allocated_service_id(::std::string* service_id);

  // string service_name = 4;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 4;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string friendly_name = 5;
  void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 5;
  const ::std::string& friendly_name() const;
  void set_friendly_name(const ::std::string& value);
  #if LANG_CXX11
  void set_friendly_name(::std::string&& value);
  #endif
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  ::std::string* mutable_friendly_name();
  ::std::string* release_friendly_name();
  void set_allocated_friendly_name(::std::string* friendly_name);

  // int64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.CreatePlanRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plan_id_;
  ::google::protobuf::internal::ArenaStringPtr service_id_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr friendly_name_;
  ::google::protobuf::int64 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMSRequest) */ {
 public:
  SMSRequest();
  virtual ~SMSRequest();

  SMSRequest(const SMSRequest& from);

  inline SMSRequest& operator=(const SMSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMSRequest(SMSRequest&& from) noexcept
    : SMSRequest() {
    *this = ::std::move(from);
  }

  inline SMSRequest& operator=(SMSRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSRequest* internal_default_instance() {
    return reinterpret_cast<const SMSRequest*>(
               &_SMSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SMSRequest* other);
  friend void swap(SMSRequest& a, SMSRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMSRequest* New() const final {
    return CreateMaybeMessage<SMSRequest>(NULL);
  }

  SMSRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMSRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMSRequest& from);
  void MergeFrom(const SMSRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:api.SMSRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CallRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CallRequest) */ {
 public:
  CallRequest();
  virtual ~CallRequest();

  CallRequest(const CallRequest& from);

  inline CallRequest& operator=(const CallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallRequest(CallRequest&& from) noexcept
    : CallRequest() {
    *this = ::std::move(from);
  }

  inline CallRequest& operator=(CallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallRequest* internal_default_instance() {
    return reinterpret_cast<const CallRequest*>(
               &_CallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CallRequest* other);
  friend void swap(CallRequest& a, CallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallRequest* New() const final {
    return CreateMaybeMessage<CallRequest>(NULL);
  }

  CallRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallRequest& from);
  void MergeFrom(const CallRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string callback_url = 2;
  void clear_callback_url();
  static const int kCallbackUrlFieldNumber = 2;
  const ::std::string& callback_url() const;
  void set_callback_url(const ::std::string& value);
  #if LANG_CXX11
  void set_callback_url(::std::string&& value);
  #endif
  void set_callback_url(const char* value);
  void set_callback_url(const char* value, size_t size);
  ::std::string* mutable_callback_url();
  ::std::string* release_callback_url();
  void set_allocated_callback_url(::std::string* callback_url);

  // @@protoc_insertion_point(class_scope:api.CallRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr callback_url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MMSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.MMSRequest) */ {
 public:
  MMSRequest();
  virtual ~MMSRequest();

  MMSRequest(const MMSRequest& from);

  inline MMSRequest& operator=(const MMSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MMSRequest(MMSRequest&& from) noexcept
    : MMSRequest() {
    *this = ::std::move(from);
  }

  inline MMSRequest& operator=(MMSRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MMSRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MMSRequest* internal_default_instance() {
    return reinterpret_cast<const MMSRequest*>(
               &_MMSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MMSRequest* other);
  friend void swap(MMSRequest& a, MMSRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MMSRequest* New() const final {
    return CreateMaybeMessage<MMSRequest>(NULL);
  }

  MMSRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MMSRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MMSRequest& from);
  void MergeFrom(const MMSRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MMSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string media_url = 3;
  void clear_media_url();
  static const int kMediaUrlFieldNumber = 3;
  const ::std::string& media_url() const;
  void set_media_url(const ::std::string& value);
  #if LANG_CXX11
  void set_media_url(::std::string&& value);
  #endif
  void set_media_url(const char* value);
  void set_media_url(const char* value, size_t size);
  ::std::string* mutable_media_url();
  ::std::string* release_media_url();
  void set_allocated_media_url(::std::string* media_url);

  // .api.SMSRequest sms = 1;
  bool has_sms() const;
  void clear_sms();
  static const int kSmsFieldNumber = 1;
  private:
  const ::api::SMSRequest& _internal_sms() const;
  public:
  const ::api::SMSRequest& sms() const;
  ::api::SMSRequest* release_sms();
  ::api::SMSRequest* mutable_sms();
  void set_allocated_sms(::api::SMSRequest* sms);

  // @@protoc_insertion_point(class_scope:api.MMSRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr media_url_;
  ::api::SMSRequest* sms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailRequest) */ {
 public:
  EmailRequest();
  virtual ~EmailRequest();

  EmailRequest(const EmailRequest& from);

  inline EmailRequest& operator=(const EmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailRequest(EmailRequest&& from) noexcept
    : EmailRequest() {
    *this = ::std::move(from);
  }

  inline EmailRequest& operator=(EmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailRequest* internal_default_instance() {
    return reinterpret_cast<const EmailRequest*>(
               &_EmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(EmailRequest* other);
  friend void swap(EmailRequest& a, EmailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailRequest* New() const final {
    return CreateMaybeMessage<EmailRequest>(NULL);
  }

  EmailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailRequest& from);
  void MergeFrom(const EmailRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string subject = 2;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string plain_text = 3;
  void clear_plain_text();
  static const int kPlainTextFieldNumber = 3;
  const ::std::string& plain_text() const;
  void set_plain_text(const ::std::string& value);
  #if LANG_CXX11
  void set_plain_text(::std::string&& value);
  #endif
  void set_plain_text(const char* value);
  void set_plain_text(const char* value, size_t size);
  ::std::string* mutable_plain_text();
  ::std::string* release_plain_text();
  void set_allocated_plain_text(::std::string* plain_text);

  // string html_alt = 4;
  void clear_html_alt();
  static const int kHtmlAltFieldNumber = 4;
  const ::std::string& html_alt() const;
  void set_html_alt(const ::std::string& value);
  #if LANG_CXX11
  void set_html_alt(::std::string&& value);
  #endif
  void set_html_alt(const char* value);
  void set_html_alt(const char* value, size_t size);
  ::std::string* mutable_html_alt();
  ::std::string* release_html_alt();
  void set_allocated_html_alt(::std::string* html_alt);

  // @@protoc_insertion_point(class_scope:api.EmailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr plain_text_;
  ::google::protobuf::internal::ArenaStringPtr html_alt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CustomerRequest) */ {
 public:
  CustomerRequest();
  virtual ~CustomerRequest();

  CustomerRequest(const CustomerRequest& from);

  inline CustomerRequest& operator=(const CustomerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomerRequest(CustomerRequest&& from) noexcept
    : CustomerRequest() {
    *this = ::std::move(from);
  }

  inline CustomerRequest& operator=(CustomerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomerRequest* internal_default_instance() {
    return reinterpret_cast<const CustomerRequest*>(
               &_CustomerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CustomerRequest* other);
  friend void swap(CustomerRequest& a, CustomerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomerRequest* New() const final {
    return CreateMaybeMessage<CustomerRequest>(NULL);
  }

  CustomerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CustomerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CustomerRequest& from);
  void MergeFrom(const CustomerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string phone = 3;
  void clear_phone();
  static const int kPhoneFieldNumber = 3;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 7;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .api.Address address = 8;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 8;
  private:
  const ::api::Address& _internal_address() const;
  public:
  const ::api::Address& address() const;
  ::api::Address* release_address();
  ::api::Address* mutable_address();
  void set_allocated_address(::api::Address* address);

  // @@protoc_insertion_point(class_scope:api.CustomerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::api::Address* address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateCustomerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UpdateCustomerRequest) */ {
 public:
  UpdateCustomerRequest();
  virtual ~UpdateCustomerRequest();

  UpdateCustomerRequest(const UpdateCustomerRequest& from);

  inline UpdateCustomerRequest& operator=(const UpdateCustomerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateCustomerRequest(UpdateCustomerRequest&& from) noexcept
    : UpdateCustomerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCustomerRequest& operator=(UpdateCustomerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateCustomerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateCustomerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomerRequest*>(
               &_UpdateCustomerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(UpdateCustomerRequest* other);
  friend void swap(UpdateCustomerRequest& a, UpdateCustomerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateCustomerRequest* New() const final {
    return CreateMaybeMessage<UpdateCustomerRequest>(NULL);
  }

  UpdateCustomerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCustomerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateCustomerRequest& from);
  void MergeFrom(const UpdateCustomerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .api.CustomerRequest customer = 2;
  bool has_customer() const;
  void clear_customer();
  static const int kCustomerFieldNumber = 2;
  private:
  const ::api::CustomerRequest& _internal_customer() const;
  public:
  const ::api::CustomerRequest& customer() const;
  ::api::CustomerRequest* release_customer();
  ::api::CustomerRequest* mutable_customer();
  void set_allocated_customer(::api::CustomerRequest* customer);

  // @@protoc_insertion_point(class_scope:api.UpdateCustomerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::api::CustomerRequest* customer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubscribeCustomerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SubscribeCustomerRequest) */ {
 public:
  SubscribeCustomerRequest();
  virtual ~SubscribeCustomerRequest();

  SubscribeCustomerRequest(const SubscribeCustomerRequest& from);

  inline SubscribeCustomerRequest& operator=(const SubscribeCustomerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeCustomerRequest(SubscribeCustomerRequest&& from) noexcept
    : SubscribeCustomerRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCustomerRequest& operator=(SubscribeCustomerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeCustomerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeCustomerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCustomerRequest*>(
               &_SubscribeCustomerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SubscribeCustomerRequest* other);
  friend void swap(SubscribeCustomerRequest& a, SubscribeCustomerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeCustomerRequest* New() const final {
    return CreateMaybeMessage<SubscribeCustomerRequest>(NULL);
  }

  SubscribeCustomerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeCustomerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeCustomerRequest& from);
  void MergeFrom(const SubscribeCustomerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeCustomerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string card_number = 3;
  void clear_card_number();
  static const int kCardNumberFieldNumber = 3;
  const ::std::string& card_number() const;
  void set_card_number(const ::std::string& value);
  #if LANG_CXX11
  void set_card_number(::std::string&& value);
  #endif
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  ::std::string* mutable_card_number();
  ::std::string* release_card_number();
  void set_allocated_card_number(::std::string* card_number);

  // string exp_month = 4;
  void clear_exp_month();
  static const int kExpMonthFieldNumber = 4;
  const ::std::string& exp_month() const;
  void set_exp_month(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_month(::std::string&& value);
  #endif
  void set_exp_month(const char* value);
  void set_exp_month(const char* value, size_t size);
  ::std::string* mutable_exp_month();
  ::std::string* release_exp_month();
  void set_allocated_exp_month(::std::string* exp_month);

  // string exp_year = 5;
  void clear_exp_year();
  static const int kExpYearFieldNumber = 5;
  const ::std::string& exp_year() const;
  void set_exp_year(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_year(::std::string&& value);
  #endif
  void set_exp_year(const char* value);
  void set_exp_year(const char* value, size_t size);
  ::std::string* mutable_exp_year();
  ::std::string* release_exp_year();
  void set_allocated_exp_year(::std::string* exp_year);

  // string cvc = 6;
  void clear_cvc();
  static const int kCvcFieldNumber = 6;
  const ::std::string& cvc() const;
  void set_cvc(const ::std::string& value);
  #if LANG_CXX11
  void set_cvc(::std::string&& value);
  #endif
  void set_cvc(const char* value);
  void set_cvc(const char* value, size_t size);
  ::std::string* mutable_cvc();
  ::std::string* release_cvc();
  void set_allocated_cvc(::std::string* cvc);

  // @@protoc_insertion_point(class_scope:api.SubscribeCustomerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr card_number_;
  ::google::protobuf::internal::ArenaStringPtr exp_month_;
  ::google::protobuf::internal::ArenaStringPtr exp_year_;
  ::google::protobuf::internal::ArenaStringPtr cvc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateAccountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CreateAccountRequest) */ {
 public:
  CreateAccountRequest();
  virtual ~CreateAccountRequest();

  CreateAccountRequest(const CreateAccountRequest& from);

  inline CreateAccountRequest& operator=(const CreateAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAccountRequest(CreateAccountRequest&& from) noexcept
    : CreateAccountRequest() {
    *this = ::std::move(from);
  }

  inline CreateAccountRequest& operator=(CreateAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAccountRequest*>(
               &_CreateAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(CreateAccountRequest* other);
  friend void swap(CreateAccountRequest& a, CreateAccountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountRequest* New() const final {
    return CreateMaybeMessage<CreateAccountRequest>(NULL);
  }

  CreateAccountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAccountRequest& from);
  void MergeFrom(const CreateAccountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.CustomerRequest customer = 1;
  bool has_customer() const;
  void clear_customer();
  static const int kCustomerFieldNumber = 1;
  private:
  const ::api::CustomerRequest& _internal_customer() const;
  public:
  const ::api::CustomerRequest& customer() const;
  ::api::CustomerRequest* release_customer();
  ::api::CustomerRequest* mutable_customer();
  void set_allocated_customer(::api::CustomerRequest* customer);

  // .api.Access access = 2;
  bool has_access() const;
  void clear_access();
  static const int kAccessFieldNumber = 2;
  private:
  const ::api::Access& _internal_access() const;
  public:
  const ::api::Access& access() const;
  ::api::Access* release_access();
  ::api::Access* mutable_access();
  void set_allocated_access(::api::Access* access);

  // @@protoc_insertion_point(class_scope:api.CreateAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::CustomerRequest* customer_;
  ::api::Access* access_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Account : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(Account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Account* other);
  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(NULL);
  }

  Account* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.Customer customer = 1;
  bool has_customer() const;
  void clear_customer();
  static const int kCustomerFieldNumber = 1;
  private:
  const ::api::Customer& _internal_customer() const;
  public:
  const ::api::Customer& customer() const;
  ::api::Customer* release_customer();
  ::api::Customer* mutable_customer();
  void set_allocated_customer(::api::Customer* customer);

  // .api.Access access = 2;
  bool has_access() const;
  void clear_access();
  static const int kAccessFieldNumber = 2;
  private:
  const ::api::Access& _internal_access() const;
  public:
  const ::api::Access& access() const;
  ::api::Access* release_access();
  ::api::Access* mutable_access();
  void set_allocated_access(::api::Access* access);

  // @@protoc_insertion_point(class_scope:api.Account)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::Customer* customer_;
  ::api::Access* access_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string team_id = 2;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  const ::std::string& team_id() const;
  void set_team_id(const ::std::string& value);
  #if LANG_CXX11
  void set_team_id(::std::string&& value);
  #endif
  void set_team_id(const char* value);
  void set_team_id(const char* value, size_t size);
  ::std::string* mutable_team_id();
  ::std::string* release_team_id();
  void set_allocated_team_id(::std::string* team_id);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string phone = 4;
  void clear_phone();
  static const int kPhoneFieldNumber = 4;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string locale = 15;
  void clear_locale();
  static const int kLocaleFieldNumber = 15;
  const ::std::string& locale() const;
  void set_locale(const ::std::string& value);
  #if LANG_CXX11
  void set_locale(::std::string&& value);
  #endif
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  ::std::string* mutable_locale();
  ::std::string* release_locale();
  void set_allocated_locale(::std::string* locale);

  // .api.Profile profile = 5;
  bool has_profile() const;
  void clear_profile();
  static const int kProfileFieldNumber = 5;
  private:
  const ::api::Profile& _internal_profile() const;
  public:
  const ::api::Profile& profile() const;
  ::api::Profile* release_profile();
  ::api::Profile* mutable_profile();
  void set_allocated_profile(::api::Profile* profile);

  // bool deleted = 6;
  void clear_deleted();
  static const int kDeletedFieldNumber = 6;
  bool deleted() const;
  void set_deleted(bool value);

  // bool admin = 7;
  void clear_admin();
  static const int kAdminFieldNumber = 7;
  bool admin() const;
  void set_admin(bool value);

  // bool ownder = 8;
  void clear_ownder();
  static const int kOwnderFieldNumber = 8;
  bool ownder() const;
  void set_ownder(bool value);

  // bool primary_owner = 9;
  void clear_primary_owner();
  static const int kPrimaryOwnerFieldNumber = 9;
  bool primary_owner() const;
  void set_primary_owner(bool value);

  // bool restricted = 10;
  void clear_restricted();
  static const int kRestrictedFieldNumber = 10;
  bool restricted() const;
  void set_restricted(bool value);

  // bool ultra_restricted = 11;
  void clear_ultra_restricted();
  static const int kUltraRestrictedFieldNumber = 11;
  bool ultra_restricted() const;
  void set_ultra_restricted(bool value);

  // bool stranger = 12;
  void clear_stranger();
  static const int kStrangerFieldNumber = 12;
  bool stranger() const;
  void set_stranger(bool value);

  // bool bot = 13;
  void clear_bot();
  static const int kBotFieldNumber = 13;
  bool bot() const;
  void set_bot(bool value);

  // bool has2fa = 14;
  void clear_has2fa();
  static const int kHas2FaFieldNumber = 14;
  bool has2fa() const;
  void set_has2fa(bool value);

  // @@protoc_insertion_point(class_scope:api.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr team_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr locale_;
  ::api::Profile* profile_;
  bool deleted_;
  bool admin_;
  bool ownder_;
  bool primary_owner_;
  bool restricted_;
  bool ultra_restricted_;
  bool stranger_;
  bool bot_;
  bool has2fa_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Profile) */ {
 public:
  Profile();
  virtual ~Profile();

  Profile(const Profile& from);

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Profile* other);
  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const final {
    return CreateMaybeMessage<Profile>(NULL);
  }

  Profile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Profile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string image_urls = 7;
  int image_urls_size() const;
  void clear_image_urls();
  static const int kImageUrlsFieldNumber = 7;
  const ::std::string& image_urls(int index) const;
  ::std::string* mutable_image_urls(int index);
  void set_image_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_image_urls(int index, ::std::string&& value);
  #endif
  void set_image_urls(int index, const char* value);
  void set_image_urls(int index, const char* value, size_t size);
  ::std::string* add_image_urls();
  void add_image_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_image_urls(::std::string&& value);
  #endif
  void add_image_urls(const char* value);
  void add_image_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image_urls();

  // string avatar_hash = 1;
  void clear_avatar_hash();
  static const int kAvatarHashFieldNumber = 1;
  const ::std::string& avatar_hash() const;
  void set_avatar_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar_hash(::std::string&& value);
  #endif
  void set_avatar_hash(const char* value);
  void set_avatar_hash(const char* value, size_t size);
  ::std::string* mutable_avatar_hash();
  ::std::string* release_avatar_hash();
  void set_allocated_avatar_hash(::std::string* avatar_hash);

  // string status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string status_emoji = 3;
  void clear_status_emoji();
  static const int kStatusEmojiFieldNumber = 3;
  const ::std::string& status_emoji() const;
  void set_status_emoji(const ::std::string& value);
  #if LANG_CXX11
  void set_status_emoji(::std::string&& value);
  #endif
  void set_status_emoji(const char* value);
  void set_status_emoji(const char* value, size_t size);
  ::std::string* mutable_status_emoji();
  ::std::string* release_status_emoji();
  void set_allocated_status_emoji(::std::string* status_emoji);

  // string display_name = 4;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 4;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 6;
  void clear_email();
  static const int kEmailFieldNumber = 6;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string team = 8;
  void clear_team();
  static const int kTeamFieldNumber = 8;
  const ::std::string& team() const;
  void set_team(const ::std::string& value);
  #if LANG_CXX11
  void set_team(::std::string&& value);
  #endif
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  ::std::string* mutable_team();
  ::std::string* release_team();
  void set_allocated_team(::std::string* team);

  // @@protoc_insertion_point(class_scope:api.Profile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_urls_;
  ::google::protobuf::internal::ArenaStringPtr avatar_hash_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr status_emoji_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr team_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Customer_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Customer_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Customer_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Customer_MetadataEntry_DoNotUse();
  Customer_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Customer_MetadataEntry_DoNotUse& other);
  static const Customer_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Customer_MetadataEntry_DoNotUse*>(&_Customer_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Customer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Customer) */ {
 public:
  Customer();
  virtual ~Customer();

  Customer(const Customer& from);

  inline Customer& operator=(const Customer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Customer(Customer&& from) noexcept
    : Customer() {
    *this = ::std::move(from);
  }

  inline Customer& operator=(Customer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Customer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Customer* internal_default_instance() {
    return reinterpret_cast<const Customer*>(
               &_Customer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Customer* other);
  friend void swap(Customer& a, Customer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Customer* New() const final {
    return CreateMaybeMessage<Customer>(NULL);
  }

  Customer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Customer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Customer& from);
  void MergeFrom(const Customer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Customer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> metadata = 9;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 4;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string phone = 6;
  void clear_phone();
  static const int kPhoneFieldNumber = 6;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // .api.Address address = 8;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 8;
  private:
  const ::api::Address& _internal_address() const;
  public:
  const ::api::Address& address() const;
  ::api::Address* release_address();
  ::api::Address* mutable_address();
  void set_allocated_address(::api::Address* address);

  // bool deleted = 10;
  void clear_deleted();
  static const int kDeletedFieldNumber = 10;
  bool deleted() const;
  void set_deleted(bool value);

  // int64 create_date = 20;
  void clear_create_date();
  static const int kCreateDateFieldNumber = 20;
  ::google::protobuf::int64 create_date() const;
  void set_create_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.Customer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Customer_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::api::Address* address_;
  bool deleted_;
  ::google::protobuf::int64 create_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(Card&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Card* other);
  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return CreateMaybeMessage<Card>(NULL);
  }

  Card* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string card_number = 3;
  void clear_card_number();
  static const int kCardNumberFieldNumber = 3;
  const ::std::string& card_number() const;
  void set_card_number(const ::std::string& value);
  #if LANG_CXX11
  void set_card_number(::std::string&& value);
  #endif
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  ::std::string* mutable_card_number();
  ::std::string* release_card_number();
  void set_allocated_card_number(::std::string* card_number);

  // string exp_month = 4;
  void clear_exp_month();
  static const int kExpMonthFieldNumber = 4;
  const ::std::string& exp_month() const;
  void set_exp_month(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_month(::std::string&& value);
  #endif
  void set_exp_month(const char* value);
  void set_exp_month(const char* value, size_t size);
  ::std::string* mutable_exp_month();
  ::std::string* release_exp_month();
  void set_allocated_exp_month(::std::string* exp_month);

  // string exp_year = 5;
  void clear_exp_year();
  static const int kExpYearFieldNumber = 5;
  const ::std::string& exp_year() const;
  void set_exp_year(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_year(::std::string&& value);
  #endif
  void set_exp_year(const char* value);
  void set_exp_year(const char* value, size_t size);
  ::std::string* mutable_exp_year();
  ::std::string* release_exp_year();
  void set_allocated_exp_year(::std::string* exp_year);

  // string cvc = 6;
  void clear_cvc();
  static const int kCvcFieldNumber = 6;
  const ::std::string& cvc() const;
  void set_cvc(const ::std::string& value);
  #if LANG_CXX11
  void set_cvc(::std::string&& value);
  #endif
  void set_cvc(const char* value);
  void set_cvc(const char* value, size_t size);
  ::std::string* mutable_cvc();
  ::std::string* release_cvc();
  void set_allocated_cvc(::std::string* cvc);

  // .api.CardType card_type = 1;
  void clear_card_type();
  static const int kCardTypeFieldNumber = 1;
  ::api::CardType card_type() const;
  void set_card_type(::api::CardType value);

  // bool debit = 7;
  void clear_debit();
  static const int kDebitFieldNumber = 7;
  bool debit() const;
  void set_debit(bool value);

  // @@protoc_insertion_point(class_scope:api.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr card_number_;
  ::google::protobuf::internal::ArenaStringPtr exp_month_;
  ::google::protobuf::internal::ArenaStringPtr exp_year_;
  ::google::protobuf::internal::ArenaStringPtr cvc_;
  int card_type_;
  bool debit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BankAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.BankAccount) */ {
 public:
  BankAccount();
  virtual ~BankAccount();

  BankAccount(const BankAccount& from);

  inline BankAccount& operator=(const BankAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BankAccount(BankAccount&& from) noexcept
    : BankAccount() {
    *this = ::std::move(from);
  }

  inline BankAccount& operator=(BankAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BankAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BankAccount* internal_default_instance() {
    return reinterpret_cast<const BankAccount*>(
               &_BankAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(BankAccount* other);
  friend void swap(BankAccount& a, BankAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BankAccount* New() const final {
    return CreateMaybeMessage<BankAccount>(NULL);
  }

  BankAccount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BankAccount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BankAccount& from);
  void MergeFrom(const BankAccount& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BankAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account_number = 1;
  void clear_account_number();
  static const int kAccountNumberFieldNumber = 1;
  const ::std::string& account_number() const;
  void set_account_number(const ::std::string& value);
  #if LANG_CXX11
  void set_account_number(::std::string&& value);
  #endif
  void set_account_number(const char* value);
  void set_account_number(const char* value, size_t size);
  ::std::string* mutable_account_number();
  ::std::string* release_account_number();
  void set_allocated_account_number(::std::string* account_number);

  // string routing_number = 2;
  void clear_routing_number();
  static const int kRoutingNumberFieldNumber = 2;
  const ::std::string& routing_number() const;
  void set_routing_number(const ::std::string& value);
  #if LANG_CXX11
  void set_routing_number(::std::string&& value);
  #endif
  void set_routing_number(const char* value);
  void set_routing_number(const char* value, size_t size);
  ::std::string* mutable_routing_number();
  ::std::string* release_routing_number();
  void set_allocated_routing_number(::std::string* routing_number);

  // @@protoc_insertion_point(class_scope:api.BankAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_number_;
  ::google::protobuf::internal::ArenaStringPtr routing_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(NULL);
  }

  Address* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string city = 1;
  void clear_city();
  static const int kCityFieldNumber = 1;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string country = 2;
  void clear_country();
  static const int kCountryFieldNumber = 2;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // string line1 = 3;
  void clear_line1();
  static const int kLine1FieldNumber = 3;
  const ::std::string& line1() const;
  void set_line1(const ::std::string& value);
  #if LANG_CXX11
  void set_line1(::std::string&& value);
  #endif
  void set_line1(const char* value);
  void set_line1(const char* value, size_t size);
  ::std::string* mutable_line1();
  ::std::string* release_line1();
  void set_allocated_line1(::std::string* line1);

  // string line2 = 4;
  void clear_line2();
  static const int kLine2FieldNumber = 4;
  const ::std::string& line2() const;
  void set_line2(const ::std::string& value);
  #if LANG_CXX11
  void set_line2(::std::string&& value);
  #endif
  void set_line2(const char* value);
  void set_line2(const char* value, size_t size);
  ::std::string* mutable_line2();
  ::std::string* release_line2();
  void set_allocated_line2(::std::string* line2);

  // string postal_code = 5;
  void clear_postal_code();
  static const int kPostalCodeFieldNumber = 5;
  const ::std::string& postal_code() const;
  void set_postal_code(const ::std::string& value);
  #if LANG_CXX11
  void set_postal_code(::std::string&& value);
  #endif
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  ::std::string* mutable_postal_code();
  ::std::string* release_postal_code();
  void set_allocated_postal_code(::std::string* postal_code);

  // string state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // @@protoc_insertion_point(class_scope:api.Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr line1_;
  ::google::protobuf::internal::ArenaStringPtr line2_;
  ::google::protobuf::internal::ArenaStringPtr postal_code_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelReminder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ChannelReminder) */ {
 public:
  ChannelReminder();
  virtual ~ChannelReminder();

  ChannelReminder(const ChannelReminder& from);

  inline ChannelReminder& operator=(const ChannelReminder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelReminder(ChannelReminder&& from) noexcept
    : ChannelReminder() {
    *this = ::std::move(from);
  }

  inline ChannelReminder& operator=(ChannelReminder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelReminder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelReminder* internal_default_instance() {
    return reinterpret_cast<const ChannelReminder*>(
               &_ChannelReminder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ChannelReminder* other);
  friend void swap(ChannelReminder& a, ChannelReminder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelReminder* New() const final {
    return CreateMaybeMessage<ChannelReminder>(NULL);
  }

  ChannelReminder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelReminder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelReminder& from);
  void MergeFrom(const ChannelReminder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelReminder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_id(::std::string&& value);
  #endif
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:api.ChannelReminder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserReminder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserReminder) */ {
 public:
  UserReminder();
  virtual ~UserReminder();

  UserReminder(const UserReminder& from);

  inline UserReminder& operator=(const UserReminder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserReminder(UserReminder&& from) noexcept
    : UserReminder() {
    *this = ::std::move(from);
  }

  inline UserReminder& operator=(UserReminder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserReminder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserReminder* internal_default_instance() {
    return reinterpret_cast<const UserReminder*>(
               &_UserReminder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(UserReminder* other);
  friend void swap(UserReminder& a, UserReminder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserReminder* New() const final {
    return CreateMaybeMessage<UserReminder>(NULL);
  }

  UserReminder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserReminder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserReminder& from);
  void MergeFrom(const UserReminder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserReminder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // .api.ItemRef item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  private:
  const ::api::ItemRef& _internal_item() const;
  public:
  const ::api::ItemRef& item() const;
  ::api::ItemRef* release_item();
  ::api::ItemRef* mutable_item();
  void set_allocated_item(::api::ItemRef* item);

  // @@protoc_insertion_point(class_scope:api.UserReminder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::api::ItemRef* item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ItemRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.ItemRef) */ {
 public:
  ItemRef();
  virtual ~ItemRef();

  ItemRef(const ItemRef& from);

  inline ItemRef& operator=(const ItemRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemRef(ItemRef&& from) noexcept
    : ItemRef() {
    *this = ::std::move(from);
  }

  inline ItemRef& operator=(ItemRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemRef* internal_default_instance() {
    return reinterpret_cast<const ItemRef*>(
               &_ItemRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ItemRef* other);
  friend void swap(ItemRef& a, ItemRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemRef* New() const final {
    return CreateMaybeMessage<ItemRef>(NULL);
  }

  ItemRef* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ItemRef>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ItemRef& from);
  void MergeFrom(const ItemRef& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // string file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // string comment = 3;
  void clear_comment();
  static const int kCommentFieldNumber = 3;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:api.ItemRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Star : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Star) */ {
 public:
  Star();
  virtual ~Star();

  Star(const Star& from);

  inline Star& operator=(const Star& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Star(Star&& from) noexcept
    : Star() {
    *this = ::std::move(from);
  }

  inline Star& operator=(Star&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Star& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Star* internal_default_instance() {
    return reinterpret_cast<const Star*>(
               &_Star_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Star* other);
  friend void swap(Star& a, Star& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Star* New() const final {
    return CreateMaybeMessage<Star>(NULL);
  }

  Star* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Star>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Star& from);
  void MergeFrom(const Star& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Star* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .api.ItemRef item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  private:
  const ::api::ItemRef& _internal_item() const;
  public:
  const ::api::ItemRef& item() const;
  ::api::ItemRef* release_item();
  ::api::ItemRef* mutable_item();
  void set_allocated_item(::api::ItemRef* item);

  // @@protoc_insertion_point(class_scope:api.Star)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::api::ItemRef* item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Pin) */ {
 public:
  Pin();
  virtual ~Pin();

  Pin(const Pin& from);

  inline Pin& operator=(const Pin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pin(Pin&& from) noexcept
    : Pin() {
    *this = ::std::move(from);
  }

  inline Pin& operator=(Pin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pin* internal_default_instance() {
    return reinterpret_cast<const Pin*>(
               &_Pin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Pin* other);
  friend void swap(Pin& a, Pin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pin* New() const final {
    return CreateMaybeMessage<Pin>(NULL);
  }

  Pin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pin& from);
  void MergeFrom(const Pin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .api.ItemRef item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  private:
  const ::api::ItemRef& _internal_item() const;
  public:
  const ::api::ItemRef& item() const;
  ::api::ItemRef* release_item();
  ::api::ItemRef* mutable_item();
  void set_allocated_item(::api::ItemRef* item);

  // @@protoc_insertion_point(class_scope:api.Pin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::api::ItemRef* item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignedKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SignedKey) */ {
 public:
  SignedKey();
  virtual ~SignedKey();

  SignedKey(const SignedKey& from);

  inline SignedKey& operator=(const SignedKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignedKey(SignedKey&& from) noexcept
    : SignedKey() {
    *this = ::std::move(from);
  }

  inline SignedKey& operator=(SignedKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedKey* internal_default_instance() {
    return reinterpret_cast<const SignedKey*>(
               &_SignedKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SignedKey* other);
  friend void swap(SignedKey& a, SignedKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignedKey* New() const final {
    return CreateMaybeMessage<SignedKey>(NULL);
  }

  SignedKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignedKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignedKey& from);
  void MergeFrom(const SignedKey& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string signed_key = 1;
  void clear_signed_key();
  static const int kSignedKeyFieldNumber = 1;
  const ::std::string& signed_key() const;
  void set_signed_key(const ::std::string& value);
  #if LANG_CXX11
  void set_signed_key(::std::string&& value);
  #endif
  void set_signed_key(const char* value);
  void set_signed_key(const char* value, size_t size);
  ::std::string* mutable_signed_key();
  ::std::string* release_signed_key();
  void set_allocated_signed_key(::std::string* signed_key);

  // @@protoc_insertion_point(class_scope:api.SignedKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signed_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Access : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Access) */ {
 public:
  Access();
  virtual ~Access();

  Access(const Access& from);

  inline Access& operator=(const Access& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Access(Access&& from) noexcept
    : Access() {
    *this = ::std::move(from);
  }

  inline Access& operator=(Access&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Access& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Access* internal_default_instance() {
    return reinterpret_cast<const Access*>(
               &_Access_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Access* other);
  friend void swap(Access& a, Access& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Access* New() const final {
    return CreateMaybeMessage<Access>(NULL);
  }

  Access* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Access>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Access& from);
  void MergeFrom(const Access& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Access* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string autom8ter_account = 1;
  void clear_autom8ter_account();
  static const int kAutom8TerAccountFieldNumber = 1;
  const ::std::string& autom8ter_account() const;
  void set_autom8ter_account(const ::std::string& value);
  #if LANG_CXX11
  void set_autom8ter_account(::std::string&& value);
  #endif
  void set_autom8ter_account(const char* value);
  void set_autom8ter_account(const char* value, size_t size);
  ::std::string* mutable_autom8ter_account();
  ::std::string* release_autom8ter_account();
  void set_allocated_autom8ter_account(::std::string* autom8ter_account);

  // string autom8ter_key = 2;
  void clear_autom8ter_key();
  static const int kAutom8TerKeyFieldNumber = 2;
  const ::std::string& autom8ter_key() const;
  void set_autom8ter_key(const ::std::string& value);
  #if LANG_CXX11
  void set_autom8ter_key(::std::string&& value);
  #endif
  void set_autom8ter_key(const char* value);
  void set_autom8ter_key(const char* value, size_t size);
  ::std::string* mutable_autom8ter_key();
  ::std::string* release_autom8ter_key();
  void set_allocated_autom8ter_key(::std::string* autom8ter_key);

  // string twilio_account = 3;
  void clear_twilio_account();
  static const int kTwilioAccountFieldNumber = 3;
  const ::std::string& twilio_account() const;
  void set_twilio_account(const ::std::string& value);
  #if LANG_CXX11
  void set_twilio_account(::std::string&& value);
  #endif
  void set_twilio_account(const char* value);
  void set_twilio_account(const char* value, size_t size);
  ::std::string* mutable_twilio_account();
  ::std::string* release_twilio_account();
  void set_allocated_twilio_account(::std::string* twilio_account);

  // string twilio_key = 4;
  void clear_twilio_key();
  static const int kTwilioKeyFieldNumber = 4;
  const ::std::string& twilio_key() const;
  void set_twilio_key(const ::std::string& value);
  #if LANG_CXX11
  void set_twilio_key(::std::string&& value);
  #endif
  void set_twilio_key(const char* value);
  void set_twilio_key(const char* value, size_t size);
  ::std::string* mutable_twilio_key();
  ::std::string* release_twilio_key();
  void set_allocated_twilio_key(::std::string* twilio_key);

  // string sendgrid_account = 5;
  void clear_sendgrid_account();
  static const int kSendgridAccountFieldNumber = 5;
  const ::std::string& sendgrid_account() const;
  void set_sendgrid_account(const ::std::string& value);
  #if LANG_CXX11
  void set_sendgrid_account(::std::string&& value);
  #endif
  void set_sendgrid_account(const char* value);
  void set_sendgrid_account(const char* value, size_t size);
  ::std::string* mutable_sendgrid_account();
  ::std::string* release_sendgrid_account();
  void set_allocated_sendgrid_account(::std::string* sendgrid_account);

  // string sendgrid_key = 6;
  void clear_sendgrid_key();
  static const int kSendgridKeyFieldNumber = 6;
  const ::std::string& sendgrid_key() const;
  void set_sendgrid_key(const ::std::string& value);
  #if LANG_CXX11
  void set_sendgrid_key(::std::string&& value);
  #endif
  void set_sendgrid_key(const char* value);
  void set_sendgrid_key(const char* value, size_t size);
  ::std::string* mutable_sendgrid_key();
  ::std::string* release_sendgrid_key();
  void set_allocated_sendgrid_key(::std::string* sendgrid_key);

  // string stripe_account = 7;
  void clear_stripe_account();
  static const int kStripeAccountFieldNumber = 7;
  const ::std::string& stripe_account() const;
  void set_stripe_account(const ::std::string& value);
  #if LANG_CXX11
  void set_stripe_account(::std::string&& value);
  #endif
  void set_stripe_account(const char* value);
  void set_stripe_account(const char* value, size_t size);
  ::std::string* mutable_stripe_account();
  ::std::string* release_stripe_account();
  void set_allocated_stripe_account(::std::string* stripe_account);

  // string stripe_key = 8;
  void clear_stripe_key();
  static const int kStripeKeyFieldNumber = 8;
  const ::std::string& stripe_key() const;
  void set_stripe_key(const ::std::string& value);
  #if LANG_CXX11
  void set_stripe_key(::std::string&& value);
  #endif
  void set_stripe_key(const char* value);
  void set_stripe_key(const char* value, size_t size);
  ::std::string* mutable_stripe_key();
  ::std::string* release_stripe_key();
  void set_allocated_stripe_key(::std::string* stripe_key);

  // string slack_account = 9;
  void clear_slack_account();
  static const int kSlackAccountFieldNumber = 9;
  const ::std::string& slack_account() const;
  void set_slack_account(const ::std::string& value);
  #if LANG_CXX11
  void set_slack_account(::std::string&& value);
  #endif
  void set_slack_account(const char* value);
  void set_slack_account(const char* value, size_t size);
  ::std::string* mutable_slack_account();
  ::std::string* release_slack_account();
  void set_allocated_slack_account(::std::string* slack_account);

  // string slack_key = 10;
  void clear_slack_key();
  static const int kSlackKeyFieldNumber = 10;
  const ::std::string& slack_key() const;
  void set_slack_key(const ::std::string& value);
  #if LANG_CXX11
  void set_slack_key(::std::string&& value);
  #endif
  void set_slack_key(const char* value);
  void set_slack_key(const char* value, size_t size);
  ::std::string* mutable_slack_key();
  ::std::string* release_slack_key();
  void set_allocated_slack_key(::std::string* slack_key);

  // string gcp_project = 11;
  void clear_gcp_project();
  static const int kGcpProjectFieldNumber = 11;
  const ::std::string& gcp_project() const;
  void set_gcp_project(const ::std::string& value);
  #if LANG_CXX11
  void set_gcp_project(::std::string&& value);
  #endif
  void set_gcp_project(const char* value);
  void set_gcp_project(const char* value, size_t size);
  ::std::string* mutable_gcp_project();
  ::std::string* release_gcp_project();
  void set_allocated_gcp_project(::std::string* gcp_project);

  // string gcp_key = 12;
  void clear_gcp_key();
  static const int kGcpKeyFieldNumber = 12;
  const ::std::string& gcp_key() const;
  void set_gcp_key(const ::std::string& value);
  #if LANG_CXX11
  void set_gcp_key(::std::string&& value);
  #endif
  void set_gcp_key(const char* value);
  void set_gcp_key(const char* value, size_t size);
  ::std::string* mutable_gcp_key();
  ::std::string* release_gcp_key();
  void set_allocated_gcp_key(::std::string* gcp_key);

  // @@protoc_insertion_point(class_scope:api.Access)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr autom8ter_account_;
  ::google::protobuf::internal::ArenaStringPtr autom8ter_key_;
  ::google::protobuf::internal::ArenaStringPtr twilio_account_;
  ::google::protobuf::internal::ArenaStringPtr twilio_key_;
  ::google::protobuf::internal::ArenaStringPtr sendgrid_account_;
  ::google::protobuf::internal::ArenaStringPtr sendgrid_key_;
  ::google::protobuf::internal::ArenaStringPtr stripe_account_;
  ::google::protobuf::internal::ArenaStringPtr stripe_key_;
  ::google::protobuf::internal::ArenaStringPtr slack_account_;
  ::google::protobuf::internal::ArenaStringPtr slack_key_;
  ::google::protobuf::internal::ArenaStringPtr gcp_project_;
  ::google::protobuf::internal::ArenaStringPtr gcp_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StandardClaims : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.StandardClaims) */ {
 public:
  StandardClaims();
  virtual ~StandardClaims();

  StandardClaims(const StandardClaims& from);

  inline StandardClaims& operator=(const StandardClaims& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StandardClaims(StandardClaims&& from) noexcept
    : StandardClaims() {
    *this = ::std::move(from);
  }

  inline StandardClaims& operator=(StandardClaims&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StandardClaims& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StandardClaims* internal_default_instance() {
    return reinterpret_cast<const StandardClaims*>(
               &_StandardClaims_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(StandardClaims* other);
  friend void swap(StandardClaims& a, StandardClaims& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StandardClaims* New() const final {
    return CreateMaybeMessage<StandardClaims>(NULL);
  }

  StandardClaims* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StandardClaims>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StandardClaims& from);
  void MergeFrom(const StandardClaims& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StandardClaims* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string audience = 2;
  void clear_audience();
  static const int kAudienceFieldNumber = 2;
  const ::std::string& audience() const;
  void set_audience(const ::std::string& value);
  #if LANG_CXX11
  void set_audience(::std::string&& value);
  #endif
  void set_audience(const char* value);
  void set_audience(const char* value, size_t size);
  ::std::string* mutable_audience();
  ::std::string* release_audience();
  void set_allocated_audience(::std::string* audience);

  // string subject = 3;
  void clear_subject();
  static const int kSubjectFieldNumber = 3;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string id = 5;
  void clear_id();
  static const int kIdFieldNumber = 5;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .api.Access access = 1;
  bool has_access() const;
  void clear_access();
  static const int kAccessFieldNumber = 1;
  private:
  const ::api::Access& _internal_access() const;
  public:
  const ::api::Access& access() const;
  ::api::Access* release_access();
  ::api::Access* mutable_access();
  void set_allocated_access(::api::Access* access);

  // int64 expires_at = 4;
  void clear_expires_at();
  static const int kExpiresAtFieldNumber = 4;
  ::google::protobuf::int64 expires_at() const;
  void set_expires_at(::google::protobuf::int64 value);

  // int64 issued_at = 6;
  void clear_issued_at();
  static const int kIssuedAtFieldNumber = 6;
  ::google::protobuf::int64 issued_at() const;
  void set_issued_at(::google::protobuf::int64 value);

  // int64 not_before = 7;
  void clear_not_before();
  static const int kNotBeforeFieldNumber = 7;
  ::google::protobuf::int64 not_before() const;
  void set_not_before(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.StandardClaims)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr audience_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::api::Access* access_;
  ::google::protobuf::int64 expires_at_;
  ::google::protobuf::int64 issued_at_;
  ::google::protobuf::int64 not_before_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.LogConfig) */ {
 public:
  LogConfig();
  virtual ~LogConfig();

  LogConfig(const LogConfig& from);

  inline LogConfig& operator=(const LogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogConfig(LogConfig&& from) noexcept
    : LogConfig() {
    *this = ::std::move(from);
  }

  inline LogConfig& operator=(LogConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogConfig* internal_default_instance() {
    return reinterpret_cast<const LogConfig*>(
               &_LogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(LogConfig* other);
  friend void swap(LogConfig& a, LogConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogConfig* New() const final {
    return CreateMaybeMessage<LogConfig>(NULL);
  }

  LogConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogConfig& from);
  void MergeFrom(const LogConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // @@protoc_insertion_point(class_scope:api.LogConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailAddress) */ {
 public:
  EmailAddress();
  virtual ~EmailAddress();

  EmailAddress(const EmailAddress& from);

  inline EmailAddress& operator=(const EmailAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailAddress(EmailAddress&& from) noexcept
    : EmailAddress() {
    *this = ::std::move(from);
  }

  inline EmailAddress& operator=(EmailAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailAddress* internal_default_instance() {
    return reinterpret_cast<const EmailAddress*>(
               &_EmailAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(EmailAddress* other);
  friend void swap(EmailAddress& a, EmailAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailAddress* New() const final {
    return CreateMaybeMessage<EmailAddress>(NULL);
  }

  EmailAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailAddress& from);
  void MergeFrom(const EmailAddress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:api.EmailAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Email : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Email) */ {
 public:
  Email();
  virtual ~Email();

  Email(const Email& from);

  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Email(Email&& from) noexcept
    : Email() {
    *this = ::std::move(from);
  }

  inline Email& operator=(Email&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Email& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Email* internal_default_instance() {
    return reinterpret_cast<const Email*>(
               &_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(Email* other);
  friend void swap(Email& a, Email& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Email* New() const final {
    return CreateMaybeMessage<Email>(NULL);
  }

  Email* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Email>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Email* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.EmailAddress from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  private:
  const ::api::EmailAddress& _internal_from() const;
  public:
  const ::api::EmailAddress& from() const;
  ::api::EmailAddress* release_from();
  ::api::EmailAddress* mutable_from();
  void set_allocated_from(::api::EmailAddress* from);

  // .api.RecipientEmail recipient = 2;
  bool has_recipient() const;
  void clear_recipient();
  static const int kRecipientFieldNumber = 2;
  private:
  const ::api::RecipientEmail& _internal_recipient() const;
  public:
  const ::api::RecipientEmail& recipient() const;
  ::api::RecipientEmail* release_recipient();
  ::api::RecipientEmail* mutable_recipient();
  void set_allocated_recipient(::api::RecipientEmail* recipient);

  // @@protoc_insertion_point(class_scope:api.Email)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::EmailAddress* from_;
  ::api::RecipientEmail* recipient_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecipientEmail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.RecipientEmail) */ {
 public:
  RecipientEmail();
  virtual ~RecipientEmail();

  RecipientEmail(const RecipientEmail& from);

  inline RecipientEmail& operator=(const RecipientEmail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecipientEmail(RecipientEmail&& from) noexcept
    : RecipientEmail() {
    *this = ::std::move(from);
  }

  inline RecipientEmail& operator=(RecipientEmail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecipientEmail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecipientEmail* internal_default_instance() {
    return reinterpret_cast<const RecipientEmail*>(
               &_RecipientEmail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(RecipientEmail* other);
  friend void swap(RecipientEmail& a, RecipientEmail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecipientEmail* New() const final {
    return CreateMaybeMessage<RecipientEmail>(NULL);
  }

  RecipientEmail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecipientEmail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecipientEmail& from);
  void MergeFrom(const RecipientEmail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecipientEmail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject = 3;
  void clear_subject();
  static const int kSubjectFieldNumber = 3;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string plain_text = 4;
  void clear_plain_text();
  static const int kPlainTextFieldNumber = 4;
  const ::std::string& plain_text() const;
  void set_plain_text(const ::std::string& value);
  #if LANG_CXX11
  void set_plain_text(::std::string&& value);
  #endif
  void set_plain_text(const char* value);
  void set_plain_text(const char* value, size_t size);
  ::std::string* mutable_plain_text();
  ::std::string* release_plain_text();
  void set_allocated_plain_text(::std::string* plain_text);

  // string html = 5;
  void clear_html();
  static const int kHtmlFieldNumber = 5;
  const ::std::string& html() const;
  void set_html(const ::std::string& value);
  #if LANG_CXX11
  void set_html(::std::string&& value);
  #endif
  void set_html(const char* value);
  void set_html(const char* value, size_t size);
  ::std::string* mutable_html();
  ::std::string* release_html();
  void set_allocated_html(::std::string* html);

  // .api.EmailAddress to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  private:
  const ::api::EmailAddress& _internal_to() const;
  public:
  const ::api::EmailAddress& to() const;
  ::api::EmailAddress* release_to();
  ::api::EmailAddress* mutable_to();
  void set_allocated_to(::api::EmailAddress* to);

  // @@protoc_insertion_point(class_scope:api.RecipientEmail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr plain_text_;
  ::google::protobuf::internal::ArenaStringPtr html_;
  ::api::EmailAddress* to_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMS) */ {
 public:
  SMS();
  virtual ~SMS();

  SMS(const SMS& from);

  inline SMS& operator=(const SMS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMS(SMS&& from) noexcept
    : SMS() {
    *this = ::std::move(from);
  }

  inline SMS& operator=(SMS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMS* internal_default_instance() {
    return reinterpret_cast<const SMS*>(
               &_SMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(SMS* other);
  friend void swap(SMS& a, SMS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMS* New() const final {
    return CreateMaybeMessage<SMS>(NULL);
  }

  SMS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMS& from);
  void MergeFrom(const SMS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string to = 1;
  void clear_to();
  static const int kToFieldNumber = 1;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string from = 2;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string body = 3;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // string media_url = 4;
  void clear_media_url();
  static const int kMediaUrlFieldNumber = 4;
  const ::std::string& media_url() const;
  void set_media_url(const ::std::string& value);
  #if LANG_CXX11
  void set_media_url(::std::string&& value);
  #endif
  void set_media_url(const char* value);
  void set_media_url(const char* value, size_t size);
  ::std::string* mutable_media_url();
  ::std::string* release_media_url();
  void set_allocated_media_url(::std::string* media_url);

  // string callback = 5;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  const ::std::string& callback() const;
  void set_callback(const ::std::string& value);
  #if LANG_CXX11
  void set_callback(::std::string&& value);
  #endif
  void set_callback(const char* value);
  void set_callback(const char* value, size_t size);
  ::std::string* mutable_callback();
  ::std::string* release_callback();
  void set_allocated_callback(::std::string* callback);

  // string app = 6;
  void clear_app();
  static const int kAppFieldNumber = 6;
  const ::std::string& app() const;
  void set_app(const ::std::string& value);
  #if LANG_CXX11
  void set_app(::std::string&& value);
  #endif
  void set_app(const char* value);
  void set_app(const char* value, size_t size);
  ::std::string* mutable_app();
  ::std::string* release_app();
  void set_allocated_app(::std::string* app);

  // @@protoc_insertion_point(class_scope:api.SMS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr media_url_;
  ::google::protobuf::internal::ArenaStringPtr callback_;
  ::google::protobuf::internal::ArenaStringPtr app_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const final {
    return CreateMaybeMessage<Call>(NULL);
  }

  Call* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Call>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string to = 1;
  void clear_to();
  static const int kToFieldNumber = 1;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string from = 2;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string callback = 5;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  const ::std::string& callback() const;
  void set_callback(const ::std::string& value);
  #if LANG_CXX11
  void set_callback(::std::string&& value);
  #endif
  void set_callback(const char* value);
  void set_callback(const char* value, size_t size);
  ::std::string* mutable_callback();
  ::std::string* release_callback();
  void set_allocated_callback(::std::string* callback);

  // @@protoc_insertion_point(class_scope:api.Call)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr callback_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Fax : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Fax) */ {
 public:
  Fax();
  virtual ~Fax();

  Fax(const Fax& from);

  inline Fax& operator=(const Fax& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fax(Fax&& from) noexcept
    : Fax() {
    *this = ::std::move(from);
  }

  inline Fax& operator=(Fax&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fax& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fax* internal_default_instance() {
    return reinterpret_cast<const Fax*>(
               &_Fax_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(Fax* other);
  friend void swap(Fax& a, Fax& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fax* New() const final {
    return CreateMaybeMessage<Fax>(NULL);
  }

  Fax* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fax>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Fax& from);
  void MergeFrom(const Fax& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fax* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string to = 1;
  void clear_to();
  static const int kToFieldNumber = 1;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string from = 2;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string media_url = 3;
  void clear_media_url();
  static const int kMediaUrlFieldNumber = 3;
  const ::std::string& media_url() const;
  void set_media_url(const ::std::string& value);
  #if LANG_CXX11
  void set_media_url(::std::string&& value);
  #endif
  void set_media_url(const char* value);
  void set_media_url(const char* value, size_t size);
  ::std::string* mutable_media_url();
  ::std::string* release_media_url();
  void set_allocated_media_url(::std::string* media_url);

  // string quality = 4;
  void clear_quality();
  static const int kQualityFieldNumber = 4;
  const ::std::string& quality() const;
  void set_quality(const ::std::string& value);
  #if LANG_CXX11
  void set_quality(::std::string&& value);
  #endif
  void set_quality(const char* value);
  void set_quality(const char* value, size_t size);
  ::std::string* mutable_quality();
  ::std::string* release_quality();
  void set_allocated_quality(::std::string* quality);

  // string callback = 5;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  const ::std::string& callback() const;
  void set_callback(const ::std::string& value);
  #if LANG_CXX11
  void set_callback(::std::string&& value);
  #endif
  void set_callback(const char* value);
  void set_callback(const char* value, size_t size);
  ::std::string* mutable_callback();
  ::std::string* release_callback();
  void set_allocated_callback(::std::string* callback);

  // bool store_media = 6;
  void clear_store_media();
  static const int kStoreMediaFieldNumber = 6;
  bool store_media() const;
  void set_store_media(bool value);

  // @@protoc_insertion_point(class_scope:api.Fax)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr media_url_;
  ::google::protobuf::internal::ArenaStringPtr quality_;
  ::google::protobuf::internal::ArenaStringPtr callback_;
  bool store_media_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogHook : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.LogHook) */ {
 public:
  LogHook();
  virtual ~LogHook();

  LogHook(const LogHook& from);

  inline LogHook& operator=(const LogHook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogHook(LogHook&& from) noexcept
    : LogHook() {
    *this = ::std::move(from);
  }

  inline LogHook& operator=(LogHook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogHook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogHook* internal_default_instance() {
    return reinterpret_cast<const LogHook*>(
               &_LogHook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(LogHook* other);
  friend void swap(LogHook& a, LogHook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogHook* New() const final {
    return CreateMaybeMessage<LogHook>(NULL);
  }

  LogHook* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogHook>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogHook& from);
  void MergeFrom(const LogHook& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogHook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string icon = 2;
  void clear_icon();
  static const int kIconFieldNumber = 2;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:api.LogHook)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Attachment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Attachment) */ {
 public:
  Attachment();
  virtual ~Attachment();

  Attachment(const Attachment& from);

  inline Attachment& operator=(const Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attachment(Attachment&& from) noexcept
    : Attachment() {
    *this = ::std::move(from);
  }

  inline Attachment& operator=(Attachment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attachment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attachment* internal_default_instance() {
    return reinterpret_cast<const Attachment*>(
               &_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(Attachment* other);
  friend void swap(Attachment& a, Attachment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attachment* New() const final {
    return CreateMaybeMessage<Attachment>(NULL);
  }

  Attachment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Attachment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Attachment& from);
  void MergeFrom(const Attachment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attachment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.AttachmentField fields = 15;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 15;
  ::api::AttachmentField* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentField >*
      mutable_fields();
  const ::api::AttachmentField& fields(int index) const;
  ::api::AttachmentField* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::api::AttachmentField >&
      fields() const;

  // string color = 1;
  void clear_color();
  static const int kColorFieldNumber = 1;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // string fallback = 2;
  void clear_fallback();
  static const int kFallbackFieldNumber = 2;
  const ::std::string& fallback() const;
  void set_fallback(const ::std::string& value);
  #if LANG_CXX11
  void set_fallback(::std::string&& value);
  #endif
  void set_fallback(const char* value);
  void set_fallback(const char* value, size_t size);
  ::std::string* mutable_fallback();
  ::std::string* release_fallback();
  void set_allocated_fallback(::std::string* fallback);

  // string callback_id = 3;
  void clear_callback_id();
  static const int kCallbackIdFieldNumber = 3;
  const ::std::string& callback_id() const;
  void set_callback_id(const ::std::string& value);
  #if LANG_CXX11
  void set_callback_id(::std::string&& value);
  #endif
  void set_callback_id(const char* value);
  void set_callback_id(const char* value, size_t size);
  ::std::string* mutable_callback_id();
  ::std::string* release_callback_id();
  void set_allocated_callback_id(::std::string* callback_id);

  // string author_id = 5;
  void clear_author_id();
  static const int kAuthorIdFieldNumber = 5;
  const ::std::string& author_id() const;
  void set_author_id(const ::std::string& value);
  #if LANG_CXX11
  void set_author_id(::std::string&& value);
  #endif
  void set_author_id(const char* value);
  void set_author_id(const char* value, size_t size);
  ::std::string* mutable_author_id();
  ::std::string* release_author_id();
  void set_allocated_author_id(::std::string* author_id);

  // string author_name = 6;
  void clear_author_name();
  static const int kAuthorNameFieldNumber = 6;
  const ::std::string& author_name() const;
  void set_author_name(const ::std::string& value);
  #if LANG_CXX11
  void set_author_name(::std::string&& value);
  #endif
  void set_author_name(const char* value);
  void set_author_name(const char* value, size_t size);
  ::std::string* mutable_author_name();
  ::std::string* release_author_name();
  void set_allocated_author_name(::std::string* author_name);

  // string author_link = 7;
  void clear_author_link();
  static const int kAuthorLinkFieldNumber = 7;
  const ::std::string& author_link() const;
  void set_author_link(const ::std::string& value);
  #if LANG_CXX11
  void set_author_link(::std::string&& value);
  #endif
  void set_author_link(const char* value);
  void set_author_link(const char* value, size_t size);
  ::std::string* mutable_author_link();
  ::std::string* release_author_link();
  void set_allocated_author_link(::std::string* author_link);

  // string author_icon = 8;
  void clear_author_icon();
  static const int kAuthorIconFieldNumber = 8;
  const ::std::string& author_icon() const;
  void set_author_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_author_icon(::std::string&& value);
  #endif
  void set_author_icon(const char* value);
  void set_author_icon(const char* value, size_t size);
  ::std::string* mutable_author_icon();
  ::std::string* release_author_icon();
  void set_allocated_author_icon(::std::string* author_icon);

  // string title = 9;
  void clear_title();
  static const int kTitleFieldNumber = 9;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string title_prefix = 10;
  void clear_title_prefix();
  static const int kTitlePrefixFieldNumber = 10;
  const ::std::string& title_prefix() const;
  void set_title_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_title_prefix(::std::string&& value);
  #endif
  void set_title_prefix(const char* value);
  void set_title_prefix(const char* value, size_t size);
  ::std::string* mutable_title_prefix();
  ::std::string* release_title_prefix();
  void set_allocated_title_prefix(::std::string* title_prefix);

  // string pretext = 11;
  void clear_pretext();
  static const int kPretextFieldNumber = 11;
  const ::std::string& pretext() const;
  void set_pretext(const ::std::string& value);
  #if LANG_CXX11
  void set_pretext(::std::string&& value);
  #endif
  void set_pretext(const char* value);
  void set_pretext(const char* value, size_t size);
  ::std::string* mutable_pretext();
  ::std::string* release_pretext();
  void set_allocated_pretext(::std::string* pretext);

  // string text = 12;
  void clear_text();
  static const int kTextFieldNumber = 12;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string image_url = 13;
  void clear_image_url();
  static const int kImageUrlFieldNumber = 13;
  const ::std::string& image_url() const;
  void set_image_url(const ::std::string& value);
  #if LANG_CXX11
  void set_image_url(::std::string&& value);
  #endif
  void set_image_url(const char* value);
  void set_image_url(const char* value, size_t size);
  ::std::string* mutable_image_url();
  ::std::string* release_image_url();
  void set_allocated_image_url(::std::string* image_url);

  // string thumb_url = 14;
  void clear_thumb_url();
  static const int kThumbUrlFieldNumber = 14;
  const ::std::string& thumb_url() const;
  void set_thumb_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumb_url(::std::string&& value);
  #endif
  void set_thumb_url(const char* value);
  void set_thumb_url(const char* value, size_t size);
  ::std::string* mutable_thumb_url();
  ::std::string* release_thumb_url();
  void set_allocated_thumb_url(::std::string* thumb_url);

  // int64 id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.Attachment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentField > fields_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr fallback_;
  ::google::protobuf::internal::ArenaStringPtr callback_id_;
  ::google::protobuf::internal::ArenaStringPtr author_id_;
  ::google::protobuf::internal::ArenaStringPtr author_name_;
  ::google::protobuf::internal::ArenaStringPtr author_link_;
  ::google::protobuf::internal::ArenaStringPtr author_icon_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr title_prefix_;
  ::google::protobuf::internal::ArenaStringPtr pretext_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr image_url_;
  ::google::protobuf::internal::ArenaStringPtr thumb_url_;
  ::google::protobuf::int64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttachmentAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AttachmentAction) */ {
 public:
  AttachmentAction();
  virtual ~AttachmentAction();

  AttachmentAction(const AttachmentAction& from);

  inline AttachmentAction& operator=(const AttachmentAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachmentAction(AttachmentAction&& from) noexcept
    : AttachmentAction() {
    *this = ::std::move(from);
  }

  inline AttachmentAction& operator=(AttachmentAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachmentAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachmentAction* internal_default_instance() {
    return reinterpret_cast<const AttachmentAction*>(
               &_AttachmentAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(AttachmentAction* other);
  friend void swap(AttachmentAction& a, AttachmentAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachmentAction* New() const final {
    return CreateMaybeMessage<AttachmentAction>(NULL);
  }

  AttachmentAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttachmentAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttachmentAction& from);
  void MergeFrom(const AttachmentAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.AttachmentActionOption options = 8;
  int options_size() const;
  void clear_options();
  static const int kOptionsFieldNumber = 8;
  ::api::AttachmentActionOption* mutable_options(int index);
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >*
      mutable_options();
  const ::api::AttachmentActionOption& options(int index) const;
  ::api::AttachmentActionOption* add_options();
  const ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >&
      options() const;

  // repeated .api.AttachmentActionOption selected_options = 9;
  int selected_options_size() const;
  void clear_selected_options();
  static const int kSelectedOptionsFieldNumber = 9;
  ::api::AttachmentActionOption* mutable_selected_options(int index);
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >*
      mutable_selected_options();
  const ::api::AttachmentActionOption& selected_options(int index) const;
  ::api::AttachmentActionOption* add_selected_options();
  const ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >&
      selected_options() const;

  // repeated .api.AttachmentActionOptionGroup option_groups = 10;
  int option_groups_size() const;
  void clear_option_groups();
  static const int kOptionGroupsFieldNumber = 10;
  ::api::AttachmentActionOptionGroup* mutable_option_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOptionGroup >*
      mutable_option_groups();
  const ::api::AttachmentActionOptionGroup& option_groups(int index) const;
  ::api::AttachmentActionOptionGroup* add_option_groups();
  const ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOptionGroup >&
      option_groups() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string style = 3;
  void clear_style();
  static const int kStyleFieldNumber = 3;
  const ::std::string& style() const;
  void set_style(const ::std::string& value);
  #if LANG_CXX11
  void set_style(::std::string&& value);
  #endif
  void set_style(const char* value);
  void set_style(const char* value, size_t size);
  ::std::string* mutable_style();
  ::std::string* release_style();
  void set_allocated_style(::std::string* style);

  // string type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string data_source = 6;
  void clear_data_source();
  static const int kDataSourceFieldNumber = 6;
  const ::std::string& data_source() const;
  void set_data_source(const ::std::string& value);
  #if LANG_CXX11
  void set_data_source(::std::string&& value);
  #endif
  void set_data_source(const char* value);
  void set_data_source(const char* value, size_t size);
  ::std::string* mutable_data_source();
  ::std::string* release_data_source();
  void set_allocated_data_source(::std::string* data_source);

  // string url = 12;
  void clear_url();
  static const int kUrlFieldNumber = 12;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // .api.AttachmentConfirmationField confirm = 11;
  bool has_confirm() const;
  void clear_confirm();
  static const int kConfirmFieldNumber = 11;
  private:
  const ::api::AttachmentConfirmationField& _internal_confirm() const;
  public:
  const ::api::AttachmentConfirmationField& confirm() const;
  ::api::AttachmentConfirmationField* release_confirm();
  ::api::AttachmentConfirmationField* mutable_confirm();
  void set_allocated_confirm(::api::AttachmentConfirmationField* confirm);

  // int64 min_query_length = 7;
  void clear_min_query_length();
  static const int kMinQueryLengthFieldNumber = 7;
  ::google::protobuf::int64 min_query_length() const;
  void set_min_query_length(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.AttachmentAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption > options_;
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption > selected_options_;
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOptionGroup > option_groups_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr style_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr data_source_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::api::AttachmentConfirmationField* confirm_;
  ::google::protobuf::int64 min_query_length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttachmentConfirmationField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AttachmentConfirmationField) */ {
 public:
  AttachmentConfirmationField();
  virtual ~AttachmentConfirmationField();

  AttachmentConfirmationField(const AttachmentConfirmationField& from);

  inline AttachmentConfirmationField& operator=(const AttachmentConfirmationField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachmentConfirmationField(AttachmentConfirmationField&& from) noexcept
    : AttachmentConfirmationField() {
    *this = ::std::move(from);
  }

  inline AttachmentConfirmationField& operator=(AttachmentConfirmationField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachmentConfirmationField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachmentConfirmationField* internal_default_instance() {
    return reinterpret_cast<const AttachmentConfirmationField*>(
               &_AttachmentConfirmationField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(AttachmentConfirmationField* other);
  friend void swap(AttachmentConfirmationField& a, AttachmentConfirmationField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachmentConfirmationField* New() const final {
    return CreateMaybeMessage<AttachmentConfirmationField>(NULL);
  }

  AttachmentConfirmationField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttachmentConfirmationField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttachmentConfirmationField& from);
  void MergeFrom(const AttachmentConfirmationField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentConfirmationField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string ok_text = 3;
  void clear_ok_text();
  static const int kOkTextFieldNumber = 3;
  const ::std::string& ok_text() const;
  void set_ok_text(const ::std::string& value);
  #if LANG_CXX11
  void set_ok_text(::std::string&& value);
  #endif
  void set_ok_text(const char* value);
  void set_ok_text(const char* value, size_t size);
  ::std::string* mutable_ok_text();
  ::std::string* release_ok_text();
  void set_allocated_ok_text(::std::string* ok_text);

  // string dismiss_text = 4;
  void clear_dismiss_text();
  static const int kDismissTextFieldNumber = 4;
  const ::std::string& dismiss_text() const;
  void set_dismiss_text(const ::std::string& value);
  #if LANG_CXX11
  void set_dismiss_text(::std::string&& value);
  #endif
  void set_dismiss_text(const char* value);
  void set_dismiss_text(const char* value, size_t size);
  ::std::string* mutable_dismiss_text();
  ::std::string* release_dismiss_text();
  void set_allocated_dismiss_text(::std::string* dismiss_text);

  // @@protoc_insertion_point(class_scope:api.AttachmentConfirmationField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr ok_text_;
  ::google::protobuf::internal::ArenaStringPtr dismiss_text_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttachmentActionOptionGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AttachmentActionOptionGroup) */ {
 public:
  AttachmentActionOptionGroup();
  virtual ~AttachmentActionOptionGroup();

  AttachmentActionOptionGroup(const AttachmentActionOptionGroup& from);

  inline AttachmentActionOptionGroup& operator=(const AttachmentActionOptionGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachmentActionOptionGroup(AttachmentActionOptionGroup&& from) noexcept
    : AttachmentActionOptionGroup() {
    *this = ::std::move(from);
  }

  inline AttachmentActionOptionGroup& operator=(AttachmentActionOptionGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachmentActionOptionGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachmentActionOptionGroup* internal_default_instance() {
    return reinterpret_cast<const AttachmentActionOptionGroup*>(
               &_AttachmentActionOptionGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(AttachmentActionOptionGroup* other);
  friend void swap(AttachmentActionOptionGroup& a, AttachmentActionOptionGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachmentActionOptionGroup* New() const final {
    return CreateMaybeMessage<AttachmentActionOptionGroup>(NULL);
  }

  AttachmentActionOptionGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttachmentActionOptionGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttachmentActionOptionGroup& from);
  void MergeFrom(const AttachmentActionOptionGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentActionOptionGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.AttachmentActionOption options = 2;
  int options_size() const;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  ::api::AttachmentActionOption* mutable_options(int index);
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >*
      mutable_options();
  const ::api::AttachmentActionOption& options(int index) const;
  ::api::AttachmentActionOption* add_options();
  const ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >&
      options() const;

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:api.AttachmentActionOptionGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption > options_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttachmentActionOption : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AttachmentActionOption) */ {
 public:
  AttachmentActionOption();
  virtual ~AttachmentActionOption();

  AttachmentActionOption(const AttachmentActionOption& from);

  inline AttachmentActionOption& operator=(const AttachmentActionOption& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachmentActionOption(AttachmentActionOption&& from) noexcept
    : AttachmentActionOption() {
    *this = ::std::move(from);
  }

  inline AttachmentActionOption& operator=(AttachmentActionOption&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachmentActionOption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachmentActionOption* internal_default_instance() {
    return reinterpret_cast<const AttachmentActionOption*>(
               &_AttachmentActionOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(AttachmentActionOption* other);
  friend void swap(AttachmentActionOption& a, AttachmentActionOption& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachmentActionOption* New() const final {
    return CreateMaybeMessage<AttachmentActionOption>(NULL);
  }

  AttachmentActionOption* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttachmentActionOption>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttachmentActionOption& from);
  void MergeFrom(const AttachmentActionOption& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentActionOption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:api.AttachmentActionOption)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttachmentField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AttachmentField) */ {
 public:
  AttachmentField();
  virtual ~AttachmentField();

  AttachmentField(const AttachmentField& from);

  inline AttachmentField& operator=(const AttachmentField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachmentField(AttachmentField&& from) noexcept
    : AttachmentField() {
    *this = ::std::move(from);
  }

  inline AttachmentField& operator=(AttachmentField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachmentField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachmentField* internal_default_instance() {
    return reinterpret_cast<const AttachmentField*>(
               &_AttachmentField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(AttachmentField* other);
  friend void swap(AttachmentField& a, AttachmentField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachmentField* New() const final {
    return CreateMaybeMessage<AttachmentField>(NULL);
  }

  AttachmentField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttachmentField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttachmentField& from);
  void MergeFrom(const AttachmentField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bool short = 3;
  void clear_short_();
  static const int kShortFieldNumber = 3;
  bool short_() const;
  void set_short_(bool value);

  // @@protoc_insertion_point(class_scope:api.AttachmentField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  bool short__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JSON : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.JSON) */ {
 public:
  JSON();
  virtual ~JSON();

  JSON(const JSON& from);

  inline JSON& operator=(const JSON& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JSON(JSON&& from) noexcept
    : JSON() {
    *this = ::std::move(from);
  }

  inline JSON& operator=(JSON&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JSON& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JSON* internal_default_instance() {
    return reinterpret_cast<const JSON*>(
               &_JSON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(JSON* other);
  friend void swap(JSON& a, JSON& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JSON* New() const final {
    return CreateMaybeMessage<JSON>(NULL);
  }

  JSON* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JSON>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JSON& from);
  void MergeFrom(const JSON& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSON* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.JSON)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class File_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<File_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<File_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  File_TagsEntry_DoNotUse();
  File_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const File_TagsEntry_DoNotUse& other);
  static const File_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const File_TagsEntry_DoNotUse*>(&_File_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(File* other);
  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(NULL);
  }

  File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:api.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      File_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Product_TagsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Product_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Product_TagsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Product_TagsEntry_DoNotUse();
  Product_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Product_TagsEntry_DoNotUse& other);
  static const Product_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Product_TagsEntry_DoNotUse*>(&_Product_TagsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Product : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Product) */ {
 public:
  Product();
  virtual ~Product();

  Product(const Product& from);

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(Product&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Product& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(Product* other);
  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const final {
    return CreateMaybeMessage<Product>(NULL);
  }

  Product* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .api.File files = 4;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 4;
  ::api::File* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::api::File >*
      mutable_files();
  const ::api::File& files(int index) const;
  ::api::File* add_files();
  const ::google::protobuf::RepeatedPtrField< ::api::File >&
      files() const;

  // map<string, string> tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // int64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // bool available = 6;
  void clear_available();
  static const int kAvailableFieldNumber = 6;
  bool available() const;
  void set_available(bool value);

  // @@protoc_insertion_point(class_scope:api.Product)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::File > files_;
  ::google::protobuf::internal::MapField<
      Product_TagsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int64 amount_;
  bool available_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Id

// string id = 1;
inline void Id::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Id::id() const {
  // @@protoc_insertion_point(field_get:api.Id.id)
  return id_.GetNoArena();
}
inline void Id::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Id.id)
}
#if LANG_CXX11
inline void Id::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Id.id)
}
#endif
inline void Id::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Id.id)
}
inline void Id::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Id.id)
}
inline ::std::string* Id::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Id.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Id::release_id() {
  // @@protoc_insertion_point(field_release:api.Id.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Id::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.Id.id)
}

// -------------------------------------------------------------------

// MessageUserRequest

// string id = 1;
inline void MessageUserRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageUserRequest::id() const {
  // @@protoc_insertion_point(field_get:api.MessageUserRequest.id)
  return id_.GetNoArena();
}
inline void MessageUserRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.MessageUserRequest.id)
}
#if LANG_CXX11
inline void MessageUserRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.MessageUserRequest.id)
}
#endif
inline void MessageUserRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.MessageUserRequest.id)
}
inline void MessageUserRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.MessageUserRequest.id)
}
inline ::std::string* MessageUserRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.MessageUserRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageUserRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.MessageUserRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageUserRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.MessageUserRequest.id)
}

// string message = 2;
inline void MessageUserRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageUserRequest::message() const {
  // @@protoc_insertion_point(field_get:api.MessageUserRequest.message)
  return message_.GetNoArena();
}
inline void MessageUserRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.MessageUserRequest.message)
}
#if LANG_CXX11
inline void MessageUserRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.MessageUserRequest.message)
}
#endif
inline void MessageUserRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.MessageUserRequest.message)
}
inline void MessageUserRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.MessageUserRequest.message)
}
inline ::std::string* MessageUserRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:api.MessageUserRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageUserRequest::release_message() {
  // @@protoc_insertion_point(field_release:api.MessageUserRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageUserRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:api.MessageUserRequest.message)
}

// -------------------------------------------------------------------

// RefundRequest

// string id = 1;
inline void RefundRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefundRequest::id() const {
  // @@protoc_insertion_point(field_get:api.RefundRequest.id)
  return id_.GetNoArena();
}
inline void RefundRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RefundRequest.id)
}
#if LANG_CXX11
inline void RefundRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RefundRequest.id)
}
#endif
inline void RefundRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RefundRequest.id)
}
inline void RefundRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RefundRequest.id)
}
inline ::std::string* RefundRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.RefundRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefundRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.RefundRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefundRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.RefundRequest.id)
}

// string reason = 2;
inline void RefundRequest::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefundRequest::reason() const {
  // @@protoc_insertion_point(field_get:api.RefundRequest.reason)
  return reason_.GetNoArena();
}
inline void RefundRequest::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RefundRequest.reason)
}
#if LANG_CXX11
inline void RefundRequest::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RefundRequest.reason)
}
#endif
inline void RefundRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RefundRequest.reason)
}
inline void RefundRequest::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RefundRequest.reason)
}
inline ::std::string* RefundRequest::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:api.RefundRequest.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefundRequest::release_reason() {
  // @@protoc_insertion_point(field_release:api.RefundRequest.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefundRequest::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:api.RefundRequest.reason)
}

// int64 amount = 3;
inline void RefundRequest::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RefundRequest::amount() const {
  // @@protoc_insertion_point(field_get:api.RefundRequest.amount)
  return amount_;
}
inline void RefundRequest::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:api.RefundRequest.amount)
}

// bool reverse_transfer = 4;
inline void RefundRequest::clear_reverse_transfer() {
  reverse_transfer_ = false;
}
inline bool RefundRequest::reverse_transfer() const {
  // @@protoc_insertion_point(field_get:api.RefundRequest.reverse_transfer)
  return reverse_transfer_;
}
inline void RefundRequest::set_reverse_transfer(bool value) {
  
  reverse_transfer_ = value;
  // @@protoc_insertion_point(field_set:api.RefundRequest.reverse_transfer)
}

// string status = 5;
inline void RefundRequest::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefundRequest::status() const {
  // @@protoc_insertion_point(field_get:api.RefundRequest.status)
  return status_.GetNoArena();
}
inline void RefundRequest::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RefundRequest.status)
}
#if LANG_CXX11
inline void RefundRequest::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RefundRequest.status)
}
#endif
inline void RefundRequest::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RefundRequest.status)
}
inline void RefundRequest::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RefundRequest.status)
}
inline ::std::string* RefundRequest::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:api.RefundRequest.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefundRequest::release_status() {
  // @@protoc_insertion_point(field_release:api.RefundRequest.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefundRequest::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:api.RefundRequest.status)
}

// -------------------------------------------------------------------

// ChargeRequest

// .api.Product product = 1;
inline bool ChargeRequest::has_product() const {
  return this != internal_default_instance() && product_ != NULL;
}
inline void ChargeRequest::clear_product() {
  if (GetArenaNoVirtual() == NULL && product_ != NULL) {
    delete product_;
  }
  product_ = NULL;
}
inline const ::api::Product& ChargeRequest::_internal_product() const {
  return *product_;
}
inline const ::api::Product& ChargeRequest::product() const {
  const ::api::Product* p = product_;
  // @@protoc_insertion_point(field_get:api.ChargeRequest.product)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Product*>(
      &::api::_Product_default_instance_);
}
inline ::api::Product* ChargeRequest::release_product() {
  // @@protoc_insertion_point(field_release:api.ChargeRequest.product)
  
  ::api::Product* temp = product_;
  product_ = NULL;
  return temp;
}
inline ::api::Product* ChargeRequest::mutable_product() {
  
  if (product_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Product>(GetArenaNoVirtual());
    product_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.ChargeRequest.product)
  return product_;
}
inline void ChargeRequest::set_allocated_product(::api::Product* product) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_;
  }
  if (product) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:api.ChargeRequest.product)
}

// string id = 2;
inline void ChargeRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChargeRequest::id() const {
  // @@protoc_insertion_point(field_get:api.ChargeRequest.id)
  return id_.GetNoArena();
}
inline void ChargeRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChargeRequest.id)
}
#if LANG_CXX11
inline void ChargeRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChargeRequest.id)
}
#endif
inline void ChargeRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChargeRequest.id)
}
inline void ChargeRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChargeRequest.id)
}
inline ::std::string* ChargeRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.ChargeRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChargeRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.ChargeRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChargeRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.ChargeRequest.id)
}

// -------------------------------------------------------------------

// CancelSubscriptionRequest

// string id = 1;
inline void CancelSubscriptionRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelSubscriptionRequest::id() const {
  // @@protoc_insertion_point(field_get:api.CancelSubscriptionRequest.id)
  return id_.GetNoArena();
}
inline void CancelSubscriptionRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CancelSubscriptionRequest.id)
}
#if LANG_CXX11
inline void CancelSubscriptionRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CancelSubscriptionRequest.id)
}
#endif
inline void CancelSubscriptionRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CancelSubscriptionRequest.id)
}
inline void CancelSubscriptionRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CancelSubscriptionRequest.id)
}
inline ::std::string* CancelSubscriptionRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.CancelSubscriptionRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelSubscriptionRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.CancelSubscriptionRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelSubscriptionRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.CancelSubscriptionRequest.id)
}

// -------------------------------------------------------------------

// CreatePlanRequest

// string plan_id = 1;
inline void CreatePlanRequest::clear_plan_id() {
  plan_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreatePlanRequest::plan_id() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.plan_id)
  return plan_id_.GetNoArena();
}
inline void CreatePlanRequest::set_plan_id(const ::std::string& value) {
  
  plan_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.plan_id)
}
#if LANG_CXX11
inline void CreatePlanRequest::set_plan_id(::std::string&& value) {
  
  plan_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreatePlanRequest.plan_id)
}
#endif
inline void CreatePlanRequest::set_plan_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreatePlanRequest.plan_id)
}
inline void CreatePlanRequest::set_plan_id(const char* value, size_t size) {
  
  plan_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreatePlanRequest.plan_id)
}
inline ::std::string* CreatePlanRequest::mutable_plan_id() {
  
  // @@protoc_insertion_point(field_mutable:api.CreatePlanRequest.plan_id)
  return plan_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreatePlanRequest::release_plan_id() {
  // @@protoc_insertion_point(field_release:api.CreatePlanRequest.plan_id)
  
  return plan_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlanRequest::set_allocated_plan_id(::std::string* plan_id) {
  if (plan_id != NULL) {
    
  } else {
    
  }
  plan_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan_id);
  // @@protoc_insertion_point(field_set_allocated:api.CreatePlanRequest.plan_id)
}

// int64 amount = 2;
inline void CreatePlanRequest::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CreatePlanRequest::amount() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.amount)
  return amount_;
}
inline void CreatePlanRequest::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.amount)
}

// string service_id = 3;
inline void CreatePlanRequest::clear_service_id() {
  service_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreatePlanRequest::service_id() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.service_id)
  return service_id_.GetNoArena();
}
inline void CreatePlanRequest::set_service_id(const ::std::string& value) {
  
  service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.service_id)
}
#if LANG_CXX11
inline void CreatePlanRequest::set_service_id(::std::string&& value) {
  
  service_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreatePlanRequest.service_id)
}
#endif
inline void CreatePlanRequest::set_service_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreatePlanRequest.service_id)
}
inline void CreatePlanRequest::set_service_id(const char* value, size_t size) {
  
  service_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreatePlanRequest.service_id)
}
inline ::std::string* CreatePlanRequest::mutable_service_id() {
  
  // @@protoc_insertion_point(field_mutable:api.CreatePlanRequest.service_id)
  return service_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreatePlanRequest::release_service_id() {
  // @@protoc_insertion_point(field_release:api.CreatePlanRequest.service_id)
  
  return service_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlanRequest::set_allocated_service_id(::std::string* service_id) {
  if (service_id != NULL) {
    
  } else {
    
  }
  service_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_id);
  // @@protoc_insertion_point(field_set_allocated:api.CreatePlanRequest.service_id)
}

// string service_name = 4;
inline void CreatePlanRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreatePlanRequest::service_name() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.service_name)
  return service_name_.GetNoArena();
}
inline void CreatePlanRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.service_name)
}
#if LANG_CXX11
inline void CreatePlanRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreatePlanRequest.service_name)
}
#endif
inline void CreatePlanRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreatePlanRequest.service_name)
}
inline void CreatePlanRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreatePlanRequest.service_name)
}
inline ::std::string* CreatePlanRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:api.CreatePlanRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreatePlanRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:api.CreatePlanRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlanRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:api.CreatePlanRequest.service_name)
}

// string friendly_name = 5;
inline void CreatePlanRequest::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreatePlanRequest::friendly_name() const {
  // @@protoc_insertion_point(field_get:api.CreatePlanRequest.friendly_name)
  return friendly_name_.GetNoArena();
}
inline void CreatePlanRequest::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreatePlanRequest.friendly_name)
}
#if LANG_CXX11
inline void CreatePlanRequest::set_friendly_name(::std::string&& value) {
  
  friendly_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreatePlanRequest.friendly_name)
}
#endif
inline void CreatePlanRequest::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreatePlanRequest.friendly_name)
}
inline void CreatePlanRequest::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreatePlanRequest.friendly_name)
}
inline ::std::string* CreatePlanRequest::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:api.CreatePlanRequest.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreatePlanRequest::release_friendly_name() {
  // @@protoc_insertion_point(field_release:api.CreatePlanRequest.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePlanRequest::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:api.CreatePlanRequest.friendly_name)
}

// -------------------------------------------------------------------

// SMSRequest

// string id = 1;
inline void SMSRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSRequest::id() const {
  // @@protoc_insertion_point(field_get:api.SMSRequest.id)
  return id_.GetNoArena();
}
inline void SMSRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSRequest.id)
}
#if LANG_CXX11
inline void SMSRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSRequest.id)
}
#endif
inline void SMSRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSRequest.id)
}
inline void SMSRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSRequest.id)
}
inline ::std::string* SMSRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.SMSRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.SMSRequest.id)
}

// string body = 2;
inline void SMSRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMSRequest::body() const {
  // @@protoc_insertion_point(field_get:api.SMSRequest.body)
  return body_.GetNoArena();
}
inline void SMSRequest::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMSRequest.body)
}
#if LANG_CXX11
inline void SMSRequest::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMSRequest.body)
}
#endif
inline void SMSRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMSRequest.body)
}
inline void SMSRequest::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMSRequest.body)
}
inline ::std::string* SMSRequest::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:api.SMSRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMSRequest::release_body() {
  // @@protoc_insertion_point(field_release:api.SMSRequest.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMSRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:api.SMSRequest.body)
}

// -------------------------------------------------------------------

// CallRequest

// string id = 1;
inline void CallRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallRequest::id() const {
  // @@protoc_insertion_point(field_get:api.CallRequest.id)
  return id_.GetNoArena();
}
inline void CallRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CallRequest.id)
}
#if LANG_CXX11
inline void CallRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CallRequest.id)
}
#endif
inline void CallRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CallRequest.id)
}
inline void CallRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CallRequest.id)
}
inline ::std::string* CallRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.CallRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.CallRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.CallRequest.id)
}

// string callback_url = 2;
inline void CallRequest::clear_callback_url() {
  callback_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallRequest::callback_url() const {
  // @@protoc_insertion_point(field_get:api.CallRequest.callback_url)
  return callback_url_.GetNoArena();
}
inline void CallRequest::set_callback_url(const ::std::string& value) {
  
  callback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CallRequest.callback_url)
}
#if LANG_CXX11
inline void CallRequest::set_callback_url(::std::string&& value) {
  
  callback_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CallRequest.callback_url)
}
#endif
inline void CallRequest::set_callback_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CallRequest.callback_url)
}
inline void CallRequest::set_callback_url(const char* value, size_t size) {
  
  callback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CallRequest.callback_url)
}
inline ::std::string* CallRequest::mutable_callback_url() {
  
  // @@protoc_insertion_point(field_mutable:api.CallRequest.callback_url)
  return callback_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRequest::release_callback_url() {
  // @@protoc_insertion_point(field_release:api.CallRequest.callback_url)
  
  return callback_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRequest::set_allocated_callback_url(::std::string* callback_url) {
  if (callback_url != NULL) {
    
  } else {
    
  }
  callback_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_url);
  // @@protoc_insertion_point(field_set_allocated:api.CallRequest.callback_url)
}

// -------------------------------------------------------------------

// MMSRequest

// .api.SMSRequest sms = 1;
inline bool MMSRequest::has_sms() const {
  return this != internal_default_instance() && sms_ != NULL;
}
inline void MMSRequest::clear_sms() {
  if (GetArenaNoVirtual() == NULL && sms_ != NULL) {
    delete sms_;
  }
  sms_ = NULL;
}
inline const ::api::SMSRequest& MMSRequest::_internal_sms() const {
  return *sms_;
}
inline const ::api::SMSRequest& MMSRequest::sms() const {
  const ::api::SMSRequest* p = sms_;
  // @@protoc_insertion_point(field_get:api.MMSRequest.sms)
  return p != NULL ? *p : *reinterpret_cast<const ::api::SMSRequest*>(
      &::api::_SMSRequest_default_instance_);
}
inline ::api::SMSRequest* MMSRequest::release_sms() {
  // @@protoc_insertion_point(field_release:api.MMSRequest.sms)
  
  ::api::SMSRequest* temp = sms_;
  sms_ = NULL;
  return temp;
}
inline ::api::SMSRequest* MMSRequest::mutable_sms() {
  
  if (sms_ == NULL) {
    auto* p = CreateMaybeMessage<::api::SMSRequest>(GetArenaNoVirtual());
    sms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.MMSRequest.sms)
  return sms_;
}
inline void MMSRequest::set_allocated_sms(::api::SMSRequest* sms) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sms_;
  }
  if (sms) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sms = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sms, submessage_arena);
    }
    
  } else {
    
  }
  sms_ = sms;
  // @@protoc_insertion_point(field_set_allocated:api.MMSRequest.sms)
}

// string media_url = 3;
inline void MMSRequest::clear_media_url() {
  media_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MMSRequest::media_url() const {
  // @@protoc_insertion_point(field_get:api.MMSRequest.media_url)
  return media_url_.GetNoArena();
}
inline void MMSRequest::set_media_url(const ::std::string& value) {
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.MMSRequest.media_url)
}
#if LANG_CXX11
inline void MMSRequest::set_media_url(::std::string&& value) {
  
  media_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.MMSRequest.media_url)
}
#endif
inline void MMSRequest::set_media_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.MMSRequest.media_url)
}
inline void MMSRequest::set_media_url(const char* value, size_t size) {
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.MMSRequest.media_url)
}
inline ::std::string* MMSRequest::mutable_media_url() {
  
  // @@protoc_insertion_point(field_mutable:api.MMSRequest.media_url)
  return media_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MMSRequest::release_media_url() {
  // @@protoc_insertion_point(field_release:api.MMSRequest.media_url)
  
  return media_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MMSRequest::set_allocated_media_url(::std::string* media_url) {
  if (media_url != NULL) {
    
  } else {
    
  }
  media_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_url);
  // @@protoc_insertion_point(field_set_allocated:api.MMSRequest.media_url)
}

// -------------------------------------------------------------------

// EmailRequest

// string id = 1;
inline void EmailRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::id() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.id)
  return id_.GetNoArena();
}
inline void EmailRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.id)
}
#if LANG_CXX11
inline void EmailRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.id)
}
#endif
inline void EmailRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.id)
}
inline void EmailRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.id)
}
inline ::std::string* EmailRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.id)
}

// string subject = 2;
inline void EmailRequest::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::subject() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.subject)
  return subject_.GetNoArena();
}
inline void EmailRequest::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.subject)
}
#if LANG_CXX11
inline void EmailRequest::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.subject)
}
#endif
inline void EmailRequest::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.subject)
}
inline void EmailRequest::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.subject)
}
inline ::std::string* EmailRequest::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_subject() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.subject)
}

// string plain_text = 3;
inline void EmailRequest::clear_plain_text() {
  plain_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::plain_text() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.plain_text)
  return plain_text_.GetNoArena();
}
inline void EmailRequest::set_plain_text(const ::std::string& value) {
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.plain_text)
}
#if LANG_CXX11
inline void EmailRequest::set_plain_text(::std::string&& value) {
  
  plain_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.plain_text)
}
#endif
inline void EmailRequest::set_plain_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.plain_text)
}
inline void EmailRequest::set_plain_text(const char* value, size_t size) {
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.plain_text)
}
inline ::std::string* EmailRequest::mutable_plain_text() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.plain_text)
  return plain_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_plain_text() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.plain_text)
  
  return plain_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_plain_text(::std::string* plain_text) {
  if (plain_text != NULL) {
    
  } else {
    
  }
  plain_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plain_text);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.plain_text)
}

// string html_alt = 4;
inline void EmailRequest::clear_html_alt() {
  html_alt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailRequest::html_alt() const {
  // @@protoc_insertion_point(field_get:api.EmailRequest.html_alt)
  return html_alt_.GetNoArena();
}
inline void EmailRequest::set_html_alt(const ::std::string& value) {
  
  html_alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailRequest.html_alt)
}
#if LANG_CXX11
inline void EmailRequest::set_html_alt(::std::string&& value) {
  
  html_alt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailRequest.html_alt)
}
#endif
inline void EmailRequest::set_html_alt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  html_alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailRequest.html_alt)
}
inline void EmailRequest::set_html_alt(const char* value, size_t size) {
  
  html_alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailRequest.html_alt)
}
inline ::std::string* EmailRequest::mutable_html_alt() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.html_alt)
  return html_alt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailRequest::release_html_alt() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.html_alt)
  
  return html_alt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailRequest::set_allocated_html_alt(::std::string* html_alt) {
  if (html_alt != NULL) {
    
  } else {
    
  }
  html_alt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html_alt);
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.html_alt)
}

// -------------------------------------------------------------------

// CustomerRequest

// string email = 1;
inline void CustomerRequest::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerRequest::email() const {
  // @@protoc_insertion_point(field_get:api.CustomerRequest.email)
  return email_.GetNoArena();
}
inline void CustomerRequest::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CustomerRequest.email)
}
#if LANG_CXX11
inline void CustomerRequest::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CustomerRequest.email)
}
#endif
inline void CustomerRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CustomerRequest.email)
}
inline void CustomerRequest::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CustomerRequest.email)
}
inline ::std::string* CustomerRequest::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.CustomerRequest.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.CustomerRequest.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerRequest::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.CustomerRequest.email)
}

// string plan = 2;
inline void CustomerRequest::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerRequest::plan() const {
  // @@protoc_insertion_point(field_get:api.CustomerRequest.plan)
  return plan_.GetNoArena();
}
inline void CustomerRequest::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CustomerRequest.plan)
}
#if LANG_CXX11
inline void CustomerRequest::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CustomerRequest.plan)
}
#endif
inline void CustomerRequest::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CustomerRequest.plan)
}
inline void CustomerRequest::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CustomerRequest.plan)
}
inline ::std::string* CustomerRequest::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.CustomerRequest.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerRequest::release_plan() {
  // @@protoc_insertion_point(field_release:api.CustomerRequest.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerRequest::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.CustomerRequest.plan)
}

// string phone = 3;
inline void CustomerRequest::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerRequest::phone() const {
  // @@protoc_insertion_point(field_get:api.CustomerRequest.phone)
  return phone_.GetNoArena();
}
inline void CustomerRequest::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CustomerRequest.phone)
}
#if LANG_CXX11
inline void CustomerRequest::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CustomerRequest.phone)
}
#endif
inline void CustomerRequest::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CustomerRequest.phone)
}
inline void CustomerRequest::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CustomerRequest.phone)
}
inline ::std::string* CustomerRequest::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.CustomerRequest.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerRequest::release_phone() {
  // @@protoc_insertion_point(field_release:api.CustomerRequest.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerRequest::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.CustomerRequest.phone)
}

// string name = 4;
inline void CustomerRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerRequest::name() const {
  // @@protoc_insertion_point(field_get:api.CustomerRequest.name)
  return name_.GetNoArena();
}
inline void CustomerRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CustomerRequest.name)
}
#if LANG_CXX11
inline void CustomerRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CustomerRequest.name)
}
#endif
inline void CustomerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CustomerRequest.name)
}
inline void CustomerRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CustomerRequest.name)
}
inline ::std::string* CustomerRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.CustomerRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerRequest::release_name() {
  // @@protoc_insertion_point(field_release:api.CustomerRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.CustomerRequest.name)
}

// string description = 7;
inline void CustomerRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerRequest::description() const {
  // @@protoc_insertion_point(field_get:api.CustomerRequest.description)
  return description_.GetNoArena();
}
inline void CustomerRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CustomerRequest.description)
}
#if LANG_CXX11
inline void CustomerRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CustomerRequest.description)
}
#endif
inline void CustomerRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CustomerRequest.description)
}
inline void CustomerRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CustomerRequest.description)
}
inline ::std::string* CustomerRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:api.CustomerRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerRequest::release_description() {
  // @@protoc_insertion_point(field_release:api.CustomerRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:api.CustomerRequest.description)
}

// .api.Address address = 8;
inline bool CustomerRequest::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void CustomerRequest::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::api::Address& CustomerRequest::_internal_address() const {
  return *address_;
}
inline const ::api::Address& CustomerRequest::address() const {
  const ::api::Address* p = address_;
  // @@protoc_insertion_point(field_get:api.CustomerRequest.address)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Address*>(
      &::api::_Address_default_instance_);
}
inline ::api::Address* CustomerRequest::release_address() {
  // @@protoc_insertion_point(field_release:api.CustomerRequest.address)
  
  ::api::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::api::Address* CustomerRequest::mutable_address() {
  
  if (address_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CustomerRequest.address)
  return address_;
}
inline void CustomerRequest::set_allocated_address(::api::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:api.CustomerRequest.address)
}

// -------------------------------------------------------------------

// UpdateCustomerRequest

// string id = 1;
inline void UpdateCustomerRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateCustomerRequest::id() const {
  // @@protoc_insertion_point(field_get:api.UpdateCustomerRequest.id)
  return id_.GetNoArena();
}
inline void UpdateCustomerRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UpdateCustomerRequest.id)
}
#if LANG_CXX11
inline void UpdateCustomerRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UpdateCustomerRequest.id)
}
#endif
inline void UpdateCustomerRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UpdateCustomerRequest.id)
}
inline void UpdateCustomerRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UpdateCustomerRequest.id)
}
inline ::std::string* UpdateCustomerRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.UpdateCustomerRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateCustomerRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.UpdateCustomerRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateCustomerRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.UpdateCustomerRequest.id)
}

// .api.CustomerRequest customer = 2;
inline bool UpdateCustomerRequest::has_customer() const {
  return this != internal_default_instance() && customer_ != NULL;
}
inline void UpdateCustomerRequest::clear_customer() {
  if (GetArenaNoVirtual() == NULL && customer_ != NULL) {
    delete customer_;
  }
  customer_ = NULL;
}
inline const ::api::CustomerRequest& UpdateCustomerRequest::_internal_customer() const {
  return *customer_;
}
inline const ::api::CustomerRequest& UpdateCustomerRequest::customer() const {
  const ::api::CustomerRequest* p = customer_;
  // @@protoc_insertion_point(field_get:api.UpdateCustomerRequest.customer)
  return p != NULL ? *p : *reinterpret_cast<const ::api::CustomerRequest*>(
      &::api::_CustomerRequest_default_instance_);
}
inline ::api::CustomerRequest* UpdateCustomerRequest::release_customer() {
  // @@protoc_insertion_point(field_release:api.UpdateCustomerRequest.customer)
  
  ::api::CustomerRequest* temp = customer_;
  customer_ = NULL;
  return temp;
}
inline ::api::CustomerRequest* UpdateCustomerRequest::mutable_customer() {
  
  if (customer_ == NULL) {
    auto* p = CreateMaybeMessage<::api::CustomerRequest>(GetArenaNoVirtual());
    customer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UpdateCustomerRequest.customer)
  return customer_;
}
inline void UpdateCustomerRequest::set_allocated_customer(::api::CustomerRequest* customer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete customer_;
  }
  if (customer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      customer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, customer, submessage_arena);
    }
    
  } else {
    
  }
  customer_ = customer;
  // @@protoc_insertion_point(field_set_allocated:api.UpdateCustomerRequest.customer)
}

// -------------------------------------------------------------------

// SubscribeCustomerRequest

// string id = 1;
inline void SubscribeCustomerRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeCustomerRequest::id() const {
  // @@protoc_insertion_point(field_get:api.SubscribeCustomerRequest.id)
  return id_.GetNoArena();
}
inline void SubscribeCustomerRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeCustomerRequest.id)
}
#if LANG_CXX11
inline void SubscribeCustomerRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeCustomerRequest.id)
}
#endif
inline void SubscribeCustomerRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeCustomerRequest.id)
}
inline void SubscribeCustomerRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeCustomerRequest.id)
}
inline ::std::string* SubscribeCustomerRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeCustomerRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeCustomerRequest::release_id() {
  // @@protoc_insertion_point(field_release:api.SubscribeCustomerRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeCustomerRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeCustomerRequest.id)
}

// string plan = 2;
inline void SubscribeCustomerRequest::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeCustomerRequest::plan() const {
  // @@protoc_insertion_point(field_get:api.SubscribeCustomerRequest.plan)
  return plan_.GetNoArena();
}
inline void SubscribeCustomerRequest::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeCustomerRequest.plan)
}
#if LANG_CXX11
inline void SubscribeCustomerRequest::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeCustomerRequest.plan)
}
#endif
inline void SubscribeCustomerRequest::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeCustomerRequest.plan)
}
inline void SubscribeCustomerRequest::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeCustomerRequest.plan)
}
inline ::std::string* SubscribeCustomerRequest::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeCustomerRequest.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeCustomerRequest::release_plan() {
  // @@protoc_insertion_point(field_release:api.SubscribeCustomerRequest.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeCustomerRequest::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeCustomerRequest.plan)
}

// string card_number = 3;
inline void SubscribeCustomerRequest::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeCustomerRequest::card_number() const {
  // @@protoc_insertion_point(field_get:api.SubscribeCustomerRequest.card_number)
  return card_number_.GetNoArena();
}
inline void SubscribeCustomerRequest::set_card_number(const ::std::string& value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeCustomerRequest.card_number)
}
#if LANG_CXX11
inline void SubscribeCustomerRequest::set_card_number(::std::string&& value) {
  
  card_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeCustomerRequest.card_number)
}
#endif
inline void SubscribeCustomerRequest::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeCustomerRequest.card_number)
}
inline void SubscribeCustomerRequest::set_card_number(const char* value, size_t size) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeCustomerRequest.card_number)
}
inline ::std::string* SubscribeCustomerRequest::mutable_card_number() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeCustomerRequest.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeCustomerRequest::release_card_number() {
  // @@protoc_insertion_point(field_release:api.SubscribeCustomerRequest.card_number)
  
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeCustomerRequest::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    
  } else {
    
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeCustomerRequest.card_number)
}

// string exp_month = 4;
inline void SubscribeCustomerRequest::clear_exp_month() {
  exp_month_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeCustomerRequest::exp_month() const {
  // @@protoc_insertion_point(field_get:api.SubscribeCustomerRequest.exp_month)
  return exp_month_.GetNoArena();
}
inline void SubscribeCustomerRequest::set_exp_month(const ::std::string& value) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeCustomerRequest.exp_month)
}
#if LANG_CXX11
inline void SubscribeCustomerRequest::set_exp_month(::std::string&& value) {
  
  exp_month_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeCustomerRequest.exp_month)
}
#endif
inline void SubscribeCustomerRequest::set_exp_month(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeCustomerRequest.exp_month)
}
inline void SubscribeCustomerRequest::set_exp_month(const char* value, size_t size) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeCustomerRequest.exp_month)
}
inline ::std::string* SubscribeCustomerRequest::mutable_exp_month() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeCustomerRequest.exp_month)
  return exp_month_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeCustomerRequest::release_exp_month() {
  // @@protoc_insertion_point(field_release:api.SubscribeCustomerRequest.exp_month)
  
  return exp_month_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeCustomerRequest::set_allocated_exp_month(::std::string* exp_month) {
  if (exp_month != NULL) {
    
  } else {
    
  }
  exp_month_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_month);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeCustomerRequest.exp_month)
}

// string exp_year = 5;
inline void SubscribeCustomerRequest::clear_exp_year() {
  exp_year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeCustomerRequest::exp_year() const {
  // @@protoc_insertion_point(field_get:api.SubscribeCustomerRequest.exp_year)
  return exp_year_.GetNoArena();
}
inline void SubscribeCustomerRequest::set_exp_year(const ::std::string& value) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeCustomerRequest.exp_year)
}
#if LANG_CXX11
inline void SubscribeCustomerRequest::set_exp_year(::std::string&& value) {
  
  exp_year_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeCustomerRequest.exp_year)
}
#endif
inline void SubscribeCustomerRequest::set_exp_year(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeCustomerRequest.exp_year)
}
inline void SubscribeCustomerRequest::set_exp_year(const char* value, size_t size) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeCustomerRequest.exp_year)
}
inline ::std::string* SubscribeCustomerRequest::mutable_exp_year() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeCustomerRequest.exp_year)
  return exp_year_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeCustomerRequest::release_exp_year() {
  // @@protoc_insertion_point(field_release:api.SubscribeCustomerRequest.exp_year)
  
  return exp_year_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeCustomerRequest::set_allocated_exp_year(::std::string* exp_year) {
  if (exp_year != NULL) {
    
  } else {
    
  }
  exp_year_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_year);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeCustomerRequest.exp_year)
}

// string cvc = 6;
inline void SubscribeCustomerRequest::clear_cvc() {
  cvc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeCustomerRequest::cvc() const {
  // @@protoc_insertion_point(field_get:api.SubscribeCustomerRequest.cvc)
  return cvc_.GetNoArena();
}
inline void SubscribeCustomerRequest::set_cvc(const ::std::string& value) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SubscribeCustomerRequest.cvc)
}
#if LANG_CXX11
inline void SubscribeCustomerRequest::set_cvc(::std::string&& value) {
  
  cvc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SubscribeCustomerRequest.cvc)
}
#endif
inline void SubscribeCustomerRequest::set_cvc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SubscribeCustomerRequest.cvc)
}
inline void SubscribeCustomerRequest::set_cvc(const char* value, size_t size) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SubscribeCustomerRequest.cvc)
}
inline ::std::string* SubscribeCustomerRequest::mutable_cvc() {
  
  // @@protoc_insertion_point(field_mutable:api.SubscribeCustomerRequest.cvc)
  return cvc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeCustomerRequest::release_cvc() {
  // @@protoc_insertion_point(field_release:api.SubscribeCustomerRequest.cvc)
  
  return cvc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeCustomerRequest::set_allocated_cvc(::std::string* cvc) {
  if (cvc != NULL) {
    
  } else {
    
  }
  cvc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cvc);
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeCustomerRequest.cvc)
}

// -------------------------------------------------------------------

// CreateAccountRequest

// .api.CustomerRequest customer = 1;
inline bool CreateAccountRequest::has_customer() const {
  return this != internal_default_instance() && customer_ != NULL;
}
inline void CreateAccountRequest::clear_customer() {
  if (GetArenaNoVirtual() == NULL && customer_ != NULL) {
    delete customer_;
  }
  customer_ = NULL;
}
inline const ::api::CustomerRequest& CreateAccountRequest::_internal_customer() const {
  return *customer_;
}
inline const ::api::CustomerRequest& CreateAccountRequest::customer() const {
  const ::api::CustomerRequest* p = customer_;
  // @@protoc_insertion_point(field_get:api.CreateAccountRequest.customer)
  return p != NULL ? *p : *reinterpret_cast<const ::api::CustomerRequest*>(
      &::api::_CustomerRequest_default_instance_);
}
inline ::api::CustomerRequest* CreateAccountRequest::release_customer() {
  // @@protoc_insertion_point(field_release:api.CreateAccountRequest.customer)
  
  ::api::CustomerRequest* temp = customer_;
  customer_ = NULL;
  return temp;
}
inline ::api::CustomerRequest* CreateAccountRequest::mutable_customer() {
  
  if (customer_ == NULL) {
    auto* p = CreateMaybeMessage<::api::CustomerRequest>(GetArenaNoVirtual());
    customer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CreateAccountRequest.customer)
  return customer_;
}
inline void CreateAccountRequest::set_allocated_customer(::api::CustomerRequest* customer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete customer_;
  }
  if (customer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      customer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, customer, submessage_arena);
    }
    
  } else {
    
  }
  customer_ = customer;
  // @@protoc_insertion_point(field_set_allocated:api.CreateAccountRequest.customer)
}

// .api.Access access = 2;
inline bool CreateAccountRequest::has_access() const {
  return this != internal_default_instance() && access_ != NULL;
}
inline void CreateAccountRequest::clear_access() {
  if (GetArenaNoVirtual() == NULL && access_ != NULL) {
    delete access_;
  }
  access_ = NULL;
}
inline const ::api::Access& CreateAccountRequest::_internal_access() const {
  return *access_;
}
inline const ::api::Access& CreateAccountRequest::access() const {
  const ::api::Access* p = access_;
  // @@protoc_insertion_point(field_get:api.CreateAccountRequest.access)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Access*>(
      &::api::_Access_default_instance_);
}
inline ::api::Access* CreateAccountRequest::release_access() {
  // @@protoc_insertion_point(field_release:api.CreateAccountRequest.access)
  
  ::api::Access* temp = access_;
  access_ = NULL;
  return temp;
}
inline ::api::Access* CreateAccountRequest::mutable_access() {
  
  if (access_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Access>(GetArenaNoVirtual());
    access_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CreateAccountRequest.access)
  return access_;
}
inline void CreateAccountRequest::set_allocated_access(::api::Access* access) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete access_;
  }
  if (access) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      access = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    
  } else {
    
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:api.CreateAccountRequest.access)
}

// -------------------------------------------------------------------

// Account

// .api.Customer customer = 1;
inline bool Account::has_customer() const {
  return this != internal_default_instance() && customer_ != NULL;
}
inline void Account::clear_customer() {
  if (GetArenaNoVirtual() == NULL && customer_ != NULL) {
    delete customer_;
  }
  customer_ = NULL;
}
inline const ::api::Customer& Account::_internal_customer() const {
  return *customer_;
}
inline const ::api::Customer& Account::customer() const {
  const ::api::Customer* p = customer_;
  // @@protoc_insertion_point(field_get:api.Account.customer)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Customer*>(
      &::api::_Customer_default_instance_);
}
inline ::api::Customer* Account::release_customer() {
  // @@protoc_insertion_point(field_release:api.Account.customer)
  
  ::api::Customer* temp = customer_;
  customer_ = NULL;
  return temp;
}
inline ::api::Customer* Account::mutable_customer() {
  
  if (customer_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Customer>(GetArenaNoVirtual());
    customer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Account.customer)
  return customer_;
}
inline void Account::set_allocated_customer(::api::Customer* customer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete customer_;
  }
  if (customer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      customer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, customer, submessage_arena);
    }
    
  } else {
    
  }
  customer_ = customer;
  // @@protoc_insertion_point(field_set_allocated:api.Account.customer)
}

// .api.Access access = 2;
inline bool Account::has_access() const {
  return this != internal_default_instance() && access_ != NULL;
}
inline void Account::clear_access() {
  if (GetArenaNoVirtual() == NULL && access_ != NULL) {
    delete access_;
  }
  access_ = NULL;
}
inline const ::api::Access& Account::_internal_access() const {
  return *access_;
}
inline const ::api::Access& Account::access() const {
  const ::api::Access* p = access_;
  // @@protoc_insertion_point(field_get:api.Account.access)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Access*>(
      &::api::_Access_default_instance_);
}
inline ::api::Access* Account::release_access() {
  // @@protoc_insertion_point(field_release:api.Account.access)
  
  ::api::Access* temp = access_;
  access_ = NULL;
  return temp;
}
inline ::api::Access* Account::mutable_access() {
  
  if (access_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Access>(GetArenaNoVirtual());
    access_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Account.access)
  return access_;
}
inline void Account::set_allocated_access(::api::Access* access) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete access_;
  }
  if (access) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      access = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    
  } else {
    
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:api.Account.access)
}

// -------------------------------------------------------------------

// User

// string id = 1;
inline void User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:api.User.id)
  return id_.GetNoArena();
}
inline void User::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.id)
}
#if LANG_CXX11
inline void User::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.id)
}
#endif
inline void User::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.id)
}
inline void User::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.id)
}
inline ::std::string* User::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:api.User.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.User.id)
}

// string team_id = 2;
inline void User::clear_team_id() {
  team_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::team_id() const {
  // @@protoc_insertion_point(field_get:api.User.team_id)
  return team_id_.GetNoArena();
}
inline void User::set_team_id(const ::std::string& value) {
  
  team_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.team_id)
}
#if LANG_CXX11
inline void User::set_team_id(::std::string&& value) {
  
  team_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.team_id)
}
#endif
inline void User::set_team_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.team_id)
}
inline void User::set_team_id(const char* value, size_t size) {
  
  team_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.team_id)
}
inline ::std::string* User::mutable_team_id() {
  
  // @@protoc_insertion_point(field_mutable:api.User.team_id)
  return team_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_team_id() {
  // @@protoc_insertion_point(field_release:api.User.team_id)
  
  return team_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_team_id(::std::string* team_id) {
  if (team_id != NULL) {
    
  } else {
    
  }
  team_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_id);
  // @@protoc_insertion_point(field_set_allocated:api.User.team_id)
}

// string name = 3;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:api.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.name)
}
#if LANG_CXX11
inline void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.name)
}
#endif
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:api.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.User.name)
}

// string phone = 4;
inline void User::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::phone() const {
  // @@protoc_insertion_point(field_get:api.User.phone)
  return phone_.GetNoArena();
}
inline void User::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.phone)
}
#if LANG_CXX11
inline void User::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.phone)
}
#endif
inline void User::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.phone)
}
inline void User::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.phone)
}
inline ::std::string* User::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.User.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_phone() {
  // @@protoc_insertion_point(field_release:api.User.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.User.phone)
}

// .api.Profile profile = 5;
inline bool User::has_profile() const {
  return this != internal_default_instance() && profile_ != NULL;
}
inline void User::clear_profile() {
  if (GetArenaNoVirtual() == NULL && profile_ != NULL) {
    delete profile_;
  }
  profile_ = NULL;
}
inline const ::api::Profile& User::_internal_profile() const {
  return *profile_;
}
inline const ::api::Profile& User::profile() const {
  const ::api::Profile* p = profile_;
  // @@protoc_insertion_point(field_get:api.User.profile)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Profile*>(
      &::api::_Profile_default_instance_);
}
inline ::api::Profile* User::release_profile() {
  // @@protoc_insertion_point(field_release:api.User.profile)
  
  ::api::Profile* temp = profile_;
  profile_ = NULL;
  return temp;
}
inline ::api::Profile* User::mutable_profile() {
  
  if (profile_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Profile>(GetArenaNoVirtual());
    profile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.profile)
  return profile_;
}
inline void User::set_allocated_profile(::api::Profile* profile) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete profile_;
  }
  if (profile) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      profile = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    
  } else {
    
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:api.User.profile)
}

// bool deleted = 6;
inline void User::clear_deleted() {
  deleted_ = false;
}
inline bool User::deleted() const {
  // @@protoc_insertion_point(field_get:api.User.deleted)
  return deleted_;
}
inline void User::set_deleted(bool value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:api.User.deleted)
}

// bool admin = 7;
inline void User::clear_admin() {
  admin_ = false;
}
inline bool User::admin() const {
  // @@protoc_insertion_point(field_get:api.User.admin)
  return admin_;
}
inline void User::set_admin(bool value) {
  
  admin_ = value;
  // @@protoc_insertion_point(field_set:api.User.admin)
}

// bool ownder = 8;
inline void User::clear_ownder() {
  ownder_ = false;
}
inline bool User::ownder() const {
  // @@protoc_insertion_point(field_get:api.User.ownder)
  return ownder_;
}
inline void User::set_ownder(bool value) {
  
  ownder_ = value;
  // @@protoc_insertion_point(field_set:api.User.ownder)
}

// bool primary_owner = 9;
inline void User::clear_primary_owner() {
  primary_owner_ = false;
}
inline bool User::primary_owner() const {
  // @@protoc_insertion_point(field_get:api.User.primary_owner)
  return primary_owner_;
}
inline void User::set_primary_owner(bool value) {
  
  primary_owner_ = value;
  // @@protoc_insertion_point(field_set:api.User.primary_owner)
}

// bool restricted = 10;
inline void User::clear_restricted() {
  restricted_ = false;
}
inline bool User::restricted() const {
  // @@protoc_insertion_point(field_get:api.User.restricted)
  return restricted_;
}
inline void User::set_restricted(bool value) {
  
  restricted_ = value;
  // @@protoc_insertion_point(field_set:api.User.restricted)
}

// bool ultra_restricted = 11;
inline void User::clear_ultra_restricted() {
  ultra_restricted_ = false;
}
inline bool User::ultra_restricted() const {
  // @@protoc_insertion_point(field_get:api.User.ultra_restricted)
  return ultra_restricted_;
}
inline void User::set_ultra_restricted(bool value) {
  
  ultra_restricted_ = value;
  // @@protoc_insertion_point(field_set:api.User.ultra_restricted)
}

// bool stranger = 12;
inline void User::clear_stranger() {
  stranger_ = false;
}
inline bool User::stranger() const {
  // @@protoc_insertion_point(field_get:api.User.stranger)
  return stranger_;
}
inline void User::set_stranger(bool value) {
  
  stranger_ = value;
  // @@protoc_insertion_point(field_set:api.User.stranger)
}

// bool bot = 13;
inline void User::clear_bot() {
  bot_ = false;
}
inline bool User::bot() const {
  // @@protoc_insertion_point(field_get:api.User.bot)
  return bot_;
}
inline void User::set_bot(bool value) {
  
  bot_ = value;
  // @@protoc_insertion_point(field_set:api.User.bot)
}

// bool has2fa = 14;
inline void User::clear_has2fa() {
  has2fa_ = false;
}
inline bool User::has2fa() const {
  // @@protoc_insertion_point(field_get:api.User.has2fa)
  return has2fa_;
}
inline void User::set_has2fa(bool value) {
  
  has2fa_ = value;
  // @@protoc_insertion_point(field_set:api.User.has2fa)
}

// string locale = 15;
inline void User::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::locale() const {
  // @@protoc_insertion_point(field_get:api.User.locale)
  return locale_.GetNoArena();
}
inline void User::set_locale(const ::std::string& value) {
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.User.locale)
}
#if LANG_CXX11
inline void User::set_locale(::std::string&& value) {
  
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.User.locale)
}
#endif
inline void User::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.User.locale)
}
inline void User::set_locale(const char* value, size_t size) {
  
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.User.locale)
}
inline ::std::string* User::mutable_locale() {
  
  // @@protoc_insertion_point(field_mutable:api.User.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_locale() {
  // @@protoc_insertion_point(field_release:api.User.locale)
  
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    
  } else {
    
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:api.User.locale)
}

// -------------------------------------------------------------------

// Profile

// string avatar_hash = 1;
inline void Profile::clear_avatar_hash() {
  avatar_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::avatar_hash() const {
  // @@protoc_insertion_point(field_get:api.Profile.avatar_hash)
  return avatar_hash_.GetNoArena();
}
inline void Profile::set_avatar_hash(const ::std::string& value) {
  
  avatar_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.avatar_hash)
}
#if LANG_CXX11
inline void Profile::set_avatar_hash(::std::string&& value) {
  
  avatar_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.avatar_hash)
}
#endif
inline void Profile::set_avatar_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.avatar_hash)
}
inline void Profile::set_avatar_hash(const char* value, size_t size) {
  
  avatar_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.avatar_hash)
}
inline ::std::string* Profile::mutable_avatar_hash() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.avatar_hash)
  return avatar_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_avatar_hash() {
  // @@protoc_insertion_point(field_release:api.Profile.avatar_hash)
  
  return avatar_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_avatar_hash(::std::string* avatar_hash) {
  if (avatar_hash != NULL) {
    
  } else {
    
  }
  avatar_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_hash);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.avatar_hash)
}

// string status = 2;
inline void Profile::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::status() const {
  // @@protoc_insertion_point(field_get:api.Profile.status)
  return status_.GetNoArena();
}
inline void Profile::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.status)
}
#if LANG_CXX11
inline void Profile::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.status)
}
#endif
inline void Profile::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.status)
}
inline void Profile::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.status)
}
inline ::std::string* Profile::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_status() {
  // @@protoc_insertion_point(field_release:api.Profile.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.status)
}

// string status_emoji = 3;
inline void Profile::clear_status_emoji() {
  status_emoji_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::status_emoji() const {
  // @@protoc_insertion_point(field_get:api.Profile.status_emoji)
  return status_emoji_.GetNoArena();
}
inline void Profile::set_status_emoji(const ::std::string& value) {
  
  status_emoji_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.status_emoji)
}
#if LANG_CXX11
inline void Profile::set_status_emoji(::std::string&& value) {
  
  status_emoji_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.status_emoji)
}
#endif
inline void Profile::set_status_emoji(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_emoji_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.status_emoji)
}
inline void Profile::set_status_emoji(const char* value, size_t size) {
  
  status_emoji_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.status_emoji)
}
inline ::std::string* Profile::mutable_status_emoji() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.status_emoji)
  return status_emoji_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_status_emoji() {
  // @@protoc_insertion_point(field_release:api.Profile.status_emoji)
  
  return status_emoji_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_status_emoji(::std::string* status_emoji) {
  if (status_emoji != NULL) {
    
  } else {
    
  }
  status_emoji_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_emoji);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.status_emoji)
}

// string display_name = 4;
inline void Profile::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::display_name() const {
  // @@protoc_insertion_point(field_get:api.Profile.display_name)
  return display_name_.GetNoArena();
}
inline void Profile::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.display_name)
}
#if LANG_CXX11
inline void Profile::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.display_name)
}
#endif
inline void Profile::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.display_name)
}
inline void Profile::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.display_name)
}
inline ::std::string* Profile::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_display_name() {
  // @@protoc_insertion_point(field_release:api.Profile.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.display_name)
}

// string name = 5;
inline void Profile::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::name() const {
  // @@protoc_insertion_point(field_get:api.Profile.name)
  return name_.GetNoArena();
}
inline void Profile::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.name)
}
#if LANG_CXX11
inline void Profile::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.name)
}
#endif
inline void Profile::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.name)
}
inline void Profile::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.name)
}
inline ::std::string* Profile::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_name() {
  // @@protoc_insertion_point(field_release:api.Profile.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.name)
}

// string email = 6;
inline void Profile::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::email() const {
  // @@protoc_insertion_point(field_get:api.Profile.email)
  return email_.GetNoArena();
}
inline void Profile::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.email)
}
#if LANG_CXX11
inline void Profile::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.email)
}
#endif
inline void Profile::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.email)
}
inline void Profile::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.email)
}
inline ::std::string* Profile::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_email() {
  // @@protoc_insertion_point(field_release:api.Profile.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.email)
}

// repeated string image_urls = 7;
inline int Profile::image_urls_size() const {
  return image_urls_.size();
}
inline void Profile::clear_image_urls() {
  image_urls_.Clear();
}
inline const ::std::string& Profile::image_urls(int index) const {
  // @@protoc_insertion_point(field_get:api.Profile.image_urls)
  return image_urls_.Get(index);
}
inline ::std::string* Profile::mutable_image_urls(int index) {
  // @@protoc_insertion_point(field_mutable:api.Profile.image_urls)
  return image_urls_.Mutable(index);
}
inline void Profile::set_image_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.Profile.image_urls)
  image_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Profile::set_image_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.Profile.image_urls)
  image_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Profile::set_image_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  image_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.Profile.image_urls)
}
inline void Profile::set_image_urls(int index, const char* value, size_t size) {
  image_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.Profile.image_urls)
}
inline ::std::string* Profile::add_image_urls() {
  // @@protoc_insertion_point(field_add_mutable:api.Profile.image_urls)
  return image_urls_.Add();
}
inline void Profile::add_image_urls(const ::std::string& value) {
  image_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.Profile.image_urls)
}
#if LANG_CXX11
inline void Profile::add_image_urls(::std::string&& value) {
  image_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.Profile.image_urls)
}
#endif
inline void Profile::add_image_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  image_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.Profile.image_urls)
}
inline void Profile::add_image_urls(const char* value, size_t size) {
  image_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.Profile.image_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Profile::image_urls() const {
  // @@protoc_insertion_point(field_list:api.Profile.image_urls)
  return image_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Profile::mutable_image_urls() {
  // @@protoc_insertion_point(field_mutable_list:api.Profile.image_urls)
  return &image_urls_;
}

// string team = 8;
inline void Profile::clear_team() {
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::team() const {
  // @@protoc_insertion_point(field_get:api.Profile.team)
  return team_.GetNoArena();
}
inline void Profile::set_team(const ::std::string& value) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Profile.team)
}
#if LANG_CXX11
inline void Profile::set_team(::std::string&& value) {
  
  team_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Profile.team)
}
#endif
inline void Profile::set_team(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Profile.team)
}
inline void Profile::set_team(const char* value, size_t size) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Profile.team)
}
inline ::std::string* Profile::mutable_team() {
  
  // @@protoc_insertion_point(field_mutable:api.Profile.team)
  return team_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_team() {
  // @@protoc_insertion_point(field_release:api.Profile.team)
  
  return team_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_team(::std::string* team) {
  if (team != NULL) {
    
  } else {
    
  }
  team_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team);
  // @@protoc_insertion_point(field_set_allocated:api.Profile.team)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Customer

// string id = 1;
inline void Customer::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::id() const {
  // @@protoc_insertion_point(field_get:api.Customer.id)
  return id_.GetNoArena();
}
inline void Customer::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Customer.id)
}
#if LANG_CXX11
inline void Customer::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Customer.id)
}
#endif
inline void Customer::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Customer.id)
}
inline void Customer::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Customer.id)
}
inline ::std::string* Customer::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Customer.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_id() {
  // @@protoc_insertion_point(field_release:api.Customer.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.Customer.id)
}

// string plan = 2;
inline void Customer::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::plan() const {
  // @@protoc_insertion_point(field_get:api.Customer.plan)
  return plan_.GetNoArena();
}
inline void Customer::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Customer.plan)
}
#if LANG_CXX11
inline void Customer::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Customer.plan)
}
#endif
inline void Customer::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Customer.plan)
}
inline void Customer::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Customer.plan)
}
inline ::std::string* Customer::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.Customer.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_plan() {
  // @@protoc_insertion_point(field_release:api.Customer.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.Customer.plan)
}

// string name = 3;
inline void Customer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::name() const {
  // @@protoc_insertion_point(field_get:api.Customer.name)
  return name_.GetNoArena();
}
inline void Customer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Customer.name)
}
#if LANG_CXX11
inline void Customer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Customer.name)
}
#endif
inline void Customer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Customer.name)
}
inline void Customer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Customer.name)
}
inline ::std::string* Customer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Customer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_name() {
  // @@protoc_insertion_point(field_release:api.Customer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Customer.name)
}

// string email = 4;
inline void Customer::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::email() const {
  // @@protoc_insertion_point(field_get:api.Customer.email)
  return email_.GetNoArena();
}
inline void Customer::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Customer.email)
}
#if LANG_CXX11
inline void Customer::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Customer.email)
}
#endif
inline void Customer::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Customer.email)
}
inline void Customer::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Customer.email)
}
inline ::std::string* Customer::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.Customer.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_email() {
  // @@protoc_insertion_point(field_release:api.Customer.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.Customer.email)
}

// string description = 5;
inline void Customer::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::description() const {
  // @@protoc_insertion_point(field_get:api.Customer.description)
  return description_.GetNoArena();
}
inline void Customer::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Customer.description)
}
#if LANG_CXX11
inline void Customer::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Customer.description)
}
#endif
inline void Customer::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Customer.description)
}
inline void Customer::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Customer.description)
}
inline ::std::string* Customer::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:api.Customer.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_description() {
  // @@protoc_insertion_point(field_release:api.Customer.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:api.Customer.description)
}

// string phone = 6;
inline void Customer::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::phone() const {
  // @@protoc_insertion_point(field_get:api.Customer.phone)
  return phone_.GetNoArena();
}
inline void Customer::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Customer.phone)
}
#if LANG_CXX11
inline void Customer::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Customer.phone)
}
#endif
inline void Customer::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Customer.phone)
}
inline void Customer::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Customer.phone)
}
inline ::std::string* Customer::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.Customer.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_phone() {
  // @@protoc_insertion_point(field_release:api.Customer.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.Customer.phone)
}

// .api.Address address = 8;
inline bool Customer::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void Customer::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
}
inline const ::api::Address& Customer::_internal_address() const {
  return *address_;
}
inline const ::api::Address& Customer::address() const {
  const ::api::Address* p = address_;
  // @@protoc_insertion_point(field_get:api.Customer.address)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Address*>(
      &::api::_Address_default_instance_);
}
inline ::api::Address* Customer::release_address() {
  // @@protoc_insertion_point(field_release:api.Customer.address)
  
  ::api::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::api::Address* Customer::mutable_address() {
  
  if (address_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Customer.address)
  return address_;
}
inline void Customer::set_allocated_address(::api::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete address_;
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:api.Customer.address)
}

// map<string, string> metadata = 9;
inline int Customer::metadata_size() const {
  return metadata_.size();
}
inline void Customer::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Customer::metadata() const {
  // @@protoc_insertion_point(field_map:api.Customer.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Customer::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:api.Customer.metadata)
  return metadata_.MutableMap();
}

// bool deleted = 10;
inline void Customer::clear_deleted() {
  deleted_ = false;
}
inline bool Customer::deleted() const {
  // @@protoc_insertion_point(field_get:api.Customer.deleted)
  return deleted_;
}
inline void Customer::set_deleted(bool value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:api.Customer.deleted)
}

// int64 create_date = 20;
inline void Customer::clear_create_date() {
  create_date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Customer::create_date() const {
  // @@protoc_insertion_point(field_get:api.Customer.create_date)
  return create_date_;
}
inline void Customer::set_create_date(::google::protobuf::int64 value) {
  
  create_date_ = value;
  // @@protoc_insertion_point(field_set:api.Customer.create_date)
}

// -------------------------------------------------------------------

// Card

// .api.CardType card_type = 1;
inline void Card::clear_card_type() {
  card_type_ = 0;
}
inline ::api::CardType Card::card_type() const {
  // @@protoc_insertion_point(field_get:api.Card.card_type)
  return static_cast< ::api::CardType >(card_type_);
}
inline void Card::set_card_type(::api::CardType value) {
  
  card_type_ = value;
  // @@protoc_insertion_point(field_set:api.Card.card_type)
}

// string card_number = 3;
inline void Card::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::card_number() const {
  // @@protoc_insertion_point(field_get:api.Card.card_number)
  return card_number_.GetNoArena();
}
inline void Card::set_card_number(const ::std::string& value) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.card_number)
}
#if LANG_CXX11
inline void Card::set_card_number(::std::string&& value) {
  
  card_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.card_number)
}
#endif
inline void Card::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.card_number)
}
inline void Card::set_card_number(const char* value, size_t size) {
  
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.card_number)
}
inline ::std::string* Card::mutable_card_number() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_card_number() {
  // @@protoc_insertion_point(field_release:api.Card.card_number)
  
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    
  } else {
    
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:api.Card.card_number)
}

// string exp_month = 4;
inline void Card::clear_exp_month() {
  exp_month_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::exp_month() const {
  // @@protoc_insertion_point(field_get:api.Card.exp_month)
  return exp_month_.GetNoArena();
}
inline void Card::set_exp_month(const ::std::string& value) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.exp_month)
}
#if LANG_CXX11
inline void Card::set_exp_month(::std::string&& value) {
  
  exp_month_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.exp_month)
}
#endif
inline void Card::set_exp_month(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.exp_month)
}
inline void Card::set_exp_month(const char* value, size_t size) {
  
  exp_month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.exp_month)
}
inline ::std::string* Card::mutable_exp_month() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.exp_month)
  return exp_month_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_exp_month() {
  // @@protoc_insertion_point(field_release:api.Card.exp_month)
  
  return exp_month_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_exp_month(::std::string* exp_month) {
  if (exp_month != NULL) {
    
  } else {
    
  }
  exp_month_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_month);
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_month)
}

// string exp_year = 5;
inline void Card::clear_exp_year() {
  exp_year_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::exp_year() const {
  // @@protoc_insertion_point(field_get:api.Card.exp_year)
  return exp_year_.GetNoArena();
}
inline void Card::set_exp_year(const ::std::string& value) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.exp_year)
}
#if LANG_CXX11
inline void Card::set_exp_year(::std::string&& value) {
  
  exp_year_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.exp_year)
}
#endif
inline void Card::set_exp_year(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.exp_year)
}
inline void Card::set_exp_year(const char* value, size_t size) {
  
  exp_year_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.exp_year)
}
inline ::std::string* Card::mutable_exp_year() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.exp_year)
  return exp_year_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_exp_year() {
  // @@protoc_insertion_point(field_release:api.Card.exp_year)
  
  return exp_year_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_exp_year(::std::string* exp_year) {
  if (exp_year != NULL) {
    
  } else {
    
  }
  exp_year_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_year);
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_year)
}

// string cvc = 6;
inline void Card::clear_cvc() {
  cvc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::cvc() const {
  // @@protoc_insertion_point(field_get:api.Card.cvc)
  return cvc_.GetNoArena();
}
inline void Card::set_cvc(const ::std::string& value) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Card.cvc)
}
#if LANG_CXX11
inline void Card::set_cvc(::std::string&& value) {
  
  cvc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Card.cvc)
}
#endif
inline void Card::set_cvc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Card.cvc)
}
inline void Card::set_cvc(const char* value, size_t size) {
  
  cvc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Card.cvc)
}
inline ::std::string* Card::mutable_cvc() {
  
  // @@protoc_insertion_point(field_mutable:api.Card.cvc)
  return cvc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_cvc() {
  // @@protoc_insertion_point(field_release:api.Card.cvc)
  
  return cvc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_cvc(::std::string* cvc) {
  if (cvc != NULL) {
    
  } else {
    
  }
  cvc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cvc);
  // @@protoc_insertion_point(field_set_allocated:api.Card.cvc)
}

// bool debit = 7;
inline void Card::clear_debit() {
  debit_ = false;
}
inline bool Card::debit() const {
  // @@protoc_insertion_point(field_get:api.Card.debit)
  return debit_;
}
inline void Card::set_debit(bool value) {
  
  debit_ = value;
  // @@protoc_insertion_point(field_set:api.Card.debit)
}

// -------------------------------------------------------------------

// BankAccount

// string account_number = 1;
inline void BankAccount::clear_account_number() {
  account_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BankAccount::account_number() const {
  // @@protoc_insertion_point(field_get:api.BankAccount.account_number)
  return account_number_.GetNoArena();
}
inline void BankAccount::set_account_number(const ::std::string& value) {
  
  account_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.BankAccount.account_number)
}
#if LANG_CXX11
inline void BankAccount::set_account_number(::std::string&& value) {
  
  account_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.BankAccount.account_number)
}
#endif
inline void BankAccount::set_account_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.BankAccount.account_number)
}
inline void BankAccount::set_account_number(const char* value, size_t size) {
  
  account_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.BankAccount.account_number)
}
inline ::std::string* BankAccount::mutable_account_number() {
  
  // @@protoc_insertion_point(field_mutable:api.BankAccount.account_number)
  return account_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BankAccount::release_account_number() {
  // @@protoc_insertion_point(field_release:api.BankAccount.account_number)
  
  return account_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BankAccount::set_allocated_account_number(::std::string* account_number) {
  if (account_number != NULL) {
    
  } else {
    
  }
  account_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_number);
  // @@protoc_insertion_point(field_set_allocated:api.BankAccount.account_number)
}

// string routing_number = 2;
inline void BankAccount::clear_routing_number() {
  routing_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BankAccount::routing_number() const {
  // @@protoc_insertion_point(field_get:api.BankAccount.routing_number)
  return routing_number_.GetNoArena();
}
inline void BankAccount::set_routing_number(const ::std::string& value) {
  
  routing_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.BankAccount.routing_number)
}
#if LANG_CXX11
inline void BankAccount::set_routing_number(::std::string&& value) {
  
  routing_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.BankAccount.routing_number)
}
#endif
inline void BankAccount::set_routing_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  routing_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.BankAccount.routing_number)
}
inline void BankAccount::set_routing_number(const char* value, size_t size) {
  
  routing_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.BankAccount.routing_number)
}
inline ::std::string* BankAccount::mutable_routing_number() {
  
  // @@protoc_insertion_point(field_mutable:api.BankAccount.routing_number)
  return routing_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BankAccount::release_routing_number() {
  // @@protoc_insertion_point(field_release:api.BankAccount.routing_number)
  
  return routing_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BankAccount::set_allocated_routing_number(::std::string* routing_number) {
  if (routing_number != NULL) {
    
  } else {
    
  }
  routing_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), routing_number);
  // @@protoc_insertion_point(field_set_allocated:api.BankAccount.routing_number)
}

// -------------------------------------------------------------------

// Address

// string city = 1;
inline void Address::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:api.Address.city)
  return city_.GetNoArena();
}
inline void Address::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.city)
}
#if LANG_CXX11
inline void Address::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.city)
}
#endif
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.city)
}
inline void Address::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.city)
}
inline ::std::string* Address::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:api.Address.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:api.Address.city)
}

// string country = 2;
inline void Address::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::country() const {
  // @@protoc_insertion_point(field_get:api.Address.country)
  return country_.GetNoArena();
}
inline void Address::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.country)
}
#if LANG_CXX11
inline void Address::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.country)
}
#endif
inline void Address::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.country)
}
inline void Address::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.country)
}
inline ::std::string* Address::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_country() {
  // @@protoc_insertion_point(field_release:api.Address.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:api.Address.country)
}

// string line1 = 3;
inline void Address::clear_line1() {
  line1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::line1() const {
  // @@protoc_insertion_point(field_get:api.Address.line1)
  return line1_.GetNoArena();
}
inline void Address::set_line1(const ::std::string& value) {
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.line1)
}
#if LANG_CXX11
inline void Address::set_line1(::std::string&& value) {
  
  line1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.line1)
}
#endif
inline void Address::set_line1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.line1)
}
inline void Address::set_line1(const char* value, size_t size) {
  
  line1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.line1)
}
inline ::std::string* Address::mutable_line1() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.line1)
  return line1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_line1() {
  // @@protoc_insertion_point(field_release:api.Address.line1)
  
  return line1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_line1(::std::string* line1) {
  if (line1 != NULL) {
    
  } else {
    
  }
  line1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line1);
  // @@protoc_insertion_point(field_set_allocated:api.Address.line1)
}

// string line2 = 4;
inline void Address::clear_line2() {
  line2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::line2() const {
  // @@protoc_insertion_point(field_get:api.Address.line2)
  return line2_.GetNoArena();
}
inline void Address::set_line2(const ::std::string& value) {
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.line2)
}
#if LANG_CXX11
inline void Address::set_line2(::std::string&& value) {
  
  line2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.line2)
}
#endif
inline void Address::set_line2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.line2)
}
inline void Address::set_line2(const char* value, size_t size) {
  
  line2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.line2)
}
inline ::std::string* Address::mutable_line2() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.line2)
  return line2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_line2() {
  // @@protoc_insertion_point(field_release:api.Address.line2)
  
  return line2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_line2(::std::string* line2) {
  if (line2 != NULL) {
    
  } else {
    
  }
  line2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line2);
  // @@protoc_insertion_point(field_set_allocated:api.Address.line2)
}

// string postal_code = 5;
inline void Address::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::postal_code() const {
  // @@protoc_insertion_point(field_get:api.Address.postal_code)
  return postal_code_.GetNoArena();
}
inline void Address::set_postal_code(const ::std::string& value) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.postal_code)
}
#if LANG_CXX11
inline void Address::set_postal_code(::std::string&& value) {
  
  postal_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.postal_code)
}
#endif
inline void Address::set_postal_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.postal_code)
}
inline void Address::set_postal_code(const char* value, size_t size) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.postal_code)
}
inline ::std::string* Address::mutable_postal_code() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.postal_code)
  return postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_postal_code() {
  // @@protoc_insertion_point(field_release:api.Address.postal_code)
  
  return postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_postal_code(::std::string* postal_code) {
  if (postal_code != NULL) {
    
  } else {
    
  }
  postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:api.Address.postal_code)
}

// string state = 6;
inline void Address::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Address::state() const {
  // @@protoc_insertion_point(field_get:api.Address.state)
  return state_.GetNoArena();
}
inline void Address::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Address.state)
}
#if LANG_CXX11
inline void Address::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Address.state)
}
#endif
inline void Address::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Address.state)
}
inline void Address::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Address.state)
}
inline ::std::string* Address::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:api.Address.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_state() {
  // @@protoc_insertion_point(field_release:api.Address.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:api.Address.state)
}

// -------------------------------------------------------------------

// ChannelReminder

// string channel_id = 1;
inline void ChannelReminder::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelReminder::channel_id() const {
  // @@protoc_insertion_point(field_get:api.ChannelReminder.channel_id)
  return channel_id_.GetNoArena();
}
inline void ChannelReminder::set_channel_id(const ::std::string& value) {
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelReminder.channel_id)
}
#if LANG_CXX11
inline void ChannelReminder::set_channel_id(::std::string&& value) {
  
  channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelReminder.channel_id)
}
#endif
inline void ChannelReminder::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelReminder.channel_id)
}
inline void ChannelReminder::set_channel_id(const char* value, size_t size) {
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelReminder.channel_id)
}
inline ::std::string* ChannelReminder::mutable_channel_id() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelReminder.channel_id)
  return channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelReminder::release_channel_id() {
  // @@protoc_insertion_point(field_release:api.ChannelReminder.channel_id)
  
  return channel_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelReminder::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    
  } else {
    
  }
  channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelReminder.channel_id)
}

// string text = 2;
inline void ChannelReminder::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelReminder::text() const {
  // @@protoc_insertion_point(field_get:api.ChannelReminder.text)
  return text_.GetNoArena();
}
inline void ChannelReminder::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelReminder.text)
}
#if LANG_CXX11
inline void ChannelReminder::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelReminder.text)
}
#endif
inline void ChannelReminder::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelReminder.text)
}
inline void ChannelReminder::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelReminder.text)
}
inline ::std::string* ChannelReminder::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelReminder.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelReminder::release_text() {
  // @@protoc_insertion_point(field_release:api.ChannelReminder.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelReminder::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelReminder.text)
}

// string time = 3;
inline void ChannelReminder::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelReminder::time() const {
  // @@protoc_insertion_point(field_get:api.ChannelReminder.time)
  return time_.GetNoArena();
}
inline void ChannelReminder::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ChannelReminder.time)
}
#if LANG_CXX11
inline void ChannelReminder::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ChannelReminder.time)
}
#endif
inline void ChannelReminder::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ChannelReminder.time)
}
inline void ChannelReminder::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ChannelReminder.time)
}
inline ::std::string* ChannelReminder::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:api.ChannelReminder.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelReminder::release_time() {
  // @@protoc_insertion_point(field_release:api.ChannelReminder.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelReminder::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:api.ChannelReminder.time)
}

// -------------------------------------------------------------------

// UserReminder

// string id = 1;
inline void UserReminder::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserReminder::id() const {
  // @@protoc_insertion_point(field_get:api.UserReminder.id)
  return id_.GetNoArena();
}
inline void UserReminder::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserReminder.id)
}
#if LANG_CXX11
inline void UserReminder::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserReminder.id)
}
#endif
inline void UserReminder::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserReminder.id)
}
inline void UserReminder::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserReminder.id)
}
inline ::std::string* UserReminder::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.UserReminder.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserReminder::release_id() {
  // @@protoc_insertion_point(field_release:api.UserReminder.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserReminder::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.UserReminder.id)
}

// string text = 2;
inline void UserReminder::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserReminder::text() const {
  // @@protoc_insertion_point(field_get:api.UserReminder.text)
  return text_.GetNoArena();
}
inline void UserReminder::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserReminder.text)
}
#if LANG_CXX11
inline void UserReminder::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserReminder.text)
}
#endif
inline void UserReminder::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserReminder.text)
}
inline void UserReminder::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserReminder.text)
}
inline ::std::string* UserReminder::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.UserReminder.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserReminder::release_text() {
  // @@protoc_insertion_point(field_release:api.UserReminder.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserReminder::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.UserReminder.text)
}

// string time = 3;
inline void UserReminder::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserReminder::time() const {
  // @@protoc_insertion_point(field_get:api.UserReminder.time)
  return time_.GetNoArena();
}
inline void UserReminder::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserReminder.time)
}
#if LANG_CXX11
inline void UserReminder::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserReminder.time)
}
#endif
inline void UserReminder::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserReminder.time)
}
inline void UserReminder::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserReminder.time)
}
inline ::std::string* UserReminder::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:api.UserReminder.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserReminder::release_time() {
  // @@protoc_insertion_point(field_release:api.UserReminder.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserReminder::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:api.UserReminder.time)
}

// .api.ItemRef item = 4;
inline bool UserReminder::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void UserReminder::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::api::ItemRef& UserReminder::_internal_item() const {
  return *item_;
}
inline const ::api::ItemRef& UserReminder::item() const {
  const ::api::ItemRef* p = item_;
  // @@protoc_insertion_point(field_get:api.UserReminder.item)
  return p != NULL ? *p : *reinterpret_cast<const ::api::ItemRef*>(
      &::api::_ItemRef_default_instance_);
}
inline ::api::ItemRef* UserReminder::release_item() {
  // @@protoc_insertion_point(field_release:api.UserReminder.item)
  
  ::api::ItemRef* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::api::ItemRef* UserReminder::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::api::ItemRef>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserReminder.item)
  return item_;
}
inline void UserReminder::set_allocated_item(::api::ItemRef* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:api.UserReminder.item)
}

// -------------------------------------------------------------------

// ItemRef

// string channel = 1;
inline void ItemRef::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemRef::channel() const {
  // @@protoc_insertion_point(field_get:api.ItemRef.channel)
  return channel_.GetNoArena();
}
inline void ItemRef::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ItemRef.channel)
}
#if LANG_CXX11
inline void ItemRef::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ItemRef.channel)
}
#endif
inline void ItemRef::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ItemRef.channel)
}
inline void ItemRef::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ItemRef.channel)
}
inline ::std::string* ItemRef::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:api.ItemRef.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemRef::release_channel() {
  // @@protoc_insertion_point(field_release:api.ItemRef.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemRef::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:api.ItemRef.channel)
}

// string file = 2;
inline void ItemRef::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemRef::file() const {
  // @@protoc_insertion_point(field_get:api.ItemRef.file)
  return file_.GetNoArena();
}
inline void ItemRef::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ItemRef.file)
}
#if LANG_CXX11
inline void ItemRef::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ItemRef.file)
}
#endif
inline void ItemRef::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ItemRef.file)
}
inline void ItemRef::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ItemRef.file)
}
inline ::std::string* ItemRef::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:api.ItemRef.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemRef::release_file() {
  // @@protoc_insertion_point(field_release:api.ItemRef.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemRef::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:api.ItemRef.file)
}

// string comment = 3;
inline void ItemRef::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemRef::comment() const {
  // @@protoc_insertion_point(field_get:api.ItemRef.comment)
  return comment_.GetNoArena();
}
inline void ItemRef::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.ItemRef.comment)
}
#if LANG_CXX11
inline void ItemRef::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.ItemRef.comment)
}
#endif
inline void ItemRef::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.ItemRef.comment)
}
inline void ItemRef::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.ItemRef.comment)
}
inline ::std::string* ItemRef::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:api.ItemRef.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemRef::release_comment() {
  // @@protoc_insertion_point(field_release:api.ItemRef.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemRef::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:api.ItemRef.comment)
}

// -------------------------------------------------------------------

// Star

// string text = 1;
inline void Star::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Star::text() const {
  // @@protoc_insertion_point(field_get:api.Star.text)
  return text_.GetNoArena();
}
inline void Star::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Star.text)
}
#if LANG_CXX11
inline void Star::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Star.text)
}
#endif
inline void Star::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Star.text)
}
inline void Star::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Star.text)
}
inline ::std::string* Star::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.Star.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Star::release_text() {
  // @@protoc_insertion_point(field_release:api.Star.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Star::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.Star.text)
}

// .api.ItemRef item = 4;
inline bool Star::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void Star::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::api::ItemRef& Star::_internal_item() const {
  return *item_;
}
inline const ::api::ItemRef& Star::item() const {
  const ::api::ItemRef* p = item_;
  // @@protoc_insertion_point(field_get:api.Star.item)
  return p != NULL ? *p : *reinterpret_cast<const ::api::ItemRef*>(
      &::api::_ItemRef_default_instance_);
}
inline ::api::ItemRef* Star::release_item() {
  // @@protoc_insertion_point(field_release:api.Star.item)
  
  ::api::ItemRef* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::api::ItemRef* Star::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::api::ItemRef>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Star.item)
  return item_;
}
inline void Star::set_allocated_item(::api::ItemRef* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:api.Star.item)
}

// -------------------------------------------------------------------

// Pin

// string text = 1;
inline void Pin::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pin::text() const {
  // @@protoc_insertion_point(field_get:api.Pin.text)
  return text_.GetNoArena();
}
inline void Pin::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Pin.text)
}
#if LANG_CXX11
inline void Pin::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Pin.text)
}
#endif
inline void Pin::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Pin.text)
}
inline void Pin::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Pin.text)
}
inline ::std::string* Pin::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.Pin.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pin::release_text() {
  // @@protoc_insertion_point(field_release:api.Pin.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pin::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.Pin.text)
}

// .api.ItemRef item = 4;
inline bool Pin::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void Pin::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::api::ItemRef& Pin::_internal_item() const {
  return *item_;
}
inline const ::api::ItemRef& Pin::item() const {
  const ::api::ItemRef* p = item_;
  // @@protoc_insertion_point(field_get:api.Pin.item)
  return p != NULL ? *p : *reinterpret_cast<const ::api::ItemRef*>(
      &::api::_ItemRef_default_instance_);
}
inline ::api::ItemRef* Pin::release_item() {
  // @@protoc_insertion_point(field_release:api.Pin.item)
  
  ::api::ItemRef* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::api::ItemRef* Pin::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::api::ItemRef>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Pin.item)
  return item_;
}
inline void Pin::set_allocated_item(::api::ItemRef* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:api.Pin.item)
}

// -------------------------------------------------------------------

// SignedKey

// string signed_key = 1;
inline void SignedKey::clear_signed_key() {
  signed_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignedKey::signed_key() const {
  // @@protoc_insertion_point(field_get:api.SignedKey.signed_key)
  return signed_key_.GetNoArena();
}
inline void SignedKey::set_signed_key(const ::std::string& value) {
  
  signed_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SignedKey.signed_key)
}
#if LANG_CXX11
inline void SignedKey::set_signed_key(::std::string&& value) {
  
  signed_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SignedKey.signed_key)
}
#endif
inline void SignedKey::set_signed_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signed_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SignedKey.signed_key)
}
inline void SignedKey::set_signed_key(const char* value, size_t size) {
  
  signed_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SignedKey.signed_key)
}
inline ::std::string* SignedKey::mutable_signed_key() {
  
  // @@protoc_insertion_point(field_mutable:api.SignedKey.signed_key)
  return signed_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedKey::release_signed_key() {
  // @@protoc_insertion_point(field_release:api.SignedKey.signed_key)
  
  return signed_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedKey::set_allocated_signed_key(::std::string* signed_key) {
  if (signed_key != NULL) {
    
  } else {
    
  }
  signed_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signed_key);
  // @@protoc_insertion_point(field_set_allocated:api.SignedKey.signed_key)
}

// -------------------------------------------------------------------

// Access

// string autom8ter_account = 1;
inline void Access::clear_autom8ter_account() {
  autom8ter_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::autom8ter_account() const {
  // @@protoc_insertion_point(field_get:api.Access.autom8ter_account)
  return autom8ter_account_.GetNoArena();
}
inline void Access::set_autom8ter_account(const ::std::string& value) {
  
  autom8ter_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.autom8ter_account)
}
#if LANG_CXX11
inline void Access::set_autom8ter_account(::std::string&& value) {
  
  autom8ter_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.autom8ter_account)
}
#endif
inline void Access::set_autom8ter_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  autom8ter_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.autom8ter_account)
}
inline void Access::set_autom8ter_account(const char* value, size_t size) {
  
  autom8ter_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.autom8ter_account)
}
inline ::std::string* Access::mutable_autom8ter_account() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.autom8ter_account)
  return autom8ter_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_autom8ter_account() {
  // @@protoc_insertion_point(field_release:api.Access.autom8ter_account)
  
  return autom8ter_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_autom8ter_account(::std::string* autom8ter_account) {
  if (autom8ter_account != NULL) {
    
  } else {
    
  }
  autom8ter_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autom8ter_account);
  // @@protoc_insertion_point(field_set_allocated:api.Access.autom8ter_account)
}

// string autom8ter_key = 2;
inline void Access::clear_autom8ter_key() {
  autom8ter_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::autom8ter_key() const {
  // @@protoc_insertion_point(field_get:api.Access.autom8ter_key)
  return autom8ter_key_.GetNoArena();
}
inline void Access::set_autom8ter_key(const ::std::string& value) {
  
  autom8ter_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.autom8ter_key)
}
#if LANG_CXX11
inline void Access::set_autom8ter_key(::std::string&& value) {
  
  autom8ter_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.autom8ter_key)
}
#endif
inline void Access::set_autom8ter_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  autom8ter_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.autom8ter_key)
}
inline void Access::set_autom8ter_key(const char* value, size_t size) {
  
  autom8ter_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.autom8ter_key)
}
inline ::std::string* Access::mutable_autom8ter_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.autom8ter_key)
  return autom8ter_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_autom8ter_key() {
  // @@protoc_insertion_point(field_release:api.Access.autom8ter_key)
  
  return autom8ter_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_autom8ter_key(::std::string* autom8ter_key) {
  if (autom8ter_key != NULL) {
    
  } else {
    
  }
  autom8ter_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), autom8ter_key);
  // @@protoc_insertion_point(field_set_allocated:api.Access.autom8ter_key)
}

// string twilio_account = 3;
inline void Access::clear_twilio_account() {
  twilio_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::twilio_account() const {
  // @@protoc_insertion_point(field_get:api.Access.twilio_account)
  return twilio_account_.GetNoArena();
}
inline void Access::set_twilio_account(const ::std::string& value) {
  
  twilio_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.twilio_account)
}
#if LANG_CXX11
inline void Access::set_twilio_account(::std::string&& value) {
  
  twilio_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.twilio_account)
}
#endif
inline void Access::set_twilio_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  twilio_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.twilio_account)
}
inline void Access::set_twilio_account(const char* value, size_t size) {
  
  twilio_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.twilio_account)
}
inline ::std::string* Access::mutable_twilio_account() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.twilio_account)
  return twilio_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_twilio_account() {
  // @@protoc_insertion_point(field_release:api.Access.twilio_account)
  
  return twilio_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_twilio_account(::std::string* twilio_account) {
  if (twilio_account != NULL) {
    
  } else {
    
  }
  twilio_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), twilio_account);
  // @@protoc_insertion_point(field_set_allocated:api.Access.twilio_account)
}

// string twilio_key = 4;
inline void Access::clear_twilio_key() {
  twilio_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::twilio_key() const {
  // @@protoc_insertion_point(field_get:api.Access.twilio_key)
  return twilio_key_.GetNoArena();
}
inline void Access::set_twilio_key(const ::std::string& value) {
  
  twilio_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.twilio_key)
}
#if LANG_CXX11
inline void Access::set_twilio_key(::std::string&& value) {
  
  twilio_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.twilio_key)
}
#endif
inline void Access::set_twilio_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  twilio_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.twilio_key)
}
inline void Access::set_twilio_key(const char* value, size_t size) {
  
  twilio_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.twilio_key)
}
inline ::std::string* Access::mutable_twilio_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.twilio_key)
  return twilio_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_twilio_key() {
  // @@protoc_insertion_point(field_release:api.Access.twilio_key)
  
  return twilio_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_twilio_key(::std::string* twilio_key) {
  if (twilio_key != NULL) {
    
  } else {
    
  }
  twilio_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), twilio_key);
  // @@protoc_insertion_point(field_set_allocated:api.Access.twilio_key)
}

// string sendgrid_account = 5;
inline void Access::clear_sendgrid_account() {
  sendgrid_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::sendgrid_account() const {
  // @@protoc_insertion_point(field_get:api.Access.sendgrid_account)
  return sendgrid_account_.GetNoArena();
}
inline void Access::set_sendgrid_account(const ::std::string& value) {
  
  sendgrid_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.sendgrid_account)
}
#if LANG_CXX11
inline void Access::set_sendgrid_account(::std::string&& value) {
  
  sendgrid_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.sendgrid_account)
}
#endif
inline void Access::set_sendgrid_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sendgrid_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.sendgrid_account)
}
inline void Access::set_sendgrid_account(const char* value, size_t size) {
  
  sendgrid_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.sendgrid_account)
}
inline ::std::string* Access::mutable_sendgrid_account() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.sendgrid_account)
  return sendgrid_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_sendgrid_account() {
  // @@protoc_insertion_point(field_release:api.Access.sendgrid_account)
  
  return sendgrid_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_sendgrid_account(::std::string* sendgrid_account) {
  if (sendgrid_account != NULL) {
    
  } else {
    
  }
  sendgrid_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendgrid_account);
  // @@protoc_insertion_point(field_set_allocated:api.Access.sendgrid_account)
}

// string sendgrid_key = 6;
inline void Access::clear_sendgrid_key() {
  sendgrid_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::sendgrid_key() const {
  // @@protoc_insertion_point(field_get:api.Access.sendgrid_key)
  return sendgrid_key_.GetNoArena();
}
inline void Access::set_sendgrid_key(const ::std::string& value) {
  
  sendgrid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.sendgrid_key)
}
#if LANG_CXX11
inline void Access::set_sendgrid_key(::std::string&& value) {
  
  sendgrid_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.sendgrid_key)
}
#endif
inline void Access::set_sendgrid_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sendgrid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.sendgrid_key)
}
inline void Access::set_sendgrid_key(const char* value, size_t size) {
  
  sendgrid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.sendgrid_key)
}
inline ::std::string* Access::mutable_sendgrid_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.sendgrid_key)
  return sendgrid_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_sendgrid_key() {
  // @@protoc_insertion_point(field_release:api.Access.sendgrid_key)
  
  return sendgrid_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_sendgrid_key(::std::string* sendgrid_key) {
  if (sendgrid_key != NULL) {
    
  } else {
    
  }
  sendgrid_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendgrid_key);
  // @@protoc_insertion_point(field_set_allocated:api.Access.sendgrid_key)
}

// string stripe_account = 7;
inline void Access::clear_stripe_account() {
  stripe_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::stripe_account() const {
  // @@protoc_insertion_point(field_get:api.Access.stripe_account)
  return stripe_account_.GetNoArena();
}
inline void Access::set_stripe_account(const ::std::string& value) {
  
  stripe_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.stripe_account)
}
#if LANG_CXX11
inline void Access::set_stripe_account(::std::string&& value) {
  
  stripe_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.stripe_account)
}
#endif
inline void Access::set_stripe_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stripe_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.stripe_account)
}
inline void Access::set_stripe_account(const char* value, size_t size) {
  
  stripe_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.stripe_account)
}
inline ::std::string* Access::mutable_stripe_account() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.stripe_account)
  return stripe_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_stripe_account() {
  // @@protoc_insertion_point(field_release:api.Access.stripe_account)
  
  return stripe_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_stripe_account(::std::string* stripe_account) {
  if (stripe_account != NULL) {
    
  } else {
    
  }
  stripe_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stripe_account);
  // @@protoc_insertion_point(field_set_allocated:api.Access.stripe_account)
}

// string stripe_key = 8;
inline void Access::clear_stripe_key() {
  stripe_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::stripe_key() const {
  // @@protoc_insertion_point(field_get:api.Access.stripe_key)
  return stripe_key_.GetNoArena();
}
inline void Access::set_stripe_key(const ::std::string& value) {
  
  stripe_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.stripe_key)
}
#if LANG_CXX11
inline void Access::set_stripe_key(::std::string&& value) {
  
  stripe_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.stripe_key)
}
#endif
inline void Access::set_stripe_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stripe_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.stripe_key)
}
inline void Access::set_stripe_key(const char* value, size_t size) {
  
  stripe_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.stripe_key)
}
inline ::std::string* Access::mutable_stripe_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.stripe_key)
  return stripe_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_stripe_key() {
  // @@protoc_insertion_point(field_release:api.Access.stripe_key)
  
  return stripe_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_stripe_key(::std::string* stripe_key) {
  if (stripe_key != NULL) {
    
  } else {
    
  }
  stripe_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stripe_key);
  // @@protoc_insertion_point(field_set_allocated:api.Access.stripe_key)
}

// string slack_account = 9;
inline void Access::clear_slack_account() {
  slack_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::slack_account() const {
  // @@protoc_insertion_point(field_get:api.Access.slack_account)
  return slack_account_.GetNoArena();
}
inline void Access::set_slack_account(const ::std::string& value) {
  
  slack_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.slack_account)
}
#if LANG_CXX11
inline void Access::set_slack_account(::std::string&& value) {
  
  slack_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.slack_account)
}
#endif
inline void Access::set_slack_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slack_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.slack_account)
}
inline void Access::set_slack_account(const char* value, size_t size) {
  
  slack_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.slack_account)
}
inline ::std::string* Access::mutable_slack_account() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.slack_account)
  return slack_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_slack_account() {
  // @@protoc_insertion_point(field_release:api.Access.slack_account)
  
  return slack_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_slack_account(::std::string* slack_account) {
  if (slack_account != NULL) {
    
  } else {
    
  }
  slack_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slack_account);
  // @@protoc_insertion_point(field_set_allocated:api.Access.slack_account)
}

// string slack_key = 10;
inline void Access::clear_slack_key() {
  slack_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::slack_key() const {
  // @@protoc_insertion_point(field_get:api.Access.slack_key)
  return slack_key_.GetNoArena();
}
inline void Access::set_slack_key(const ::std::string& value) {
  
  slack_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.slack_key)
}
#if LANG_CXX11
inline void Access::set_slack_key(::std::string&& value) {
  
  slack_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.slack_key)
}
#endif
inline void Access::set_slack_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slack_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.slack_key)
}
inline void Access::set_slack_key(const char* value, size_t size) {
  
  slack_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.slack_key)
}
inline ::std::string* Access::mutable_slack_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.slack_key)
  return slack_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_slack_key() {
  // @@protoc_insertion_point(field_release:api.Access.slack_key)
  
  return slack_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_slack_key(::std::string* slack_key) {
  if (slack_key != NULL) {
    
  } else {
    
  }
  slack_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slack_key);
  // @@protoc_insertion_point(field_set_allocated:api.Access.slack_key)
}

// string gcp_project = 11;
inline void Access::clear_gcp_project() {
  gcp_project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::gcp_project() const {
  // @@protoc_insertion_point(field_get:api.Access.gcp_project)
  return gcp_project_.GetNoArena();
}
inline void Access::set_gcp_project(const ::std::string& value) {
  
  gcp_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.gcp_project)
}
#if LANG_CXX11
inline void Access::set_gcp_project(::std::string&& value) {
  
  gcp_project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.gcp_project)
}
#endif
inline void Access::set_gcp_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gcp_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.gcp_project)
}
inline void Access::set_gcp_project(const char* value, size_t size) {
  
  gcp_project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.gcp_project)
}
inline ::std::string* Access::mutable_gcp_project() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.gcp_project)
  return gcp_project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_gcp_project() {
  // @@protoc_insertion_point(field_release:api.Access.gcp_project)
  
  return gcp_project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_gcp_project(::std::string* gcp_project) {
  if (gcp_project != NULL) {
    
  } else {
    
  }
  gcp_project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcp_project);
  // @@protoc_insertion_point(field_set_allocated:api.Access.gcp_project)
}

// string gcp_key = 12;
inline void Access::clear_gcp_key() {
  gcp_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::gcp_key() const {
  // @@protoc_insertion_point(field_get:api.Access.gcp_key)
  return gcp_key_.GetNoArena();
}
inline void Access::set_gcp_key(const ::std::string& value) {
  
  gcp_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Access.gcp_key)
}
#if LANG_CXX11
inline void Access::set_gcp_key(::std::string&& value) {
  
  gcp_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Access.gcp_key)
}
#endif
inline void Access::set_gcp_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gcp_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Access.gcp_key)
}
inline void Access::set_gcp_key(const char* value, size_t size) {
  
  gcp_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Access.gcp_key)
}
inline ::std::string* Access::mutable_gcp_key() {
  
  // @@protoc_insertion_point(field_mutable:api.Access.gcp_key)
  return gcp_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_gcp_key() {
  // @@protoc_insertion_point(field_release:api.Access.gcp_key)
  
  return gcp_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_gcp_key(::std::string* gcp_key) {
  if (gcp_key != NULL) {
    
  } else {
    
  }
  gcp_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gcp_key);
  // @@protoc_insertion_point(field_set_allocated:api.Access.gcp_key)
}

// -------------------------------------------------------------------

// StandardClaims

// .api.Access access = 1;
inline bool StandardClaims::has_access() const {
  return this != internal_default_instance() && access_ != NULL;
}
inline void StandardClaims::clear_access() {
  if (GetArenaNoVirtual() == NULL && access_ != NULL) {
    delete access_;
  }
  access_ = NULL;
}
inline const ::api::Access& StandardClaims::_internal_access() const {
  return *access_;
}
inline const ::api::Access& StandardClaims::access() const {
  const ::api::Access* p = access_;
  // @@protoc_insertion_point(field_get:api.StandardClaims.access)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Access*>(
      &::api::_Access_default_instance_);
}
inline ::api::Access* StandardClaims::release_access() {
  // @@protoc_insertion_point(field_release:api.StandardClaims.access)
  
  ::api::Access* temp = access_;
  access_ = NULL;
  return temp;
}
inline ::api::Access* StandardClaims::mutable_access() {
  
  if (access_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Access>(GetArenaNoVirtual());
    access_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.StandardClaims.access)
  return access_;
}
inline void StandardClaims::set_allocated_access(::api::Access* access) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete access_;
  }
  if (access) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      access = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    
  } else {
    
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:api.StandardClaims.access)
}

// string audience = 2;
inline void StandardClaims::clear_audience() {
  audience_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StandardClaims::audience() const {
  // @@protoc_insertion_point(field_get:api.StandardClaims.audience)
  return audience_.GetNoArena();
}
inline void StandardClaims::set_audience(const ::std::string& value) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StandardClaims.audience)
}
#if LANG_CXX11
inline void StandardClaims::set_audience(::std::string&& value) {
  
  audience_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StandardClaims.audience)
}
#endif
inline void StandardClaims::set_audience(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StandardClaims.audience)
}
inline void StandardClaims::set_audience(const char* value, size_t size) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StandardClaims.audience)
}
inline ::std::string* StandardClaims::mutable_audience() {
  
  // @@protoc_insertion_point(field_mutable:api.StandardClaims.audience)
  return audience_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StandardClaims::release_audience() {
  // @@protoc_insertion_point(field_release:api.StandardClaims.audience)
  
  return audience_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StandardClaims::set_allocated_audience(::std::string* audience) {
  if (audience != NULL) {
    
  } else {
    
  }
  audience_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audience);
  // @@protoc_insertion_point(field_set_allocated:api.StandardClaims.audience)
}

// string subject = 3;
inline void StandardClaims::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StandardClaims::subject() const {
  // @@protoc_insertion_point(field_get:api.StandardClaims.subject)
  return subject_.GetNoArena();
}
inline void StandardClaims::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StandardClaims.subject)
}
#if LANG_CXX11
inline void StandardClaims::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StandardClaims.subject)
}
#endif
inline void StandardClaims::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StandardClaims.subject)
}
inline void StandardClaims::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StandardClaims.subject)
}
inline ::std::string* StandardClaims::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:api.StandardClaims.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StandardClaims::release_subject() {
  // @@protoc_insertion_point(field_release:api.StandardClaims.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StandardClaims::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:api.StandardClaims.subject)
}

// int64 expires_at = 4;
inline void StandardClaims::clear_expires_at() {
  expires_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StandardClaims::expires_at() const {
  // @@protoc_insertion_point(field_get:api.StandardClaims.expires_at)
  return expires_at_;
}
inline void StandardClaims::set_expires_at(::google::protobuf::int64 value) {
  
  expires_at_ = value;
  // @@protoc_insertion_point(field_set:api.StandardClaims.expires_at)
}

// string id = 5;
inline void StandardClaims::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StandardClaims::id() const {
  // @@protoc_insertion_point(field_get:api.StandardClaims.id)
  return id_.GetNoArena();
}
inline void StandardClaims::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.StandardClaims.id)
}
#if LANG_CXX11
inline void StandardClaims::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.StandardClaims.id)
}
#endif
inline void StandardClaims::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.StandardClaims.id)
}
inline void StandardClaims::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.StandardClaims.id)
}
inline ::std::string* StandardClaims::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.StandardClaims.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StandardClaims::release_id() {
  // @@protoc_insertion_point(field_release:api.StandardClaims.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StandardClaims::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.StandardClaims.id)
}

// int64 issued_at = 6;
inline void StandardClaims::clear_issued_at() {
  issued_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StandardClaims::issued_at() const {
  // @@protoc_insertion_point(field_get:api.StandardClaims.issued_at)
  return issued_at_;
}
inline void StandardClaims::set_issued_at(::google::protobuf::int64 value) {
  
  issued_at_ = value;
  // @@protoc_insertion_point(field_set:api.StandardClaims.issued_at)
}

// int64 not_before = 7;
inline void StandardClaims::clear_not_before() {
  not_before_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StandardClaims::not_before() const {
  // @@protoc_insertion_point(field_get:api.StandardClaims.not_before)
  return not_before_;
}
inline void StandardClaims::set_not_before(::google::protobuf::int64 value) {
  
  not_before_ = value;
  // @@protoc_insertion_point(field_set:api.StandardClaims.not_before)
}

// -------------------------------------------------------------------

// LogConfig

// string username = 1;
inline void LogConfig::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogConfig::username() const {
  // @@protoc_insertion_point(field_get:api.LogConfig.username)
  return username_.GetNoArena();
}
inline void LogConfig::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogConfig.username)
}
#if LANG_CXX11
inline void LogConfig::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogConfig.username)
}
#endif
inline void LogConfig::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogConfig.username)
}
inline void LogConfig::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogConfig.username)
}
inline ::std::string* LogConfig::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:api.LogConfig.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogConfig::release_username() {
  // @@protoc_insertion_point(field_release:api.LogConfig.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogConfig::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:api.LogConfig.username)
}

// string channel = 2;
inline void LogConfig::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogConfig::channel() const {
  // @@protoc_insertion_point(field_get:api.LogConfig.channel)
  return channel_.GetNoArena();
}
inline void LogConfig::set_channel(const ::std::string& value) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogConfig.channel)
}
#if LANG_CXX11
inline void LogConfig::set_channel(::std::string&& value) {
  
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogConfig.channel)
}
#endif
inline void LogConfig::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogConfig.channel)
}
inline void LogConfig::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogConfig.channel)
}
inline ::std::string* LogConfig::mutable_channel() {
  
  // @@protoc_insertion_point(field_mutable:api.LogConfig.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogConfig::release_channel() {
  // @@protoc_insertion_point(field_release:api.LogConfig.channel)
  
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogConfig::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:api.LogConfig.channel)
}

// -------------------------------------------------------------------

// EmailAddress

// string name = 1;
inline void EmailAddress::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailAddress::name() const {
  // @@protoc_insertion_point(field_get:api.EmailAddress.name)
  return name_.GetNoArena();
}
inline void EmailAddress::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailAddress.name)
}
#if LANG_CXX11
inline void EmailAddress::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailAddress.name)
}
#endif
inline void EmailAddress::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailAddress.name)
}
inline void EmailAddress::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailAddress.name)
}
inline ::std::string* EmailAddress::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailAddress.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailAddress::release_name() {
  // @@protoc_insertion_point(field_release:api.EmailAddress.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailAddress::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.EmailAddress.name)
}

// string address = 2;
inline void EmailAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailAddress::address() const {
  // @@protoc_insertion_point(field_get:api.EmailAddress.address)
  return address_.GetNoArena();
}
inline void EmailAddress::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EmailAddress.address)
}
#if LANG_CXX11
inline void EmailAddress::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EmailAddress.address)
}
#endif
inline void EmailAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EmailAddress.address)
}
inline void EmailAddress::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EmailAddress.address)
}
inline ::std::string* EmailAddress::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:api.EmailAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailAddress::release_address() {
  // @@protoc_insertion_point(field_release:api.EmailAddress.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailAddress::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:api.EmailAddress.address)
}

// -------------------------------------------------------------------

// Email

// .api.EmailAddress from = 1;
inline bool Email::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline void Email::clear_from() {
  if (GetArenaNoVirtual() == NULL && from_ != NULL) {
    delete from_;
  }
  from_ = NULL;
}
inline const ::api::EmailAddress& Email::_internal_from() const {
  return *from_;
}
inline const ::api::EmailAddress& Email::from() const {
  const ::api::EmailAddress* p = from_;
  // @@protoc_insertion_point(field_get:api.Email.from)
  return p != NULL ? *p : *reinterpret_cast<const ::api::EmailAddress*>(
      &::api::_EmailAddress_default_instance_);
}
inline ::api::EmailAddress* Email::release_from() {
  // @@protoc_insertion_point(field_release:api.Email.from)
  
  ::api::EmailAddress* temp = from_;
  from_ = NULL;
  return temp;
}
inline ::api::EmailAddress* Email::mutable_from() {
  
  if (from_ == NULL) {
    auto* p = CreateMaybeMessage<::api::EmailAddress>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Email.from)
  return from_;
}
inline void Email::set_allocated_from(::api::EmailAddress* from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete from_;
  }
  if (from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:api.Email.from)
}

// .api.RecipientEmail recipient = 2;
inline bool Email::has_recipient() const {
  return this != internal_default_instance() && recipient_ != NULL;
}
inline void Email::clear_recipient() {
  if (GetArenaNoVirtual() == NULL && recipient_ != NULL) {
    delete recipient_;
  }
  recipient_ = NULL;
}
inline const ::api::RecipientEmail& Email::_internal_recipient() const {
  return *recipient_;
}
inline const ::api::RecipientEmail& Email::recipient() const {
  const ::api::RecipientEmail* p = recipient_;
  // @@protoc_insertion_point(field_get:api.Email.recipient)
  return p != NULL ? *p : *reinterpret_cast<const ::api::RecipientEmail*>(
      &::api::_RecipientEmail_default_instance_);
}
inline ::api::RecipientEmail* Email::release_recipient() {
  // @@protoc_insertion_point(field_release:api.Email.recipient)
  
  ::api::RecipientEmail* temp = recipient_;
  recipient_ = NULL;
  return temp;
}
inline ::api::RecipientEmail* Email::mutable_recipient() {
  
  if (recipient_ == NULL) {
    auto* p = CreateMaybeMessage<::api::RecipientEmail>(GetArenaNoVirtual());
    recipient_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Email.recipient)
  return recipient_;
}
inline void Email::set_allocated_recipient(::api::RecipientEmail* recipient) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recipient_;
  }
  if (recipient) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recipient = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recipient, submessage_arena);
    }
    
  } else {
    
  }
  recipient_ = recipient;
  // @@protoc_insertion_point(field_set_allocated:api.Email.recipient)
}

// -------------------------------------------------------------------

// RecipientEmail

// .api.EmailAddress to = 2;
inline bool RecipientEmail::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline void RecipientEmail::clear_to() {
  if (GetArenaNoVirtual() == NULL && to_ != NULL) {
    delete to_;
  }
  to_ = NULL;
}
inline const ::api::EmailAddress& RecipientEmail::_internal_to() const {
  return *to_;
}
inline const ::api::EmailAddress& RecipientEmail::to() const {
  const ::api::EmailAddress* p = to_;
  // @@protoc_insertion_point(field_get:api.RecipientEmail.to)
  return p != NULL ? *p : *reinterpret_cast<const ::api::EmailAddress*>(
      &::api::_EmailAddress_default_instance_);
}
inline ::api::EmailAddress* RecipientEmail::release_to() {
  // @@protoc_insertion_point(field_release:api.RecipientEmail.to)
  
  ::api::EmailAddress* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::api::EmailAddress* RecipientEmail::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::api::EmailAddress>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.RecipientEmail.to)
  return to_;
}
inline void RecipientEmail::set_allocated_to(::api::EmailAddress* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete to_;
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.RecipientEmail.to)
}

// string subject = 3;
inline void RecipientEmail::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecipientEmail::subject() const {
  // @@protoc_insertion_point(field_get:api.RecipientEmail.subject)
  return subject_.GetNoArena();
}
inline void RecipientEmail::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RecipientEmail.subject)
}
#if LANG_CXX11
inline void RecipientEmail::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RecipientEmail.subject)
}
#endif
inline void RecipientEmail::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RecipientEmail.subject)
}
inline void RecipientEmail::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RecipientEmail.subject)
}
inline ::std::string* RecipientEmail::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:api.RecipientEmail.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecipientEmail::release_subject() {
  // @@protoc_insertion_point(field_release:api.RecipientEmail.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecipientEmail::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:api.RecipientEmail.subject)
}

// string plain_text = 4;
inline void RecipientEmail::clear_plain_text() {
  plain_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecipientEmail::plain_text() const {
  // @@protoc_insertion_point(field_get:api.RecipientEmail.plain_text)
  return plain_text_.GetNoArena();
}
inline void RecipientEmail::set_plain_text(const ::std::string& value) {
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RecipientEmail.plain_text)
}
#if LANG_CXX11
inline void RecipientEmail::set_plain_text(::std::string&& value) {
  
  plain_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RecipientEmail.plain_text)
}
#endif
inline void RecipientEmail::set_plain_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RecipientEmail.plain_text)
}
inline void RecipientEmail::set_plain_text(const char* value, size_t size) {
  
  plain_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RecipientEmail.plain_text)
}
inline ::std::string* RecipientEmail::mutable_plain_text() {
  
  // @@protoc_insertion_point(field_mutable:api.RecipientEmail.plain_text)
  return plain_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecipientEmail::release_plain_text() {
  // @@protoc_insertion_point(field_release:api.RecipientEmail.plain_text)
  
  return plain_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecipientEmail::set_allocated_plain_text(::std::string* plain_text) {
  if (plain_text != NULL) {
    
  } else {
    
  }
  plain_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plain_text);
  // @@protoc_insertion_point(field_set_allocated:api.RecipientEmail.plain_text)
}

// string html = 5;
inline void RecipientEmail::clear_html() {
  html_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecipientEmail::html() const {
  // @@protoc_insertion_point(field_get:api.RecipientEmail.html)
  return html_.GetNoArena();
}
inline void RecipientEmail::set_html(const ::std::string& value) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RecipientEmail.html)
}
#if LANG_CXX11
inline void RecipientEmail::set_html(::std::string&& value) {
  
  html_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RecipientEmail.html)
}
#endif
inline void RecipientEmail::set_html(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RecipientEmail.html)
}
inline void RecipientEmail::set_html(const char* value, size_t size) {
  
  html_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RecipientEmail.html)
}
inline ::std::string* RecipientEmail::mutable_html() {
  
  // @@protoc_insertion_point(field_mutable:api.RecipientEmail.html)
  return html_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecipientEmail::release_html() {
  // @@protoc_insertion_point(field_release:api.RecipientEmail.html)
  
  return html_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecipientEmail::set_allocated_html(::std::string* html) {
  if (html != NULL) {
    
  } else {
    
  }
  html_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:api.RecipientEmail.html)
}

// -------------------------------------------------------------------

// SMS

// string to = 1;
inline void SMS::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::to() const {
  // @@protoc_insertion_point(field_get:api.SMS.to)
  return to_.GetNoArena();
}
inline void SMS::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.to)
}
#if LANG_CXX11
inline void SMS::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.to)
}
#endif
inline void SMS::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.to)
}
inline void SMS::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.to)
}
inline ::std::string* SMS::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_to() {
  // @@protoc_insertion_point(field_release:api.SMS.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.to)
}

// string from = 2;
inline void SMS::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::from() const {
  // @@protoc_insertion_point(field_get:api.SMS.from)
  return from_.GetNoArena();
}
inline void SMS::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.from)
}
#if LANG_CXX11
inline void SMS::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.from)
}
#endif
inline void SMS::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.from)
}
inline void SMS::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.from)
}
inline ::std::string* SMS::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_from() {
  // @@protoc_insertion_point(field_release:api.SMS.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.from)
}

// string body = 3;
inline void SMS::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::body() const {
  // @@protoc_insertion_point(field_get:api.SMS.body)
  return body_.GetNoArena();
}
inline void SMS::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.body)
}
#if LANG_CXX11
inline void SMS::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.body)
}
#endif
inline void SMS::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.body)
}
inline void SMS::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.body)
}
inline ::std::string* SMS::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_body() {
  // @@protoc_insertion_point(field_release:api.SMS.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.body)
}

// string media_url = 4;
inline void SMS::clear_media_url() {
  media_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::media_url() const {
  // @@protoc_insertion_point(field_get:api.SMS.media_url)
  return media_url_.GetNoArena();
}
inline void SMS::set_media_url(const ::std::string& value) {
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.media_url)
}
#if LANG_CXX11
inline void SMS::set_media_url(::std::string&& value) {
  
  media_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.media_url)
}
#endif
inline void SMS::set_media_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.media_url)
}
inline void SMS::set_media_url(const char* value, size_t size) {
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.media_url)
}
inline ::std::string* SMS::mutable_media_url() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.media_url)
  return media_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_media_url() {
  // @@protoc_insertion_point(field_release:api.SMS.media_url)
  
  return media_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_media_url(::std::string* media_url) {
  if (media_url != NULL) {
    
  } else {
    
  }
  media_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_url);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.media_url)
}

// string callback = 5;
inline void SMS::clear_callback() {
  callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::callback() const {
  // @@protoc_insertion_point(field_get:api.SMS.callback)
  return callback_.GetNoArena();
}
inline void SMS::set_callback(const ::std::string& value) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.callback)
}
#if LANG_CXX11
inline void SMS::set_callback(::std::string&& value) {
  
  callback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.callback)
}
#endif
inline void SMS::set_callback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.callback)
}
inline void SMS::set_callback(const char* value, size_t size) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.callback)
}
inline ::std::string* SMS::mutable_callback() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.callback)
  return callback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_callback() {
  // @@protoc_insertion_point(field_release:api.SMS.callback)
  
  return callback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_callback(::std::string* callback) {
  if (callback != NULL) {
    
  } else {
    
  }
  callback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.callback)
}

// string app = 6;
inline void SMS::clear_app() {
  app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SMS::app() const {
  // @@protoc_insertion_point(field_get:api.SMS.app)
  return app_.GetNoArena();
}
inline void SMS::set_app(const ::std::string& value) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.SMS.app)
}
#if LANG_CXX11
inline void SMS::set_app(::std::string&& value) {
  
  app_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.SMS.app)
}
#endif
inline void SMS::set_app(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.SMS.app)
}
inline void SMS::set_app(const char* value, size_t size) {
  
  app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.SMS.app)
}
inline ::std::string* SMS::mutable_app() {
  
  // @@protoc_insertion_point(field_mutable:api.SMS.app)
  return app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SMS::release_app() {
  // @@protoc_insertion_point(field_release:api.SMS.app)
  
  return app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SMS::set_allocated_app(::std::string* app) {
  if (app != NULL) {
    
  } else {
    
  }
  app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app);
  // @@protoc_insertion_point(field_set_allocated:api.SMS.app)
}

// -------------------------------------------------------------------

// Call

// string to = 1;
inline void Call::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::to() const {
  // @@protoc_insertion_point(field_get:api.Call.to)
  return to_.GetNoArena();
}
inline void Call::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Call.to)
}
#if LANG_CXX11
inline void Call::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Call.to)
}
#endif
inline void Call::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Call.to)
}
inline void Call::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Call.to)
}
inline ::std::string* Call::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:api.Call.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_to() {
  // @@protoc_insertion_point(field_release:api.Call.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:api.Call.to)
}

// string from = 2;
inline void Call::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::from() const {
  // @@protoc_insertion_point(field_get:api.Call.from)
  return from_.GetNoArena();
}
inline void Call::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Call.from)
}
#if LANG_CXX11
inline void Call::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Call.from)
}
#endif
inline void Call::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Call.from)
}
inline void Call::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Call.from)
}
inline ::std::string* Call::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:api.Call.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_from() {
  // @@protoc_insertion_point(field_release:api.Call.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:api.Call.from)
}

// string callback = 5;
inline void Call::clear_callback() {
  callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Call::callback() const {
  // @@protoc_insertion_point(field_get:api.Call.callback)
  return callback_.GetNoArena();
}
inline void Call::set_callback(const ::std::string& value) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Call.callback)
}
#if LANG_CXX11
inline void Call::set_callback(::std::string&& value) {
  
  callback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Call.callback)
}
#endif
inline void Call::set_callback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Call.callback)
}
inline void Call::set_callback(const char* value, size_t size) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Call.callback)
}
inline ::std::string* Call::mutable_callback() {
  
  // @@protoc_insertion_point(field_mutable:api.Call.callback)
  return callback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_callback() {
  // @@protoc_insertion_point(field_release:api.Call.callback)
  
  return callback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_callback(::std::string* callback) {
  if (callback != NULL) {
    
  } else {
    
  }
  callback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback);
  // @@protoc_insertion_point(field_set_allocated:api.Call.callback)
}

// -------------------------------------------------------------------

// Fax

// string to = 1;
inline void Fax::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fax::to() const {
  // @@protoc_insertion_point(field_get:api.Fax.to)
  return to_.GetNoArena();
}
inline void Fax::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Fax.to)
}
#if LANG_CXX11
inline void Fax::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Fax.to)
}
#endif
inline void Fax::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Fax.to)
}
inline void Fax::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Fax.to)
}
inline ::std::string* Fax::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:api.Fax.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fax::release_to() {
  // @@protoc_insertion_point(field_release:api.Fax.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fax::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:api.Fax.to)
}

// string from = 2;
inline void Fax::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fax::from() const {
  // @@protoc_insertion_point(field_get:api.Fax.from)
  return from_.GetNoArena();
}
inline void Fax::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Fax.from)
}
#if LANG_CXX11
inline void Fax::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Fax.from)
}
#endif
inline void Fax::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Fax.from)
}
inline void Fax::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Fax.from)
}
inline ::std::string* Fax::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:api.Fax.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fax::release_from() {
  // @@protoc_insertion_point(field_release:api.Fax.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fax::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:api.Fax.from)
}

// string media_url = 3;
inline void Fax::clear_media_url() {
  media_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fax::media_url() const {
  // @@protoc_insertion_point(field_get:api.Fax.media_url)
  return media_url_.GetNoArena();
}
inline void Fax::set_media_url(const ::std::string& value) {
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Fax.media_url)
}
#if LANG_CXX11
inline void Fax::set_media_url(::std::string&& value) {
  
  media_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Fax.media_url)
}
#endif
inline void Fax::set_media_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Fax.media_url)
}
inline void Fax::set_media_url(const char* value, size_t size) {
  
  media_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Fax.media_url)
}
inline ::std::string* Fax::mutable_media_url() {
  
  // @@protoc_insertion_point(field_mutable:api.Fax.media_url)
  return media_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fax::release_media_url() {
  // @@protoc_insertion_point(field_release:api.Fax.media_url)
  
  return media_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fax::set_allocated_media_url(::std::string* media_url) {
  if (media_url != NULL) {
    
  } else {
    
  }
  media_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_url);
  // @@protoc_insertion_point(field_set_allocated:api.Fax.media_url)
}

// string quality = 4;
inline void Fax::clear_quality() {
  quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fax::quality() const {
  // @@protoc_insertion_point(field_get:api.Fax.quality)
  return quality_.GetNoArena();
}
inline void Fax::set_quality(const ::std::string& value) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Fax.quality)
}
#if LANG_CXX11
inline void Fax::set_quality(::std::string&& value) {
  
  quality_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Fax.quality)
}
#endif
inline void Fax::set_quality(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Fax.quality)
}
inline void Fax::set_quality(const char* value, size_t size) {
  
  quality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Fax.quality)
}
inline ::std::string* Fax::mutable_quality() {
  
  // @@protoc_insertion_point(field_mutable:api.Fax.quality)
  return quality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fax::release_quality() {
  // @@protoc_insertion_point(field_release:api.Fax.quality)
  
  return quality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fax::set_allocated_quality(::std::string* quality) {
  if (quality != NULL) {
    
  } else {
    
  }
  quality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quality);
  // @@protoc_insertion_point(field_set_allocated:api.Fax.quality)
}

// string callback = 5;
inline void Fax::clear_callback() {
  callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Fax::callback() const {
  // @@protoc_insertion_point(field_get:api.Fax.callback)
  return callback_.GetNoArena();
}
inline void Fax::set_callback(const ::std::string& value) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Fax.callback)
}
#if LANG_CXX11
inline void Fax::set_callback(::std::string&& value) {
  
  callback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Fax.callback)
}
#endif
inline void Fax::set_callback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Fax.callback)
}
inline void Fax::set_callback(const char* value, size_t size) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Fax.callback)
}
inline ::std::string* Fax::mutable_callback() {
  
  // @@protoc_insertion_point(field_mutable:api.Fax.callback)
  return callback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fax::release_callback() {
  // @@protoc_insertion_point(field_release:api.Fax.callback)
  
  return callback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fax::set_allocated_callback(::std::string* callback) {
  if (callback != NULL) {
    
  } else {
    
  }
  callback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback);
  // @@protoc_insertion_point(field_set_allocated:api.Fax.callback)
}

// bool store_media = 6;
inline void Fax::clear_store_media() {
  store_media_ = false;
}
inline bool Fax::store_media() const {
  // @@protoc_insertion_point(field_get:api.Fax.store_media)
  return store_media_;
}
inline void Fax::set_store_media(bool value) {
  
  store_media_ = value;
  // @@protoc_insertion_point(field_set:api.Fax.store_media)
}

// -------------------------------------------------------------------

// LogHook

// string author = 1;
inline void LogHook::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogHook::author() const {
  // @@protoc_insertion_point(field_get:api.LogHook.author)
  return author_.GetNoArena();
}
inline void LogHook::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogHook.author)
}
#if LANG_CXX11
inline void LogHook::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogHook.author)
}
#endif
inline void LogHook::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogHook.author)
}
inline void LogHook::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogHook.author)
}
inline ::std::string* LogHook::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:api.LogHook.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogHook::release_author() {
  // @@protoc_insertion_point(field_release:api.LogHook.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogHook::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:api.LogHook.author)
}

// string icon = 2;
inline void LogHook::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogHook::icon() const {
  // @@protoc_insertion_point(field_get:api.LogHook.icon)
  return icon_.GetNoArena();
}
inline void LogHook::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogHook.icon)
}
#if LANG_CXX11
inline void LogHook::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogHook.icon)
}
#endif
inline void LogHook::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogHook.icon)
}
inline void LogHook::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogHook.icon)
}
inline ::std::string* LogHook::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:api.LogHook.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogHook::release_icon() {
  // @@protoc_insertion_point(field_release:api.LogHook.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogHook::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:api.LogHook.icon)
}

// string title = 3;
inline void LogHook::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogHook::title() const {
  // @@protoc_insertion_point(field_get:api.LogHook.title)
  return title_.GetNoArena();
}
inline void LogHook::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.LogHook.title)
}
#if LANG_CXX11
inline void LogHook::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.LogHook.title)
}
#endif
inline void LogHook::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.LogHook.title)
}
inline void LogHook::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.LogHook.title)
}
inline ::std::string* LogHook::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:api.LogHook.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogHook::release_title() {
  // @@protoc_insertion_point(field_release:api.LogHook.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogHook::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:api.LogHook.title)
}

// -------------------------------------------------------------------

// Attachment

// string color = 1;
inline void Attachment::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::color() const {
  // @@protoc_insertion_point(field_get:api.Attachment.color)
  return color_.GetNoArena();
}
inline void Attachment::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.color)
}
#if LANG_CXX11
inline void Attachment::set_color(::std::string&& value) {
  
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.color)
}
#endif
inline void Attachment::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.color)
}
inline void Attachment::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.color)
}
inline ::std::string* Attachment::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_color() {
  // @@protoc_insertion_point(field_release:api.Attachment.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.color)
}

// string fallback = 2;
inline void Attachment::clear_fallback() {
  fallback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::fallback() const {
  // @@protoc_insertion_point(field_get:api.Attachment.fallback)
  return fallback_.GetNoArena();
}
inline void Attachment::set_fallback(const ::std::string& value) {
  
  fallback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.fallback)
}
#if LANG_CXX11
inline void Attachment::set_fallback(::std::string&& value) {
  
  fallback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.fallback)
}
#endif
inline void Attachment::set_fallback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fallback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.fallback)
}
inline void Attachment::set_fallback(const char* value, size_t size) {
  
  fallback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.fallback)
}
inline ::std::string* Attachment::mutable_fallback() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.fallback)
  return fallback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_fallback() {
  // @@protoc_insertion_point(field_release:api.Attachment.fallback)
  
  return fallback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_fallback(::std::string* fallback) {
  if (fallback != NULL) {
    
  } else {
    
  }
  fallback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fallback);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.fallback)
}

// string callback_id = 3;
inline void Attachment::clear_callback_id() {
  callback_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::callback_id() const {
  // @@protoc_insertion_point(field_get:api.Attachment.callback_id)
  return callback_id_.GetNoArena();
}
inline void Attachment::set_callback_id(const ::std::string& value) {
  
  callback_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.callback_id)
}
#if LANG_CXX11
inline void Attachment::set_callback_id(::std::string&& value) {
  
  callback_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.callback_id)
}
#endif
inline void Attachment::set_callback_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.callback_id)
}
inline void Attachment::set_callback_id(const char* value, size_t size) {
  
  callback_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.callback_id)
}
inline ::std::string* Attachment::mutable_callback_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.callback_id)
  return callback_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_callback_id() {
  // @@protoc_insertion_point(field_release:api.Attachment.callback_id)
  
  return callback_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_callback_id(::std::string* callback_id) {
  if (callback_id != NULL) {
    
  } else {
    
  }
  callback_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback_id);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.callback_id)
}

// int64 id = 4;
inline void Attachment::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Attachment::id() const {
  // @@protoc_insertion_point(field_get:api.Attachment.id)
  return id_;
}
inline void Attachment::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:api.Attachment.id)
}

// string author_id = 5;
inline void Attachment::clear_author_id() {
  author_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::author_id() const {
  // @@protoc_insertion_point(field_get:api.Attachment.author_id)
  return author_id_.GetNoArena();
}
inline void Attachment::set_author_id(const ::std::string& value) {
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.author_id)
}
#if LANG_CXX11
inline void Attachment::set_author_id(::std::string&& value) {
  
  author_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.author_id)
}
#endif
inline void Attachment::set_author_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.author_id)
}
inline void Attachment::set_author_id(const char* value, size_t size) {
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.author_id)
}
inline ::std::string* Attachment::mutable_author_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.author_id)
  return author_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_author_id() {
  // @@protoc_insertion_point(field_release:api.Attachment.author_id)
  
  return author_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_author_id(::std::string* author_id) {
  if (author_id != NULL) {
    
  } else {
    
  }
  author_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_id);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.author_id)
}

// string author_name = 6;
inline void Attachment::clear_author_name() {
  author_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::author_name() const {
  // @@protoc_insertion_point(field_get:api.Attachment.author_name)
  return author_name_.GetNoArena();
}
inline void Attachment::set_author_name(const ::std::string& value) {
  
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.author_name)
}
#if LANG_CXX11
inline void Attachment::set_author_name(::std::string&& value) {
  
  author_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.author_name)
}
#endif
inline void Attachment::set_author_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.author_name)
}
inline void Attachment::set_author_name(const char* value, size_t size) {
  
  author_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.author_name)
}
inline ::std::string* Attachment::mutable_author_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.author_name)
  return author_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_author_name() {
  // @@protoc_insertion_point(field_release:api.Attachment.author_name)
  
  return author_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_author_name(::std::string* author_name) {
  if (author_name != NULL) {
    
  } else {
    
  }
  author_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_name);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.author_name)
}

// string author_link = 7;
inline void Attachment::clear_author_link() {
  author_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::author_link() const {
  // @@protoc_insertion_point(field_get:api.Attachment.author_link)
  return author_link_.GetNoArena();
}
inline void Attachment::set_author_link(const ::std::string& value) {
  
  author_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.author_link)
}
#if LANG_CXX11
inline void Attachment::set_author_link(::std::string&& value) {
  
  author_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.author_link)
}
#endif
inline void Attachment::set_author_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.author_link)
}
inline void Attachment::set_author_link(const char* value, size_t size) {
  
  author_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.author_link)
}
inline ::std::string* Attachment::mutable_author_link() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.author_link)
  return author_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_author_link() {
  // @@protoc_insertion_point(field_release:api.Attachment.author_link)
  
  return author_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_author_link(::std::string* author_link) {
  if (author_link != NULL) {
    
  } else {
    
  }
  author_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_link);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.author_link)
}

// string author_icon = 8;
inline void Attachment::clear_author_icon() {
  author_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::author_icon() const {
  // @@protoc_insertion_point(field_get:api.Attachment.author_icon)
  return author_icon_.GetNoArena();
}
inline void Attachment::set_author_icon(const ::std::string& value) {
  
  author_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.author_icon)
}
#if LANG_CXX11
inline void Attachment::set_author_icon(::std::string&& value) {
  
  author_icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.author_icon)
}
#endif
inline void Attachment::set_author_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.author_icon)
}
inline void Attachment::set_author_icon(const char* value, size_t size) {
  
  author_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.author_icon)
}
inline ::std::string* Attachment::mutable_author_icon() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.author_icon)
  return author_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_author_icon() {
  // @@protoc_insertion_point(field_release:api.Attachment.author_icon)
  
  return author_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_author_icon(::std::string* author_icon) {
  if (author_icon != NULL) {
    
  } else {
    
  }
  author_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_icon);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.author_icon)
}

// string title = 9;
inline void Attachment::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::title() const {
  // @@protoc_insertion_point(field_get:api.Attachment.title)
  return title_.GetNoArena();
}
inline void Attachment::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.title)
}
#if LANG_CXX11
inline void Attachment::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.title)
}
#endif
inline void Attachment::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.title)
}
inline void Attachment::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.title)
}
inline ::std::string* Attachment::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_title() {
  // @@protoc_insertion_point(field_release:api.Attachment.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.title)
}

// string title_prefix = 10;
inline void Attachment::clear_title_prefix() {
  title_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::title_prefix() const {
  // @@protoc_insertion_point(field_get:api.Attachment.title_prefix)
  return title_prefix_.GetNoArena();
}
inline void Attachment::set_title_prefix(const ::std::string& value) {
  
  title_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.title_prefix)
}
#if LANG_CXX11
inline void Attachment::set_title_prefix(::std::string&& value) {
  
  title_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.title_prefix)
}
#endif
inline void Attachment::set_title_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.title_prefix)
}
inline void Attachment::set_title_prefix(const char* value, size_t size) {
  
  title_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.title_prefix)
}
inline ::std::string* Attachment::mutable_title_prefix() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.title_prefix)
  return title_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_title_prefix() {
  // @@protoc_insertion_point(field_release:api.Attachment.title_prefix)
  
  return title_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_title_prefix(::std::string* title_prefix) {
  if (title_prefix != NULL) {
    
  } else {
    
  }
  title_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title_prefix);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.title_prefix)
}

// string pretext = 11;
inline void Attachment::clear_pretext() {
  pretext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::pretext() const {
  // @@protoc_insertion_point(field_get:api.Attachment.pretext)
  return pretext_.GetNoArena();
}
inline void Attachment::set_pretext(const ::std::string& value) {
  
  pretext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.pretext)
}
#if LANG_CXX11
inline void Attachment::set_pretext(::std::string&& value) {
  
  pretext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.pretext)
}
#endif
inline void Attachment::set_pretext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pretext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.pretext)
}
inline void Attachment::set_pretext(const char* value, size_t size) {
  
  pretext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.pretext)
}
inline ::std::string* Attachment::mutable_pretext() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.pretext)
  return pretext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_pretext() {
  // @@protoc_insertion_point(field_release:api.Attachment.pretext)
  
  return pretext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_pretext(::std::string* pretext) {
  if (pretext != NULL) {
    
  } else {
    
  }
  pretext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretext);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.pretext)
}

// string text = 12;
inline void Attachment::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::text() const {
  // @@protoc_insertion_point(field_get:api.Attachment.text)
  return text_.GetNoArena();
}
inline void Attachment::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.text)
}
#if LANG_CXX11
inline void Attachment::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.text)
}
#endif
inline void Attachment::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.text)
}
inline void Attachment::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.text)
}
inline ::std::string* Attachment::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_text() {
  // @@protoc_insertion_point(field_release:api.Attachment.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.text)
}

// string image_url = 13;
inline void Attachment::clear_image_url() {
  image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::image_url() const {
  // @@protoc_insertion_point(field_get:api.Attachment.image_url)
  return image_url_.GetNoArena();
}
inline void Attachment::set_image_url(const ::std::string& value) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.image_url)
}
#if LANG_CXX11
inline void Attachment::set_image_url(::std::string&& value) {
  
  image_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.image_url)
}
#endif
inline void Attachment::set_image_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.image_url)
}
inline void Attachment::set_image_url(const char* value, size_t size) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.image_url)
}
inline ::std::string* Attachment::mutable_image_url() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.image_url)
  return image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_image_url() {
  // @@protoc_insertion_point(field_release:api.Attachment.image_url)
  
  return image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_image_url(::std::string* image_url) {
  if (image_url != NULL) {
    
  } else {
    
  }
  image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_url);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.image_url)
}

// string thumb_url = 14;
inline void Attachment::clear_thumb_url() {
  thumb_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Attachment::thumb_url() const {
  // @@protoc_insertion_point(field_get:api.Attachment.thumb_url)
  return thumb_url_.GetNoArena();
}
inline void Attachment::set_thumb_url(const ::std::string& value) {
  
  thumb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Attachment.thumb_url)
}
#if LANG_CXX11
inline void Attachment::set_thumb_url(::std::string&& value) {
  
  thumb_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Attachment.thumb_url)
}
#endif
inline void Attachment::set_thumb_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Attachment.thumb_url)
}
inline void Attachment::set_thumb_url(const char* value, size_t size) {
  
  thumb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Attachment.thumb_url)
}
inline ::std::string* Attachment::mutable_thumb_url() {
  
  // @@protoc_insertion_point(field_mutable:api.Attachment.thumb_url)
  return thumb_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attachment::release_thumb_url() {
  // @@protoc_insertion_point(field_release:api.Attachment.thumb_url)
  
  return thumb_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attachment::set_allocated_thumb_url(::std::string* thumb_url) {
  if (thumb_url != NULL) {
    
  } else {
    
  }
  thumb_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumb_url);
  // @@protoc_insertion_point(field_set_allocated:api.Attachment.thumb_url)
}

// repeated .api.AttachmentField fields = 15;
inline int Attachment::fields_size() const {
  return fields_.size();
}
inline void Attachment::clear_fields() {
  fields_.Clear();
}
inline ::api::AttachmentField* Attachment::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:api.Attachment.fields)
  return fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::AttachmentField >*
Attachment::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:api.Attachment.fields)
  return &fields_;
}
inline const ::api::AttachmentField& Attachment::fields(int index) const {
  // @@protoc_insertion_point(field_get:api.Attachment.fields)
  return fields_.Get(index);
}
inline ::api::AttachmentField* Attachment::add_fields() {
  // @@protoc_insertion_point(field_add:api.Attachment.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::AttachmentField >&
Attachment::fields() const {
  // @@protoc_insertion_point(field_list:api.Attachment.fields)
  return fields_;
}

// -------------------------------------------------------------------

// AttachmentAction

// string name = 1;
inline void AttachmentAction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentAction::name() const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.name)
  return name_.GetNoArena();
}
inline void AttachmentAction::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentAction.name)
}
#if LANG_CXX11
inline void AttachmentAction::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentAction.name)
}
#endif
inline void AttachmentAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentAction.name)
}
inline void AttachmentAction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentAction.name)
}
inline ::std::string* AttachmentAction::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentAction::release_name() {
  // @@protoc_insertion_point(field_release:api.AttachmentAction.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentAction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentAction.name)
}

// string text = 2;
inline void AttachmentAction::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentAction::text() const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.text)
  return text_.GetNoArena();
}
inline void AttachmentAction::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentAction.text)
}
#if LANG_CXX11
inline void AttachmentAction::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentAction.text)
}
#endif
inline void AttachmentAction::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentAction.text)
}
inline void AttachmentAction::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentAction.text)
}
inline ::std::string* AttachmentAction::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentAction::release_text() {
  // @@protoc_insertion_point(field_release:api.AttachmentAction.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentAction::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentAction.text)
}

// string style = 3;
inline void AttachmentAction::clear_style() {
  style_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentAction::style() const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.style)
  return style_.GetNoArena();
}
inline void AttachmentAction::set_style(const ::std::string& value) {
  
  style_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentAction.style)
}
#if LANG_CXX11
inline void AttachmentAction::set_style(::std::string&& value) {
  
  style_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentAction.style)
}
#endif
inline void AttachmentAction::set_style(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  style_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentAction.style)
}
inline void AttachmentAction::set_style(const char* value, size_t size) {
  
  style_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentAction.style)
}
inline ::std::string* AttachmentAction::mutable_style() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.style)
  return style_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentAction::release_style() {
  // @@protoc_insertion_point(field_release:api.AttachmentAction.style)
  
  return style_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentAction::set_allocated_style(::std::string* style) {
  if (style != NULL) {
    
  } else {
    
  }
  style_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), style);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentAction.style)
}

// string type = 4;
inline void AttachmentAction::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentAction::type() const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.type)
  return type_.GetNoArena();
}
inline void AttachmentAction::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentAction.type)
}
#if LANG_CXX11
inline void AttachmentAction::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentAction.type)
}
#endif
inline void AttachmentAction::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentAction.type)
}
inline void AttachmentAction::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentAction.type)
}
inline ::std::string* AttachmentAction::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentAction::release_type() {
  // @@protoc_insertion_point(field_release:api.AttachmentAction.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentAction::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentAction.type)
}

// string value = 5;
inline void AttachmentAction::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentAction::value() const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.value)
  return value_.GetNoArena();
}
inline void AttachmentAction::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentAction.value)
}
#if LANG_CXX11
inline void AttachmentAction::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentAction.value)
}
#endif
inline void AttachmentAction::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentAction.value)
}
inline void AttachmentAction::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentAction.value)
}
inline ::std::string* AttachmentAction::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentAction::release_value() {
  // @@protoc_insertion_point(field_release:api.AttachmentAction.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentAction::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentAction.value)
}

// string data_source = 6;
inline void AttachmentAction::clear_data_source() {
  data_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentAction::data_source() const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.data_source)
  return data_source_.GetNoArena();
}
inline void AttachmentAction::set_data_source(const ::std::string& value) {
  
  data_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentAction.data_source)
}
#if LANG_CXX11
inline void AttachmentAction::set_data_source(::std::string&& value) {
  
  data_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentAction.data_source)
}
#endif
inline void AttachmentAction::set_data_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentAction.data_source)
}
inline void AttachmentAction::set_data_source(const char* value, size_t size) {
  
  data_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentAction.data_source)
}
inline ::std::string* AttachmentAction::mutable_data_source() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.data_source)
  return data_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentAction::release_data_source() {
  // @@protoc_insertion_point(field_release:api.AttachmentAction.data_source)
  
  return data_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentAction::set_allocated_data_source(::std::string* data_source) {
  if (data_source != NULL) {
    
  } else {
    
  }
  data_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_source);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentAction.data_source)
}

// int64 min_query_length = 7;
inline void AttachmentAction::clear_min_query_length() {
  min_query_length_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AttachmentAction::min_query_length() const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.min_query_length)
  return min_query_length_;
}
inline void AttachmentAction::set_min_query_length(::google::protobuf::int64 value) {
  
  min_query_length_ = value;
  // @@protoc_insertion_point(field_set:api.AttachmentAction.min_query_length)
}

// repeated .api.AttachmentActionOption options = 8;
inline int AttachmentAction::options_size() const {
  return options_.size();
}
inline void AttachmentAction::clear_options() {
  options_.Clear();
}
inline ::api::AttachmentActionOption* AttachmentAction::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.options)
  return options_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >*
AttachmentAction::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:api.AttachmentAction.options)
  return &options_;
}
inline const ::api::AttachmentActionOption& AttachmentAction::options(int index) const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.options)
  return options_.Get(index);
}
inline ::api::AttachmentActionOption* AttachmentAction::add_options() {
  // @@protoc_insertion_point(field_add:api.AttachmentAction.options)
  return options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >&
AttachmentAction::options() const {
  // @@protoc_insertion_point(field_list:api.AttachmentAction.options)
  return options_;
}

// repeated .api.AttachmentActionOption selected_options = 9;
inline int AttachmentAction::selected_options_size() const {
  return selected_options_.size();
}
inline void AttachmentAction::clear_selected_options() {
  selected_options_.Clear();
}
inline ::api::AttachmentActionOption* AttachmentAction::mutable_selected_options(int index) {
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.selected_options)
  return selected_options_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >*
AttachmentAction::mutable_selected_options() {
  // @@protoc_insertion_point(field_mutable_list:api.AttachmentAction.selected_options)
  return &selected_options_;
}
inline const ::api::AttachmentActionOption& AttachmentAction::selected_options(int index) const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.selected_options)
  return selected_options_.Get(index);
}
inline ::api::AttachmentActionOption* AttachmentAction::add_selected_options() {
  // @@protoc_insertion_point(field_add:api.AttachmentAction.selected_options)
  return selected_options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >&
AttachmentAction::selected_options() const {
  // @@protoc_insertion_point(field_list:api.AttachmentAction.selected_options)
  return selected_options_;
}

// repeated .api.AttachmentActionOptionGroup option_groups = 10;
inline int AttachmentAction::option_groups_size() const {
  return option_groups_.size();
}
inline void AttachmentAction::clear_option_groups() {
  option_groups_.Clear();
}
inline ::api::AttachmentActionOptionGroup* AttachmentAction::mutable_option_groups(int index) {
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.option_groups)
  return option_groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOptionGroup >*
AttachmentAction::mutable_option_groups() {
  // @@protoc_insertion_point(field_mutable_list:api.AttachmentAction.option_groups)
  return &option_groups_;
}
inline const ::api::AttachmentActionOptionGroup& AttachmentAction::option_groups(int index) const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.option_groups)
  return option_groups_.Get(index);
}
inline ::api::AttachmentActionOptionGroup* AttachmentAction::add_option_groups() {
  // @@protoc_insertion_point(field_add:api.AttachmentAction.option_groups)
  return option_groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOptionGroup >&
AttachmentAction::option_groups() const {
  // @@protoc_insertion_point(field_list:api.AttachmentAction.option_groups)
  return option_groups_;
}

// .api.AttachmentConfirmationField confirm = 11;
inline bool AttachmentAction::has_confirm() const {
  return this != internal_default_instance() && confirm_ != NULL;
}
inline void AttachmentAction::clear_confirm() {
  if (GetArenaNoVirtual() == NULL && confirm_ != NULL) {
    delete confirm_;
  }
  confirm_ = NULL;
}
inline const ::api::AttachmentConfirmationField& AttachmentAction::_internal_confirm() const {
  return *confirm_;
}
inline const ::api::AttachmentConfirmationField& AttachmentAction::confirm() const {
  const ::api::AttachmentConfirmationField* p = confirm_;
  // @@protoc_insertion_point(field_get:api.AttachmentAction.confirm)
  return p != NULL ? *p : *reinterpret_cast<const ::api::AttachmentConfirmationField*>(
      &::api::_AttachmentConfirmationField_default_instance_);
}
inline ::api::AttachmentConfirmationField* AttachmentAction::release_confirm() {
  // @@protoc_insertion_point(field_release:api.AttachmentAction.confirm)
  
  ::api::AttachmentConfirmationField* temp = confirm_;
  confirm_ = NULL;
  return temp;
}
inline ::api::AttachmentConfirmationField* AttachmentAction::mutable_confirm() {
  
  if (confirm_ == NULL) {
    auto* p = CreateMaybeMessage<::api::AttachmentConfirmationField>(GetArenaNoVirtual());
    confirm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.confirm)
  return confirm_;
}
inline void AttachmentAction::set_allocated_confirm(::api::AttachmentConfirmationField* confirm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete confirm_;
  }
  if (confirm) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      confirm = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confirm, submessage_arena);
    }
    
  } else {
    
  }
  confirm_ = confirm;
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentAction.confirm)
}

// string url = 12;
inline void AttachmentAction::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentAction::url() const {
  // @@protoc_insertion_point(field_get:api.AttachmentAction.url)
  return url_.GetNoArena();
}
inline void AttachmentAction::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentAction.url)
}
#if LANG_CXX11
inline void AttachmentAction::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentAction.url)
}
#endif
inline void AttachmentAction::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentAction.url)
}
inline void AttachmentAction::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentAction.url)
}
inline ::std::string* AttachmentAction::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentAction.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentAction::release_url() {
  // @@protoc_insertion_point(field_release:api.AttachmentAction.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentAction::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentAction.url)
}

// -------------------------------------------------------------------

// AttachmentConfirmationField

// string title = 1;
inline void AttachmentConfirmationField::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentConfirmationField::title() const {
  // @@protoc_insertion_point(field_get:api.AttachmentConfirmationField.title)
  return title_.GetNoArena();
}
inline void AttachmentConfirmationField::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentConfirmationField.title)
}
#if LANG_CXX11
inline void AttachmentConfirmationField::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentConfirmationField.title)
}
#endif
inline void AttachmentConfirmationField::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentConfirmationField.title)
}
inline void AttachmentConfirmationField::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentConfirmationField.title)
}
inline ::std::string* AttachmentConfirmationField::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentConfirmationField.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentConfirmationField::release_title() {
  // @@protoc_insertion_point(field_release:api.AttachmentConfirmationField.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentConfirmationField::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentConfirmationField.title)
}

// string text = 2;
inline void AttachmentConfirmationField::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentConfirmationField::text() const {
  // @@protoc_insertion_point(field_get:api.AttachmentConfirmationField.text)
  return text_.GetNoArena();
}
inline void AttachmentConfirmationField::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentConfirmationField.text)
}
#if LANG_CXX11
inline void AttachmentConfirmationField::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentConfirmationField.text)
}
#endif
inline void AttachmentConfirmationField::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentConfirmationField.text)
}
inline void AttachmentConfirmationField::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentConfirmationField.text)
}
inline ::std::string* AttachmentConfirmationField::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentConfirmationField.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentConfirmationField::release_text() {
  // @@protoc_insertion_point(field_release:api.AttachmentConfirmationField.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentConfirmationField::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentConfirmationField.text)
}

// string ok_text = 3;
inline void AttachmentConfirmationField::clear_ok_text() {
  ok_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentConfirmationField::ok_text() const {
  // @@protoc_insertion_point(field_get:api.AttachmentConfirmationField.ok_text)
  return ok_text_.GetNoArena();
}
inline void AttachmentConfirmationField::set_ok_text(const ::std::string& value) {
  
  ok_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentConfirmationField.ok_text)
}
#if LANG_CXX11
inline void AttachmentConfirmationField::set_ok_text(::std::string&& value) {
  
  ok_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentConfirmationField.ok_text)
}
#endif
inline void AttachmentConfirmationField::set_ok_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ok_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentConfirmationField.ok_text)
}
inline void AttachmentConfirmationField::set_ok_text(const char* value, size_t size) {
  
  ok_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentConfirmationField.ok_text)
}
inline ::std::string* AttachmentConfirmationField::mutable_ok_text() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentConfirmationField.ok_text)
  return ok_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentConfirmationField::release_ok_text() {
  // @@protoc_insertion_point(field_release:api.AttachmentConfirmationField.ok_text)
  
  return ok_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentConfirmationField::set_allocated_ok_text(::std::string* ok_text) {
  if (ok_text != NULL) {
    
  } else {
    
  }
  ok_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok_text);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentConfirmationField.ok_text)
}

// string dismiss_text = 4;
inline void AttachmentConfirmationField::clear_dismiss_text() {
  dismiss_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentConfirmationField::dismiss_text() const {
  // @@protoc_insertion_point(field_get:api.AttachmentConfirmationField.dismiss_text)
  return dismiss_text_.GetNoArena();
}
inline void AttachmentConfirmationField::set_dismiss_text(const ::std::string& value) {
  
  dismiss_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentConfirmationField.dismiss_text)
}
#if LANG_CXX11
inline void AttachmentConfirmationField::set_dismiss_text(::std::string&& value) {
  
  dismiss_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentConfirmationField.dismiss_text)
}
#endif
inline void AttachmentConfirmationField::set_dismiss_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dismiss_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentConfirmationField.dismiss_text)
}
inline void AttachmentConfirmationField::set_dismiss_text(const char* value, size_t size) {
  
  dismiss_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentConfirmationField.dismiss_text)
}
inline ::std::string* AttachmentConfirmationField::mutable_dismiss_text() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentConfirmationField.dismiss_text)
  return dismiss_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentConfirmationField::release_dismiss_text() {
  // @@protoc_insertion_point(field_release:api.AttachmentConfirmationField.dismiss_text)
  
  return dismiss_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentConfirmationField::set_allocated_dismiss_text(::std::string* dismiss_text) {
  if (dismiss_text != NULL) {
    
  } else {
    
  }
  dismiss_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dismiss_text);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentConfirmationField.dismiss_text)
}

// -------------------------------------------------------------------

// AttachmentActionOptionGroup

// string text = 1;
inline void AttachmentActionOptionGroup::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentActionOptionGroup::text() const {
  // @@protoc_insertion_point(field_get:api.AttachmentActionOptionGroup.text)
  return text_.GetNoArena();
}
inline void AttachmentActionOptionGroup::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentActionOptionGroup.text)
}
#if LANG_CXX11
inline void AttachmentActionOptionGroup::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentActionOptionGroup.text)
}
#endif
inline void AttachmentActionOptionGroup::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentActionOptionGroup.text)
}
inline void AttachmentActionOptionGroup::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentActionOptionGroup.text)
}
inline ::std::string* AttachmentActionOptionGroup::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentActionOptionGroup.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentActionOptionGroup::release_text() {
  // @@protoc_insertion_point(field_release:api.AttachmentActionOptionGroup.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentActionOptionGroup::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentActionOptionGroup.text)
}

// repeated .api.AttachmentActionOption options = 2;
inline int AttachmentActionOptionGroup::options_size() const {
  return options_.size();
}
inline void AttachmentActionOptionGroup::clear_options() {
  options_.Clear();
}
inline ::api::AttachmentActionOption* AttachmentActionOptionGroup::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:api.AttachmentActionOptionGroup.options)
  return options_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >*
AttachmentActionOptionGroup::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:api.AttachmentActionOptionGroup.options)
  return &options_;
}
inline const ::api::AttachmentActionOption& AttachmentActionOptionGroup::options(int index) const {
  // @@protoc_insertion_point(field_get:api.AttachmentActionOptionGroup.options)
  return options_.Get(index);
}
inline ::api::AttachmentActionOption* AttachmentActionOptionGroup::add_options() {
  // @@protoc_insertion_point(field_add:api.AttachmentActionOptionGroup.options)
  return options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::AttachmentActionOption >&
AttachmentActionOptionGroup::options() const {
  // @@protoc_insertion_point(field_list:api.AttachmentActionOptionGroup.options)
  return options_;
}

// -------------------------------------------------------------------

// AttachmentActionOption

// string title = 1;
inline void AttachmentActionOption::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentActionOption::title() const {
  // @@protoc_insertion_point(field_get:api.AttachmentActionOption.title)
  return title_.GetNoArena();
}
inline void AttachmentActionOption::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentActionOption.title)
}
#if LANG_CXX11
inline void AttachmentActionOption::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentActionOption.title)
}
#endif
inline void AttachmentActionOption::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentActionOption.title)
}
inline void AttachmentActionOption::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentActionOption.title)
}
inline ::std::string* AttachmentActionOption::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentActionOption.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentActionOption::release_title() {
  // @@protoc_insertion_point(field_release:api.AttachmentActionOption.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentActionOption::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentActionOption.title)
}

// string value = 2;
inline void AttachmentActionOption::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentActionOption::value() const {
  // @@protoc_insertion_point(field_get:api.AttachmentActionOption.value)
  return value_.GetNoArena();
}
inline void AttachmentActionOption::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentActionOption.value)
}
#if LANG_CXX11
inline void AttachmentActionOption::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentActionOption.value)
}
#endif
inline void AttachmentActionOption::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentActionOption.value)
}
inline void AttachmentActionOption::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentActionOption.value)
}
inline ::std::string* AttachmentActionOption::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentActionOption.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentActionOption::release_value() {
  // @@protoc_insertion_point(field_release:api.AttachmentActionOption.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentActionOption::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentActionOption.value)
}

// string description = 3;
inline void AttachmentActionOption::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentActionOption::description() const {
  // @@protoc_insertion_point(field_get:api.AttachmentActionOption.description)
  return description_.GetNoArena();
}
inline void AttachmentActionOption::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentActionOption.description)
}
#if LANG_CXX11
inline void AttachmentActionOption::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentActionOption.description)
}
#endif
inline void AttachmentActionOption::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentActionOption.description)
}
inline void AttachmentActionOption::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentActionOption.description)
}
inline ::std::string* AttachmentActionOption::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentActionOption.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentActionOption::release_description() {
  // @@protoc_insertion_point(field_release:api.AttachmentActionOption.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentActionOption::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentActionOption.description)
}

// -------------------------------------------------------------------

// AttachmentField

// string title = 1;
inline void AttachmentField::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentField::title() const {
  // @@protoc_insertion_point(field_get:api.AttachmentField.title)
  return title_.GetNoArena();
}
inline void AttachmentField::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentField.title)
}
#if LANG_CXX11
inline void AttachmentField::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentField.title)
}
#endif
inline void AttachmentField::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentField.title)
}
inline void AttachmentField::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentField.title)
}
inline ::std::string* AttachmentField::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentField.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentField::release_title() {
  // @@protoc_insertion_point(field_release:api.AttachmentField.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentField::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentField.title)
}

// string value = 2;
inline void AttachmentField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachmentField::value() const {
  // @@protoc_insertion_point(field_get:api.AttachmentField.value)
  return value_.GetNoArena();
}
inline void AttachmentField::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AttachmentField.value)
}
#if LANG_CXX11
inline void AttachmentField::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AttachmentField.value)
}
#endif
inline void AttachmentField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AttachmentField.value)
}
inline void AttachmentField::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AttachmentField.value)
}
inline ::std::string* AttachmentField::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:api.AttachmentField.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachmentField::release_value() {
  // @@protoc_insertion_point(field_release:api.AttachmentField.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachmentField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:api.AttachmentField.value)
}

// bool short = 3;
inline void AttachmentField::clear_short_() {
  short__ = false;
}
inline bool AttachmentField::short_() const {
  // @@protoc_insertion_point(field_get:api.AttachmentField.short)
  return short__;
}
inline void AttachmentField::set_short_(bool value) {
  
  short__ = value;
  // @@protoc_insertion_point(field_set:api.AttachmentField.short)
}

// -------------------------------------------------------------------

// JSON

// bytes data = 1;
inline void JSON::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JSON::data() const {
  // @@protoc_insertion_point(field_get:api.JSON.data)
  return data_.GetNoArena();
}
inline void JSON::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.JSON.data)
}
#if LANG_CXX11
inline void JSON::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.JSON.data)
}
#endif
inline void JSON::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.JSON.data)
}
inline void JSON::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.JSON.data)
}
inline ::std::string* JSON::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:api.JSON.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSON::release_data() {
  // @@protoc_insertion_point(field_release:api.JSON.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSON::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:api.JSON.data)
}

// int64 size = 2;
inline void JSON::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 JSON::size() const {
  // @@protoc_insertion_point(field_get:api.JSON.size)
  return size_;
}
inline void JSON::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:api.JSON.size)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// File

// bytes data = 1;
inline void File::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::data() const {
  // @@protoc_insertion_point(field_get:api.File.data)
  return data_.GetNoArena();
}
inline void File::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.File.data)
}
#if LANG_CXX11
inline void File::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.File.data)
}
#endif
inline void File::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.File.data)
}
inline void File::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.File.data)
}
inline ::std::string* File::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:api.File.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_data() {
  // @@protoc_insertion_point(field_release:api.File.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:api.File.data)
}

// int64 size = 2;
inline void File::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 File::size() const {
  // @@protoc_insertion_point(field_get:api.File.size)
  return size_;
}
inline void File::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:api.File.size)
}

// string name = 3;
inline void File::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::name() const {
  // @@protoc_insertion_point(field_get:api.File.name)
  return name_.GetNoArena();
}
inline void File::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.File.name)
}
#if LANG_CXX11
inline void File::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.File.name)
}
#endif
inline void File::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.File.name)
}
inline void File::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.File.name)
}
inline ::std::string* File::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.File.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:api.File.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.File.name)
}

// map<string, string> tags = 4;
inline int File::tags_size() const {
  return tags_.size();
}
inline void File::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
File::tags() const {
  // @@protoc_insertion_point(field_map:api.File.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
File::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:api.File.tags)
  return tags_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Product

// string name = 1;
inline void Product::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::name() const {
  // @@protoc_insertion_point(field_get:api.Product.name)
  return name_.GetNoArena();
}
inline void Product::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Product.name)
}
#if LANG_CXX11
inline void Product::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Product.name)
}
#endif
inline void Product::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Product.name)
}
inline void Product::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Product.name)
}
inline ::std::string* Product::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Product.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_name() {
  // @@protoc_insertion_point(field_release:api.Product.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Product.name)
}

// int64 amount = 2;
inline void Product::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Product::amount() const {
  // @@protoc_insertion_point(field_get:api.Product.amount)
  return amount_;
}
inline void Product::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:api.Product.amount)
}

// string description = 3;
inline void Product::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::description() const {
  // @@protoc_insertion_point(field_get:api.Product.description)
  return description_.GetNoArena();
}
inline void Product::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Product.description)
}
#if LANG_CXX11
inline void Product::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Product.description)
}
#endif
inline void Product::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Product.description)
}
inline void Product::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Product.description)
}
inline ::std::string* Product::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:api.Product.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_description() {
  // @@protoc_insertion_point(field_release:api.Product.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:api.Product.description)
}

// repeated .api.File files = 4;
inline int Product::files_size() const {
  return files_.size();
}
inline void Product::clear_files() {
  files_.Clear();
}
inline ::api::File* Product::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:api.Product.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::File >*
Product::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:api.Product.files)
  return &files_;
}
inline const ::api::File& Product::files(int index) const {
  // @@protoc_insertion_point(field_get:api.Product.files)
  return files_.Get(index);
}
inline ::api::File* Product::add_files() {
  // @@protoc_insertion_point(field_add:api.Product.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::File >&
Product::files() const {
  // @@protoc_insertion_point(field_list:api.Product.files)
  return files_;
}

// map<string, string> tags = 5;
inline int Product::tags_size() const {
  return tags_.size();
}
inline void Product::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Product::tags() const {
  // @@protoc_insertion_point(field_map:api.Product.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Product::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:api.Product.tags)
  return tags_.MutableMap();
}

// bool available = 6;
inline void Product::clear_available() {
  available_ = false;
}
inline bool Product::available() const {
  // @@protoc_insertion_point(field_get:api.Product.available)
  return available_;
}
inline void Product::set_available(bool value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:api.Product.available)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::api::CustomerIndex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::CustomerIndex>() {
  return ::api::CustomerIndex_descriptor();
}
template <> struct is_proto_enum< ::api::Claim> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::Claim>() {
  return ::api::Claim_descriptor();
}
template <> struct is_proto_enum< ::api::SigningMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::SigningMethod>() {
  return ::api::SigningMethod_descriptor();
}
template <> struct is_proto_enum< ::api::CardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::CardType>() {
  return ::api::CardType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
