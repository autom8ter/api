// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Api.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ApiRoot

@implementation ApiRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ApiRoot_FileDescriptor

static GPBFileDescriptor *ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - UserInfo

@implementation UserInfo

@dynamic name;
@dynamic givenName;
@dynamic familyName;
@dynamic gender;
@dynamic birthdate;
@dynamic email;
@dynamic picture;
@dynamic hasUserMetadata, userMetadata;
@dynamic hasAppMetadata, appMetadata;

typedef struct UserInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *givenName;
  NSString *familyName;
  NSString *gender;
  NSString *birthdate;
  NSString *email;
  NSString *picture;
  UserMetadata *userMetadata;
  AppMetadata *appMetadata;
} UserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserInfo__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "givenName",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_GivenName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserInfo__storage_, givenName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "familyName",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_FamilyName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserInfo__storage_, familyName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_Gender,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserInfo__storage_, gender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "birthdate",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_Birthdate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserInfo__storage_, birthdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_Email,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserInfo__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "picture",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_Picture,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UserInfo__storage_, picture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(UserMetadata),
        .number = UserInfo_FieldNumber_UserMetadata,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UserInfo__storage_, userMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appMetadata",
        .dataTypeSpecific.className = GPBStringifySymbol(AppMetadata),
        .number = UserInfo_FieldNumber_AppMetadata,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UserInfo__storage_, appMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserInfo class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserMetadata

@implementation UserMetadata

@dynamic phone;
@dynamic preferredContact;

typedef struct UserMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *phone;
  NSString *preferredContact;
} UserMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "phone",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_Phone,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "preferredContact",
        .dataTypeSpecific.className = NULL,
        .number = UserMetadata_FieldNumber_PreferredContact,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserMetadata__storage_, preferredContact),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserMetadata class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppMetadata

@implementation AppMetadata

@dynamic plan;
@dynamic payToken;

typedef struct AppMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *plan;
  NSString *payToken;
} AppMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "plan",
        .dataTypeSpecific.className = NULL,
        .number = AppMetadata_FieldNumber_Plan,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, plan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payToken",
        .dataTypeSpecific.className = NULL,
        .number = AppMetadata_FieldNumber_PayToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AppMetadata__storage_, payToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppMetadata class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessToken

@implementation AccessToken

@dynamic token;

typedef struct AccessToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} AccessToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = AccessToken_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccessToken__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessToken class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccessToken__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IDToken

@implementation IDToken

@dynamic token;

typedef struct IDToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} IDToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = IDToken_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IDToken__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IDToken class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IDToken__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RefreshToken

@implementation RefreshToken

@dynamic token;

typedef struct RefreshToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} RefreshToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = RefreshToken_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RefreshToken__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RefreshToken class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RefreshToken__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Tokens

@implementation Tokens

@dynamic hasId_p, id_p;
@dynamic hasAccess, access;
@dynamic hasRefresh, refresh;

typedef struct Tokens__storage_ {
  uint32_t _has_storage_[1];
  IDToken *id_p;
  AccessToken *access;
  RefreshToken *refresh;
} Tokens__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = GPBStringifySymbol(IDToken),
        .number = Tokens_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Tokens__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "access",
        .dataTypeSpecific.className = GPBStringifySymbol(AccessToken),
        .number = Tokens_FieldNumber_Access,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Tokens__storage_, access),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "refresh",
        .dataTypeSpecific.className = GPBStringifySymbol(RefreshToken),
        .number = Tokens_FieldNumber_Refresh,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Tokens__storage_, refresh),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Tokens class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Tokens__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Paths

@implementation Paths

@dynamic home;
@dynamic dashboard;
@dynamic logout;
@dynamic callback;
@dynamic login;
@dynamic loggedOutReturnTo;

typedef struct Paths__storage_ {
  uint32_t _has_storage_[1];
  NSString *home;
  NSString *dashboard;
  NSString *logout;
  NSString *callback;
  NSString *login;
  NSString *loggedOutReturnTo;
} Paths__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "home",
        .dataTypeSpecific.className = NULL,
        .number = Paths_FieldNumber_Home,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Paths__storage_, home),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dashboard",
        .dataTypeSpecific.className = NULL,
        .number = Paths_FieldNumber_Dashboard,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Paths__storage_, dashboard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logout",
        .dataTypeSpecific.className = NULL,
        .number = Paths_FieldNumber_Logout,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Paths__storage_, logout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "callback",
        .dataTypeSpecific.className = NULL,
        .number = Paths_FieldNumber_Callback,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Paths__storage_, callback),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "login",
        .dataTypeSpecific.className = NULL,
        .number = Paths_FieldNumber_Login,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Paths__storage_, login),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "loggedOutReturnTo",
        .dataTypeSpecific.className = NULL,
        .number = Paths_FieldNumber_LoggedOutReturnTo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Paths__storage_, loggedOutReturnTo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Paths class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Paths__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Auth0

@implementation Auth0

@dynamic domain;
@dynamic clientId;
@dynamic clientSecret;
@dynamic scopesArray, scopesArray_Count;
@dynamic redirect;
@dynamic resourceURL;

typedef struct Auth0__storage_ {
  uint32_t _has_storage_[1];
  NSString *domain;
  NSString *clientId;
  NSString *clientSecret;
  NSMutableArray *scopesArray;
  NSString *redirect;
  NSString *resourceURL;
} Auth0__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "domain",
        .dataTypeSpecific.className = NULL,
        .number = Auth0_FieldNumber_Domain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Auth0__storage_, domain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = Auth0_FieldNumber_ClientId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Auth0__storage_, clientId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientSecret",
        .dataTypeSpecific.className = NULL,
        .number = Auth0_FieldNumber_ClientSecret,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Auth0__storage_, clientSecret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scopesArray",
        .dataTypeSpecific.className = NULL,
        .number = Auth0_FieldNumber_ScopesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Auth0__storage_, scopesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "redirect",
        .dataTypeSpecific.className = NULL,
        .number = Auth0_FieldNumber_Redirect,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Auth0__storage_, redirect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "resourceURL",
        .dataTypeSpecific.className = NULL,
        .number = Auth0_FieldNumber_ResourceURL,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Auth0__storage_, resourceURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Auth0 class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Auth0__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\010\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
