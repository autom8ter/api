// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[30];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class Auth;
class AuthDefaultTypeInternal;
extern AuthDefaultTypeInternal _Auth_default_instance_;
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class CallBlast;
class CallBlastDefaultTypeInternal;
extern CallBlastDefaultTypeInternal _CallBlast_default_instance_;
class CallResponse;
class CallResponseDefaultTypeInternal;
extern CallResponseDefaultTypeInternal _CallResponse_default_instance_;
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class Email;
class EmailDefaultTypeInternal;
extern EmailDefaultTypeInternal _Email_default_instance_;
class EmailBlast;
class EmailBlastDefaultTypeInternal;
extern EmailBlastDefaultTypeInternal _EmailBlast_default_instance_;
class EmailBlastRequest;
class EmailBlastRequestDefaultTypeInternal;
extern EmailBlastRequestDefaultTypeInternal _EmailBlastRequest_default_instance_;
class EmailRequest;
class EmailRequestDefaultTypeInternal;
extern EmailRequestDefaultTypeInternal _EmailRequest_default_instance_;
class FaxRequest;
class FaxRequestDefaultTypeInternal;
extern FaxRequestDefaultTypeInternal _FaxRequest_default_instance_;
class FaxResponse;
class FaxResponseDefaultTypeInternal;
extern FaxResponseDefaultTypeInternal _FaxResponse_default_instance_;
class IDBody;
class IDBodyDefaultTypeInternal;
extern IDBodyDefaultTypeInternal _IDBody_default_instance_;
class IDStrings;
class IDStringsDefaultTypeInternal;
extern IDStringsDefaultTypeInternal _IDStrings_default_instance_;
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class JSONWebKeys;
class JSONWebKeysDefaultTypeInternal;
extern JSONWebKeysDefaultTypeInternal _JSONWebKeys_default_instance_;
class Jwks;
class JwksDefaultTypeInternal;
extern JwksDefaultTypeInternal _Jwks_default_instance_;
class NumberCapabilities;
class NumberCapabilitiesDefaultTypeInternal;
extern NumberCapabilitiesDefaultTypeInternal _NumberCapabilities_default_instance_;
class PhoneNumber;
class PhoneNumberDefaultTypeInternal;
extern PhoneNumberDefaultTypeInternal _PhoneNumber_default_instance_;
class PhoneNumberResource;
class PhoneNumberResourceDefaultTypeInternal;
extern PhoneNumberResourceDefaultTypeInternal _PhoneNumberResource_default_instance_;
class RenderRequest;
class RenderRequestDefaultTypeInternal;
extern RenderRequestDefaultTypeInternal _RenderRequest_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class SMS;
class SMSDefaultTypeInternal;
extern SMSDefaultTypeInternal _SMS_default_instance_;
class SMSBlast;
class SMSBlastDefaultTypeInternal;
extern SMSBlastDefaultTypeInternal _SMSBlast_default_instance_;
class SMSResponse;
class SMSResponseDefaultTypeInternal;
extern SMSResponseDefaultTypeInternal _SMSResponse_default_instance_;
class SearchPhoneNumberRequest;
class SearchPhoneNumberRequestDefaultTypeInternal;
extern SearchPhoneNumberRequestDefaultTypeInternal _SearchPhoneNumberRequest_default_instance_;
class SubscribeRequest;
class SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class SubscriptionResponse;
class SubscriptionResponseDefaultTypeInternal;
extern SubscriptionResponseDefaultTypeInternal _SubscriptionResponse_default_instance_;
class TokenQuery;
class TokenQueryDefaultTypeInternal;
extern TokenQueryDefaultTypeInternal _TokenQuery_default_instance_;
class UnSubscribeRequest;
class UnSubscribeRequestDefaultTypeInternal;
extern UnSubscribeRequestDefaultTypeInternal _UnSubscribeRequest_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::Auth* Arena::CreateMaybeMessage<::api::Auth>(Arena*);
template<> ::api::Call* Arena::CreateMaybeMessage<::api::Call>(Arena*);
template<> ::api::CallBlast* Arena::CreateMaybeMessage<::api::CallBlast>(Arena*);
template<> ::api::CallResponse* Arena::CreateMaybeMessage<::api::CallResponse>(Arena*);
template<> ::api::Card* Arena::CreateMaybeMessage<::api::Card>(Arena*);
template<> ::api::Email* Arena::CreateMaybeMessage<::api::Email>(Arena*);
template<> ::api::EmailBlast* Arena::CreateMaybeMessage<::api::EmailBlast>(Arena*);
template<> ::api::EmailBlastRequest* Arena::CreateMaybeMessage<::api::EmailBlastRequest>(Arena*);
template<> ::api::EmailRequest* Arena::CreateMaybeMessage<::api::EmailRequest>(Arena*);
template<> ::api::FaxRequest* Arena::CreateMaybeMessage<::api::FaxRequest>(Arena*);
template<> ::api::FaxResponse* Arena::CreateMaybeMessage<::api::FaxResponse>(Arena*);
template<> ::api::IDBody* Arena::CreateMaybeMessage<::api::IDBody>(Arena*);
template<> ::api::IDStrings* Arena::CreateMaybeMessage<::api::IDStrings>(Arena*);
template<> ::api::Identity* Arena::CreateMaybeMessage<::api::Identity>(Arena*);
template<> ::api::JSONWebKeys* Arena::CreateMaybeMessage<::api::JSONWebKeys>(Arena*);
template<> ::api::Jwks* Arena::CreateMaybeMessage<::api::Jwks>(Arena*);
template<> ::api::NumberCapabilities* Arena::CreateMaybeMessage<::api::NumberCapabilities>(Arena*);
template<> ::api::PhoneNumber* Arena::CreateMaybeMessage<::api::PhoneNumber>(Arena*);
template<> ::api::PhoneNumberResource* Arena::CreateMaybeMessage<::api::PhoneNumberResource>(Arena*);
template<> ::api::RenderRequest* Arena::CreateMaybeMessage<::api::RenderRequest>(Arena*);
template<> ::api::Role* Arena::CreateMaybeMessage<::api::Role>(Arena*);
template<> ::api::SMS* Arena::CreateMaybeMessage<::api::SMS>(Arena*);
template<> ::api::SMSBlast* Arena::CreateMaybeMessage<::api::SMSBlast>(Arena*);
template<> ::api::SMSResponse* Arena::CreateMaybeMessage<::api::SMSResponse>(Arena*);
template<> ::api::SearchPhoneNumberRequest* Arena::CreateMaybeMessage<::api::SearchPhoneNumberRequest>(Arena*);
template<> ::api::SubscribeRequest* Arena::CreateMaybeMessage<::api::SubscribeRequest>(Arena*);
template<> ::api::SubscriptionResponse* Arena::CreateMaybeMessage<::api::SubscriptionResponse>(Arena*);
template<> ::api::TokenQuery* Arena::CreateMaybeMessage<::api::TokenQuery>(Arena*);
template<> ::api::UnSubscribeRequest* Arena::CreateMaybeMessage<::api::UnSubscribeRequest>(Arena*);
template<> ::api::User* Arena::CreateMaybeMessage<::api::User>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

enum Scope {
  OPENID = 0,
  PROFILE = 1,
  EMAIL = 2,
  READ_USERS = 3,
  READ_USER_IDP_TOKENS = 4,
  CREATE_USERS = 5,
  READ_STATS = 6,
  READ_EMAIL_TEMPLATES = 7,
  UPDATE_EMAIL_TEMPLATES = 8,
  CREATE_EMAIL_TEMPLATES = 9,
  READ_RULES = 10,
  UPDATE_RULES = 11,
  CREATE_RULES = 12,
  DELETE_RULES = 13,
  READ_ROLES = 14,
  UPDATE_ROLES = 15,
  CREATE_ROLES = 16,
  DELETE_ROLES = 17,
  READ_LOGS = 18,
  Scope_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Scope_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Scope_IsValid(int value);
const Scope Scope_MIN = OPENID;
const Scope Scope_MAX = READ_LOGS;
const int Scope_ARRAYSIZE = Scope_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scope_descriptor();
inline const ::std::string& Scope_Name(Scope value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scope_descriptor(), value);
}
inline bool Scope_Parse(
    const ::std::string& name, Scope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scope>(
    Scope_descriptor(), name, value);
}
enum URL {
  USER_INFOURL = 0,
  TOKENURL = 1,
  AUTHORIZEURL = 2,
  USERSURL = 3,
  CLIENTSURL = 4,
  GRANTSURL = 5,
  RULESURL = 6,
  ROLESURL = 7,
  LOGSURL = 8,
  STATSURL = 9,
  CONNECTIONSURL = 10,
  TENANTSURL = 11,
  EMAIL_TEMPLATEURL = 12,
  EMAILURL = 13,
  SEARCH_USERSURL = 14,
  DEVICEURL = 18,
  JWKSURL = 19,
  CLIENT_GRANTSURL = 20,
  URL_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  URL_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool URL_IsValid(int value);
const URL URL_MIN = USER_INFOURL;
const URL URL_MAX = CLIENT_GRANTSURL;
const int URL_ARRAYSIZE = URL_MAX + 1;

const ::google::protobuf::EnumDescriptor* URL_descriptor();
inline const ::std::string& URL_Name(URL value) {
  return ::google::protobuf::internal::NameOfEnum(
    URL_descriptor(), value);
}
inline bool URL_Parse(
    const ::std::string& name, URL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<URL>(
    URL_descriptor(), name, value);
}
enum Plan {
  FREE = 0,
  BASIC = 1,
  PREMIUM = 2,
  Plan_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Plan_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Plan_IsValid(int value);
const Plan Plan_MIN = FREE;
const Plan Plan_MAX = PREMIUM;
const int Plan_ARRAYSIZE = Plan_MAX + 1;

const ::google::protobuf::EnumDescriptor* Plan_descriptor();
inline const ::std::string& Plan_Name(Plan value) {
  return ::google::protobuf::internal::NameOfEnum(
    Plan_descriptor(), value);
}
inline bool Plan_Parse(
    const ::std::string& name, Plan* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Plan>(
    Plan_descriptor(), name, value);
}
// ===================================================================

class FaxRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.FaxRequest) */ {
 public:
  FaxRequest();
  virtual ~FaxRequest();

  FaxRequest(const FaxRequest& from);

  inline FaxRequest& operator=(const FaxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaxRequest(FaxRequest&& from) noexcept
    : FaxRequest() {
    *this = ::std::move(from);
  }

  inline FaxRequest& operator=(FaxRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaxRequest* internal_default_instance() {
    return reinterpret_cast<const FaxRequest*>(
               &_FaxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FaxRequest* other);
  friend void swap(FaxRequest& a, FaxRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaxRequest* New() const final {
    return CreateMaybeMessage<FaxRequest>(NULL);
  }

  FaxRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FaxRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FaxRequest& from);
  void MergeFrom(const FaxRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaxRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String to = 1;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 1;
  private:
  const ::common::String& _internal_to() const;
  public:
  const ::common::String& to() const;
  ::common::String* release_to();
  ::common::String* mutable_to();
  void set_allocated_to(::common::String* to);

  // .common.String from = 2;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 2;
  private:
  const ::common::String& _internal_from() const;
  public:
  const ::common::String& from() const;
  ::common::String* release_from();
  ::common::String* mutable_from();
  void set_allocated_from(::common::String* from);

  // .common.String media_url = 3;
  bool has_media_url() const;
  void clear_media_url();
  static const int kMediaUrlFieldNumber = 3;
  private:
  const ::common::String& _internal_media_url() const;
  public:
  const ::common::String& media_url() const;
  ::common::String* release_media_url();
  ::common::String* mutable_media_url();
  void set_allocated_media_url(::common::String* media_url);

  // .common.String quality = 4;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 4;
  private:
  const ::common::String& _internal_quality() const;
  public:
  const ::common::String& quality() const;
  ::common::String* release_quality();
  ::common::String* mutable_quality();
  void set_allocated_quality(::common::String* quality);

  // .common.String callback = 5;
  bool has_callback() const;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  private:
  const ::common::String& _internal_callback() const;
  public:
  const ::common::String& callback() const;
  ::common::String* release_callback();
  ::common::String* mutable_callback();
  void set_allocated_callback(::common::String* callback);

  // bool store_media = 6;
  void clear_store_media();
  static const int kStoreMediaFieldNumber = 6;
  bool store_media() const;
  void set_store_media(bool value);

  // @@protoc_insertion_point(class_scope:api.FaxRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* to_;
  ::common::String* from_;
  ::common::String* media_url_;
  ::common::String* quality_;
  ::common::String* callback_;
  bool store_media_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubscribeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SubscribeRequest) */ {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SubscribeRequest* other);
  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const final {
    return CreateMaybeMessage<SubscribeRequest>(NULL);
  }

  SubscribeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String email = 1;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  private:
  const ::common::String& _internal_email() const;
  public:
  const ::common::String& email() const;
  ::common::String* release_email();
  ::common::String* mutable_email();
  void set_allocated_email(::common::String* email);

  // .api.Card card = 3;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 3;
  private:
  const ::api::Card& _internal_card() const;
  public:
  const ::api::Card& card() const;
  ::api::Card* release_card();
  ::api::Card* mutable_card();
  void set_allocated_card(::api::Card* card);

  // .api.Plan plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  ::api::Plan plan() const;
  void set_plan(::api::Plan value);

  // @@protoc_insertion_point(class_scope:api.SubscribeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* email_;
  ::api::Card* card_;
  int plan_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnSubscribeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UnSubscribeRequest) */ {
 public:
  UnSubscribeRequest();
  virtual ~UnSubscribeRequest();

  UnSubscribeRequest(const UnSubscribeRequest& from);

  inline UnSubscribeRequest& operator=(const UnSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnSubscribeRequest(UnSubscribeRequest&& from) noexcept
    : UnSubscribeRequest() {
    *this = ::std::move(from);
  }

  inline UnSubscribeRequest& operator=(UnSubscribeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnSubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnSubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const UnSubscribeRequest*>(
               &_UnSubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UnSubscribeRequest* other);
  friend void swap(UnSubscribeRequest& a, UnSubscribeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnSubscribeRequest* New() const final {
    return CreateMaybeMessage<UnSubscribeRequest>(NULL);
  }

  UnSubscribeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnSubscribeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnSubscribeRequest& from);
  void MergeFrom(const UnSubscribeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnSubscribeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String email = 1;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 1;
  private:
  const ::common::String& _internal_email() const;
  public:
  const ::common::String& email() const;
  ::common::String* release_email();
  ::common::String* mutable_email();
  void set_allocated_email(::common::String* email);

  // .api.Plan plan = 2;
  void clear_plan();
  static const int kPlanFieldNumber = 2;
  ::api::Plan plan() const;
  void set_plan(::api::Plan value);

  // @@protoc_insertion_point(class_scope:api.UnSubscribeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* email_;
  int plan_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(Card&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Card* other);
  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return CreateMaybeMessage<Card>(NULL);
  }

  Card* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String number = 1;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  private:
  const ::common::String& _internal_number() const;
  public:
  const ::common::String& number() const;
  ::common::String* release_number();
  ::common::String* mutable_number();
  void set_allocated_number(::common::String* number);

  // .common.String exp_month = 2;
  bool has_exp_month() const;
  void clear_exp_month();
  static const int kExpMonthFieldNumber = 2;
  private:
  const ::common::String& _internal_exp_month() const;
  public:
  const ::common::String& exp_month() const;
  ::common::String* release_exp_month();
  ::common::String* mutable_exp_month();
  void set_allocated_exp_month(::common::String* exp_month);

  // .common.String exp_year = 3;
  bool has_exp_year() const;
  void clear_exp_year();
  static const int kExpYearFieldNumber = 3;
  private:
  const ::common::String& _internal_exp_year() const;
  public:
  const ::common::String& exp_year() const;
  ::common::String* release_exp_year();
  ::common::String* mutable_exp_year();
  void set_allocated_exp_year(::common::String* exp_year);

  // .common.String cvc = 4;
  bool has_cvc() const;
  void clear_cvc();
  static const int kCvcFieldNumber = 4;
  private:
  const ::common::String& _internal_cvc() const;
  public:
  const ::common::String& cvc() const;
  ::common::String* release_cvc();
  ::common::String* mutable_cvc();
  void set_allocated_cvc(::common::String* cvc);

  // @@protoc_insertion_point(class_scope:api.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* number_;
  ::common::String* exp_month_;
  ::common::String* exp_year_;
  ::common::String* cvc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMS) */ {
 public:
  SMS();
  virtual ~SMS();

  SMS(const SMS& from);

  inline SMS& operator=(const SMS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMS(SMS&& from) noexcept
    : SMS() {
    *this = ::std::move(from);
  }

  inline SMS& operator=(SMS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMS* internal_default_instance() {
    return reinterpret_cast<const SMS*>(
               &_SMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SMS* other);
  friend void swap(SMS& a, SMS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMS* New() const final {
    return CreateMaybeMessage<SMS>(NULL);
  }

  SMS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMS& from);
  void MergeFrom(const SMS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String service = 1;
  bool has_service() const;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  private:
  const ::common::String& _internal_service() const;
  public:
  const ::common::String& service() const;
  ::common::String* release_service();
  ::common::String* mutable_service();
  void set_allocated_service(::common::String* service);

  // .common.String to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  private:
  const ::common::String& _internal_to() const;
  public:
  const ::common::String& to() const;
  ::common::String* release_to();
  ::common::String* mutable_to();
  void set_allocated_to(::common::String* to);

  // .common.String message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  private:
  const ::common::String& _internal_message() const;
  public:
  const ::common::String& message() const;
  ::common::String* release_message();
  ::common::String* mutable_message();
  void set_allocated_message(::common::String* message);

  // .common.String mediaURL = 4;
  bool has_mediaurl() const;
  void clear_mediaurl();
  static const int kMediaURLFieldNumber = 4;
  private:
  const ::common::String& _internal_mediaurl() const;
  public:
  const ::common::String& mediaurl() const;
  ::common::String* release_mediaurl();
  ::common::String* mutable_mediaurl();
  void set_allocated_mediaurl(::common::String* mediaurl);

  // .common.String callback = 5;
  bool has_callback() const;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  private:
  const ::common::String& _internal_callback() const;
  public:
  const ::common::String& callback() const;
  ::common::String* release_callback();
  ::common::String* mutable_callback();
  void set_allocated_callback(::common::String* callback);

  // .common.String app = 6;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 6;
  private:
  const ::common::String& _internal_app() const;
  public:
  const ::common::String& app() const;
  ::common::String* release_app();
  ::common::String* mutable_app();
  void set_allocated_app(::common::String* app);

  // @@protoc_insertion_point(class_scope:api.SMS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* service_;
  ::common::String* to_;
  ::common::String* message_;
  ::common::String* mediaurl_;
  ::common::String* callback_;
  ::common::String* app_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMSBlast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMSBlast) */ {
 public:
  SMSBlast();
  virtual ~SMSBlast();

  SMSBlast(const SMSBlast& from);

  inline SMSBlast& operator=(const SMSBlast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMSBlast(SMSBlast&& from) noexcept
    : SMSBlast() {
    *this = ::std::move(from);
  }

  inline SMSBlast& operator=(SMSBlast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSBlast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSBlast* internal_default_instance() {
    return reinterpret_cast<const SMSBlast*>(
               &_SMSBlast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SMSBlast* other);
  friend void swap(SMSBlast& a, SMSBlast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMSBlast* New() const final {
    return CreateMaybeMessage<SMSBlast>(NULL);
  }

  SMSBlast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMSBlast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMSBlast& from);
  void MergeFrom(const SMSBlast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSBlast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String service = 1;
  bool has_service() const;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  private:
  const ::common::String& _internal_service() const;
  public:
  const ::common::String& service() const;
  ::common::String* release_service();
  ::common::String* mutable_service();
  void set_allocated_service(::common::String* service);

  // .common.StringArray to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  private:
  const ::common::StringArray& _internal_to() const;
  public:
  const ::common::StringArray& to() const;
  ::common::StringArray* release_to();
  ::common::StringArray* mutable_to();
  void set_allocated_to(::common::StringArray* to);

  // .common.String message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  private:
  const ::common::String& _internal_message() const;
  public:
  const ::common::String& message() const;
  ::common::String* release_message();
  ::common::String* mutable_message();
  void set_allocated_message(::common::String* message);

  // .common.String mediaURL = 4;
  bool has_mediaurl() const;
  void clear_mediaurl();
  static const int kMediaURLFieldNumber = 4;
  private:
  const ::common::String& _internal_mediaurl() const;
  public:
  const ::common::String& mediaurl() const;
  ::common::String* release_mediaurl();
  ::common::String* mutable_mediaurl();
  void set_allocated_mediaurl(::common::String* mediaurl);

  // .common.String callback = 5;
  bool has_callback() const;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  private:
  const ::common::String& _internal_callback() const;
  public:
  const ::common::String& callback() const;
  ::common::String* release_callback();
  ::common::String* mutable_callback();
  void set_allocated_callback(::common::String* callback);

  // .common.String app = 6;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 6;
  private:
  const ::common::String& _internal_app() const;
  public:
  const ::common::String& app() const;
  ::common::String* release_app();
  ::common::String* mutable_app();
  void set_allocated_app(::common::String* app);

  // @@protoc_insertion_point(class_scope:api.SMSBlast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* service_;
  ::common::StringArray* to_;
  ::common::String* message_;
  ::common::String* mediaurl_;
  ::common::String* callback_;
  ::common::String* app_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailRequest) */ {
 public:
  EmailRequest();
  virtual ~EmailRequest();

  EmailRequest(const EmailRequest& from);

  inline EmailRequest& operator=(const EmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailRequest(EmailRequest&& from) noexcept
    : EmailRequest() {
    *this = ::std::move(from);
  }

  inline EmailRequest& operator=(EmailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailRequest* internal_default_instance() {
    return reinterpret_cast<const EmailRequest*>(
               &_EmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(EmailRequest* other);
  friend void swap(EmailRequest& a, EmailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailRequest* New() const final {
    return CreateMaybeMessage<EmailRequest>(NULL);
  }

  EmailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailRequest& from);
  void MergeFrom(const EmailRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String from_name = 1;
  bool has_from_name() const;
  void clear_from_name();
  static const int kFromNameFieldNumber = 1;
  private:
  const ::common::String& _internal_from_name() const;
  public:
  const ::common::String& from_name() const;
  ::common::String* release_from_name();
  ::common::String* mutable_from_name();
  void set_allocated_from_name(::common::String* from_name);

  // .common.String from_email = 2;
  bool has_from_email() const;
  void clear_from_email();
  static const int kFromEmailFieldNumber = 2;
  private:
  const ::common::String& _internal_from_email() const;
  public:
  const ::common::String& from_email() const;
  ::common::String* release_from_email();
  ::common::String* mutable_from_email();
  void set_allocated_from_email(::common::String* from_email);

  // .api.Email email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  private:
  const ::api::Email& _internal_email() const;
  public:
  const ::api::Email& email() const;
  ::api::Email* release_email();
  ::api::Email* mutable_email();
  void set_allocated_email(::api::Email* email);

  // @@protoc_insertion_point(class_scope:api.EmailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* from_name_;
  ::common::String* from_email_;
  ::api::Email* email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailBlastRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailBlastRequest) */ {
 public:
  EmailBlastRequest();
  virtual ~EmailBlastRequest();

  EmailBlastRequest(const EmailBlastRequest& from);

  inline EmailBlastRequest& operator=(const EmailBlastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailBlastRequest(EmailBlastRequest&& from) noexcept
    : EmailBlastRequest() {
    *this = ::std::move(from);
  }

  inline EmailBlastRequest& operator=(EmailBlastRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailBlastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailBlastRequest* internal_default_instance() {
    return reinterpret_cast<const EmailBlastRequest*>(
               &_EmailBlastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(EmailBlastRequest* other);
  friend void swap(EmailBlastRequest& a, EmailBlastRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailBlastRequest* New() const final {
    return CreateMaybeMessage<EmailBlastRequest>(NULL);
  }

  EmailBlastRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailBlastRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailBlastRequest& from);
  void MergeFrom(const EmailBlastRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailBlastRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String from_name = 1;
  bool has_from_name() const;
  void clear_from_name();
  static const int kFromNameFieldNumber = 1;
  private:
  const ::common::String& _internal_from_name() const;
  public:
  const ::common::String& from_name() const;
  ::common::String* release_from_name();
  ::common::String* mutable_from_name();
  void set_allocated_from_name(::common::String* from_name);

  // .common.String from_email = 2;
  bool has_from_email() const;
  void clear_from_email();
  static const int kFromEmailFieldNumber = 2;
  private:
  const ::common::String& _internal_from_email() const;
  public:
  const ::common::String& from_email() const;
  ::common::String* release_from_email();
  ::common::String* mutable_from_email();
  void set_allocated_from_email(::common::String* from_email);

  // .api.EmailBlast blast = 3;
  bool has_blast() const;
  void clear_blast();
  static const int kBlastFieldNumber = 3;
  private:
  const ::api::EmailBlast& _internal_blast() const;
  public:
  const ::api::EmailBlast& blast() const;
  ::api::EmailBlast* release_blast();
  ::api::EmailBlast* mutable_blast();
  void set_allocated_blast(::api::EmailBlast* blast);

  // @@protoc_insertion_point(class_scope:api.EmailBlastRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* from_name_;
  ::common::String* from_email_;
  ::api::EmailBlast* blast_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmailBlast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EmailBlast) */ {
 public:
  EmailBlast();
  virtual ~EmailBlast();

  EmailBlast(const EmailBlast& from);

  inline EmailBlast& operator=(const EmailBlast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailBlast(EmailBlast&& from) noexcept
    : EmailBlast() {
    *this = ::std::move(from);
  }

  inline EmailBlast& operator=(EmailBlast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailBlast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailBlast* internal_default_instance() {
    return reinterpret_cast<const EmailBlast*>(
               &_EmailBlast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(EmailBlast* other);
  friend void swap(EmailBlast& a, EmailBlast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailBlast* New() const final {
    return CreateMaybeMessage<EmailBlast>(NULL);
  }

  EmailBlast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailBlast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailBlast& from);
  void MergeFrom(const EmailBlast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailBlast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.StringMap name_address = 1;
  bool has_name_address() const;
  void clear_name_address();
  static const int kNameAddressFieldNumber = 1;
  private:
  const ::common::StringMap& _internal_name_address() const;
  public:
  const ::common::StringMap& name_address() const;
  ::common::StringMap* release_name_address();
  ::common::StringMap* mutable_name_address();
  void set_allocated_name_address(::common::StringMap* name_address);

  // .common.String subject = 2;
  bool has_subject() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  private:
  const ::common::String& _internal_subject() const;
  public:
  const ::common::String& subject() const;
  ::common::String* release_subject();
  ::common::String* mutable_subject();
  void set_allocated_subject(::common::String* subject);

  // .common.String plain = 3;
  bool has_plain() const;
  void clear_plain();
  static const int kPlainFieldNumber = 3;
  private:
  const ::common::String& _internal_plain() const;
  public:
  const ::common::String& plain() const;
  ::common::String* release_plain();
  ::common::String* mutable_plain();
  void set_allocated_plain(::common::String* plain);

  // .common.String html = 4;
  bool has_html() const;
  void clear_html();
  static const int kHtmlFieldNumber = 4;
  private:
  const ::common::String& _internal_html() const;
  public:
  const ::common::String& html() const;
  ::common::String* release_html();
  ::common::String* mutable_html();
  void set_allocated_html(::common::String* html);

  // @@protoc_insertion_point(class_scope:api.EmailBlast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::StringMap* name_address_;
  ::common::String* subject_;
  ::common::String* plain_;
  ::common::String* html_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Email : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Email) */ {
 public:
  Email();
  virtual ~Email();

  Email(const Email& from);

  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Email(Email&& from) noexcept
    : Email() {
    *this = ::std::move(from);
  }

  inline Email& operator=(Email&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Email& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Email* internal_default_instance() {
    return reinterpret_cast<const Email*>(
               &_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Email* other);
  friend void swap(Email& a, Email& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Email* New() const final {
    return CreateMaybeMessage<Email>(NULL);
  }

  Email* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Email>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Email* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  private:
  const ::common::String& _internal_name() const;
  public:
  const ::common::String& name() const;
  ::common::String* release_name();
  ::common::String* mutable_name();
  void set_allocated_name(::common::String* name);

  // .common.String address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  private:
  const ::common::String& _internal_address() const;
  public:
  const ::common::String& address() const;
  ::common::String* release_address();
  ::common::String* mutable_address();
  void set_allocated_address(::common::String* address);

  // .common.String subject = 3;
  bool has_subject() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 3;
  private:
  const ::common::String& _internal_subject() const;
  public:
  const ::common::String& subject() const;
  ::common::String* release_subject();
  ::common::String* mutable_subject();
  void set_allocated_subject(::common::String* subject);

  // .common.String plain = 4;
  bool has_plain() const;
  void clear_plain();
  static const int kPlainFieldNumber = 4;
  private:
  const ::common::String& _internal_plain() const;
  public:
  const ::common::String& plain() const;
  ::common::String* release_plain();
  ::common::String* mutable_plain();
  void set_allocated_plain(::common::String* plain);

  // .common.String html = 5;
  bool has_html() const;
  void clear_html();
  static const int kHtmlFieldNumber = 5;
  private:
  const ::common::String& _internal_html() const;
  public:
  const ::common::String& html() const;
  ::common::String* release_html();
  ::common::String* mutable_html();
  void set_allocated_html(::common::String* html);

  // @@protoc_insertion_point(class_scope:api.Email)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* name_;
  ::common::String* address_;
  ::common::String* subject_;
  ::common::String* plain_;
  ::common::String* html_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const final {
    return CreateMaybeMessage<Call>(NULL);
  }

  Call* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Call>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  private:
  const ::common::String& _internal_from() const;
  public:
  const ::common::String& from() const;
  ::common::String* release_from();
  ::common::String* mutable_from();
  void set_allocated_from(::common::String* from);

  // .common.String to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  private:
  const ::common::String& _internal_to() const;
  public:
  const ::common::String& to() const;
  ::common::String* release_to();
  ::common::String* mutable_to();
  void set_allocated_to(::common::String* to);

  // .common.String app = 3;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 3;
  private:
  const ::common::String& _internal_app() const;
  public:
  const ::common::String& app() const;
  ::common::String* release_app();
  ::common::String* mutable_app();
  void set_allocated_app(::common::String* app);

  // @@protoc_insertion_point(class_scope:api.Call)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* from_;
  ::common::String* to_;
  ::common::String* app_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CallBlast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CallBlast) */ {
 public:
  CallBlast();
  virtual ~CallBlast();

  CallBlast(const CallBlast& from);

  inline CallBlast& operator=(const CallBlast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallBlast(CallBlast&& from) noexcept
    : CallBlast() {
    *this = ::std::move(from);
  }

  inline CallBlast& operator=(CallBlast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallBlast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallBlast* internal_default_instance() {
    return reinterpret_cast<const CallBlast*>(
               &_CallBlast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CallBlast* other);
  friend void swap(CallBlast& a, CallBlast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallBlast* New() const final {
    return CreateMaybeMessage<CallBlast>(NULL);
  }

  CallBlast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallBlast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallBlast& from);
  void MergeFrom(const CallBlast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallBlast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  private:
  const ::common::String& _internal_from() const;
  public:
  const ::common::String& from() const;
  ::common::String* release_from();
  ::common::String* mutable_from();
  void set_allocated_from(::common::String* from);

  // .common.StringArray to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  private:
  const ::common::StringArray& _internal_to() const;
  public:
  const ::common::StringArray& to() const;
  ::common::StringArray* release_to();
  ::common::StringArray* mutable_to();
  void set_allocated_to(::common::StringArray* to);

  // .common.String app = 3;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 3;
  private:
  const ::common::String& _internal_app() const;
  public:
  const ::common::String& app() const;
  ::common::String* release_app();
  ::common::String* mutable_app();
  void set_allocated_app(::common::String* app);

  // @@protoc_insertion_point(class_scope:api.CallBlast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* from_;
  ::common::StringArray* to_;
  ::common::String* app_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.Identity identities = 22;
  int identities_size() const;
  void clear_identities();
  static const int kIdentitiesFieldNumber = 22;
  ::api::Identity* mutable_identities(int index);
  ::google::protobuf::RepeatedPtrField< ::api::Identity >*
      mutable_identities();
  const ::api::Identity& identities(int index) const;
  ::api::Identity* add_identities();
  const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
      identities() const;

  // .common.Identifier user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_user_id() const;
  public:
  const ::common::Identifier& user_id() const;
  ::common::Identifier* release_user_id();
  ::common::Identifier* mutable_user_id();
  void set_allocated_user_id(::common::Identifier* user_id);

  // .common.String name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  private:
  const ::common::String& _internal_name() const;
  public:
  const ::common::String& name() const;
  ::common::String* release_name();
  ::common::String* mutable_name();
  void set_allocated_name(::common::String* name);

  // .common.String given_name = 3;
  bool has_given_name() const;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 3;
  private:
  const ::common::String& _internal_given_name() const;
  public:
  const ::common::String& given_name() const;
  ::common::String* release_given_name();
  ::common::String* mutable_given_name();
  void set_allocated_given_name(::common::String* given_name);

  // .common.String family_name = 4;
  bool has_family_name() const;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 4;
  private:
  const ::common::String& _internal_family_name() const;
  public:
  const ::common::String& family_name() const;
  ::common::String* release_family_name();
  ::common::String* mutable_family_name();
  void set_allocated_family_name(::common::String* family_name);

  // .common.String gender = 5;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 5;
  private:
  const ::common::String& _internal_gender() const;
  public:
  const ::common::String& gender() const;
  ::common::String* release_gender();
  ::common::String* mutable_gender();
  void set_allocated_gender(::common::String* gender);

  // .common.String birthdate = 6;
  bool has_birthdate() const;
  void clear_birthdate();
  static const int kBirthdateFieldNumber = 6;
  private:
  const ::common::String& _internal_birthdate() const;
  public:
  const ::common::String& birthdate() const;
  ::common::String* release_birthdate();
  ::common::String* mutable_birthdate();
  void set_allocated_birthdate(::common::String* birthdate);

  // .common.Identifier email = 7;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 7;
  private:
  const ::common::Identifier& _internal_email() const;
  public:
  const ::common::Identifier& email() const;
  ::common::Identifier* release_email();
  ::common::Identifier* mutable_email();
  void set_allocated_email(::common::Identifier* email);

  // .common.Identifier phone_number = 8;
  bool has_phone_number() const;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 8;
  private:
  const ::common::Identifier& _internal_phone_number() const;
  public:
  const ::common::Identifier& phone_number() const;
  ::common::Identifier* release_phone_number();
  ::common::Identifier* mutable_phone_number();
  void set_allocated_phone_number(::common::Identifier* phone_number);

  // .common.String picture = 9;
  bool has_picture() const;
  void clear_picture();
  static const int kPictureFieldNumber = 9;
  private:
  const ::common::String& _internal_picture() const;
  public:
  const ::common::String& picture() const;
  ::common::String* release_picture();
  ::common::String* mutable_picture();
  void set_allocated_picture(::common::String* picture);

  // .common.StringMap user_metadata = 10;
  bool has_user_metadata() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 10;
  private:
  const ::common::StringMap& _internal_user_metadata() const;
  public:
  const ::common::StringMap& user_metadata() const;
  ::common::StringMap* release_user_metadata();
  ::common::StringMap* mutable_user_metadata();
  void set_allocated_user_metadata(::common::StringMap* user_metadata);

  // .common.StringMap app_metadata = 11;
  bool has_app_metadata() const;
  void clear_app_metadata();
  static const int kAppMetadataFieldNumber = 11;
  private:
  const ::common::StringMap& _internal_app_metadata() const;
  public:
  const ::common::StringMap& app_metadata() const;
  ::common::StringMap* release_app_metadata();
  ::common::StringMap* mutable_app_metadata();
  void set_allocated_app_metadata(::common::StringMap* app_metadata);

  // .common.String last_ip = 12;
  bool has_last_ip() const;
  void clear_last_ip();
  static const int kLastIpFieldNumber = 12;
  private:
  const ::common::String& _internal_last_ip() const;
  public:
  const ::common::String& last_ip() const;
  ::common::String* release_last_ip();
  ::common::String* mutable_last_ip();
  void set_allocated_last_ip(::common::String* last_ip);

  // .common.String nickname = 14;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 14;
  private:
  const ::common::String& _internal_nickname() const;
  public:
  const ::common::String& nickname() const;
  ::common::String* release_nickname();
  ::common::String* mutable_nickname();
  void set_allocated_nickname(::common::String* nickname);

  // .common.StringArray multifactor = 15;
  bool has_multifactor() const;
  void clear_multifactor();
  static const int kMultifactorFieldNumber = 15;
  private:
  const ::common::StringArray& _internal_multifactor() const;
  public:
  const ::common::StringArray& multifactor() const;
  ::common::StringArray* release_multifactor();
  ::common::StringArray* mutable_multifactor();
  void set_allocated_multifactor(::common::StringArray* multifactor);

  // .common.String created_at = 17;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 17;
  private:
  const ::common::String& _internal_created_at() const;
  public:
  const ::common::String& created_at() const;
  ::common::String* release_created_at();
  ::common::String* mutable_created_at();
  void set_allocated_created_at(::common::String* created_at);

  // .common.String updated_at = 18;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 18;
  private:
  const ::common::String& _internal_updated_at() const;
  public:
  const ::common::String& updated_at() const;
  ::common::String* release_updated_at();
  ::common::String* mutable_updated_at();
  void set_allocated_updated_at(::common::String* updated_at);

  // .common.String password = 21;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 21;
  private:
  const ::common::String& _internal_password() const;
  public:
  const ::common::String& password() const;
  ::common::String* release_password();
  ::common::String* mutable_password();
  void set_allocated_password(::common::String* password);

  // bool blocked = 13;
  void clear_blocked();
  static const int kBlockedFieldNumber = 13;
  bool blocked() const;
  void set_blocked(bool value);

  // bool phone_verified = 19;
  void clear_phone_verified();
  static const int kPhoneVerifiedFieldNumber = 19;
  bool phone_verified() const;
  void set_phone_verified(bool value);

  // bool email_verified = 20;
  void clear_email_verified();
  static const int kEmailVerifiedFieldNumber = 20;
  bool email_verified() const;
  void set_email_verified(bool value);

  // @@protoc_insertion_point(class_scope:api.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::Identity > identities_;
  ::common::Identifier* user_id_;
  ::common::String* name_;
  ::common::String* given_name_;
  ::common::String* family_name_;
  ::common::String* gender_;
  ::common::String* birthdate_;
  ::common::Identifier* email_;
  ::common::Identifier* phone_number_;
  ::common::String* picture_;
  ::common::StringMap* user_metadata_;
  ::common::StringMap* app_metadata_;
  ::common::String* last_ip_;
  ::common::String* nickname_;
  ::common::StringArray* multifactor_;
  ::common::String* created_at_;
  ::common::String* updated_at_;
  ::common::String* password_;
  bool blocked_;
  bool phone_verified_;
  bool email_verified_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Identity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Identity* other);
  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(NULL);
  }

  Identity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String connection = 1;
  bool has_connection() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 1;
  private:
  const ::common::String& _internal_connection() const;
  public:
  const ::common::String& connection() const;
  ::common::String* release_connection();
  ::common::String* mutable_connection();
  void set_allocated_connection(::common::String* connection);

  // .common.Identifier user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  private:
  const ::common::Identifier& _internal_user_id() const;
  public:
  const ::common::Identifier& user_id() const;
  ::common::Identifier* release_user_id();
  ::common::Identifier* mutable_user_id();
  void set_allocated_user_id(::common::Identifier* user_id);

  // .common.String provider = 3;
  bool has_provider() const;
  void clear_provider();
  static const int kProviderFieldNumber = 3;
  private:
  const ::common::String& _internal_provider() const;
  public:
  const ::common::String& provider() const;
  ::common::String* release_provider();
  ::common::String* mutable_provider();
  void set_allocated_provider(::common::String* provider);

  // bool isSocial = 4;
  void clear_issocial();
  static const int kIsSocialFieldNumber = 4;
  bool issocial() const;
  void set_issocial(bool value);

  // @@protoc_insertion_point(class_scope:api.Identity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* connection_;
  ::common::Identifier* user_id_;
  ::common::String* provider_;
  bool issocial_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Auth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Auth) */ {
 public:
  Auth();
  virtual ~Auth();

  Auth(const Auth& from);

  inline Auth& operator=(const Auth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Auth(Auth&& from) noexcept
    : Auth() {
    *this = ::std::move(from);
  }

  inline Auth& operator=(Auth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Auth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Auth* internal_default_instance() {
    return reinterpret_cast<const Auth*>(
               &_Auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Auth* other);
  friend void swap(Auth& a, Auth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Auth* New() const final {
    return CreateMaybeMessage<Auth>(NULL);
  }

  Auth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Auth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Auth& from);
  void MergeFrom(const Auth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Auth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.Scope scopes = 5;
  int scopes_size() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 5;
  ::api::Scope scopes(int index) const;
  void set_scopes(int index, ::api::Scope value);
  void add_scopes(::api::Scope value);
  const ::google::protobuf::RepeatedField<int>& scopes() const;
  ::google::protobuf::RepeatedField<int>* mutable_scopes();

  // .common.String domain = 1;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  private:
  const ::common::String& _internal_domain() const;
  public:
  const ::common::String& domain() const;
  ::common::String* release_domain();
  ::common::String* mutable_domain();
  void set_allocated_domain(::common::String* domain);

  // .common.String client_id = 2;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  private:
  const ::common::String& _internal_client_id() const;
  public:
  const ::common::String& client_id() const;
  ::common::String* release_client_id();
  ::common::String* mutable_client_id();
  void set_allocated_client_id(::common::String* client_id);

  // .common.String client_secret = 3;
  bool has_client_secret() const;
  void clear_client_secret();
  static const int kClientSecretFieldNumber = 3;
  private:
  const ::common::String& _internal_client_secret() const;
  public:
  const ::common::String& client_secret() const;
  ::common::String* release_client_secret();
  ::common::String* mutable_client_secret();
  void set_allocated_client_secret(::common::String* client_secret);

  // .common.String redirect = 4;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 4;
  private:
  const ::common::String& _internal_redirect() const;
  public:
  const ::common::String& redirect() const;
  ::common::String* release_redirect();
  ::common::String* mutable_redirect();
  void set_allocated_redirect(::common::String* redirect);

  // @@protoc_insertion_point(class_scope:api.Auth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> scopes_;
  mutable int _scopes_cached_byte_size_;
  ::common::String* domain_;
  ::common::String* client_id_;
  ::common::String* client_secret_;
  ::common::String* redirect_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JSONWebKeys : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.JSONWebKeys) */ {
 public:
  JSONWebKeys();
  virtual ~JSONWebKeys();

  JSONWebKeys(const JSONWebKeys& from);

  inline JSONWebKeys& operator=(const JSONWebKeys& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JSONWebKeys(JSONWebKeys&& from) noexcept
    : JSONWebKeys() {
    *this = ::std::move(from);
  }

  inline JSONWebKeys& operator=(JSONWebKeys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JSONWebKeys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JSONWebKeys* internal_default_instance() {
    return reinterpret_cast<const JSONWebKeys*>(
               &_JSONWebKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(JSONWebKeys* other);
  friend void swap(JSONWebKeys& a, JSONWebKeys& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JSONWebKeys* New() const final {
    return CreateMaybeMessage<JSONWebKeys>(NULL);
  }

  JSONWebKeys* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JSONWebKeys>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JSONWebKeys& from);
  void MergeFrom(const JSONWebKeys& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSONWebKeys* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String kty = 1;
  bool has_kty() const;
  void clear_kty();
  static const int kKtyFieldNumber = 1;
  private:
  const ::common::String& _internal_kty() const;
  public:
  const ::common::String& kty() const;
  ::common::String* release_kty();
  ::common::String* mutable_kty();
  void set_allocated_kty(::common::String* kty);

  // .common.Identifier kid = 2;
  bool has_kid() const;
  void clear_kid();
  static const int kKidFieldNumber = 2;
  private:
  const ::common::Identifier& _internal_kid() const;
  public:
  const ::common::Identifier& kid() const;
  ::common::Identifier* release_kid();
  ::common::Identifier* mutable_kid();
  void set_allocated_kid(::common::Identifier* kid);

  // .common.String use = 3;
  bool has_use() const;
  void clear_use();
  static const int kUseFieldNumber = 3;
  private:
  const ::common::String& _internal_use() const;
  public:
  const ::common::String& use() const;
  ::common::String* release_use();
  ::common::String* mutable_use();
  void set_allocated_use(::common::String* use);

  // .common.String n = 4;
  bool has_n() const;
  void clear_n();
  static const int kNFieldNumber = 4;
  private:
  const ::common::String& _internal_n() const;
  public:
  const ::common::String& n() const;
  ::common::String* release_n();
  ::common::String* mutable_n();
  void set_allocated_n(::common::String* n);

  // .common.String e = 5;
  bool has_e() const;
  void clear_e();
  static const int kEFieldNumber = 5;
  private:
  const ::common::String& _internal_e() const;
  public:
  const ::common::String& e() const;
  ::common::String* release_e();
  ::common::String* mutable_e();
  void set_allocated_e(::common::String* e);

  // .common.StringArray x5c = 6;
  bool has_x5c() const;
  void clear_x5c();
  static const int kX5CFieldNumber = 6;
  private:
  const ::common::StringArray& _internal_x5c() const;
  public:
  const ::common::StringArray& x5c() const;
  ::common::StringArray* release_x5c();
  ::common::StringArray* mutable_x5c();
  void set_allocated_x5c(::common::StringArray* x5c);

  // @@protoc_insertion_point(class_scope:api.JSONWebKeys)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* kty_;
  ::common::Identifier* kid_;
  ::common::String* use_;
  ::common::String* n_;
  ::common::String* e_;
  ::common::StringArray* x5c_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Jwks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Jwks) */ {
 public:
  Jwks();
  virtual ~Jwks();

  Jwks(const Jwks& from);

  inline Jwks& operator=(const Jwks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Jwks(Jwks&& from) noexcept
    : Jwks() {
    *this = ::std::move(from);
  }

  inline Jwks& operator=(Jwks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Jwks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jwks* internal_default_instance() {
    return reinterpret_cast<const Jwks*>(
               &_Jwks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Jwks* other);
  friend void swap(Jwks& a, Jwks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Jwks* New() const final {
    return CreateMaybeMessage<Jwks>(NULL);
  }

  Jwks* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Jwks>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Jwks& from);
  void MergeFrom(const Jwks& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Jwks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .api.JSONWebKeys keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  ::api::JSONWebKeys* mutable_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >*
      mutable_keys();
  const ::api::JSONWebKeys& keys(int index) const;
  ::api::JSONWebKeys* add_keys();
  const ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >&
      keys() const;

  // @@protoc_insertion_point(class_scope:api.Jwks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys > keys_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RenderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.RenderRequest) */ {
 public:
  RenderRequest();
  virtual ~RenderRequest();

  RenderRequest(const RenderRequest& from);

  inline RenderRequest& operator=(const RenderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RenderRequest(RenderRequest&& from) noexcept
    : RenderRequest() {
    *this = ::std::move(from);
  }

  inline RenderRequest& operator=(RenderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RenderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenderRequest* internal_default_instance() {
    return reinterpret_cast<const RenderRequest*>(
               &_RenderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RenderRequest* other);
  friend void swap(RenderRequest& a, RenderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenderRequest* New() const final {
    return CreateMaybeMessage<RenderRequest>(NULL);
  }

  RenderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RenderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RenderRequest& from);
  void MergeFrom(const RenderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  private:
  const ::common::String& _internal_name() const;
  public:
  const ::common::String& name() const;
  ::common::String* release_name();
  ::common::String* mutable_name();
  void set_allocated_name(::common::String* name);

  // .common.String text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  private:
  const ::common::String& _internal_text() const;
  public:
  const ::common::String& text() const;
  ::common::String* release_text();
  ::common::String* mutable_text();
  void set_allocated_text(::common::String* text);

  // .common.Bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  private:
  const ::common::Bytes& _internal_data() const;
  public:
  const ::common::Bytes& data() const;
  ::common::Bytes* release_data();
  ::common::Bytes* mutable_data();
  void set_allocated_data(::common::Bytes* data);

  // @@protoc_insertion_point(class_scope:api.RenderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* name_;
  ::common::String* text_;
  ::common::Bytes* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchPhoneNumberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SearchPhoneNumberRequest) */ {
 public:
  SearchPhoneNumberRequest();
  virtual ~SearchPhoneNumberRequest();

  SearchPhoneNumberRequest(const SearchPhoneNumberRequest& from);

  inline SearchPhoneNumberRequest& operator=(const SearchPhoneNumberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchPhoneNumberRequest(SearchPhoneNumberRequest&& from) noexcept
    : SearchPhoneNumberRequest() {
    *this = ::std::move(from);
  }

  inline SearchPhoneNumberRequest& operator=(SearchPhoneNumberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchPhoneNumberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchPhoneNumberRequest* internal_default_instance() {
    return reinterpret_cast<const SearchPhoneNumberRequest*>(
               &_SearchPhoneNumberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SearchPhoneNumberRequest* other);
  friend void swap(SearchPhoneNumberRequest& a, SearchPhoneNumberRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchPhoneNumberRequest* New() const final {
    return CreateMaybeMessage<SearchPhoneNumberRequest>(NULL);
  }

  SearchPhoneNumberRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchPhoneNumberRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchPhoneNumberRequest& from);
  void MergeFrom(const SearchPhoneNumberRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchPhoneNumberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  private:
  const ::common::String& _internal_state() const;
  public:
  const ::common::String& state() const;
  ::common::String* release_state();
  ::common::String* mutable_state();
  void set_allocated_state(::common::String* state);

  // .api.NumberCapabilities capabilities = 2;
  bool has_capabilities() const;
  void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 2;
  private:
  const ::api::NumberCapabilities& _internal_capabilities() const;
  public:
  const ::api::NumberCapabilities& capabilities() const;
  ::api::NumberCapabilities* release_capabilities();
  ::api::NumberCapabilities* mutable_capabilities();
  void set_allocated_capabilities(::api::NumberCapabilities* capabilities);

  // .common.Int64 total_results = 3;
  bool has_total_results() const;
  void clear_total_results();
  static const int kTotalResultsFieldNumber = 3;
  private:
  const ::common::Int64& _internal_total_results() const;
  public:
  const ::common::Int64& total_results() const;
  ::common::Int64* release_total_results();
  ::common::Int64* mutable_total_results();
  void set_allocated_total_results(::common::Int64* total_results);

  // @@protoc_insertion_point(class_scope:api.SearchPhoneNumberRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* state_;
  ::api::NumberCapabilities* capabilities_;
  ::common::Int64* total_results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PhoneNumber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.PhoneNumber) */ {
 public:
  PhoneNumber();
  virtual ~PhoneNumber();

  PhoneNumber(const PhoneNumber& from);

  inline PhoneNumber& operator=(const PhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneNumber(PhoneNumber&& from) noexcept
    : PhoneNumber() {
    *this = ::std::move(from);
  }

  inline PhoneNumber& operator=(PhoneNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneNumber* internal_default_instance() {
    return reinterpret_cast<const PhoneNumber*>(
               &_PhoneNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(PhoneNumber* other);
  friend void swap(PhoneNumber& a, PhoneNumber& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneNumber* New() const final {
    return CreateMaybeMessage<PhoneNumber>(NULL);
  }

  PhoneNumber* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PhoneNumber>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PhoneNumber& from);
  void MergeFrom(const PhoneNumber& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneNumber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.String friendly_name = 1;
  bool has_friendly_name() const;
  void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 1;
  private:
  const ::common::String& _internal_friendly_name() const;
  public:
  const ::common::String& friendly_name() const;
  ::common::String* release_friendly_name();
  ::common::String* mutable_friendly_name();
  void set_allocated_friendly_name(::common::String* friendly_name);

  // .common.String phone_number = 2;
  bool has_phone_number() const;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 2;
  private:
  const ::common::String& _internal_phone_number() const;
  public:
  const ::common::String& phone_number() const;
  ::common::String* release_phone_number();
  ::common::String* mutable_phone_number();
  void set_allocated_phone_number(::common::String* phone_number);

  // .common.String region = 3;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 3;
  private:
  const ::common::String& _internal_region() const;
  public:
  const ::common::String& region() const;
  ::common::String* release_region();
  ::common::String* mutable_region();
  void set_allocated_region(::common::String* region);

  // .api.NumberCapabilities capabilities = 4;
  bool has_capabilities() const;
  void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 4;
  private:
  const ::api::NumberCapabilities& _internal_capabilities() const;
  public:
  const ::api::NumberCapabilities& capabilities() const;
  ::api::NumberCapabilities* release_capabilities();
  ::api::NumberCapabilities* mutable_capabilities();
  void set_allocated_capabilities(::api::NumberCapabilities* capabilities);

  // @@protoc_insertion_point(class_scope:api.PhoneNumber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::String* friendly_name_;
  ::common::String* phone_number_;
  ::common::String* region_;
  ::api::NumberCapabilities* capabilities_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NumberCapabilities : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.NumberCapabilities) */ {
 public:
  NumberCapabilities();
  virtual ~NumberCapabilities();

  NumberCapabilities(const NumberCapabilities& from);

  inline NumberCapabilities& operator=(const NumberCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NumberCapabilities(NumberCapabilities&& from) noexcept
    : NumberCapabilities() {
    *this = ::std::move(from);
  }

  inline NumberCapabilities& operator=(NumberCapabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NumberCapabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumberCapabilities* internal_default_instance() {
    return reinterpret_cast<const NumberCapabilities*>(
               &_NumberCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(NumberCapabilities* other);
  friend void swap(NumberCapabilities& a, NumberCapabilities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NumberCapabilities* New() const final {
    return CreateMaybeMessage<NumberCapabilities>(NULL);
  }

  NumberCapabilities* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NumberCapabilities>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NumberCapabilities& from);
  void MergeFrom(const NumberCapabilities& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberCapabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool voice = 1;
  void clear_voice();
  static const int kVoiceFieldNumber = 1;
  bool voice() const;
  void set_voice(bool value);

  // bool sms = 2;
  void clear_sms();
  static const int kSmsFieldNumber = 2;
  bool sms() const;
  void set_sms(bool value);

  // bool mms = 3;
  void clear_mms();
  static const int kMmsFieldNumber = 3;
  bool mms() const;
  void set_mms(bool value);

  // @@protoc_insertion_point(class_scope:api.NumberCapabilities)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool voice_;
  bool sms_;
  bool mms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PhoneNumberResource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.PhoneNumberResource) */ {
 public:
  PhoneNumberResource();
  virtual ~PhoneNumberResource();

  PhoneNumberResource(const PhoneNumberResource& from);

  inline PhoneNumberResource& operator=(const PhoneNumberResource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneNumberResource(PhoneNumberResource&& from) noexcept
    : PhoneNumberResource() {
    *this = ::std::move(from);
  }

  inline PhoneNumberResource& operator=(PhoneNumberResource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneNumberResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneNumberResource* internal_default_instance() {
    return reinterpret_cast<const PhoneNumberResource*>(
               &_PhoneNumberResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(PhoneNumberResource* other);
  friend void swap(PhoneNumberResource& a, PhoneNumberResource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneNumberResource* New() const final {
    return CreateMaybeMessage<PhoneNumberResource>(NULL);
  }

  PhoneNumberResource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PhoneNumberResource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PhoneNumberResource& from);
  void MergeFrom(const PhoneNumberResource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PhoneNumberResource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.PhoneNumber number = 1;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  private:
  const ::api::PhoneNumber& _internal_number() const;
  public:
  const ::api::PhoneNumber& number() const;
  ::api::PhoneNumber* release_number();
  ::api::PhoneNumber* mutable_number();
  void set_allocated_number(::api::PhoneNumber* number);

  // .common.Identifier id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.String uri = 3;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  private:
  const ::common::String& _internal_uri() const;
  public:
  const ::common::String& uri() const;
  ::common::String* release_uri();
  ::common::String* mutable_uri();
  void set_allocated_uri(::common::String* uri);

  // @@protoc_insertion_point(class_scope:api.PhoneNumberResource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::PhoneNumber* number_;
  ::common::Identifier* id_;
  ::common::String* uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TokenQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.TokenQuery) */ {
 public:
  TokenQuery();
  virtual ~TokenQuery();

  TokenQuery(const TokenQuery& from);

  inline TokenQuery& operator=(const TokenQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TokenQuery(TokenQuery&& from) noexcept
    : TokenQuery() {
    *this = ::std::move(from);
  }

  inline TokenQuery& operator=(TokenQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TokenQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenQuery* internal_default_instance() {
    return reinterpret_cast<const TokenQuery*>(
               &_TokenQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(TokenQuery* other);
  friend void swap(TokenQuery& a, TokenQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TokenQuery* New() const final {
    return CreateMaybeMessage<TokenQuery>(NULL);
  }

  TokenQuery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TokenQuery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TokenQuery& from);
  void MergeFrom(const TokenQuery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Token token = 1;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  private:
  const ::common::Token& _internal_token() const;
  public:
  const ::common::Token& token() const;
  ::common::Token* release_token();
  ::common::Token* mutable_token();
  void set_allocated_token(::common::Token* token);

  // .common.String query = 2;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 2;
  private:
  const ::common::String& _internal_query() const;
  public:
  const ::common::String& query() const;
  ::common::String* release_query();
  ::common::String* mutable_query();
  void set_allocated_query(::common::String* query);

  // @@protoc_insertion_point(class_scope:api.TokenQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Token* token_;
  ::common::String* query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IDBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.IDBody) */ {
 public:
  IDBody();
  virtual ~IDBody();

  IDBody(const IDBody& from);

  inline IDBody& operator=(const IDBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IDBody(IDBody&& from) noexcept
    : IDBody() {
    *this = ::std::move(from);
  }

  inline IDBody& operator=(IDBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IDBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IDBody* internal_default_instance() {
    return reinterpret_cast<const IDBody*>(
               &_IDBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(IDBody* other);
  friend void swap(IDBody& a, IDBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IDBody* New() const final {
    return CreateMaybeMessage<IDBody>(NULL);
  }

  IDBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IDBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IDBody& from);
  void MergeFrom(const IDBody& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.Bytes body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::common::Bytes& _internal_body() const;
  public:
  const ::common::Bytes& body() const;
  ::common::Bytes* release_body();
  ::common::Bytes* mutable_body();
  void set_allocated_body(::common::Bytes* body);

  // @@protoc_insertion_point(class_scope:api.IDBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::Bytes* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IDStrings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.IDStrings) */ {
 public:
  IDStrings();
  virtual ~IDStrings();

  IDStrings(const IDStrings& from);

  inline IDStrings& operator=(const IDStrings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IDStrings(IDStrings&& from) noexcept
    : IDStrings() {
    *this = ::std::move(from);
  }

  inline IDStrings& operator=(IDStrings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IDStrings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IDStrings* internal_default_instance() {
    return reinterpret_cast<const IDStrings*>(
               &_IDStrings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(IDStrings* other);
  friend void swap(IDStrings& a, IDStrings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IDStrings* New() const final {
    return CreateMaybeMessage<IDStrings>(NULL);
  }

  IDStrings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IDStrings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IDStrings& from);
  void MergeFrom(const IDStrings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDStrings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.StringArray strings = 2;
  bool has_strings() const;
  void clear_strings();
  static const int kStringsFieldNumber = 2;
  private:
  const ::common::StringArray& _internal_strings() const;
  public:
  const ::common::StringArray& strings() const;
  ::common::StringArray* release_strings();
  ::common::StringArray* mutable_strings();
  void set_allocated_strings(::common::StringArray* strings);

  // @@protoc_insertion_point(class_scope:api.IDStrings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::StringArray* strings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Role : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Role) */ {
 public:
  Role();
  virtual ~Role();

  Role(const Role& from);

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(Role&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Role* other);
  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Role* New() const final {
    return CreateMaybeMessage<Role>(NULL);
  }

  Role* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Role& from);
  void MergeFrom(const Role& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Role* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.String name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  private:
  const ::common::String& _internal_name() const;
  public:
  const ::common::String& name() const;
  ::common::String* release_name();
  ::common::String* mutable_name();
  void set_allocated_name(::common::String* name);

  // .common.String description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  private:
  const ::common::String& _internal_description() const;
  public:
  const ::common::String& description() const;
  ::common::String* release_description();
  ::common::String* mutable_description();
  void set_allocated_description(::common::String* description);

  // @@protoc_insertion_point(class_scope:api.Role)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::String* name_;
  ::common::String* description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CallResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CallResponse) */ {
 public:
  CallResponse();
  virtual ~CallResponse();

  CallResponse(const CallResponse& from);

  inline CallResponse& operator=(const CallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallResponse(CallResponse&& from) noexcept
    : CallResponse() {
    *this = ::std::move(from);
  }

  inline CallResponse& operator=(CallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallResponse* internal_default_instance() {
    return reinterpret_cast<const CallResponse*>(
               &_CallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CallResponse* other);
  friend void swap(CallResponse& a, CallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallResponse* New() const final {
    return CreateMaybeMessage<CallResponse>(NULL);
  }

  CallResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CallResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CallResponse& from);
  void MergeFrom(const CallResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.String to = 5;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 5;
  private:
  const ::common::String& _internal_to() const;
  public:
  const ::common::String& to() const;
  ::common::String* release_to();
  ::common::String* mutable_to();
  void set_allocated_to(::common::String* to);

  // .common.String from = 6;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 6;
  private:
  const ::common::String& _internal_from() const;
  public:
  const ::common::String& from() const;
  ::common::String* release_from();
  ::common::String* mutable_from();
  void set_allocated_from(::common::String* from);

  // .common.String status = 9;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  private:
  const ::common::String& _internal_status() const;
  public:
  const ::common::String& status() const;
  ::common::String* release_status();
  ::common::String* mutable_status();
  void set_allocated_status(::common::String* status);

  // .common.String answered_by = 10;
  bool has_answered_by() const;
  void clear_answered_by();
  static const int kAnsweredByFieldNumber = 10;
  private:
  const ::common::String& _internal_answered_by() const;
  public:
  const ::common::String& answered_by() const;
  ::common::String* release_answered_by();
  ::common::String* mutable_answered_by();
  void set_allocated_answered_by(::common::String* answered_by);

  // .common.String forwarded_from = 11;
  bool has_forwarded_from() const;
  void clear_forwarded_from();
  static const int kForwardedFromFieldNumber = 11;
  private:
  const ::common::String& _internal_forwarded_from() const;
  public:
  const ::common::String& forwarded_from() const;
  ::common::String* release_forwarded_from();
  ::common::String* mutable_forwarded_from();
  void set_allocated_forwarded_from(::common::String* forwarded_from);

  // .common.String caller_name = 12;
  bool has_caller_name() const;
  void clear_caller_name();
  static const int kCallerNameFieldNumber = 12;
  private:
  const ::common::String& _internal_caller_name() const;
  public:
  const ::common::String& caller_name() const;
  ::common::String* release_caller_name();
  ::common::String* mutable_caller_name();
  void set_allocated_caller_name(::common::String* caller_name);

  // .common.StringMap annotations = 13;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 13;
  private:
  const ::common::StringMap& _internal_annotations() const;
  public:
  const ::common::StringMap& annotations() const;
  ::common::StringMap* release_annotations();
  ::common::StringMap* mutable_annotations();
  void set_allocated_annotations(::common::StringMap* annotations);

  // @@protoc_insertion_point(class_scope:api.CallResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::String* to_;
  ::common::String* from_;
  ::common::String* status_;
  ::common::String* answered_by_;
  ::common::String* forwarded_from_;
  ::common::String* caller_name_;
  ::common::StringMap* annotations_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMSResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SMSResponse) */ {
 public:
  SMSResponse();
  virtual ~SMSResponse();

  SMSResponse(const SMSResponse& from);

  inline SMSResponse& operator=(const SMSResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SMSResponse(SMSResponse&& from) noexcept
    : SMSResponse() {
    *this = ::std::move(from);
  }

  inline SMSResponse& operator=(SMSResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMSResponse* internal_default_instance() {
    return reinterpret_cast<const SMSResponse*>(
               &_SMSResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(SMSResponse* other);
  friend void swap(SMSResponse& a, SMSResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SMSResponse* New() const final {
    return CreateMaybeMessage<SMSResponse>(NULL);
  }

  SMSResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SMSResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SMSResponse& from);
  void MergeFrom(const SMSResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMSResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.String to = 5;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 5;
  private:
  const ::common::String& _internal_to() const;
  public:
  const ::common::String& to() const;
  ::common::String* release_to();
  ::common::String* mutable_to();
  void set_allocated_to(::common::String* to);

  // .common.String from = 6;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 6;
  private:
  const ::common::String& _internal_from() const;
  public:
  const ::common::String& from() const;
  ::common::String* release_from();
  ::common::String* mutable_from();
  void set_allocated_from(::common::String* from);

  // .common.String media_url = 7;
  bool has_media_url() const;
  void clear_media_url();
  static const int kMediaUrlFieldNumber = 7;
  private:
  const ::common::String& _internal_media_url() const;
  public:
  const ::common::String& media_url() const;
  ::common::String* release_media_url();
  ::common::String* mutable_media_url();
  void set_allocated_media_url(::common::String* media_url);

  // .common.String body = 8;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 8;
  private:
  const ::common::String& _internal_body() const;
  public:
  const ::common::String& body() const;
  ::common::String* release_body();
  ::common::String* mutable_body();
  void set_allocated_body(::common::String* body);

  // .common.String status = 9;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  private:
  const ::common::String& _internal_status() const;
  public:
  const ::common::String& status() const;
  ::common::String* release_status();
  ::common::String* mutable_status();
  void set_allocated_status(::common::String* status);

  // .common.StringMap annotations = 10;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 10;
  private:
  const ::common::StringMap& _internal_annotations() const;
  public:
  const ::common::StringMap& annotations() const;
  ::common::StringMap* release_annotations();
  ::common::StringMap* mutable_annotations();
  void set_allocated_annotations(::common::StringMap* annotations);

  // @@protoc_insertion_point(class_scope:api.SMSResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::String* to_;
  ::common::String* from_;
  ::common::String* media_url_;
  ::common::String* body_;
  ::common::String* status_;
  ::common::StringMap* annotations_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SubscriptionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SubscriptionResponse) */ {
 public:
  SubscriptionResponse();
  virtual ~SubscriptionResponse();

  SubscriptionResponse(const SubscriptionResponse& from);

  inline SubscriptionResponse& operator=(const SubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscriptionResponse(SubscriptionResponse&& from) noexcept
    : SubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline SubscriptionResponse& operator=(SubscriptionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriptionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const SubscriptionResponse*>(
               &_SubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SubscriptionResponse* other);
  friend void swap(SubscriptionResponse& a, SubscriptionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionResponse* New() const final {
    return CreateMaybeMessage<SubscriptionResponse>(NULL);
  }

  SubscriptionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscriptionResponse& from);
  void MergeFrom(const SubscriptionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.Int64 monthly_charge = 2;
  bool has_monthly_charge() const;
  void clear_monthly_charge();
  static const int kMonthlyChargeFieldNumber = 2;
  private:
  const ::common::Int64& _internal_monthly_charge() const;
  public:
  const ::common::Int64& monthly_charge() const;
  ::common::Int64* release_monthly_charge();
  ::common::Int64* mutable_monthly_charge();
  void set_allocated_monthly_charge(::common::Int64* monthly_charge);

  // .common.String next_charge = 3;
  bool has_next_charge() const;
  void clear_next_charge();
  static const int kNextChargeFieldNumber = 3;
  private:
  const ::common::String& _internal_next_charge() const;
  public:
  const ::common::String& next_charge() const;
  ::common::String* release_next_charge();
  ::common::String* mutable_next_charge();
  void set_allocated_next_charge(::common::String* next_charge);

  // .api.User user = 5;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 5;
  private:
  const ::api::User& _internal_user() const;
  public:
  const ::api::User& user() const;
  ::api::User* release_user();
  ::api::User* mutable_user();
  void set_allocated_user(::api::User* user);

  // .common.StringMap annotations = 10;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 10;
  private:
  const ::common::StringMap& _internal_annotations() const;
  public:
  const ::common::StringMap& annotations() const;
  ::common::StringMap* release_annotations();
  ::common::StringMap* mutable_annotations();
  void set_allocated_annotations(::common::StringMap* annotations);

  // .api.Plan plan = 4;
  void clear_plan();
  static const int kPlanFieldNumber = 4;
  ::api::Plan plan() const;
  void set_plan(::api::Plan value);

  // @@protoc_insertion_point(class_scope:api.SubscriptionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::Int64* monthly_charge_;
  ::common::String* next_charge_;
  ::api::User* user_;
  ::common::StringMap* annotations_;
  int plan_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FaxResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.FaxResponse) */ {
 public:
  FaxResponse();
  virtual ~FaxResponse();

  FaxResponse(const FaxResponse& from);

  inline FaxResponse& operator=(const FaxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaxResponse(FaxResponse&& from) noexcept
    : FaxResponse() {
    *this = ::std::move(from);
  }

  inline FaxResponse& operator=(FaxResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaxResponse* internal_default_instance() {
    return reinterpret_cast<const FaxResponse*>(
               &_FaxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(FaxResponse* other);
  friend void swap(FaxResponse& a, FaxResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaxResponse* New() const final {
    return CreateMaybeMessage<FaxResponse>(NULL);
  }

  FaxResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FaxResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FaxResponse& from);
  void MergeFrom(const FaxResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaxResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::common::Identifier& _internal_id() const;
  public:
  const ::common::Identifier& id() const;
  ::common::Identifier* release_id();
  ::common::Identifier* mutable_id();
  void set_allocated_id(::common::Identifier* id);

  // .common.String media_url = 3;
  bool has_media_url() const;
  void clear_media_url();
  static const int kMediaUrlFieldNumber = 3;
  private:
  const ::common::String& _internal_media_url() const;
  public:
  const ::common::String& media_url() const;
  ::common::String* release_media_url();
  ::common::String* mutable_media_url();
  void set_allocated_media_url(::common::String* media_url);

  // .common.String to = 4;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 4;
  private:
  const ::common::String& _internal_to() const;
  public:
  const ::common::String& to() const;
  ::common::String* release_to();
  ::common::String* mutable_to();
  void set_allocated_to(::common::String* to);

  // .common.String from = 5;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 5;
  private:
  const ::common::String& _internal_from() const;
  public:
  const ::common::String& from() const;
  ::common::String* release_from();
  ::common::String* mutable_from();
  void set_allocated_from(::common::String* from);

  // .common.StringMap annotations = 10;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 10;
  private:
  const ::common::StringMap& _internal_annotations() const;
  public:
  const ::common::StringMap& annotations() const;
  ::common::StringMap* release_annotations();
  ::common::StringMap* mutable_annotations();
  void set_allocated_annotations(::common::StringMap* annotations);

  // @@protoc_insertion_point(class_scope:api.FaxResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::Identifier* id_;
  ::common::String* media_url_;
  ::common::String* to_;
  ::common::String* from_;
  ::common::StringMap* annotations_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaxRequest

// .common.String to = 1;
inline bool FaxRequest::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline const ::common::String& FaxRequest::_internal_to() const {
  return *to_;
}
inline const ::common::String& FaxRequest::to() const {
  const ::common::String* p = to_;
  // @@protoc_insertion_point(field_get:api.FaxRequest.to)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* FaxRequest::release_to() {
  // @@protoc_insertion_point(field_release:api.FaxRequest.to)
  
  ::common::String* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::common::String* FaxRequest::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxRequest.to)
  return to_;
}
inline void FaxRequest::set_allocated_to(::common::String* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(to_);
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.FaxRequest.to)
}

// .common.String from = 2;
inline bool FaxRequest::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline const ::common::String& FaxRequest::_internal_from() const {
  return *from_;
}
inline const ::common::String& FaxRequest::from() const {
  const ::common::String* p = from_;
  // @@protoc_insertion_point(field_get:api.FaxRequest.from)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* FaxRequest::release_from() {
  // @@protoc_insertion_point(field_release:api.FaxRequest.from)
  
  ::common::String* temp = from_;
  from_ = NULL;
  return temp;
}
inline ::common::String* FaxRequest::mutable_from() {
  
  if (from_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxRequest.from)
  return from_;
}
inline void FaxRequest::set_allocated_from(::common::String* from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_);
  }
  if (from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:api.FaxRequest.from)
}

// .common.String media_url = 3;
inline bool FaxRequest::has_media_url() const {
  return this != internal_default_instance() && media_url_ != NULL;
}
inline const ::common::String& FaxRequest::_internal_media_url() const {
  return *media_url_;
}
inline const ::common::String& FaxRequest::media_url() const {
  const ::common::String* p = media_url_;
  // @@protoc_insertion_point(field_get:api.FaxRequest.media_url)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* FaxRequest::release_media_url() {
  // @@protoc_insertion_point(field_release:api.FaxRequest.media_url)
  
  ::common::String* temp = media_url_;
  media_url_ = NULL;
  return temp;
}
inline ::common::String* FaxRequest::mutable_media_url() {
  
  if (media_url_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    media_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxRequest.media_url)
  return media_url_;
}
inline void FaxRequest::set_allocated_media_url(::common::String* media_url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(media_url_);
  }
  if (media_url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_url, submessage_arena);
    }
    
  } else {
    
  }
  media_url_ = media_url;
  // @@protoc_insertion_point(field_set_allocated:api.FaxRequest.media_url)
}

// .common.String quality = 4;
inline bool FaxRequest::has_quality() const {
  return this != internal_default_instance() && quality_ != NULL;
}
inline const ::common::String& FaxRequest::_internal_quality() const {
  return *quality_;
}
inline const ::common::String& FaxRequest::quality() const {
  const ::common::String* p = quality_;
  // @@protoc_insertion_point(field_get:api.FaxRequest.quality)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* FaxRequest::release_quality() {
  // @@protoc_insertion_point(field_release:api.FaxRequest.quality)
  
  ::common::String* temp = quality_;
  quality_ = NULL;
  return temp;
}
inline ::common::String* FaxRequest::mutable_quality() {
  
  if (quality_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    quality_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxRequest.quality)
  return quality_;
}
inline void FaxRequest::set_allocated_quality(::common::String* quality) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quality_);
  }
  if (quality) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quality = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quality, submessage_arena);
    }
    
  } else {
    
  }
  quality_ = quality;
  // @@protoc_insertion_point(field_set_allocated:api.FaxRequest.quality)
}

// .common.String callback = 5;
inline bool FaxRequest::has_callback() const {
  return this != internal_default_instance() && callback_ != NULL;
}
inline const ::common::String& FaxRequest::_internal_callback() const {
  return *callback_;
}
inline const ::common::String& FaxRequest::callback() const {
  const ::common::String* p = callback_;
  // @@protoc_insertion_point(field_get:api.FaxRequest.callback)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* FaxRequest::release_callback() {
  // @@protoc_insertion_point(field_release:api.FaxRequest.callback)
  
  ::common::String* temp = callback_;
  callback_ = NULL;
  return temp;
}
inline ::common::String* FaxRequest::mutable_callback() {
  
  if (callback_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    callback_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxRequest.callback)
  return callback_;
}
inline void FaxRequest::set_allocated_callback(::common::String* callback) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(callback_);
  }
  if (callback) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      callback = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, callback, submessage_arena);
    }
    
  } else {
    
  }
  callback_ = callback;
  // @@protoc_insertion_point(field_set_allocated:api.FaxRequest.callback)
}

// bool store_media = 6;
inline void FaxRequest::clear_store_media() {
  store_media_ = false;
}
inline bool FaxRequest::store_media() const {
  // @@protoc_insertion_point(field_get:api.FaxRequest.store_media)
  return store_media_;
}
inline void FaxRequest::set_store_media(bool value) {
  
  store_media_ = value;
  // @@protoc_insertion_point(field_set:api.FaxRequest.store_media)
}

// -------------------------------------------------------------------

// SubscribeRequest

// .common.String email = 1;
inline bool SubscribeRequest::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline const ::common::String& SubscribeRequest::_internal_email() const {
  return *email_;
}
inline const ::common::String& SubscribeRequest::email() const {
  const ::common::String* p = email_;
  // @@protoc_insertion_point(field_get:api.SubscribeRequest.email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SubscribeRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.SubscribeRequest.email)
  
  ::common::String* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::common::String* SubscribeRequest::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscribeRequest.email)
  return email_;
}
inline void SubscribeRequest::set_allocated_email(::common::String* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(email_);
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeRequest.email)
}

// .api.Plan plan = 2;
inline void SubscribeRequest::clear_plan() {
  plan_ = 0;
}
inline ::api::Plan SubscribeRequest::plan() const {
  // @@protoc_insertion_point(field_get:api.SubscribeRequest.plan)
  return static_cast< ::api::Plan >(plan_);
}
inline void SubscribeRequest::set_plan(::api::Plan value) {
  
  plan_ = value;
  // @@protoc_insertion_point(field_set:api.SubscribeRequest.plan)
}

// .api.Card card = 3;
inline bool SubscribeRequest::has_card() const {
  return this != internal_default_instance() && card_ != NULL;
}
inline void SubscribeRequest::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) {
    delete card_;
  }
  card_ = NULL;
}
inline const ::api::Card& SubscribeRequest::_internal_card() const {
  return *card_;
}
inline const ::api::Card& SubscribeRequest::card() const {
  const ::api::Card* p = card_;
  // @@protoc_insertion_point(field_get:api.SubscribeRequest.card)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Card*>(
      &::api::_Card_default_instance_);
}
inline ::api::Card* SubscribeRequest::release_card() {
  // @@protoc_insertion_point(field_release:api.SubscribeRequest.card)
  
  ::api::Card* temp = card_;
  card_ = NULL;
  return temp;
}
inline ::api::Card* SubscribeRequest::mutable_card() {
  
  if (card_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Card>(GetArenaNoVirtual());
    card_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscribeRequest.card)
  return card_;
}
inline void SubscribeRequest::set_allocated_card(::api::Card* card) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete card_;
  }
  if (card) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      card = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:api.SubscribeRequest.card)
}

// -------------------------------------------------------------------

// UnSubscribeRequest

// .common.String email = 1;
inline bool UnSubscribeRequest::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline const ::common::String& UnSubscribeRequest::_internal_email() const {
  return *email_;
}
inline const ::common::String& UnSubscribeRequest::email() const {
  const ::common::String* p = email_;
  // @@protoc_insertion_point(field_get:api.UnSubscribeRequest.email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* UnSubscribeRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.UnSubscribeRequest.email)
  
  ::common::String* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::common::String* UnSubscribeRequest::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UnSubscribeRequest.email)
  return email_;
}
inline void UnSubscribeRequest::set_allocated_email(::common::String* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(email_);
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.UnSubscribeRequest.email)
}

// .api.Plan plan = 2;
inline void UnSubscribeRequest::clear_plan() {
  plan_ = 0;
}
inline ::api::Plan UnSubscribeRequest::plan() const {
  // @@protoc_insertion_point(field_get:api.UnSubscribeRequest.plan)
  return static_cast< ::api::Plan >(plan_);
}
inline void UnSubscribeRequest::set_plan(::api::Plan value) {
  
  plan_ = value;
  // @@protoc_insertion_point(field_set:api.UnSubscribeRequest.plan)
}

// -------------------------------------------------------------------

// Card

// .common.String number = 1;
inline bool Card::has_number() const {
  return this != internal_default_instance() && number_ != NULL;
}
inline const ::common::String& Card::_internal_number() const {
  return *number_;
}
inline const ::common::String& Card::number() const {
  const ::common::String* p = number_;
  // @@protoc_insertion_point(field_get:api.Card.number)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Card::release_number() {
  // @@protoc_insertion_point(field_release:api.Card.number)
  
  ::common::String* temp = number_;
  number_ = NULL;
  return temp;
}
inline ::common::String* Card::mutable_number() {
  
  if (number_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    number_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Card.number)
  return number_;
}
inline void Card::set_allocated_number(::common::String* number) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(number_);
  }
  if (number) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      number = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, number, submessage_arena);
    }
    
  } else {
    
  }
  number_ = number;
  // @@protoc_insertion_point(field_set_allocated:api.Card.number)
}

// .common.String exp_month = 2;
inline bool Card::has_exp_month() const {
  return this != internal_default_instance() && exp_month_ != NULL;
}
inline const ::common::String& Card::_internal_exp_month() const {
  return *exp_month_;
}
inline const ::common::String& Card::exp_month() const {
  const ::common::String* p = exp_month_;
  // @@protoc_insertion_point(field_get:api.Card.exp_month)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Card::release_exp_month() {
  // @@protoc_insertion_point(field_release:api.Card.exp_month)
  
  ::common::String* temp = exp_month_;
  exp_month_ = NULL;
  return temp;
}
inline ::common::String* Card::mutable_exp_month() {
  
  if (exp_month_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    exp_month_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Card.exp_month)
  return exp_month_;
}
inline void Card::set_allocated_exp_month(::common::String* exp_month) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exp_month_);
  }
  if (exp_month) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exp_month = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exp_month, submessage_arena);
    }
    
  } else {
    
  }
  exp_month_ = exp_month;
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_month)
}

// .common.String exp_year = 3;
inline bool Card::has_exp_year() const {
  return this != internal_default_instance() && exp_year_ != NULL;
}
inline const ::common::String& Card::_internal_exp_year() const {
  return *exp_year_;
}
inline const ::common::String& Card::exp_year() const {
  const ::common::String* p = exp_year_;
  // @@protoc_insertion_point(field_get:api.Card.exp_year)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Card::release_exp_year() {
  // @@protoc_insertion_point(field_release:api.Card.exp_year)
  
  ::common::String* temp = exp_year_;
  exp_year_ = NULL;
  return temp;
}
inline ::common::String* Card::mutable_exp_year() {
  
  if (exp_year_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    exp_year_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Card.exp_year)
  return exp_year_;
}
inline void Card::set_allocated_exp_year(::common::String* exp_year) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exp_year_);
  }
  if (exp_year) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exp_year = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exp_year, submessage_arena);
    }
    
  } else {
    
  }
  exp_year_ = exp_year;
  // @@protoc_insertion_point(field_set_allocated:api.Card.exp_year)
}

// .common.String cvc = 4;
inline bool Card::has_cvc() const {
  return this != internal_default_instance() && cvc_ != NULL;
}
inline const ::common::String& Card::_internal_cvc() const {
  return *cvc_;
}
inline const ::common::String& Card::cvc() const {
  const ::common::String* p = cvc_;
  // @@protoc_insertion_point(field_get:api.Card.cvc)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Card::release_cvc() {
  // @@protoc_insertion_point(field_release:api.Card.cvc)
  
  ::common::String* temp = cvc_;
  cvc_ = NULL;
  return temp;
}
inline ::common::String* Card::mutable_cvc() {
  
  if (cvc_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    cvc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Card.cvc)
  return cvc_;
}
inline void Card::set_allocated_cvc(::common::String* cvc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cvc_);
  }
  if (cvc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cvc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cvc, submessage_arena);
    }
    
  } else {
    
  }
  cvc_ = cvc;
  // @@protoc_insertion_point(field_set_allocated:api.Card.cvc)
}

// -------------------------------------------------------------------

// SMS

// .common.String service = 1;
inline bool SMS::has_service() const {
  return this != internal_default_instance() && service_ != NULL;
}
inline const ::common::String& SMS::_internal_service() const {
  return *service_;
}
inline const ::common::String& SMS::service() const {
  const ::common::String* p = service_;
  // @@protoc_insertion_point(field_get:api.SMS.service)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMS::release_service() {
  // @@protoc_insertion_point(field_release:api.SMS.service)
  
  ::common::String* temp = service_;
  service_ = NULL;
  return temp;
}
inline ::common::String* SMS::mutable_service() {
  
  if (service_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMS.service)
  return service_;
}
inline void SMS::set_allocated_service(::common::String* service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(service_);
  }
  if (service) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    
  } else {
    
  }
  service_ = service;
  // @@protoc_insertion_point(field_set_allocated:api.SMS.service)
}

// .common.String to = 2;
inline bool SMS::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline const ::common::String& SMS::_internal_to() const {
  return *to_;
}
inline const ::common::String& SMS::to() const {
  const ::common::String* p = to_;
  // @@protoc_insertion_point(field_get:api.SMS.to)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMS::release_to() {
  // @@protoc_insertion_point(field_release:api.SMS.to)
  
  ::common::String* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::common::String* SMS::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMS.to)
  return to_;
}
inline void SMS::set_allocated_to(::common::String* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(to_);
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.SMS.to)
}

// .common.String message = 3;
inline bool SMS::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::common::String& SMS::_internal_message() const {
  return *message_;
}
inline const ::common::String& SMS::message() const {
  const ::common::String* p = message_;
  // @@protoc_insertion_point(field_get:api.SMS.message)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMS::release_message() {
  // @@protoc_insertion_point(field_release:api.SMS.message)
  
  ::common::String* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::common::String* SMS::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMS.message)
  return message_;
}
inline void SMS::set_allocated_message(::common::String* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:api.SMS.message)
}

// .common.String mediaURL = 4;
inline bool SMS::has_mediaurl() const {
  return this != internal_default_instance() && mediaurl_ != NULL;
}
inline const ::common::String& SMS::_internal_mediaurl() const {
  return *mediaurl_;
}
inline const ::common::String& SMS::mediaurl() const {
  const ::common::String* p = mediaurl_;
  // @@protoc_insertion_point(field_get:api.SMS.mediaURL)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMS::release_mediaurl() {
  // @@protoc_insertion_point(field_release:api.SMS.mediaURL)
  
  ::common::String* temp = mediaurl_;
  mediaurl_ = NULL;
  return temp;
}
inline ::common::String* SMS::mutable_mediaurl() {
  
  if (mediaurl_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    mediaurl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMS.mediaURL)
  return mediaurl_;
}
inline void SMS::set_allocated_mediaurl(::common::String* mediaurl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mediaurl_);
  }
  if (mediaurl) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mediaurl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mediaurl, submessage_arena);
    }
    
  } else {
    
  }
  mediaurl_ = mediaurl;
  // @@protoc_insertion_point(field_set_allocated:api.SMS.mediaURL)
}

// .common.String callback = 5;
inline bool SMS::has_callback() const {
  return this != internal_default_instance() && callback_ != NULL;
}
inline const ::common::String& SMS::_internal_callback() const {
  return *callback_;
}
inline const ::common::String& SMS::callback() const {
  const ::common::String* p = callback_;
  // @@protoc_insertion_point(field_get:api.SMS.callback)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMS::release_callback() {
  // @@protoc_insertion_point(field_release:api.SMS.callback)
  
  ::common::String* temp = callback_;
  callback_ = NULL;
  return temp;
}
inline ::common::String* SMS::mutable_callback() {
  
  if (callback_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    callback_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMS.callback)
  return callback_;
}
inline void SMS::set_allocated_callback(::common::String* callback) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(callback_);
  }
  if (callback) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      callback = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, callback, submessage_arena);
    }
    
  } else {
    
  }
  callback_ = callback;
  // @@protoc_insertion_point(field_set_allocated:api.SMS.callback)
}

// .common.String app = 6;
inline bool SMS::has_app() const {
  return this != internal_default_instance() && app_ != NULL;
}
inline const ::common::String& SMS::_internal_app() const {
  return *app_;
}
inline const ::common::String& SMS::app() const {
  const ::common::String* p = app_;
  // @@protoc_insertion_point(field_get:api.SMS.app)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMS::release_app() {
  // @@protoc_insertion_point(field_release:api.SMS.app)
  
  ::common::String* temp = app_;
  app_ = NULL;
  return temp;
}
inline ::common::String* SMS::mutable_app() {
  
  if (app_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMS.app)
  return app_;
}
inline void SMS::set_allocated_app(::common::String* app) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(app_);
  }
  if (app) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:api.SMS.app)
}

// -------------------------------------------------------------------

// SMSBlast

// .common.String service = 1;
inline bool SMSBlast::has_service() const {
  return this != internal_default_instance() && service_ != NULL;
}
inline const ::common::String& SMSBlast::_internal_service() const {
  return *service_;
}
inline const ::common::String& SMSBlast::service() const {
  const ::common::String* p = service_;
  // @@protoc_insertion_point(field_get:api.SMSBlast.service)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSBlast::release_service() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.service)
  
  ::common::String* temp = service_;
  service_ = NULL;
  return temp;
}
inline ::common::String* SMSBlast::mutable_service() {
  
  if (service_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.service)
  return service_;
}
inline void SMSBlast::set_allocated_service(::common::String* service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(service_);
  }
  if (service) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    
  } else {
    
  }
  service_ = service;
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.service)
}

// .common.StringArray to = 2;
inline bool SMSBlast::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline const ::common::StringArray& SMSBlast::_internal_to() const {
  return *to_;
}
inline const ::common::StringArray& SMSBlast::to() const {
  const ::common::StringArray* p = to_;
  // @@protoc_insertion_point(field_get:api.SMSBlast.to)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* SMSBlast::release_to() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.to)
  
  ::common::StringArray* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::common::StringArray* SMSBlast::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.to)
  return to_;
}
inline void SMSBlast::set_allocated_to(::common::StringArray* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(to_);
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.to)
}

// .common.String message = 3;
inline bool SMSBlast::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::common::String& SMSBlast::_internal_message() const {
  return *message_;
}
inline const ::common::String& SMSBlast::message() const {
  const ::common::String* p = message_;
  // @@protoc_insertion_point(field_get:api.SMSBlast.message)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSBlast::release_message() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.message)
  
  ::common::String* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::common::String* SMSBlast::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.message)
  return message_;
}
inline void SMSBlast::set_allocated_message(::common::String* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.message)
}

// .common.String mediaURL = 4;
inline bool SMSBlast::has_mediaurl() const {
  return this != internal_default_instance() && mediaurl_ != NULL;
}
inline const ::common::String& SMSBlast::_internal_mediaurl() const {
  return *mediaurl_;
}
inline const ::common::String& SMSBlast::mediaurl() const {
  const ::common::String* p = mediaurl_;
  // @@protoc_insertion_point(field_get:api.SMSBlast.mediaURL)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSBlast::release_mediaurl() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.mediaURL)
  
  ::common::String* temp = mediaurl_;
  mediaurl_ = NULL;
  return temp;
}
inline ::common::String* SMSBlast::mutable_mediaurl() {
  
  if (mediaurl_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    mediaurl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.mediaURL)
  return mediaurl_;
}
inline void SMSBlast::set_allocated_mediaurl(::common::String* mediaurl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mediaurl_);
  }
  if (mediaurl) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mediaurl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mediaurl, submessage_arena);
    }
    
  } else {
    
  }
  mediaurl_ = mediaurl;
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.mediaURL)
}

// .common.String callback = 5;
inline bool SMSBlast::has_callback() const {
  return this != internal_default_instance() && callback_ != NULL;
}
inline const ::common::String& SMSBlast::_internal_callback() const {
  return *callback_;
}
inline const ::common::String& SMSBlast::callback() const {
  const ::common::String* p = callback_;
  // @@protoc_insertion_point(field_get:api.SMSBlast.callback)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSBlast::release_callback() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.callback)
  
  ::common::String* temp = callback_;
  callback_ = NULL;
  return temp;
}
inline ::common::String* SMSBlast::mutable_callback() {
  
  if (callback_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    callback_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.callback)
  return callback_;
}
inline void SMSBlast::set_allocated_callback(::common::String* callback) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(callback_);
  }
  if (callback) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      callback = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, callback, submessage_arena);
    }
    
  } else {
    
  }
  callback_ = callback;
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.callback)
}

// .common.String app = 6;
inline bool SMSBlast::has_app() const {
  return this != internal_default_instance() && app_ != NULL;
}
inline const ::common::String& SMSBlast::_internal_app() const {
  return *app_;
}
inline const ::common::String& SMSBlast::app() const {
  const ::common::String* p = app_;
  // @@protoc_insertion_point(field_get:api.SMSBlast.app)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSBlast::release_app() {
  // @@protoc_insertion_point(field_release:api.SMSBlast.app)
  
  ::common::String* temp = app_;
  app_ = NULL;
  return temp;
}
inline ::common::String* SMSBlast::mutable_app() {
  
  if (app_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSBlast.app)
  return app_;
}
inline void SMSBlast::set_allocated_app(::common::String* app) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(app_);
  }
  if (app) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:api.SMSBlast.app)
}

// -------------------------------------------------------------------

// EmailRequest

// .common.String from_name = 1;
inline bool EmailRequest::has_from_name() const {
  return this != internal_default_instance() && from_name_ != NULL;
}
inline const ::common::String& EmailRequest::_internal_from_name() const {
  return *from_name_;
}
inline const ::common::String& EmailRequest::from_name() const {
  const ::common::String* p = from_name_;
  // @@protoc_insertion_point(field_get:api.EmailRequest.from_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* EmailRequest::release_from_name() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.from_name)
  
  ::common::String* temp = from_name_;
  from_name_ = NULL;
  return temp;
}
inline ::common::String* EmailRequest::mutable_from_name() {
  
  if (from_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.from_name)
  return from_name_;
}
inline void EmailRequest::set_allocated_from_name(::common::String* from_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_name_);
  }
  if (from_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_name, submessage_arena);
    }
    
  } else {
    
  }
  from_name_ = from_name;
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.from_name)
}

// .common.String from_email = 2;
inline bool EmailRequest::has_from_email() const {
  return this != internal_default_instance() && from_email_ != NULL;
}
inline const ::common::String& EmailRequest::_internal_from_email() const {
  return *from_email_;
}
inline const ::common::String& EmailRequest::from_email() const {
  const ::common::String* p = from_email_;
  // @@protoc_insertion_point(field_get:api.EmailRequest.from_email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* EmailRequest::release_from_email() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.from_email)
  
  ::common::String* temp = from_email_;
  from_email_ = NULL;
  return temp;
}
inline ::common::String* EmailRequest::mutable_from_email() {
  
  if (from_email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.from_email)
  return from_email_;
}
inline void EmailRequest::set_allocated_from_email(::common::String* from_email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_email_);
  }
  if (from_email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_email, submessage_arena);
    }
    
  } else {
    
  }
  from_email_ = from_email;
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.from_email)
}

// .api.Email email = 3;
inline bool EmailRequest::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline void EmailRequest::clear_email() {
  if (GetArenaNoVirtual() == NULL && email_ != NULL) {
    delete email_;
  }
  email_ = NULL;
}
inline const ::api::Email& EmailRequest::_internal_email() const {
  return *email_;
}
inline const ::api::Email& EmailRequest::email() const {
  const ::api::Email* p = email_;
  // @@protoc_insertion_point(field_get:api.EmailRequest.email)
  return p != NULL ? *p : *reinterpret_cast<const ::api::Email*>(
      &::api::_Email_default_instance_);
}
inline ::api::Email* EmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:api.EmailRequest.email)
  
  ::api::Email* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::api::Email* EmailRequest::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::api::Email>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailRequest.email)
  return email_;
}
inline void EmailRequest::set_allocated_email(::api::Email* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete email_;
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.EmailRequest.email)
}

// -------------------------------------------------------------------

// EmailBlastRequest

// .common.String from_name = 1;
inline bool EmailBlastRequest::has_from_name() const {
  return this != internal_default_instance() && from_name_ != NULL;
}
inline const ::common::String& EmailBlastRequest::_internal_from_name() const {
  return *from_name_;
}
inline const ::common::String& EmailBlastRequest::from_name() const {
  const ::common::String* p = from_name_;
  // @@protoc_insertion_point(field_get:api.EmailBlastRequest.from_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* EmailBlastRequest::release_from_name() {
  // @@protoc_insertion_point(field_release:api.EmailBlastRequest.from_name)
  
  ::common::String* temp = from_name_;
  from_name_ = NULL;
  return temp;
}
inline ::common::String* EmailBlastRequest::mutable_from_name() {
  
  if (from_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailBlastRequest.from_name)
  return from_name_;
}
inline void EmailBlastRequest::set_allocated_from_name(::common::String* from_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_name_);
  }
  if (from_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_name, submessage_arena);
    }
    
  } else {
    
  }
  from_name_ = from_name;
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlastRequest.from_name)
}

// .common.String from_email = 2;
inline bool EmailBlastRequest::has_from_email() const {
  return this != internal_default_instance() && from_email_ != NULL;
}
inline const ::common::String& EmailBlastRequest::_internal_from_email() const {
  return *from_email_;
}
inline const ::common::String& EmailBlastRequest::from_email() const {
  const ::common::String* p = from_email_;
  // @@protoc_insertion_point(field_get:api.EmailBlastRequest.from_email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* EmailBlastRequest::release_from_email() {
  // @@protoc_insertion_point(field_release:api.EmailBlastRequest.from_email)
  
  ::common::String* temp = from_email_;
  from_email_ = NULL;
  return temp;
}
inline ::common::String* EmailBlastRequest::mutable_from_email() {
  
  if (from_email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailBlastRequest.from_email)
  return from_email_;
}
inline void EmailBlastRequest::set_allocated_from_email(::common::String* from_email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_email_);
  }
  if (from_email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_email, submessage_arena);
    }
    
  } else {
    
  }
  from_email_ = from_email;
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlastRequest.from_email)
}

// .api.EmailBlast blast = 3;
inline bool EmailBlastRequest::has_blast() const {
  return this != internal_default_instance() && blast_ != NULL;
}
inline void EmailBlastRequest::clear_blast() {
  if (GetArenaNoVirtual() == NULL && blast_ != NULL) {
    delete blast_;
  }
  blast_ = NULL;
}
inline const ::api::EmailBlast& EmailBlastRequest::_internal_blast() const {
  return *blast_;
}
inline const ::api::EmailBlast& EmailBlastRequest::blast() const {
  const ::api::EmailBlast* p = blast_;
  // @@protoc_insertion_point(field_get:api.EmailBlastRequest.blast)
  return p != NULL ? *p : *reinterpret_cast<const ::api::EmailBlast*>(
      &::api::_EmailBlast_default_instance_);
}
inline ::api::EmailBlast* EmailBlastRequest::release_blast() {
  // @@protoc_insertion_point(field_release:api.EmailBlastRequest.blast)
  
  ::api::EmailBlast* temp = blast_;
  blast_ = NULL;
  return temp;
}
inline ::api::EmailBlast* EmailBlastRequest::mutable_blast() {
  
  if (blast_ == NULL) {
    auto* p = CreateMaybeMessage<::api::EmailBlast>(GetArenaNoVirtual());
    blast_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailBlastRequest.blast)
  return blast_;
}
inline void EmailBlastRequest::set_allocated_blast(::api::EmailBlast* blast) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete blast_;
  }
  if (blast) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blast = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blast, submessage_arena);
    }
    
  } else {
    
  }
  blast_ = blast;
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlastRequest.blast)
}

// -------------------------------------------------------------------

// EmailBlast

// .common.StringMap name_address = 1;
inline bool EmailBlast::has_name_address() const {
  return this != internal_default_instance() && name_address_ != NULL;
}
inline const ::common::StringMap& EmailBlast::_internal_name_address() const {
  return *name_address_;
}
inline const ::common::StringMap& EmailBlast::name_address() const {
  const ::common::StringMap* p = name_address_;
  // @@protoc_insertion_point(field_get:api.EmailBlast.name_address)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* EmailBlast::release_name_address() {
  // @@protoc_insertion_point(field_release:api.EmailBlast.name_address)
  
  ::common::StringMap* temp = name_address_;
  name_address_ = NULL;
  return temp;
}
inline ::common::StringMap* EmailBlast::mutable_name_address() {
  
  if (name_address_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    name_address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailBlast.name_address)
  return name_address_;
}
inline void EmailBlast::set_allocated_name_address(::common::StringMap* name_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_address_);
  }
  if (name_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name_address, submessage_arena);
    }
    
  } else {
    
  }
  name_address_ = name_address;
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlast.name_address)
}

// .common.String subject = 2;
inline bool EmailBlast::has_subject() const {
  return this != internal_default_instance() && subject_ != NULL;
}
inline const ::common::String& EmailBlast::_internal_subject() const {
  return *subject_;
}
inline const ::common::String& EmailBlast::subject() const {
  const ::common::String* p = subject_;
  // @@protoc_insertion_point(field_get:api.EmailBlast.subject)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* EmailBlast::release_subject() {
  // @@protoc_insertion_point(field_release:api.EmailBlast.subject)
  
  ::common::String* temp = subject_;
  subject_ = NULL;
  return temp;
}
inline ::common::String* EmailBlast::mutable_subject() {
  
  if (subject_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    subject_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailBlast.subject)
  return subject_;
}
inline void EmailBlast::set_allocated_subject(::common::String* subject) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(subject_);
  }
  if (subject) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subject = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlast.subject)
}

// .common.String plain = 3;
inline bool EmailBlast::has_plain() const {
  return this != internal_default_instance() && plain_ != NULL;
}
inline const ::common::String& EmailBlast::_internal_plain() const {
  return *plain_;
}
inline const ::common::String& EmailBlast::plain() const {
  const ::common::String* p = plain_;
  // @@protoc_insertion_point(field_get:api.EmailBlast.plain)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* EmailBlast::release_plain() {
  // @@protoc_insertion_point(field_release:api.EmailBlast.plain)
  
  ::common::String* temp = plain_;
  plain_ = NULL;
  return temp;
}
inline ::common::String* EmailBlast::mutable_plain() {
  
  if (plain_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    plain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailBlast.plain)
  return plain_;
}
inline void EmailBlast::set_allocated_plain(::common::String* plain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(plain_);
  }
  if (plain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plain, submessage_arena);
    }
    
  } else {
    
  }
  plain_ = plain;
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlast.plain)
}

// .common.String html = 4;
inline bool EmailBlast::has_html() const {
  return this != internal_default_instance() && html_ != NULL;
}
inline const ::common::String& EmailBlast::_internal_html() const {
  return *html_;
}
inline const ::common::String& EmailBlast::html() const {
  const ::common::String* p = html_;
  // @@protoc_insertion_point(field_get:api.EmailBlast.html)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* EmailBlast::release_html() {
  // @@protoc_insertion_point(field_release:api.EmailBlast.html)
  
  ::common::String* temp = html_;
  html_ = NULL;
  return temp;
}
inline ::common::String* EmailBlast::mutable_html() {
  
  if (html_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    html_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.EmailBlast.html)
  return html_;
}
inline void EmailBlast::set_allocated_html(::common::String* html) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(html_);
  }
  if (html) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      html = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, html, submessage_arena);
    }
    
  } else {
    
  }
  html_ = html;
  // @@protoc_insertion_point(field_set_allocated:api.EmailBlast.html)
}

// -------------------------------------------------------------------

// Email

// .common.String name = 1;
inline bool Email::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::common::String& Email::_internal_name() const {
  return *name_;
}
inline const ::common::String& Email::name() const {
  const ::common::String* p = name_;
  // @@protoc_insertion_point(field_get:api.Email.name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Email::release_name() {
  // @@protoc_insertion_point(field_release:api.Email.name)
  
  ::common::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::common::String* Email::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Email.name)
  return name_;
}
inline void Email::set_allocated_name(::common::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:api.Email.name)
}

// .common.String address = 2;
inline bool Email::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline const ::common::String& Email::_internal_address() const {
  return *address_;
}
inline const ::common::String& Email::address() const {
  const ::common::String* p = address_;
  // @@protoc_insertion_point(field_get:api.Email.address)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Email::release_address() {
  // @@protoc_insertion_point(field_release:api.Email.address)
  
  ::common::String* temp = address_;
  address_ = NULL;
  return temp;
}
inline ::common::String* Email::mutable_address() {
  
  if (address_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Email.address)
  return address_;
}
inline void Email::set_allocated_address(::common::String* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(address_);
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:api.Email.address)
}

// .common.String subject = 3;
inline bool Email::has_subject() const {
  return this != internal_default_instance() && subject_ != NULL;
}
inline const ::common::String& Email::_internal_subject() const {
  return *subject_;
}
inline const ::common::String& Email::subject() const {
  const ::common::String* p = subject_;
  // @@protoc_insertion_point(field_get:api.Email.subject)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Email::release_subject() {
  // @@protoc_insertion_point(field_release:api.Email.subject)
  
  ::common::String* temp = subject_;
  subject_ = NULL;
  return temp;
}
inline ::common::String* Email::mutable_subject() {
  
  if (subject_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    subject_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Email.subject)
  return subject_;
}
inline void Email::set_allocated_subject(::common::String* subject) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(subject_);
  }
  if (subject) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subject = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:api.Email.subject)
}

// .common.String plain = 4;
inline bool Email::has_plain() const {
  return this != internal_default_instance() && plain_ != NULL;
}
inline const ::common::String& Email::_internal_plain() const {
  return *plain_;
}
inline const ::common::String& Email::plain() const {
  const ::common::String* p = plain_;
  // @@protoc_insertion_point(field_get:api.Email.plain)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Email::release_plain() {
  // @@protoc_insertion_point(field_release:api.Email.plain)
  
  ::common::String* temp = plain_;
  plain_ = NULL;
  return temp;
}
inline ::common::String* Email::mutable_plain() {
  
  if (plain_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    plain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Email.plain)
  return plain_;
}
inline void Email::set_allocated_plain(::common::String* plain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(plain_);
  }
  if (plain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plain, submessage_arena);
    }
    
  } else {
    
  }
  plain_ = plain;
  // @@protoc_insertion_point(field_set_allocated:api.Email.plain)
}

// .common.String html = 5;
inline bool Email::has_html() const {
  return this != internal_default_instance() && html_ != NULL;
}
inline const ::common::String& Email::_internal_html() const {
  return *html_;
}
inline const ::common::String& Email::html() const {
  const ::common::String* p = html_;
  // @@protoc_insertion_point(field_get:api.Email.html)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Email::release_html() {
  // @@protoc_insertion_point(field_release:api.Email.html)
  
  ::common::String* temp = html_;
  html_ = NULL;
  return temp;
}
inline ::common::String* Email::mutable_html() {
  
  if (html_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    html_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Email.html)
  return html_;
}
inline void Email::set_allocated_html(::common::String* html) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(html_);
  }
  if (html) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      html = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, html, submessage_arena);
    }
    
  } else {
    
  }
  html_ = html;
  // @@protoc_insertion_point(field_set_allocated:api.Email.html)
}

// -------------------------------------------------------------------

// Call

// .common.String from = 1;
inline bool Call::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline const ::common::String& Call::_internal_from() const {
  return *from_;
}
inline const ::common::String& Call::from() const {
  const ::common::String* p = from_;
  // @@protoc_insertion_point(field_get:api.Call.from)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Call::release_from() {
  // @@protoc_insertion_point(field_release:api.Call.from)
  
  ::common::String* temp = from_;
  from_ = NULL;
  return temp;
}
inline ::common::String* Call::mutable_from() {
  
  if (from_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Call.from)
  return from_;
}
inline void Call::set_allocated_from(::common::String* from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_);
  }
  if (from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:api.Call.from)
}

// .common.String to = 2;
inline bool Call::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline const ::common::String& Call::_internal_to() const {
  return *to_;
}
inline const ::common::String& Call::to() const {
  const ::common::String* p = to_;
  // @@protoc_insertion_point(field_get:api.Call.to)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Call::release_to() {
  // @@protoc_insertion_point(field_release:api.Call.to)
  
  ::common::String* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::common::String* Call::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Call.to)
  return to_;
}
inline void Call::set_allocated_to(::common::String* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(to_);
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.Call.to)
}

// .common.String app = 3;
inline bool Call::has_app() const {
  return this != internal_default_instance() && app_ != NULL;
}
inline const ::common::String& Call::_internal_app() const {
  return *app_;
}
inline const ::common::String& Call::app() const {
  const ::common::String* p = app_;
  // @@protoc_insertion_point(field_get:api.Call.app)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Call::release_app() {
  // @@protoc_insertion_point(field_release:api.Call.app)
  
  ::common::String* temp = app_;
  app_ = NULL;
  return temp;
}
inline ::common::String* Call::mutable_app() {
  
  if (app_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Call.app)
  return app_;
}
inline void Call::set_allocated_app(::common::String* app) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(app_);
  }
  if (app) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:api.Call.app)
}

// -------------------------------------------------------------------

// CallBlast

// .common.String from = 1;
inline bool CallBlast::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline const ::common::String& CallBlast::_internal_from() const {
  return *from_;
}
inline const ::common::String& CallBlast::from() const {
  const ::common::String* p = from_;
  // @@protoc_insertion_point(field_get:api.CallBlast.from)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* CallBlast::release_from() {
  // @@protoc_insertion_point(field_release:api.CallBlast.from)
  
  ::common::String* temp = from_;
  from_ = NULL;
  return temp;
}
inline ::common::String* CallBlast::mutable_from() {
  
  if (from_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallBlast.from)
  return from_;
}
inline void CallBlast::set_allocated_from(::common::String* from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_);
  }
  if (from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:api.CallBlast.from)
}

// .common.StringArray to = 2;
inline bool CallBlast::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline const ::common::StringArray& CallBlast::_internal_to() const {
  return *to_;
}
inline const ::common::StringArray& CallBlast::to() const {
  const ::common::StringArray* p = to_;
  // @@protoc_insertion_point(field_get:api.CallBlast.to)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* CallBlast::release_to() {
  // @@protoc_insertion_point(field_release:api.CallBlast.to)
  
  ::common::StringArray* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::common::StringArray* CallBlast::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallBlast.to)
  return to_;
}
inline void CallBlast::set_allocated_to(::common::StringArray* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(to_);
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.CallBlast.to)
}

// .common.String app = 3;
inline bool CallBlast::has_app() const {
  return this != internal_default_instance() && app_ != NULL;
}
inline const ::common::String& CallBlast::_internal_app() const {
  return *app_;
}
inline const ::common::String& CallBlast::app() const {
  const ::common::String* p = app_;
  // @@protoc_insertion_point(field_get:api.CallBlast.app)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* CallBlast::release_app() {
  // @@protoc_insertion_point(field_release:api.CallBlast.app)
  
  ::common::String* temp = app_;
  app_ = NULL;
  return temp;
}
inline ::common::String* CallBlast::mutable_app() {
  
  if (app_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallBlast.app)
  return app_;
}
inline void CallBlast::set_allocated_app(::common::String* app) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(app_);
  }
  if (app) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:api.CallBlast.app)
}

// -------------------------------------------------------------------

// User

// .common.Identifier user_id = 1;
inline bool User::has_user_id() const {
  return this != internal_default_instance() && user_id_ != NULL;
}
inline const ::common::Identifier& User::_internal_user_id() const {
  return *user_id_;
}
inline const ::common::Identifier& User::user_id() const {
  const ::common::Identifier* p = user_id_;
  // @@protoc_insertion_point(field_get:api.User.user_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* User::release_user_id() {
  // @@protoc_insertion_point(field_release:api.User.user_id)
  
  ::common::Identifier* temp = user_id_;
  user_id_ = NULL;
  return temp;
}
inline ::common::Identifier* User::mutable_user_id() {
  
  if (user_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    user_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.user_id)
  return user_id_;
}
inline void User::set_allocated_user_id(::common::Identifier* user_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_id_);
  }
  if (user_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_id, submessage_arena);
    }
    
  } else {
    
  }
  user_id_ = user_id;
  // @@protoc_insertion_point(field_set_allocated:api.User.user_id)
}

// .common.String name = 2;
inline bool User::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::common::String& User::_internal_name() const {
  return *name_;
}
inline const ::common::String& User::name() const {
  const ::common::String* p = name_;
  // @@protoc_insertion_point(field_get:api.User.name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_name() {
  // @@protoc_insertion_point(field_release:api.User.name)
  
  ::common::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.name)
  return name_;
}
inline void User::set_allocated_name(::common::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:api.User.name)
}

// .common.String given_name = 3;
inline bool User::has_given_name() const {
  return this != internal_default_instance() && given_name_ != NULL;
}
inline const ::common::String& User::_internal_given_name() const {
  return *given_name_;
}
inline const ::common::String& User::given_name() const {
  const ::common::String* p = given_name_;
  // @@protoc_insertion_point(field_get:api.User.given_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_given_name() {
  // @@protoc_insertion_point(field_release:api.User.given_name)
  
  ::common::String* temp = given_name_;
  given_name_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_given_name() {
  
  if (given_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    given_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.given_name)
  return given_name_;
}
inline void User::set_allocated_given_name(::common::String* given_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(given_name_);
  }
  if (given_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      given_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, given_name, submessage_arena);
    }
    
  } else {
    
  }
  given_name_ = given_name;
  // @@protoc_insertion_point(field_set_allocated:api.User.given_name)
}

// .common.String family_name = 4;
inline bool User::has_family_name() const {
  return this != internal_default_instance() && family_name_ != NULL;
}
inline const ::common::String& User::_internal_family_name() const {
  return *family_name_;
}
inline const ::common::String& User::family_name() const {
  const ::common::String* p = family_name_;
  // @@protoc_insertion_point(field_get:api.User.family_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_family_name() {
  // @@protoc_insertion_point(field_release:api.User.family_name)
  
  ::common::String* temp = family_name_;
  family_name_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_family_name() {
  
  if (family_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    family_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.family_name)
  return family_name_;
}
inline void User::set_allocated_family_name(::common::String* family_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(family_name_);
  }
  if (family_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      family_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, family_name, submessage_arena);
    }
    
  } else {
    
  }
  family_name_ = family_name;
  // @@protoc_insertion_point(field_set_allocated:api.User.family_name)
}

// .common.String gender = 5;
inline bool User::has_gender() const {
  return this != internal_default_instance() && gender_ != NULL;
}
inline const ::common::String& User::_internal_gender() const {
  return *gender_;
}
inline const ::common::String& User::gender() const {
  const ::common::String* p = gender_;
  // @@protoc_insertion_point(field_get:api.User.gender)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_gender() {
  // @@protoc_insertion_point(field_release:api.User.gender)
  
  ::common::String* temp = gender_;
  gender_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_gender() {
  
  if (gender_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    gender_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.gender)
  return gender_;
}
inline void User::set_allocated_gender(::common::String* gender) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gender_);
  }
  if (gender) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gender = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gender, submessage_arena);
    }
    
  } else {
    
  }
  gender_ = gender;
  // @@protoc_insertion_point(field_set_allocated:api.User.gender)
}

// .common.String birthdate = 6;
inline bool User::has_birthdate() const {
  return this != internal_default_instance() && birthdate_ != NULL;
}
inline const ::common::String& User::_internal_birthdate() const {
  return *birthdate_;
}
inline const ::common::String& User::birthdate() const {
  const ::common::String* p = birthdate_;
  // @@protoc_insertion_point(field_get:api.User.birthdate)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_birthdate() {
  // @@protoc_insertion_point(field_release:api.User.birthdate)
  
  ::common::String* temp = birthdate_;
  birthdate_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_birthdate() {
  
  if (birthdate_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    birthdate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.birthdate)
  return birthdate_;
}
inline void User::set_allocated_birthdate(::common::String* birthdate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(birthdate_);
  }
  if (birthdate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      birthdate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, birthdate, submessage_arena);
    }
    
  } else {
    
  }
  birthdate_ = birthdate;
  // @@protoc_insertion_point(field_set_allocated:api.User.birthdate)
}

// .common.Identifier email = 7;
inline bool User::has_email() const {
  return this != internal_default_instance() && email_ != NULL;
}
inline const ::common::Identifier& User::_internal_email() const {
  return *email_;
}
inline const ::common::Identifier& User::email() const {
  const ::common::Identifier* p = email_;
  // @@protoc_insertion_point(field_get:api.User.email)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* User::release_email() {
  // @@protoc_insertion_point(field_release:api.User.email)
  
  ::common::Identifier* temp = email_;
  email_ = NULL;
  return temp;
}
inline ::common::Identifier* User::mutable_email() {
  
  if (email_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    email_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.email)
  return email_;
}
inline void User::set_allocated_email(::common::Identifier* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(email_);
  }
  if (email) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    
  } else {
    
  }
  email_ = email;
  // @@protoc_insertion_point(field_set_allocated:api.User.email)
}

// .common.Identifier phone_number = 8;
inline bool User::has_phone_number() const {
  return this != internal_default_instance() && phone_number_ != NULL;
}
inline const ::common::Identifier& User::_internal_phone_number() const {
  return *phone_number_;
}
inline const ::common::Identifier& User::phone_number() const {
  const ::common::Identifier* p = phone_number_;
  // @@protoc_insertion_point(field_get:api.User.phone_number)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* User::release_phone_number() {
  // @@protoc_insertion_point(field_release:api.User.phone_number)
  
  ::common::Identifier* temp = phone_number_;
  phone_number_ = NULL;
  return temp;
}
inline ::common::Identifier* User::mutable_phone_number() {
  
  if (phone_number_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    phone_number_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.phone_number)
  return phone_number_;
}
inline void User::set_allocated_phone_number(::common::Identifier* phone_number) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(phone_number_);
  }
  if (phone_number) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      phone_number = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phone_number, submessage_arena);
    }
    
  } else {
    
  }
  phone_number_ = phone_number;
  // @@protoc_insertion_point(field_set_allocated:api.User.phone_number)
}

// .common.String picture = 9;
inline bool User::has_picture() const {
  return this != internal_default_instance() && picture_ != NULL;
}
inline const ::common::String& User::_internal_picture() const {
  return *picture_;
}
inline const ::common::String& User::picture() const {
  const ::common::String* p = picture_;
  // @@protoc_insertion_point(field_get:api.User.picture)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_picture() {
  // @@protoc_insertion_point(field_release:api.User.picture)
  
  ::common::String* temp = picture_;
  picture_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_picture() {
  
  if (picture_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    picture_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.picture)
  return picture_;
}
inline void User::set_allocated_picture(::common::String* picture) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(picture_);
  }
  if (picture) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      picture = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, picture, submessage_arena);
    }
    
  } else {
    
  }
  picture_ = picture;
  // @@protoc_insertion_point(field_set_allocated:api.User.picture)
}

// .common.StringMap user_metadata = 10;
inline bool User::has_user_metadata() const {
  return this != internal_default_instance() && user_metadata_ != NULL;
}
inline const ::common::StringMap& User::_internal_user_metadata() const {
  return *user_metadata_;
}
inline const ::common::StringMap& User::user_metadata() const {
  const ::common::StringMap* p = user_metadata_;
  // @@protoc_insertion_point(field_get:api.User.user_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* User::release_user_metadata() {
  // @@protoc_insertion_point(field_release:api.User.user_metadata)
  
  ::common::StringMap* temp = user_metadata_;
  user_metadata_ = NULL;
  return temp;
}
inline ::common::StringMap* User::mutable_user_metadata() {
  
  if (user_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    user_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.user_metadata)
  return user_metadata_;
}
inline void User::set_allocated_user_metadata(::common::StringMap* user_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_metadata_);
  }
  if (user_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_metadata, submessage_arena);
    }
    
  } else {
    
  }
  user_metadata_ = user_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.User.user_metadata)
}

// .common.StringMap app_metadata = 11;
inline bool User::has_app_metadata() const {
  return this != internal_default_instance() && app_metadata_ != NULL;
}
inline const ::common::StringMap& User::_internal_app_metadata() const {
  return *app_metadata_;
}
inline const ::common::StringMap& User::app_metadata() const {
  const ::common::StringMap* p = app_metadata_;
  // @@protoc_insertion_point(field_get:api.User.app_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* User::release_app_metadata() {
  // @@protoc_insertion_point(field_release:api.User.app_metadata)
  
  ::common::StringMap* temp = app_metadata_;
  app_metadata_ = NULL;
  return temp;
}
inline ::common::StringMap* User::mutable_app_metadata() {
  
  if (app_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    app_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.app_metadata)
  return app_metadata_;
}
inline void User::set_allocated_app_metadata(::common::StringMap* app_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(app_metadata_);
  }
  if (app_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app_metadata, submessage_arena);
    }
    
  } else {
    
  }
  app_metadata_ = app_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.User.app_metadata)
}

// .common.String last_ip = 12;
inline bool User::has_last_ip() const {
  return this != internal_default_instance() && last_ip_ != NULL;
}
inline const ::common::String& User::_internal_last_ip() const {
  return *last_ip_;
}
inline const ::common::String& User::last_ip() const {
  const ::common::String* p = last_ip_;
  // @@protoc_insertion_point(field_get:api.User.last_ip)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_last_ip() {
  // @@protoc_insertion_point(field_release:api.User.last_ip)
  
  ::common::String* temp = last_ip_;
  last_ip_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_last_ip() {
  
  if (last_ip_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    last_ip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.last_ip)
  return last_ip_;
}
inline void User::set_allocated_last_ip(::common::String* last_ip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_ip_);
  }
  if (last_ip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_ip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_ip, submessage_arena);
    }
    
  } else {
    
  }
  last_ip_ = last_ip;
  // @@protoc_insertion_point(field_set_allocated:api.User.last_ip)
}

// bool blocked = 13;
inline void User::clear_blocked() {
  blocked_ = false;
}
inline bool User::blocked() const {
  // @@protoc_insertion_point(field_get:api.User.blocked)
  return blocked_;
}
inline void User::set_blocked(bool value) {
  
  blocked_ = value;
  // @@protoc_insertion_point(field_set:api.User.blocked)
}

// .common.String nickname = 14;
inline bool User::has_nickname() const {
  return this != internal_default_instance() && nickname_ != NULL;
}
inline const ::common::String& User::_internal_nickname() const {
  return *nickname_;
}
inline const ::common::String& User::nickname() const {
  const ::common::String* p = nickname_;
  // @@protoc_insertion_point(field_get:api.User.nickname)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_nickname() {
  // @@protoc_insertion_point(field_release:api.User.nickname)
  
  ::common::String* temp = nickname_;
  nickname_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_nickname() {
  
  if (nickname_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    nickname_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.nickname)
  return nickname_;
}
inline void User::set_allocated_nickname(::common::String* nickname) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(nickname_);
  }
  if (nickname) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nickname = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nickname, submessage_arena);
    }
    
  } else {
    
  }
  nickname_ = nickname;
  // @@protoc_insertion_point(field_set_allocated:api.User.nickname)
}

// .common.StringArray multifactor = 15;
inline bool User::has_multifactor() const {
  return this != internal_default_instance() && multifactor_ != NULL;
}
inline const ::common::StringArray& User::_internal_multifactor() const {
  return *multifactor_;
}
inline const ::common::StringArray& User::multifactor() const {
  const ::common::StringArray* p = multifactor_;
  // @@protoc_insertion_point(field_get:api.User.multifactor)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* User::release_multifactor() {
  // @@protoc_insertion_point(field_release:api.User.multifactor)
  
  ::common::StringArray* temp = multifactor_;
  multifactor_ = NULL;
  return temp;
}
inline ::common::StringArray* User::mutable_multifactor() {
  
  if (multifactor_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    multifactor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.multifactor)
  return multifactor_;
}
inline void User::set_allocated_multifactor(::common::StringArray* multifactor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(multifactor_);
  }
  if (multifactor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multifactor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multifactor, submessage_arena);
    }
    
  } else {
    
  }
  multifactor_ = multifactor;
  // @@protoc_insertion_point(field_set_allocated:api.User.multifactor)
}

// .common.String created_at = 17;
inline bool User::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
inline const ::common::String& User::_internal_created_at() const {
  return *created_at_;
}
inline const ::common::String& User::created_at() const {
  const ::common::String* p = created_at_;
  // @@protoc_insertion_point(field_get:api.User.created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_created_at() {
  // @@protoc_insertion_point(field_release:api.User.created_at)
  
  ::common::String* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_created_at() {
  
  if (created_at_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    created_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.created_at)
  return created_at_;
}
inline void User::set_allocated_created_at(::common::String* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:api.User.created_at)
}

// .common.String updated_at = 18;
inline bool User::has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != NULL;
}
inline const ::common::String& User::_internal_updated_at() const {
  return *updated_at_;
}
inline const ::common::String& User::updated_at() const {
  const ::common::String* p = updated_at_;
  // @@protoc_insertion_point(field_get:api.User.updated_at)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_updated_at() {
  // @@protoc_insertion_point(field_release:api.User.updated_at)
  
  ::common::String* temp = updated_at_;
  updated_at_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_updated_at() {
  
  if (updated_at_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    updated_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.updated_at)
  return updated_at_;
}
inline void User::set_allocated_updated_at(::common::String* updated_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      updated_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:api.User.updated_at)
}

// bool phone_verified = 19;
inline void User::clear_phone_verified() {
  phone_verified_ = false;
}
inline bool User::phone_verified() const {
  // @@protoc_insertion_point(field_get:api.User.phone_verified)
  return phone_verified_;
}
inline void User::set_phone_verified(bool value) {
  
  phone_verified_ = value;
  // @@protoc_insertion_point(field_set:api.User.phone_verified)
}

// bool email_verified = 20;
inline void User::clear_email_verified() {
  email_verified_ = false;
}
inline bool User::email_verified() const {
  // @@protoc_insertion_point(field_get:api.User.email_verified)
  return email_verified_;
}
inline void User::set_email_verified(bool value) {
  
  email_verified_ = value;
  // @@protoc_insertion_point(field_set:api.User.email_verified)
}

// .common.String password = 21;
inline bool User::has_password() const {
  return this != internal_default_instance() && password_ != NULL;
}
inline const ::common::String& User::_internal_password() const {
  return *password_;
}
inline const ::common::String& User::password() const {
  const ::common::String* p = password_;
  // @@protoc_insertion_point(field_get:api.User.password)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* User::release_password() {
  // @@protoc_insertion_point(field_release:api.User.password)
  
  ::common::String* temp = password_;
  password_ = NULL;
  return temp;
}
inline ::common::String* User::mutable_password() {
  
  if (password_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    password_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.User.password)
  return password_;
}
inline void User::set_allocated_password(::common::String* password) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(password_);
  }
  if (password) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      password = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, password, submessage_arena);
    }
    
  } else {
    
  }
  password_ = password;
  // @@protoc_insertion_point(field_set_allocated:api.User.password)
}

// repeated .api.Identity identities = 22;
inline int User::identities_size() const {
  return identities_.size();
}
inline void User::clear_identities() {
  identities_.Clear();
}
inline ::api::Identity* User::mutable_identities(int index) {
  // @@protoc_insertion_point(field_mutable:api.User.identities)
  return identities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::Identity >*
User::mutable_identities() {
  // @@protoc_insertion_point(field_mutable_list:api.User.identities)
  return &identities_;
}
inline const ::api::Identity& User::identities(int index) const {
  // @@protoc_insertion_point(field_get:api.User.identities)
  return identities_.Get(index);
}
inline ::api::Identity* User::add_identities() {
  // @@protoc_insertion_point(field_add:api.User.identities)
  return identities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::Identity >&
User::identities() const {
  // @@protoc_insertion_point(field_list:api.User.identities)
  return identities_;
}

// -------------------------------------------------------------------

// Identity

// .common.String connection = 1;
inline bool Identity::has_connection() const {
  return this != internal_default_instance() && connection_ != NULL;
}
inline const ::common::String& Identity::_internal_connection() const {
  return *connection_;
}
inline const ::common::String& Identity::connection() const {
  const ::common::String* p = connection_;
  // @@protoc_insertion_point(field_get:api.Identity.connection)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Identity::release_connection() {
  // @@protoc_insertion_point(field_release:api.Identity.connection)
  
  ::common::String* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline ::common::String* Identity::mutable_connection() {
  
  if (connection_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    connection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Identity.connection)
  return connection_;
}
inline void Identity::set_allocated_connection(::common::String* connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(connection_);
  }
  if (connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection, submessage_arena);
    }
    
  } else {
    
  }
  connection_ = connection;
  // @@protoc_insertion_point(field_set_allocated:api.Identity.connection)
}

// .common.Identifier user_id = 2;
inline bool Identity::has_user_id() const {
  return this != internal_default_instance() && user_id_ != NULL;
}
inline const ::common::Identifier& Identity::_internal_user_id() const {
  return *user_id_;
}
inline const ::common::Identifier& Identity::user_id() const {
  const ::common::Identifier* p = user_id_;
  // @@protoc_insertion_point(field_get:api.Identity.user_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* Identity::release_user_id() {
  // @@protoc_insertion_point(field_release:api.Identity.user_id)
  
  ::common::Identifier* temp = user_id_;
  user_id_ = NULL;
  return temp;
}
inline ::common::Identifier* Identity::mutable_user_id() {
  
  if (user_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    user_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Identity.user_id)
  return user_id_;
}
inline void Identity::set_allocated_user_id(::common::Identifier* user_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_id_);
  }
  if (user_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_id, submessage_arena);
    }
    
  } else {
    
  }
  user_id_ = user_id;
  // @@protoc_insertion_point(field_set_allocated:api.Identity.user_id)
}

// .common.String provider = 3;
inline bool Identity::has_provider() const {
  return this != internal_default_instance() && provider_ != NULL;
}
inline const ::common::String& Identity::_internal_provider() const {
  return *provider_;
}
inline const ::common::String& Identity::provider() const {
  const ::common::String* p = provider_;
  // @@protoc_insertion_point(field_get:api.Identity.provider)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Identity::release_provider() {
  // @@protoc_insertion_point(field_release:api.Identity.provider)
  
  ::common::String* temp = provider_;
  provider_ = NULL;
  return temp;
}
inline ::common::String* Identity::mutable_provider() {
  
  if (provider_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    provider_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Identity.provider)
  return provider_;
}
inline void Identity::set_allocated_provider(::common::String* provider) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(provider_);
  }
  if (provider) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      provider = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    
  } else {
    
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:api.Identity.provider)
}

// bool isSocial = 4;
inline void Identity::clear_issocial() {
  issocial_ = false;
}
inline bool Identity::issocial() const {
  // @@protoc_insertion_point(field_get:api.Identity.isSocial)
  return issocial_;
}
inline void Identity::set_issocial(bool value) {
  
  issocial_ = value;
  // @@protoc_insertion_point(field_set:api.Identity.isSocial)
}

// -------------------------------------------------------------------

// Auth

// .common.String domain = 1;
inline bool Auth::has_domain() const {
  return this != internal_default_instance() && domain_ != NULL;
}
inline const ::common::String& Auth::_internal_domain() const {
  return *domain_;
}
inline const ::common::String& Auth::domain() const {
  const ::common::String* p = domain_;
  // @@protoc_insertion_point(field_get:api.Auth.domain)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Auth::release_domain() {
  // @@protoc_insertion_point(field_release:api.Auth.domain)
  
  ::common::String* temp = domain_;
  domain_ = NULL;
  return temp;
}
inline ::common::String* Auth::mutable_domain() {
  
  if (domain_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    domain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Auth.domain)
  return domain_;
}
inline void Auth::set_allocated_domain(::common::String* domain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(domain_);
  }
  if (domain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      domain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, domain, submessage_arena);
    }
    
  } else {
    
  }
  domain_ = domain;
  // @@protoc_insertion_point(field_set_allocated:api.Auth.domain)
}

// .common.String client_id = 2;
inline bool Auth::has_client_id() const {
  return this != internal_default_instance() && client_id_ != NULL;
}
inline const ::common::String& Auth::_internal_client_id() const {
  return *client_id_;
}
inline const ::common::String& Auth::client_id() const {
  const ::common::String* p = client_id_;
  // @@protoc_insertion_point(field_get:api.Auth.client_id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Auth::release_client_id() {
  // @@protoc_insertion_point(field_release:api.Auth.client_id)
  
  ::common::String* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
inline ::common::String* Auth::mutable_client_id() {
  
  if (client_id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    client_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Auth.client_id)
  return client_id_;
}
inline void Auth::set_allocated_client_id(::common::String* client_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:api.Auth.client_id)
}

// .common.String client_secret = 3;
inline bool Auth::has_client_secret() const {
  return this != internal_default_instance() && client_secret_ != NULL;
}
inline const ::common::String& Auth::_internal_client_secret() const {
  return *client_secret_;
}
inline const ::common::String& Auth::client_secret() const {
  const ::common::String* p = client_secret_;
  // @@protoc_insertion_point(field_get:api.Auth.client_secret)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Auth::release_client_secret() {
  // @@protoc_insertion_point(field_release:api.Auth.client_secret)
  
  ::common::String* temp = client_secret_;
  client_secret_ = NULL;
  return temp;
}
inline ::common::String* Auth::mutable_client_secret() {
  
  if (client_secret_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    client_secret_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Auth.client_secret)
  return client_secret_;
}
inline void Auth::set_allocated_client_secret(::common::String* client_secret) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_secret_);
  }
  if (client_secret) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_secret = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_secret, submessage_arena);
    }
    
  } else {
    
  }
  client_secret_ = client_secret;
  // @@protoc_insertion_point(field_set_allocated:api.Auth.client_secret)
}

// .common.String redirect = 4;
inline bool Auth::has_redirect() const {
  return this != internal_default_instance() && redirect_ != NULL;
}
inline const ::common::String& Auth::_internal_redirect() const {
  return *redirect_;
}
inline const ::common::String& Auth::redirect() const {
  const ::common::String* p = redirect_;
  // @@protoc_insertion_point(field_get:api.Auth.redirect)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Auth::release_redirect() {
  // @@protoc_insertion_point(field_release:api.Auth.redirect)
  
  ::common::String* temp = redirect_;
  redirect_ = NULL;
  return temp;
}
inline ::common::String* Auth::mutable_redirect() {
  
  if (redirect_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    redirect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Auth.redirect)
  return redirect_;
}
inline void Auth::set_allocated_redirect(::common::String* redirect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(redirect_);
  }
  if (redirect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      redirect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, redirect, submessage_arena);
    }
    
  } else {
    
  }
  redirect_ = redirect;
  // @@protoc_insertion_point(field_set_allocated:api.Auth.redirect)
}

// repeated .api.Scope scopes = 5;
inline int Auth::scopes_size() const {
  return scopes_.size();
}
inline void Auth::clear_scopes() {
  scopes_.Clear();
}
inline ::api::Scope Auth::scopes(int index) const {
  // @@protoc_insertion_point(field_get:api.Auth.scopes)
  return static_cast< ::api::Scope >(scopes_.Get(index));
}
inline void Auth::set_scopes(int index, ::api::Scope value) {
  scopes_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.Auth.scopes)
}
inline void Auth::add_scopes(::api::Scope value) {
  scopes_.Add(value);
  // @@protoc_insertion_point(field_add:api.Auth.scopes)
}
inline const ::google::protobuf::RepeatedField<int>&
Auth::scopes() const {
  // @@protoc_insertion_point(field_list:api.Auth.scopes)
  return scopes_;
}
inline ::google::protobuf::RepeatedField<int>*
Auth::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:api.Auth.scopes)
  return &scopes_;
}

// -------------------------------------------------------------------

// JSONWebKeys

// .common.String kty = 1;
inline bool JSONWebKeys::has_kty() const {
  return this != internal_default_instance() && kty_ != NULL;
}
inline const ::common::String& JSONWebKeys::_internal_kty() const {
  return *kty_;
}
inline const ::common::String& JSONWebKeys::kty() const {
  const ::common::String* p = kty_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.kty)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JSONWebKeys::release_kty() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.kty)
  
  ::common::String* temp = kty_;
  kty_ = NULL;
  return temp;
}
inline ::common::String* JSONWebKeys::mutable_kty() {
  
  if (kty_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    kty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.kty)
  return kty_;
}
inline void JSONWebKeys::set_allocated_kty(::common::String* kty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kty_);
  }
  if (kty) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kty, submessage_arena);
    }
    
  } else {
    
  }
  kty_ = kty;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.kty)
}

// .common.Identifier kid = 2;
inline bool JSONWebKeys::has_kid() const {
  return this != internal_default_instance() && kid_ != NULL;
}
inline const ::common::Identifier& JSONWebKeys::_internal_kid() const {
  return *kid_;
}
inline const ::common::Identifier& JSONWebKeys::kid() const {
  const ::common::Identifier* p = kid_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.kid)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* JSONWebKeys::release_kid() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.kid)
  
  ::common::Identifier* temp = kid_;
  kid_ = NULL;
  return temp;
}
inline ::common::Identifier* JSONWebKeys::mutable_kid() {
  
  if (kid_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    kid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.kid)
  return kid_;
}
inline void JSONWebKeys::set_allocated_kid(::common::Identifier* kid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(kid_);
  }
  if (kid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kid, submessage_arena);
    }
    
  } else {
    
  }
  kid_ = kid;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.kid)
}

// .common.String use = 3;
inline bool JSONWebKeys::has_use() const {
  return this != internal_default_instance() && use_ != NULL;
}
inline const ::common::String& JSONWebKeys::_internal_use() const {
  return *use_;
}
inline const ::common::String& JSONWebKeys::use() const {
  const ::common::String* p = use_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.use)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JSONWebKeys::release_use() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.use)
  
  ::common::String* temp = use_;
  use_ = NULL;
  return temp;
}
inline ::common::String* JSONWebKeys::mutable_use() {
  
  if (use_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    use_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.use)
  return use_;
}
inline void JSONWebKeys::set_allocated_use(::common::String* use) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_);
  }
  if (use) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      use = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use, submessage_arena);
    }
    
  } else {
    
  }
  use_ = use;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.use)
}

// .common.String n = 4;
inline bool JSONWebKeys::has_n() const {
  return this != internal_default_instance() && n_ != NULL;
}
inline const ::common::String& JSONWebKeys::_internal_n() const {
  return *n_;
}
inline const ::common::String& JSONWebKeys::n() const {
  const ::common::String* p = n_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.n)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JSONWebKeys::release_n() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.n)
  
  ::common::String* temp = n_;
  n_ = NULL;
  return temp;
}
inline ::common::String* JSONWebKeys::mutable_n() {
  
  if (n_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    n_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.n)
  return n_;
}
inline void JSONWebKeys::set_allocated_n(::common::String* n) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(n_);
  }
  if (n) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      n = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, n, submessage_arena);
    }
    
  } else {
    
  }
  n_ = n;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.n)
}

// .common.String e = 5;
inline bool JSONWebKeys::has_e() const {
  return this != internal_default_instance() && e_ != NULL;
}
inline const ::common::String& JSONWebKeys::_internal_e() const {
  return *e_;
}
inline const ::common::String& JSONWebKeys::e() const {
  const ::common::String* p = e_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.e)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* JSONWebKeys::release_e() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.e)
  
  ::common::String* temp = e_;
  e_ = NULL;
  return temp;
}
inline ::common::String* JSONWebKeys::mutable_e() {
  
  if (e_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    e_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.e)
  return e_;
}
inline void JSONWebKeys::set_allocated_e(::common::String* e) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(e_);
  }
  if (e) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      e = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, e, submessage_arena);
    }
    
  } else {
    
  }
  e_ = e;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.e)
}

// .common.StringArray x5c = 6;
inline bool JSONWebKeys::has_x5c() const {
  return this != internal_default_instance() && x5c_ != NULL;
}
inline const ::common::StringArray& JSONWebKeys::_internal_x5c() const {
  return *x5c_;
}
inline const ::common::StringArray& JSONWebKeys::x5c() const {
  const ::common::StringArray* p = x5c_;
  // @@protoc_insertion_point(field_get:api.JSONWebKeys.x5c)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* JSONWebKeys::release_x5c() {
  // @@protoc_insertion_point(field_release:api.JSONWebKeys.x5c)
  
  ::common::StringArray* temp = x5c_;
  x5c_ = NULL;
  return temp;
}
inline ::common::StringArray* JSONWebKeys::mutable_x5c() {
  
  if (x5c_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    x5c_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.JSONWebKeys.x5c)
  return x5c_;
}
inline void JSONWebKeys::set_allocated_x5c(::common::StringArray* x5c) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(x5c_);
  }
  if (x5c) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      x5c = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, x5c, submessage_arena);
    }
    
  } else {
    
  }
  x5c_ = x5c;
  // @@protoc_insertion_point(field_set_allocated:api.JSONWebKeys.x5c)
}

// -------------------------------------------------------------------

// Jwks

// repeated .api.JSONWebKeys keys = 1;
inline int Jwks::keys_size() const {
  return keys_.size();
}
inline void Jwks::clear_keys() {
  keys_.Clear();
}
inline ::api::JSONWebKeys* Jwks::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:api.Jwks.keys)
  return keys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >*
Jwks::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:api.Jwks.keys)
  return &keys_;
}
inline const ::api::JSONWebKeys& Jwks::keys(int index) const {
  // @@protoc_insertion_point(field_get:api.Jwks.keys)
  return keys_.Get(index);
}
inline ::api::JSONWebKeys* Jwks::add_keys() {
  // @@protoc_insertion_point(field_add:api.Jwks.keys)
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::api::JSONWebKeys >&
Jwks::keys() const {
  // @@protoc_insertion_point(field_list:api.Jwks.keys)
  return keys_;
}

// -------------------------------------------------------------------

// RenderRequest

// .common.String name = 1;
inline bool RenderRequest::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::common::String& RenderRequest::_internal_name() const {
  return *name_;
}
inline const ::common::String& RenderRequest::name() const {
  const ::common::String* p = name_;
  // @@protoc_insertion_point(field_get:api.RenderRequest.name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* RenderRequest::release_name() {
  // @@protoc_insertion_point(field_release:api.RenderRequest.name)
  
  ::common::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::common::String* RenderRequest::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.RenderRequest.name)
  return name_;
}
inline void RenderRequest::set_allocated_name(::common::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:api.RenderRequest.name)
}

// .common.String text = 2;
inline bool RenderRequest::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline const ::common::String& RenderRequest::_internal_text() const {
  return *text_;
}
inline const ::common::String& RenderRequest::text() const {
  const ::common::String* p = text_;
  // @@protoc_insertion_point(field_get:api.RenderRequest.text)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* RenderRequest::release_text() {
  // @@protoc_insertion_point(field_release:api.RenderRequest.text)
  
  ::common::String* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::common::String* RenderRequest::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.RenderRequest.text)
  return text_;
}
inline void RenderRequest::set_allocated_text(::common::String* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(text_);
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:api.RenderRequest.text)
}

// .common.Bytes data = 3;
inline bool RenderRequest::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::common::Bytes& RenderRequest::_internal_data() const {
  return *data_;
}
inline const ::common::Bytes& RenderRequest::data() const {
  const ::common::Bytes* p = data_;
  // @@protoc_insertion_point(field_get:api.RenderRequest.data)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Bytes*>(
      &::common::_Bytes_default_instance_);
}
inline ::common::Bytes* RenderRequest::release_data() {
  // @@protoc_insertion_point(field_release:api.RenderRequest.data)
  
  ::common::Bytes* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::common::Bytes* RenderRequest::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Bytes>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.RenderRequest.data)
  return data_;
}
inline void RenderRequest::set_allocated_data(::common::Bytes* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:api.RenderRequest.data)
}

// -------------------------------------------------------------------

// SearchPhoneNumberRequest

// .common.String state = 1;
inline bool SearchPhoneNumberRequest::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline const ::common::String& SearchPhoneNumberRequest::_internal_state() const {
  return *state_;
}
inline const ::common::String& SearchPhoneNumberRequest::state() const {
  const ::common::String* p = state_;
  // @@protoc_insertion_point(field_get:api.SearchPhoneNumberRequest.state)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SearchPhoneNumberRequest::release_state() {
  // @@protoc_insertion_point(field_release:api.SearchPhoneNumberRequest.state)
  
  ::common::String* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::common::String* SearchPhoneNumberRequest::mutable_state() {
  
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SearchPhoneNumberRequest.state)
  return state_;
}
inline void SearchPhoneNumberRequest::set_allocated_state(::common::String* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(state_);
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:api.SearchPhoneNumberRequest.state)
}

// .api.NumberCapabilities capabilities = 2;
inline bool SearchPhoneNumberRequest::has_capabilities() const {
  return this != internal_default_instance() && capabilities_ != NULL;
}
inline void SearchPhoneNumberRequest::clear_capabilities() {
  if (GetArenaNoVirtual() == NULL && capabilities_ != NULL) {
    delete capabilities_;
  }
  capabilities_ = NULL;
}
inline const ::api::NumberCapabilities& SearchPhoneNumberRequest::_internal_capabilities() const {
  return *capabilities_;
}
inline const ::api::NumberCapabilities& SearchPhoneNumberRequest::capabilities() const {
  const ::api::NumberCapabilities* p = capabilities_;
  // @@protoc_insertion_point(field_get:api.SearchPhoneNumberRequest.capabilities)
  return p != NULL ? *p : *reinterpret_cast<const ::api::NumberCapabilities*>(
      &::api::_NumberCapabilities_default_instance_);
}
inline ::api::NumberCapabilities* SearchPhoneNumberRequest::release_capabilities() {
  // @@protoc_insertion_point(field_release:api.SearchPhoneNumberRequest.capabilities)
  
  ::api::NumberCapabilities* temp = capabilities_;
  capabilities_ = NULL;
  return temp;
}
inline ::api::NumberCapabilities* SearchPhoneNumberRequest::mutable_capabilities() {
  
  if (capabilities_ == NULL) {
    auto* p = CreateMaybeMessage<::api::NumberCapabilities>(GetArenaNoVirtual());
    capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SearchPhoneNumberRequest.capabilities)
  return capabilities_;
}
inline void SearchPhoneNumberRequest::set_allocated_capabilities(::api::NumberCapabilities* capabilities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete capabilities_;
  }
  if (capabilities) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      capabilities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    
  } else {
    
  }
  capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:api.SearchPhoneNumberRequest.capabilities)
}

// .common.Int64 total_results = 3;
inline bool SearchPhoneNumberRequest::has_total_results() const {
  return this != internal_default_instance() && total_results_ != NULL;
}
inline const ::common::Int64& SearchPhoneNumberRequest::_internal_total_results() const {
  return *total_results_;
}
inline const ::common::Int64& SearchPhoneNumberRequest::total_results() const {
  const ::common::Int64* p = total_results_;
  // @@protoc_insertion_point(field_get:api.SearchPhoneNumberRequest.total_results)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Int64*>(
      &::common::_Int64_default_instance_);
}
inline ::common::Int64* SearchPhoneNumberRequest::release_total_results() {
  // @@protoc_insertion_point(field_release:api.SearchPhoneNumberRequest.total_results)
  
  ::common::Int64* temp = total_results_;
  total_results_ = NULL;
  return temp;
}
inline ::common::Int64* SearchPhoneNumberRequest::mutable_total_results() {
  
  if (total_results_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Int64>(GetArenaNoVirtual());
    total_results_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SearchPhoneNumberRequest.total_results)
  return total_results_;
}
inline void SearchPhoneNumberRequest::set_allocated_total_results(::common::Int64* total_results) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(total_results_);
  }
  if (total_results) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      total_results = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, total_results, submessage_arena);
    }
    
  } else {
    
  }
  total_results_ = total_results;
  // @@protoc_insertion_point(field_set_allocated:api.SearchPhoneNumberRequest.total_results)
}

// -------------------------------------------------------------------

// PhoneNumber

// .common.String friendly_name = 1;
inline bool PhoneNumber::has_friendly_name() const {
  return this != internal_default_instance() && friendly_name_ != NULL;
}
inline const ::common::String& PhoneNumber::_internal_friendly_name() const {
  return *friendly_name_;
}
inline const ::common::String& PhoneNumber::friendly_name() const {
  const ::common::String* p = friendly_name_;
  // @@protoc_insertion_point(field_get:api.PhoneNumber.friendly_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* PhoneNumber::release_friendly_name() {
  // @@protoc_insertion_point(field_release:api.PhoneNumber.friendly_name)
  
  ::common::String* temp = friendly_name_;
  friendly_name_ = NULL;
  return temp;
}
inline ::common::String* PhoneNumber::mutable_friendly_name() {
  
  if (friendly_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    friendly_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.PhoneNumber.friendly_name)
  return friendly_name_;
}
inline void PhoneNumber::set_allocated_friendly_name(::common::String* friendly_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(friendly_name_);
  }
  if (friendly_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      friendly_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, friendly_name, submessage_arena);
    }
    
  } else {
    
  }
  friendly_name_ = friendly_name;
  // @@protoc_insertion_point(field_set_allocated:api.PhoneNumber.friendly_name)
}

// .common.String phone_number = 2;
inline bool PhoneNumber::has_phone_number() const {
  return this != internal_default_instance() && phone_number_ != NULL;
}
inline const ::common::String& PhoneNumber::_internal_phone_number() const {
  return *phone_number_;
}
inline const ::common::String& PhoneNumber::phone_number() const {
  const ::common::String* p = phone_number_;
  // @@protoc_insertion_point(field_get:api.PhoneNumber.phone_number)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* PhoneNumber::release_phone_number() {
  // @@protoc_insertion_point(field_release:api.PhoneNumber.phone_number)
  
  ::common::String* temp = phone_number_;
  phone_number_ = NULL;
  return temp;
}
inline ::common::String* PhoneNumber::mutable_phone_number() {
  
  if (phone_number_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    phone_number_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.PhoneNumber.phone_number)
  return phone_number_;
}
inline void PhoneNumber::set_allocated_phone_number(::common::String* phone_number) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(phone_number_);
  }
  if (phone_number) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      phone_number = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phone_number, submessage_arena);
    }
    
  } else {
    
  }
  phone_number_ = phone_number;
  // @@protoc_insertion_point(field_set_allocated:api.PhoneNumber.phone_number)
}

// .common.String region = 3;
inline bool PhoneNumber::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
inline const ::common::String& PhoneNumber::_internal_region() const {
  return *region_;
}
inline const ::common::String& PhoneNumber::region() const {
  const ::common::String* p = region_;
  // @@protoc_insertion_point(field_get:api.PhoneNumber.region)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* PhoneNumber::release_region() {
  // @@protoc_insertion_point(field_release:api.PhoneNumber.region)
  
  ::common::String* temp = region_;
  region_ = NULL;
  return temp;
}
inline ::common::String* PhoneNumber::mutable_region() {
  
  if (region_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.PhoneNumber.region)
  return region_;
}
inline void PhoneNumber::set_allocated_region(::common::String* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_);
  }
  if (region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:api.PhoneNumber.region)
}

// .api.NumberCapabilities capabilities = 4;
inline bool PhoneNumber::has_capabilities() const {
  return this != internal_default_instance() && capabilities_ != NULL;
}
inline void PhoneNumber::clear_capabilities() {
  if (GetArenaNoVirtual() == NULL && capabilities_ != NULL) {
    delete capabilities_;
  }
  capabilities_ = NULL;
}
inline const ::api::NumberCapabilities& PhoneNumber::_internal_capabilities() const {
  return *capabilities_;
}
inline const ::api::NumberCapabilities& PhoneNumber::capabilities() const {
  const ::api::NumberCapabilities* p = capabilities_;
  // @@protoc_insertion_point(field_get:api.PhoneNumber.capabilities)
  return p != NULL ? *p : *reinterpret_cast<const ::api::NumberCapabilities*>(
      &::api::_NumberCapabilities_default_instance_);
}
inline ::api::NumberCapabilities* PhoneNumber::release_capabilities() {
  // @@protoc_insertion_point(field_release:api.PhoneNumber.capabilities)
  
  ::api::NumberCapabilities* temp = capabilities_;
  capabilities_ = NULL;
  return temp;
}
inline ::api::NumberCapabilities* PhoneNumber::mutable_capabilities() {
  
  if (capabilities_ == NULL) {
    auto* p = CreateMaybeMessage<::api::NumberCapabilities>(GetArenaNoVirtual());
    capabilities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.PhoneNumber.capabilities)
  return capabilities_;
}
inline void PhoneNumber::set_allocated_capabilities(::api::NumberCapabilities* capabilities) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete capabilities_;
  }
  if (capabilities) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      capabilities = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    
  } else {
    
  }
  capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:api.PhoneNumber.capabilities)
}

// -------------------------------------------------------------------

// NumberCapabilities

// bool voice = 1;
inline void NumberCapabilities::clear_voice() {
  voice_ = false;
}
inline bool NumberCapabilities::voice() const {
  // @@protoc_insertion_point(field_get:api.NumberCapabilities.voice)
  return voice_;
}
inline void NumberCapabilities::set_voice(bool value) {
  
  voice_ = value;
  // @@protoc_insertion_point(field_set:api.NumberCapabilities.voice)
}

// bool sms = 2;
inline void NumberCapabilities::clear_sms() {
  sms_ = false;
}
inline bool NumberCapabilities::sms() const {
  // @@protoc_insertion_point(field_get:api.NumberCapabilities.sms)
  return sms_;
}
inline void NumberCapabilities::set_sms(bool value) {
  
  sms_ = value;
  // @@protoc_insertion_point(field_set:api.NumberCapabilities.sms)
}

// bool mms = 3;
inline void NumberCapabilities::clear_mms() {
  mms_ = false;
}
inline bool NumberCapabilities::mms() const {
  // @@protoc_insertion_point(field_get:api.NumberCapabilities.mms)
  return mms_;
}
inline void NumberCapabilities::set_mms(bool value) {
  
  mms_ = value;
  // @@protoc_insertion_point(field_set:api.NumberCapabilities.mms)
}

// -------------------------------------------------------------------

// PhoneNumberResource

// .api.PhoneNumber number = 1;
inline bool PhoneNumberResource::has_number() const {
  return this != internal_default_instance() && number_ != NULL;
}
inline void PhoneNumberResource::clear_number() {
  if (GetArenaNoVirtual() == NULL && number_ != NULL) {
    delete number_;
  }
  number_ = NULL;
}
inline const ::api::PhoneNumber& PhoneNumberResource::_internal_number() const {
  return *number_;
}
inline const ::api::PhoneNumber& PhoneNumberResource::number() const {
  const ::api::PhoneNumber* p = number_;
  // @@protoc_insertion_point(field_get:api.PhoneNumberResource.number)
  return p != NULL ? *p : *reinterpret_cast<const ::api::PhoneNumber*>(
      &::api::_PhoneNumber_default_instance_);
}
inline ::api::PhoneNumber* PhoneNumberResource::release_number() {
  // @@protoc_insertion_point(field_release:api.PhoneNumberResource.number)
  
  ::api::PhoneNumber* temp = number_;
  number_ = NULL;
  return temp;
}
inline ::api::PhoneNumber* PhoneNumberResource::mutable_number() {
  
  if (number_ == NULL) {
    auto* p = CreateMaybeMessage<::api::PhoneNumber>(GetArenaNoVirtual());
    number_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.PhoneNumberResource.number)
  return number_;
}
inline void PhoneNumberResource::set_allocated_number(::api::PhoneNumber* number) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete number_;
  }
  if (number) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      number = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, number, submessage_arena);
    }
    
  } else {
    
  }
  number_ = number;
  // @@protoc_insertion_point(field_set_allocated:api.PhoneNumberResource.number)
}

// .common.Identifier id = 2;
inline bool PhoneNumberResource::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& PhoneNumberResource::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& PhoneNumberResource::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.PhoneNumberResource.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* PhoneNumberResource::release_id() {
  // @@protoc_insertion_point(field_release:api.PhoneNumberResource.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* PhoneNumberResource::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.PhoneNumberResource.id)
  return id_;
}
inline void PhoneNumberResource::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.PhoneNumberResource.id)
}

// .common.String uri = 3;
inline bool PhoneNumberResource::has_uri() const {
  return this != internal_default_instance() && uri_ != NULL;
}
inline const ::common::String& PhoneNumberResource::_internal_uri() const {
  return *uri_;
}
inline const ::common::String& PhoneNumberResource::uri() const {
  const ::common::String* p = uri_;
  // @@protoc_insertion_point(field_get:api.PhoneNumberResource.uri)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* PhoneNumberResource::release_uri() {
  // @@protoc_insertion_point(field_release:api.PhoneNumberResource.uri)
  
  ::common::String* temp = uri_;
  uri_ = NULL;
  return temp;
}
inline ::common::String* PhoneNumberResource::mutable_uri() {
  
  if (uri_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.PhoneNumberResource.uri)
  return uri_;
}
inline void PhoneNumberResource::set_allocated_uri(::common::String* uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(uri_);
  }
  if (uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    
  } else {
    
  }
  uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:api.PhoneNumberResource.uri)
}

// -------------------------------------------------------------------

// TokenQuery

// .common.Token token = 1;
inline bool TokenQuery::has_token() const {
  return this != internal_default_instance() && token_ != NULL;
}
inline const ::common::Token& TokenQuery::_internal_token() const {
  return *token_;
}
inline const ::common::Token& TokenQuery::token() const {
  const ::common::Token* p = token_;
  // @@protoc_insertion_point(field_get:api.TokenQuery.token)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Token*>(
      &::common::_Token_default_instance_);
}
inline ::common::Token* TokenQuery::release_token() {
  // @@protoc_insertion_point(field_release:api.TokenQuery.token)
  
  ::common::Token* temp = token_;
  token_ = NULL;
  return temp;
}
inline ::common::Token* TokenQuery::mutable_token() {
  
  if (token_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Token>(GetArenaNoVirtual());
    token_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.TokenQuery.token)
  return token_;
}
inline void TokenQuery::set_allocated_token(::common::Token* token) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(token_);
  }
  if (token) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      token = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:api.TokenQuery.token)
}

// .common.String query = 2;
inline bool TokenQuery::has_query() const {
  return this != internal_default_instance() && query_ != NULL;
}
inline const ::common::String& TokenQuery::_internal_query() const {
  return *query_;
}
inline const ::common::String& TokenQuery::query() const {
  const ::common::String* p = query_;
  // @@protoc_insertion_point(field_get:api.TokenQuery.query)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* TokenQuery::release_query() {
  // @@protoc_insertion_point(field_release:api.TokenQuery.query)
  
  ::common::String* temp = query_;
  query_ = NULL;
  return temp;
}
inline ::common::String* TokenQuery::mutable_query() {
  
  if (query_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    query_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.TokenQuery.query)
  return query_;
}
inline void TokenQuery::set_allocated_query(::common::String* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_);
  }
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:api.TokenQuery.query)
}

// -------------------------------------------------------------------

// IDBody

// .common.Identifier id = 1;
inline bool IDBody::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& IDBody::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& IDBody::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.IDBody.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* IDBody::release_id() {
  // @@protoc_insertion_point(field_release:api.IDBody.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* IDBody::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.IDBody.id)
  return id_;
}
inline void IDBody::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.IDBody.id)
}

// .common.Bytes body = 2;
inline bool IDBody::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline const ::common::Bytes& IDBody::_internal_body() const {
  return *body_;
}
inline const ::common::Bytes& IDBody::body() const {
  const ::common::Bytes* p = body_;
  // @@protoc_insertion_point(field_get:api.IDBody.body)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Bytes*>(
      &::common::_Bytes_default_instance_);
}
inline ::common::Bytes* IDBody::release_body() {
  // @@protoc_insertion_point(field_release:api.IDBody.body)
  
  ::common::Bytes* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::common::Bytes* IDBody::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Bytes>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.IDBody.body)
  return body_;
}
inline void IDBody::set_allocated_body(::common::Bytes* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_);
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:api.IDBody.body)
}

// -------------------------------------------------------------------

// IDStrings

// .common.Identifier id = 1;
inline bool IDStrings::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& IDStrings::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& IDStrings::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.IDStrings.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* IDStrings::release_id() {
  // @@protoc_insertion_point(field_release:api.IDStrings.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* IDStrings::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.IDStrings.id)
  return id_;
}
inline void IDStrings::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.IDStrings.id)
}

// .common.StringArray strings = 2;
inline bool IDStrings::has_strings() const {
  return this != internal_default_instance() && strings_ != NULL;
}
inline const ::common::StringArray& IDStrings::_internal_strings() const {
  return *strings_;
}
inline const ::common::StringArray& IDStrings::strings() const {
  const ::common::StringArray* p = strings_;
  // @@protoc_insertion_point(field_get:api.IDStrings.strings)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringArray*>(
      &::common::_StringArray_default_instance_);
}
inline ::common::StringArray* IDStrings::release_strings() {
  // @@protoc_insertion_point(field_release:api.IDStrings.strings)
  
  ::common::StringArray* temp = strings_;
  strings_ = NULL;
  return temp;
}
inline ::common::StringArray* IDStrings::mutable_strings() {
  
  if (strings_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringArray>(GetArenaNoVirtual());
    strings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.IDStrings.strings)
  return strings_;
}
inline void IDStrings::set_allocated_strings(::common::StringArray* strings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(strings_);
  }
  if (strings) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      strings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, strings, submessage_arena);
    }
    
  } else {
    
  }
  strings_ = strings;
  // @@protoc_insertion_point(field_set_allocated:api.IDStrings.strings)
}

// -------------------------------------------------------------------

// Role

// .common.Identifier id = 1;
inline bool Role::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& Role::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& Role::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.Role.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* Role::release_id() {
  // @@protoc_insertion_point(field_release:api.Role.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* Role::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Role.id)
  return id_;
}
inline void Role::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.Role.id)
}

// .common.String name = 2;
inline bool Role::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::common::String& Role::_internal_name() const {
  return *name_;
}
inline const ::common::String& Role::name() const {
  const ::common::String* p = name_;
  // @@protoc_insertion_point(field_get:api.Role.name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Role::release_name() {
  // @@protoc_insertion_point(field_release:api.Role.name)
  
  ::common::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::common::String* Role::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Role.name)
  return name_;
}
inline void Role::set_allocated_name(::common::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:api.Role.name)
}

// .common.String description = 3;
inline bool Role::has_description() const {
  return this != internal_default_instance() && description_ != NULL;
}
inline const ::common::String& Role::_internal_description() const {
  return *description_;
}
inline const ::common::String& Role::description() const {
  const ::common::String* p = description_;
  // @@protoc_insertion_point(field_get:api.Role.description)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* Role::release_description() {
  // @@protoc_insertion_point(field_release:api.Role.description)
  
  ::common::String* temp = description_;
  description_ = NULL;
  return temp;
}
inline ::common::String* Role::mutable_description() {
  
  if (description_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Role.description)
  return description_;
}
inline void Role::set_allocated_description(::common::String* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(description_);
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:api.Role.description)
}

// -------------------------------------------------------------------

// CallResponse

// .common.Identifier id = 1;
inline bool CallResponse::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& CallResponse::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& CallResponse::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.CallResponse.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* CallResponse::release_id() {
  // @@protoc_insertion_point(field_release:api.CallResponse.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* CallResponse::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallResponse.id)
  return id_;
}
inline void CallResponse::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.CallResponse.id)
}

// .common.String to = 5;
inline bool CallResponse::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline const ::common::String& CallResponse::_internal_to() const {
  return *to_;
}
inline const ::common::String& CallResponse::to() const {
  const ::common::String* p = to_;
  // @@protoc_insertion_point(field_get:api.CallResponse.to)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* CallResponse::release_to() {
  // @@protoc_insertion_point(field_release:api.CallResponse.to)
  
  ::common::String* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::common::String* CallResponse::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallResponse.to)
  return to_;
}
inline void CallResponse::set_allocated_to(::common::String* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(to_);
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.CallResponse.to)
}

// .common.String from = 6;
inline bool CallResponse::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline const ::common::String& CallResponse::_internal_from() const {
  return *from_;
}
inline const ::common::String& CallResponse::from() const {
  const ::common::String* p = from_;
  // @@protoc_insertion_point(field_get:api.CallResponse.from)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* CallResponse::release_from() {
  // @@protoc_insertion_point(field_release:api.CallResponse.from)
  
  ::common::String* temp = from_;
  from_ = NULL;
  return temp;
}
inline ::common::String* CallResponse::mutable_from() {
  
  if (from_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallResponse.from)
  return from_;
}
inline void CallResponse::set_allocated_from(::common::String* from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_);
  }
  if (from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:api.CallResponse.from)
}

// .common.String status = 9;
inline bool CallResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::common::String& CallResponse::_internal_status() const {
  return *status_;
}
inline const ::common::String& CallResponse::status() const {
  const ::common::String* p = status_;
  // @@protoc_insertion_point(field_get:api.CallResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* CallResponse::release_status() {
  // @@protoc_insertion_point(field_release:api.CallResponse.status)
  
  ::common::String* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::common::String* CallResponse::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallResponse.status)
  return status_;
}
inline void CallResponse::set_allocated_status(::common::String* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:api.CallResponse.status)
}

// .common.String answered_by = 10;
inline bool CallResponse::has_answered_by() const {
  return this != internal_default_instance() && answered_by_ != NULL;
}
inline const ::common::String& CallResponse::_internal_answered_by() const {
  return *answered_by_;
}
inline const ::common::String& CallResponse::answered_by() const {
  const ::common::String* p = answered_by_;
  // @@protoc_insertion_point(field_get:api.CallResponse.answered_by)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* CallResponse::release_answered_by() {
  // @@protoc_insertion_point(field_release:api.CallResponse.answered_by)
  
  ::common::String* temp = answered_by_;
  answered_by_ = NULL;
  return temp;
}
inline ::common::String* CallResponse::mutable_answered_by() {
  
  if (answered_by_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    answered_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallResponse.answered_by)
  return answered_by_;
}
inline void CallResponse::set_allocated_answered_by(::common::String* answered_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(answered_by_);
  }
  if (answered_by) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      answered_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, answered_by, submessage_arena);
    }
    
  } else {
    
  }
  answered_by_ = answered_by;
  // @@protoc_insertion_point(field_set_allocated:api.CallResponse.answered_by)
}

// .common.String forwarded_from = 11;
inline bool CallResponse::has_forwarded_from() const {
  return this != internal_default_instance() && forwarded_from_ != NULL;
}
inline const ::common::String& CallResponse::_internal_forwarded_from() const {
  return *forwarded_from_;
}
inline const ::common::String& CallResponse::forwarded_from() const {
  const ::common::String* p = forwarded_from_;
  // @@protoc_insertion_point(field_get:api.CallResponse.forwarded_from)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* CallResponse::release_forwarded_from() {
  // @@protoc_insertion_point(field_release:api.CallResponse.forwarded_from)
  
  ::common::String* temp = forwarded_from_;
  forwarded_from_ = NULL;
  return temp;
}
inline ::common::String* CallResponse::mutable_forwarded_from() {
  
  if (forwarded_from_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    forwarded_from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallResponse.forwarded_from)
  return forwarded_from_;
}
inline void CallResponse::set_allocated_forwarded_from(::common::String* forwarded_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(forwarded_from_);
  }
  if (forwarded_from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      forwarded_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, forwarded_from, submessage_arena);
    }
    
  } else {
    
  }
  forwarded_from_ = forwarded_from;
  // @@protoc_insertion_point(field_set_allocated:api.CallResponse.forwarded_from)
}

// .common.String caller_name = 12;
inline bool CallResponse::has_caller_name() const {
  return this != internal_default_instance() && caller_name_ != NULL;
}
inline const ::common::String& CallResponse::_internal_caller_name() const {
  return *caller_name_;
}
inline const ::common::String& CallResponse::caller_name() const {
  const ::common::String* p = caller_name_;
  // @@protoc_insertion_point(field_get:api.CallResponse.caller_name)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* CallResponse::release_caller_name() {
  // @@protoc_insertion_point(field_release:api.CallResponse.caller_name)
  
  ::common::String* temp = caller_name_;
  caller_name_ = NULL;
  return temp;
}
inline ::common::String* CallResponse::mutable_caller_name() {
  
  if (caller_name_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    caller_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallResponse.caller_name)
  return caller_name_;
}
inline void CallResponse::set_allocated_caller_name(::common::String* caller_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(caller_name_);
  }
  if (caller_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      caller_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, caller_name, submessage_arena);
    }
    
  } else {
    
  }
  caller_name_ = caller_name;
  // @@protoc_insertion_point(field_set_allocated:api.CallResponse.caller_name)
}

// .common.StringMap annotations = 13;
inline bool CallResponse::has_annotations() const {
  return this != internal_default_instance() && annotations_ != NULL;
}
inline const ::common::StringMap& CallResponse::_internal_annotations() const {
  return *annotations_;
}
inline const ::common::StringMap& CallResponse::annotations() const {
  const ::common::StringMap* p = annotations_;
  // @@protoc_insertion_point(field_get:api.CallResponse.annotations)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* CallResponse::release_annotations() {
  // @@protoc_insertion_point(field_release:api.CallResponse.annotations)
  
  ::common::StringMap* temp = annotations_;
  annotations_ = NULL;
  return temp;
}
inline ::common::StringMap* CallResponse::mutable_annotations() {
  
  if (annotations_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CallResponse.annotations)
  return annotations_;
}
inline void CallResponse::set_allocated_annotations(::common::StringMap* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:api.CallResponse.annotations)
}

// -------------------------------------------------------------------

// SMSResponse

// .common.Identifier id = 1;
inline bool SMSResponse::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& SMSResponse::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& SMSResponse::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.SMSResponse.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* SMSResponse::release_id() {
  // @@protoc_insertion_point(field_release:api.SMSResponse.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* SMSResponse::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSResponse.id)
  return id_;
}
inline void SMSResponse::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.SMSResponse.id)
}

// .common.String to = 5;
inline bool SMSResponse::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline const ::common::String& SMSResponse::_internal_to() const {
  return *to_;
}
inline const ::common::String& SMSResponse::to() const {
  const ::common::String* p = to_;
  // @@protoc_insertion_point(field_get:api.SMSResponse.to)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSResponse::release_to() {
  // @@protoc_insertion_point(field_release:api.SMSResponse.to)
  
  ::common::String* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::common::String* SMSResponse::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSResponse.to)
  return to_;
}
inline void SMSResponse::set_allocated_to(::common::String* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(to_);
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.SMSResponse.to)
}

// .common.String from = 6;
inline bool SMSResponse::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline const ::common::String& SMSResponse::_internal_from() const {
  return *from_;
}
inline const ::common::String& SMSResponse::from() const {
  const ::common::String* p = from_;
  // @@protoc_insertion_point(field_get:api.SMSResponse.from)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSResponse::release_from() {
  // @@protoc_insertion_point(field_release:api.SMSResponse.from)
  
  ::common::String* temp = from_;
  from_ = NULL;
  return temp;
}
inline ::common::String* SMSResponse::mutable_from() {
  
  if (from_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSResponse.from)
  return from_;
}
inline void SMSResponse::set_allocated_from(::common::String* from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_);
  }
  if (from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:api.SMSResponse.from)
}

// .common.String media_url = 7;
inline bool SMSResponse::has_media_url() const {
  return this != internal_default_instance() && media_url_ != NULL;
}
inline const ::common::String& SMSResponse::_internal_media_url() const {
  return *media_url_;
}
inline const ::common::String& SMSResponse::media_url() const {
  const ::common::String* p = media_url_;
  // @@protoc_insertion_point(field_get:api.SMSResponse.media_url)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSResponse::release_media_url() {
  // @@protoc_insertion_point(field_release:api.SMSResponse.media_url)
  
  ::common::String* temp = media_url_;
  media_url_ = NULL;
  return temp;
}
inline ::common::String* SMSResponse::mutable_media_url() {
  
  if (media_url_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    media_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSResponse.media_url)
  return media_url_;
}
inline void SMSResponse::set_allocated_media_url(::common::String* media_url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(media_url_);
  }
  if (media_url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_url, submessage_arena);
    }
    
  } else {
    
  }
  media_url_ = media_url;
  // @@protoc_insertion_point(field_set_allocated:api.SMSResponse.media_url)
}

// .common.String body = 8;
inline bool SMSResponse::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline const ::common::String& SMSResponse::_internal_body() const {
  return *body_;
}
inline const ::common::String& SMSResponse::body() const {
  const ::common::String* p = body_;
  // @@protoc_insertion_point(field_get:api.SMSResponse.body)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSResponse::release_body() {
  // @@protoc_insertion_point(field_release:api.SMSResponse.body)
  
  ::common::String* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::common::String* SMSResponse::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSResponse.body)
  return body_;
}
inline void SMSResponse::set_allocated_body(::common::String* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_);
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:api.SMSResponse.body)
}

// .common.String status = 9;
inline bool SMSResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::common::String& SMSResponse::_internal_status() const {
  return *status_;
}
inline const ::common::String& SMSResponse::status() const {
  const ::common::String* p = status_;
  // @@protoc_insertion_point(field_get:api.SMSResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SMSResponse::release_status() {
  // @@protoc_insertion_point(field_release:api.SMSResponse.status)
  
  ::common::String* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::common::String* SMSResponse::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSResponse.status)
  return status_;
}
inline void SMSResponse::set_allocated_status(::common::String* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:api.SMSResponse.status)
}

// .common.StringMap annotations = 10;
inline bool SMSResponse::has_annotations() const {
  return this != internal_default_instance() && annotations_ != NULL;
}
inline const ::common::StringMap& SMSResponse::_internal_annotations() const {
  return *annotations_;
}
inline const ::common::StringMap& SMSResponse::annotations() const {
  const ::common::StringMap* p = annotations_;
  // @@protoc_insertion_point(field_get:api.SMSResponse.annotations)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* SMSResponse::release_annotations() {
  // @@protoc_insertion_point(field_release:api.SMSResponse.annotations)
  
  ::common::StringMap* temp = annotations_;
  annotations_ = NULL;
  return temp;
}
inline ::common::StringMap* SMSResponse::mutable_annotations() {
  
  if (annotations_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SMSResponse.annotations)
  return annotations_;
}
inline void SMSResponse::set_allocated_annotations(::common::StringMap* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:api.SMSResponse.annotations)
}

// -------------------------------------------------------------------

// SubscriptionResponse

// .common.Identifier id = 1;
inline bool SubscriptionResponse::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& SubscriptionResponse::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& SubscriptionResponse::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.SubscriptionResponse.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* SubscriptionResponse::release_id() {
  // @@protoc_insertion_point(field_release:api.SubscriptionResponse.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* SubscriptionResponse::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscriptionResponse.id)
  return id_;
}
inline void SubscriptionResponse::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.SubscriptionResponse.id)
}

// .common.Int64 monthly_charge = 2;
inline bool SubscriptionResponse::has_monthly_charge() const {
  return this != internal_default_instance() && monthly_charge_ != NULL;
}
inline const ::common::Int64& SubscriptionResponse::_internal_monthly_charge() const {
  return *monthly_charge_;
}
inline const ::common::Int64& SubscriptionResponse::monthly_charge() const {
  const ::common::Int64* p = monthly_charge_;
  // @@protoc_insertion_point(field_get:api.SubscriptionResponse.monthly_charge)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Int64*>(
      &::common::_Int64_default_instance_);
}
inline ::common::Int64* SubscriptionResponse::release_monthly_charge() {
  // @@protoc_insertion_point(field_release:api.SubscriptionResponse.monthly_charge)
  
  ::common::Int64* temp = monthly_charge_;
  monthly_charge_ = NULL;
  return temp;
}
inline ::common::Int64* SubscriptionResponse::mutable_monthly_charge() {
  
  if (monthly_charge_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Int64>(GetArenaNoVirtual());
    monthly_charge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscriptionResponse.monthly_charge)
  return monthly_charge_;
}
inline void SubscriptionResponse::set_allocated_monthly_charge(::common::Int64* monthly_charge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(monthly_charge_);
  }
  if (monthly_charge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      monthly_charge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, monthly_charge, submessage_arena);
    }
    
  } else {
    
  }
  monthly_charge_ = monthly_charge;
  // @@protoc_insertion_point(field_set_allocated:api.SubscriptionResponse.monthly_charge)
}

// .common.String next_charge = 3;
inline bool SubscriptionResponse::has_next_charge() const {
  return this != internal_default_instance() && next_charge_ != NULL;
}
inline const ::common::String& SubscriptionResponse::_internal_next_charge() const {
  return *next_charge_;
}
inline const ::common::String& SubscriptionResponse::next_charge() const {
  const ::common::String* p = next_charge_;
  // @@protoc_insertion_point(field_get:api.SubscriptionResponse.next_charge)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* SubscriptionResponse::release_next_charge() {
  // @@protoc_insertion_point(field_release:api.SubscriptionResponse.next_charge)
  
  ::common::String* temp = next_charge_;
  next_charge_ = NULL;
  return temp;
}
inline ::common::String* SubscriptionResponse::mutable_next_charge() {
  
  if (next_charge_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    next_charge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscriptionResponse.next_charge)
  return next_charge_;
}
inline void SubscriptionResponse::set_allocated_next_charge(::common::String* next_charge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(next_charge_);
  }
  if (next_charge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      next_charge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, next_charge, submessage_arena);
    }
    
  } else {
    
  }
  next_charge_ = next_charge;
  // @@protoc_insertion_point(field_set_allocated:api.SubscriptionResponse.next_charge)
}

// .common.StringMap annotations = 10;
inline bool SubscriptionResponse::has_annotations() const {
  return this != internal_default_instance() && annotations_ != NULL;
}
inline const ::common::StringMap& SubscriptionResponse::_internal_annotations() const {
  return *annotations_;
}
inline const ::common::StringMap& SubscriptionResponse::annotations() const {
  const ::common::StringMap* p = annotations_;
  // @@protoc_insertion_point(field_get:api.SubscriptionResponse.annotations)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* SubscriptionResponse::release_annotations() {
  // @@protoc_insertion_point(field_release:api.SubscriptionResponse.annotations)
  
  ::common::StringMap* temp = annotations_;
  annotations_ = NULL;
  return temp;
}
inline ::common::StringMap* SubscriptionResponse::mutable_annotations() {
  
  if (annotations_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscriptionResponse.annotations)
  return annotations_;
}
inline void SubscriptionResponse::set_allocated_annotations(::common::StringMap* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:api.SubscriptionResponse.annotations)
}

// .api.Plan plan = 4;
inline void SubscriptionResponse::clear_plan() {
  plan_ = 0;
}
inline ::api::Plan SubscriptionResponse::plan() const {
  // @@protoc_insertion_point(field_get:api.SubscriptionResponse.plan)
  return static_cast< ::api::Plan >(plan_);
}
inline void SubscriptionResponse::set_plan(::api::Plan value) {
  
  plan_ = value;
  // @@protoc_insertion_point(field_set:api.SubscriptionResponse.plan)
}

// .api.User user = 5;
inline bool SubscriptionResponse::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void SubscriptionResponse::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
inline const ::api::User& SubscriptionResponse::_internal_user() const {
  return *user_;
}
inline const ::api::User& SubscriptionResponse::user() const {
  const ::api::User* p = user_;
  // @@protoc_insertion_point(field_get:api.SubscriptionResponse.user)
  return p != NULL ? *p : *reinterpret_cast<const ::api::User*>(
      &::api::_User_default_instance_);
}
inline ::api::User* SubscriptionResponse::release_user() {
  // @@protoc_insertion_point(field_release:api.SubscriptionResponse.user)
  
  ::api::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::api::User* SubscriptionResponse::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::api::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.SubscriptionResponse.user)
  return user_;
}
inline void SubscriptionResponse::set_allocated_user(::api::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:api.SubscriptionResponse.user)
}

// -------------------------------------------------------------------

// FaxResponse

// .common.Identifier id = 1;
inline bool FaxResponse::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::common::Identifier& FaxResponse::_internal_id() const {
  return *id_;
}
inline const ::common::Identifier& FaxResponse::id() const {
  const ::common::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:api.FaxResponse.id)
  return p != NULL ? *p : *reinterpret_cast<const ::common::Identifier*>(
      &::common::_Identifier_default_instance_);
}
inline ::common::Identifier* FaxResponse::release_id() {
  // @@protoc_insertion_point(field_release:api.FaxResponse.id)
  
  ::common::Identifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::common::Identifier* FaxResponse::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::common::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxResponse.id)
  return id_;
}
inline void FaxResponse::set_allocated_id(::common::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.FaxResponse.id)
}

// .common.String media_url = 3;
inline bool FaxResponse::has_media_url() const {
  return this != internal_default_instance() && media_url_ != NULL;
}
inline const ::common::String& FaxResponse::_internal_media_url() const {
  return *media_url_;
}
inline const ::common::String& FaxResponse::media_url() const {
  const ::common::String* p = media_url_;
  // @@protoc_insertion_point(field_get:api.FaxResponse.media_url)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* FaxResponse::release_media_url() {
  // @@protoc_insertion_point(field_release:api.FaxResponse.media_url)
  
  ::common::String* temp = media_url_;
  media_url_ = NULL;
  return temp;
}
inline ::common::String* FaxResponse::mutable_media_url() {
  
  if (media_url_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    media_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxResponse.media_url)
  return media_url_;
}
inline void FaxResponse::set_allocated_media_url(::common::String* media_url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(media_url_);
  }
  if (media_url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      media_url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media_url, submessage_arena);
    }
    
  } else {
    
  }
  media_url_ = media_url;
  // @@protoc_insertion_point(field_set_allocated:api.FaxResponse.media_url)
}

// .common.String to = 4;
inline bool FaxResponse::has_to() const {
  return this != internal_default_instance() && to_ != NULL;
}
inline const ::common::String& FaxResponse::_internal_to() const {
  return *to_;
}
inline const ::common::String& FaxResponse::to() const {
  const ::common::String* p = to_;
  // @@protoc_insertion_point(field_get:api.FaxResponse.to)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* FaxResponse::release_to() {
  // @@protoc_insertion_point(field_release:api.FaxResponse.to)
  
  ::common::String* temp = to_;
  to_ = NULL;
  return temp;
}
inline ::common::String* FaxResponse::mutable_to() {
  
  if (to_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxResponse.to)
  return to_;
}
inline void FaxResponse::set_allocated_to(::common::String* to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(to_);
  }
  if (to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:api.FaxResponse.to)
}

// .common.String from = 5;
inline bool FaxResponse::has_from() const {
  return this != internal_default_instance() && from_ != NULL;
}
inline const ::common::String& FaxResponse::_internal_from() const {
  return *from_;
}
inline const ::common::String& FaxResponse::from() const {
  const ::common::String* p = from_;
  // @@protoc_insertion_point(field_get:api.FaxResponse.from)
  return p != NULL ? *p : *reinterpret_cast<const ::common::String*>(
      &::common::_String_default_instance_);
}
inline ::common::String* FaxResponse::release_from() {
  // @@protoc_insertion_point(field_release:api.FaxResponse.from)
  
  ::common::String* temp = from_;
  from_ = NULL;
  return temp;
}
inline ::common::String* FaxResponse::mutable_from() {
  
  if (from_ == NULL) {
    auto* p = CreateMaybeMessage<::common::String>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxResponse.from)
  return from_;
}
inline void FaxResponse::set_allocated_from(::common::String* from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(from_);
  }
  if (from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:api.FaxResponse.from)
}

// .common.StringMap annotations = 10;
inline bool FaxResponse::has_annotations() const {
  return this != internal_default_instance() && annotations_ != NULL;
}
inline const ::common::StringMap& FaxResponse::_internal_annotations() const {
  return *annotations_;
}
inline const ::common::StringMap& FaxResponse::annotations() const {
  const ::common::StringMap* p = annotations_;
  // @@protoc_insertion_point(field_get:api.FaxResponse.annotations)
  return p != NULL ? *p : *reinterpret_cast<const ::common::StringMap*>(
      &::common::_StringMap_default_instance_);
}
inline ::common::StringMap* FaxResponse::release_annotations() {
  // @@protoc_insertion_point(field_release:api.FaxResponse.annotations)
  
  ::common::StringMap* temp = annotations_;
  annotations_ = NULL;
  return temp;
}
inline ::common::StringMap* FaxResponse::mutable_annotations() {
  
  if (annotations_ == NULL) {
    auto* p = CreateMaybeMessage<::common::StringMap>(GetArenaNoVirtual());
    annotations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.FaxResponse.annotations)
  return annotations_;
}
inline void FaxResponse::set_allocated_annotations(::common::StringMap* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:api.FaxResponse.annotations)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::api::Scope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::Scope>() {
  return ::api::Scope_descriptor();
}
template <> struct is_proto_enum< ::api::URL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::URL>() {
  return ::api::URL_descriptor();
}
template <> struct is_proto_enum< ::api::Plan> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::Plan>() {
  return ::api::Plan_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
