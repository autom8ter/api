// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class AppMetadata;
class AppMetadataDefaultTypeInternal;
extern AppMetadataDefaultTypeInternal _AppMetadata_default_instance_;
class Auth;
class AuthDefaultTypeInternal;
extern AuthDefaultTypeInternal _Auth_default_instance_;
class Bytes;
class BytesDefaultTypeInternal;
extern BytesDefaultTypeInternal _Bytes_default_instance_;
class EchoMessage;
class EchoMessageDefaultTypeInternal;
extern EchoMessageDefaultTypeInternal _EchoMessage_default_instance_;
class Template;
class TemplateDefaultTypeInternal;
extern TemplateDefaultTypeInternal _Template_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserMetadata;
class UserMetadataDefaultTypeInternal;
extern UserMetadataDefaultTypeInternal _UserMetadata_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::AppMetadata* Arena::CreateMaybeMessage<::api::AppMetadata>(Arena*);
template<> ::api::Auth* Arena::CreateMaybeMessage<::api::Auth>(Arena*);
template<> ::api::Bytes* Arena::CreateMaybeMessage<::api::Bytes>(Arena*);
template<> ::api::EchoMessage* Arena::CreateMaybeMessage<::api::EchoMessage>(Arena*);
template<> ::api::Template* Arena::CreateMaybeMessage<::api::Template>(Arena*);
template<> ::api::UserInfo* Arena::CreateMaybeMessage<::api::UserInfo>(Arena*);
template<> ::api::UserMetadata* Arena::CreateMaybeMessage<::api::UserMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

// ===================================================================

class EchoMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.EchoMessage) */ {
 public:
  EchoMessage();
  virtual ~EchoMessage();

  EchoMessage(const EchoMessage& from);

  inline EchoMessage& operator=(const EchoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoMessage(EchoMessage&& from) noexcept
    : EchoMessage() {
    *this = ::std::move(from);
  }

  inline EchoMessage& operator=(EchoMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoMessage* internal_default_instance() {
    return reinterpret_cast<const EchoMessage*>(
               &_EchoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EchoMessage* other);
  friend void swap(EchoMessage& a, EchoMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoMessage* New() const final {
    return CreateMaybeMessage<EchoMessage>(NULL);
  }

  EchoMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoMessage& from);
  void MergeFrom(const EchoMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:api.EchoMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(NULL);
  }

  UserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string given_name = 7;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 7;
  const ::std::string& given_name() const;
  void set_given_name(const ::std::string& value);
  #if LANG_CXX11
  void set_given_name(::std::string&& value);
  #endif
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  ::std::string* mutable_given_name();
  ::std::string* release_given_name();
  void set_allocated_given_name(::std::string* given_name);

  // string family_name = 8;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 8;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  #if LANG_CXX11
  void set_family_name(::std::string&& value);
  #endif
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // string gender = 9;
  void clear_gender();
  static const int kGenderFieldNumber = 9;
  const ::std::string& gender() const;
  void set_gender(const ::std::string& value);
  #if LANG_CXX11
  void set_gender(::std::string&& value);
  #endif
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  ::std::string* mutable_gender();
  ::std::string* release_gender();
  void set_allocated_gender(::std::string* gender);

  // string birthdate = 10;
  void clear_birthdate();
  static const int kBirthdateFieldNumber = 10;
  const ::std::string& birthdate() const;
  void set_birthdate(const ::std::string& value);
  #if LANG_CXX11
  void set_birthdate(::std::string&& value);
  #endif
  void set_birthdate(const char* value);
  void set_birthdate(const char* value, size_t size);
  ::std::string* mutable_birthdate();
  ::std::string* release_birthdate();
  void set_allocated_birthdate(::std::string* birthdate);

  // string email = 11;
  void clear_email();
  static const int kEmailFieldNumber = 11;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string picture = 12;
  void clear_picture();
  static const int kPictureFieldNumber = 12;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  #if LANG_CXX11
  void set_picture(::std::string&& value);
  #endif
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // .api.UserMetadata user_metadata = 13;
  bool has_user_metadata() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 13;
  private:
  const ::api::UserMetadata& _internal_user_metadata() const;
  public:
  const ::api::UserMetadata& user_metadata() const;
  ::api::UserMetadata* release_user_metadata();
  ::api::UserMetadata* mutable_user_metadata();
  void set_allocated_user_metadata(::api::UserMetadata* user_metadata);

  // .api.AppMetadata app_metadata = 14;
  bool has_app_metadata() const;
  void clear_app_metadata();
  static const int kAppMetadataFieldNumber = 14;
  private:
  const ::api::AppMetadata& _internal_app_metadata() const;
  public:
  const ::api::AppMetadata& app_metadata() const;
  ::api::AppMetadata* release_app_metadata();
  ::api::AppMetadata* mutable_app_metadata();
  void set_allocated_app_metadata(::api::AppMetadata* app_metadata);

  // @@protoc_insertion_point(class_scope:api.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr given_name_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  ::google::protobuf::internal::ArenaStringPtr gender_;
  ::google::protobuf::internal::ArenaStringPtr birthdate_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::api::UserMetadata* user_metadata_;
  ::api::AppMetadata* app_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserMetadata) */ {
 public:
  UserMetadata();
  virtual ~UserMetadata();

  UserMetadata(const UserMetadata& from);

  inline UserMetadata& operator=(const UserMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetadata(UserMetadata&& from) noexcept
    : UserMetadata() {
    *this = ::std::move(from);
  }

  inline UserMetadata& operator=(UserMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMetadata* internal_default_instance() {
    return reinterpret_cast<const UserMetadata*>(
               &_UserMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserMetadata* other);
  friend void swap(UserMetadata& a, UserMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetadata* New() const final {
    return CreateMaybeMessage<UserMetadata>(NULL);
  }

  UserMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMetadata& from);
  void MergeFrom(const UserMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string phone = 1;
  void clear_phone();
  static const int kPhoneFieldNumber = 1;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string preferred_contact = 2;
  void clear_preferred_contact();
  static const int kPreferredContactFieldNumber = 2;
  const ::std::string& preferred_contact() const;
  void set_preferred_contact(const ::std::string& value);
  #if LANG_CXX11
  void set_preferred_contact(::std::string&& value);
  #endif
  void set_preferred_contact(const char* value);
  void set_preferred_contact(const char* value, size_t size);
  ::std::string* mutable_preferred_contact();
  ::std::string* release_preferred_contact();
  void set_allocated_preferred_contact(::std::string* preferred_contact);

  // @@protoc_insertion_point(class_scope:api.UserMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr preferred_contact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AppMetadata) */ {
 public:
  AppMetadata();
  virtual ~AppMetadata();

  AppMetadata(const AppMetadata& from);

  inline AppMetadata& operator=(const AppMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppMetadata(AppMetadata&& from) noexcept
    : AppMetadata() {
    *this = ::std::move(from);
  }

  inline AppMetadata& operator=(AppMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppMetadata* internal_default_instance() {
    return reinterpret_cast<const AppMetadata*>(
               &_AppMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AppMetadata* other);
  friend void swap(AppMetadata& a, AppMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppMetadata* New() const final {
    return CreateMaybeMessage<AppMetadata>(NULL);
  }

  AppMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppMetadata& from);
  void MergeFrom(const AppMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plan = 1;
  void clear_plan();
  static const int kPlanFieldNumber = 1;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string pay_token = 2;
  void clear_pay_token();
  static const int kPayTokenFieldNumber = 2;
  const ::std::string& pay_token() const;
  void set_pay_token(const ::std::string& value);
  #if LANG_CXX11
  void set_pay_token(::std::string&& value);
  #endif
  void set_pay_token(const char* value);
  void set_pay_token(const char* value, size_t size);
  ::std::string* mutable_pay_token();
  ::std::string* release_pay_token();
  void set_allocated_pay_token(::std::string* pay_token);

  // @@protoc_insertion_point(class_scope:api.AppMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr pay_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Auth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Auth) */ {
 public:
  Auth();
  virtual ~Auth();

  Auth(const Auth& from);

  inline Auth& operator=(const Auth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Auth(Auth&& from) noexcept
    : Auth() {
    *this = ::std::move(from);
  }

  inline Auth& operator=(Auth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Auth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Auth* internal_default_instance() {
    return reinterpret_cast<const Auth*>(
               &_Auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Auth* other);
  friend void swap(Auth& a, Auth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Auth* New() const final {
    return CreateMaybeMessage<Auth>(NULL);
  }

  Auth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Auth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Auth& from);
  void MergeFrom(const Auth& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Auth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string scopes = 6;
  int scopes_size() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 6;
  const ::std::string& scopes(int index) const;
  ::std::string* mutable_scopes(int index);
  void set_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scopes(int index, ::std::string&& value);
  #endif
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  ::std::string* add_scopes();
  void add_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_scopes(::std::string&& value);
  #endif
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& scopes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_scopes();

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string client_secret = 3;
  void clear_client_secret();
  static const int kClientSecretFieldNumber = 3;
  const ::std::string& client_secret() const;
  void set_client_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_client_secret(::std::string&& value);
  #endif
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  ::std::string* mutable_client_secret();
  ::std::string* release_client_secret();
  void set_allocated_client_secret(::std::string* client_secret);

  // string redirect = 4;
  void clear_redirect();
  static const int kRedirectFieldNumber = 4;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // string audience = 5;
  void clear_audience();
  static const int kAudienceFieldNumber = 5;
  const ::std::string& audience() const;
  void set_audience(const ::std::string& value);
  #if LANG_CXX11
  void set_audience(::std::string&& value);
  #endif
  void set_audience(const char* value);
  void set_audience(const char* value, size_t size);
  ::std::string* mutable_audience();
  ::std::string* release_audience();
  void set_allocated_audience(::std::string* audience);

  // @@protoc_insertion_point(class_scope:api.Auth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> scopes_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr client_secret_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::google::protobuf::internal::ArenaStringPtr audience_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Template : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Template) */ {
 public:
  Template();
  virtual ~Template();

  Template(const Template& from);

  inline Template& operator=(const Template& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Template(Template&& from) noexcept
    : Template() {
    *this = ::std::move(from);
  }

  inline Template& operator=(Template&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Template& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Template* internal_default_instance() {
    return reinterpret_cast<const Template*>(
               &_Template_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Template* other);
  friend void swap(Template& a, Template& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Template* New() const final {
    return CreateMaybeMessage<Template>(NULL);
  }

  Template* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Template>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Template& from);
  void MergeFrom(const Template& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Template* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:api.Template)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bytes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Bytes) */ {
 public:
  Bytes();
  virtual ~Bytes();

  Bytes(const Bytes& from);

  inline Bytes& operator=(const Bytes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bytes(Bytes&& from) noexcept
    : Bytes() {
    *this = ::std::move(from);
  }

  inline Bytes& operator=(Bytes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bytes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bytes* internal_default_instance() {
    return reinterpret_cast<const Bytes*>(
               &_Bytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Bytes* other);
  friend void swap(Bytes& a, Bytes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bytes* New() const final {
    return CreateMaybeMessage<Bytes>(NULL);
  }

  Bytes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bytes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Bytes& from);
  void MergeFrom(const Bytes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bytes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes bits = 1;
  void clear_bits();
  static const int kBitsFieldNumber = 1;
  const ::std::string& bits() const;
  void set_bits(const ::std::string& value);
  #if LANG_CXX11
  void set_bits(::std::string&& value);
  #endif
  void set_bits(const char* value);
  void set_bits(const void* value, size_t size);
  ::std::string* mutable_bits();
  ::std::string* release_bits();
  void set_allocated_bits(::std::string* bits);

  // @@protoc_insertion_point(class_scope:api.Bytes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoMessage

// string value = 1;
inline void EchoMessage::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoMessage::value() const {
  // @@protoc_insertion_point(field_get:api.EchoMessage.value)
  return value_.GetNoArena();
}
inline void EchoMessage::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.EchoMessage.value)
}
#if LANG_CXX11
inline void EchoMessage::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.EchoMessage.value)
}
#endif
inline void EchoMessage::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.EchoMessage.value)
}
inline void EchoMessage::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.EchoMessage.value)
}
inline ::std::string* EchoMessage::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:api.EchoMessage.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoMessage::release_value() {
  // @@protoc_insertion_point(field_release:api.EchoMessage.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoMessage::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:api.EchoMessage.value)
}

// -------------------------------------------------------------------

// UserInfo

// string name = 6;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.name)
  return name_.GetNoArena();
}
inline void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.name)
}
#if LANG_CXX11
inline void UserInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.name)
}
#endif
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.name)
}
inline ::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:api.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.name)
}

// string given_name = 7;
inline void UserInfo::clear_given_name() {
  given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::given_name() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.given_name)
  return given_name_.GetNoArena();
}
inline void UserInfo::set_given_name(const ::std::string& value) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.given_name)
}
#if LANG_CXX11
inline void UserInfo::set_given_name(::std::string&& value) {
  
  given_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.given_name)
}
#endif
inline void UserInfo::set_given_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.given_name)
}
inline void UserInfo::set_given_name(const char* value, size_t size) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.given_name)
}
inline ::std::string* UserInfo::mutable_given_name() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.given_name)
  return given_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_given_name() {
  // @@protoc_insertion_point(field_release:api.UserInfo.given_name)
  
  return given_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_given_name(::std::string* given_name) {
  if (given_name != NULL) {
    
  } else {
    
  }
  given_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), given_name);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.given_name)
}

// string family_name = 8;
inline void UserInfo::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::family_name() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.family_name)
  return family_name_.GetNoArena();
}
inline void UserInfo::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.family_name)
}
#if LANG_CXX11
inline void UserInfo::set_family_name(::std::string&& value) {
  
  family_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.family_name)
}
#endif
inline void UserInfo::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.family_name)
}
inline void UserInfo::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.family_name)
}
inline ::std::string* UserInfo::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_family_name() {
  // @@protoc_insertion_point(field_release:api.UserInfo.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.family_name)
}

// string gender = 9;
inline void UserInfo::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::gender() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.gender)
  return gender_.GetNoArena();
}
inline void UserInfo::set_gender(const ::std::string& value) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.gender)
}
#if LANG_CXX11
inline void UserInfo::set_gender(::std::string&& value) {
  
  gender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.gender)
}
#endif
inline void UserInfo::set_gender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.gender)
}
inline void UserInfo::set_gender(const char* value, size_t size) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.gender)
}
inline ::std::string* UserInfo::mutable_gender() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_gender() {
  // @@protoc_insertion_point(field_release:api.UserInfo.gender)
  
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    
  } else {
    
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.gender)
}

// string birthdate = 10;
inline void UserInfo::clear_birthdate() {
  birthdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::birthdate() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.birthdate)
  return birthdate_.GetNoArena();
}
inline void UserInfo::set_birthdate(const ::std::string& value) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.birthdate)
}
#if LANG_CXX11
inline void UserInfo::set_birthdate(::std::string&& value) {
  
  birthdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.birthdate)
}
#endif
inline void UserInfo::set_birthdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.birthdate)
}
inline void UserInfo::set_birthdate(const char* value, size_t size) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.birthdate)
}
inline ::std::string* UserInfo::mutable_birthdate() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.birthdate)
  return birthdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_birthdate() {
  // @@protoc_insertion_point(field_release:api.UserInfo.birthdate)
  
  return birthdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_birthdate(::std::string* birthdate) {
  if (birthdate != NULL) {
    
  } else {
    
  }
  birthdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthdate);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.birthdate)
}

// string email = 11;
inline void UserInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.email)
  return email_.GetNoArena();
}
inline void UserInfo::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.email)
}
#if LANG_CXX11
inline void UserInfo::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.email)
}
#endif
inline void UserInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.email)
}
inline void UserInfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.email)
}
inline ::std::string* UserInfo::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:api.UserInfo.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.email)
}

// string picture = 12;
inline void UserInfo::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::picture() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.picture)
  return picture_.GetNoArena();
}
inline void UserInfo::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.picture)
}
#if LANG_CXX11
inline void UserInfo::set_picture(::std::string&& value) {
  
  picture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.picture)
}
#endif
inline void UserInfo::set_picture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.picture)
}
inline void UserInfo::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.picture)
}
inline ::std::string* UserInfo::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_picture() {
  // @@protoc_insertion_point(field_release:api.UserInfo.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.picture)
}

// .api.UserMetadata user_metadata = 13;
inline bool UserInfo::has_user_metadata() const {
  return this != internal_default_instance() && user_metadata_ != NULL;
}
inline void UserInfo::clear_user_metadata() {
  if (GetArenaNoVirtual() == NULL && user_metadata_ != NULL) {
    delete user_metadata_;
  }
  user_metadata_ = NULL;
}
inline const ::api::UserMetadata& UserInfo::_internal_user_metadata() const {
  return *user_metadata_;
}
inline const ::api::UserMetadata& UserInfo::user_metadata() const {
  const ::api::UserMetadata* p = user_metadata_;
  // @@protoc_insertion_point(field_get:api.UserInfo.user_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::api::UserMetadata*>(
      &::api::_UserMetadata_default_instance_);
}
inline ::api::UserMetadata* UserInfo::release_user_metadata() {
  // @@protoc_insertion_point(field_release:api.UserInfo.user_metadata)
  
  ::api::UserMetadata* temp = user_metadata_;
  user_metadata_ = NULL;
  return temp;
}
inline ::api::UserMetadata* UserInfo::mutable_user_metadata() {
  
  if (user_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::api::UserMetadata>(GetArenaNoVirtual());
    user_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserInfo.user_metadata)
  return user_metadata_;
}
inline void UserInfo::set_allocated_user_metadata(::api::UserMetadata* user_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_metadata_;
  }
  if (user_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_metadata, submessage_arena);
    }
    
  } else {
    
  }
  user_metadata_ = user_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.user_metadata)
}

// .api.AppMetadata app_metadata = 14;
inline bool UserInfo::has_app_metadata() const {
  return this != internal_default_instance() && app_metadata_ != NULL;
}
inline void UserInfo::clear_app_metadata() {
  if (GetArenaNoVirtual() == NULL && app_metadata_ != NULL) {
    delete app_metadata_;
  }
  app_metadata_ = NULL;
}
inline const ::api::AppMetadata& UserInfo::_internal_app_metadata() const {
  return *app_metadata_;
}
inline const ::api::AppMetadata& UserInfo::app_metadata() const {
  const ::api::AppMetadata* p = app_metadata_;
  // @@protoc_insertion_point(field_get:api.UserInfo.app_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::api::AppMetadata*>(
      &::api::_AppMetadata_default_instance_);
}
inline ::api::AppMetadata* UserInfo::release_app_metadata() {
  // @@protoc_insertion_point(field_release:api.UserInfo.app_metadata)
  
  ::api::AppMetadata* temp = app_metadata_;
  app_metadata_ = NULL;
  return temp;
}
inline ::api::AppMetadata* UserInfo::mutable_app_metadata() {
  
  if (app_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::api::AppMetadata>(GetArenaNoVirtual());
    app_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserInfo.app_metadata)
  return app_metadata_;
}
inline void UserInfo::set_allocated_app_metadata(::api::AppMetadata* app_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete app_metadata_;
  }
  if (app_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app_metadata, submessage_arena);
    }
    
  } else {
    
  }
  app_metadata_ = app_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.app_metadata)
}

// -------------------------------------------------------------------

// UserMetadata

// string phone = 1;
inline void UserMetadata::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::phone() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.phone)
  return phone_.GetNoArena();
}
inline void UserMetadata::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.phone)
}
#if LANG_CXX11
inline void UserMetadata::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.phone)
}
#endif
inline void UserMetadata::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.phone)
}
inline void UserMetadata::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.phone)
}
inline ::std::string* UserMetadata::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_phone() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.phone)
}

// string preferred_contact = 2;
inline void UserMetadata::clear_preferred_contact() {
  preferred_contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::preferred_contact() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.preferred_contact)
  return preferred_contact_.GetNoArena();
}
inline void UserMetadata::set_preferred_contact(const ::std::string& value) {
  
  preferred_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.preferred_contact)
}
#if LANG_CXX11
inline void UserMetadata::set_preferred_contact(::std::string&& value) {
  
  preferred_contact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.preferred_contact)
}
#endif
inline void UserMetadata::set_preferred_contact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  preferred_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.preferred_contact)
}
inline void UserMetadata::set_preferred_contact(const char* value, size_t size) {
  
  preferred_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.preferred_contact)
}
inline ::std::string* UserMetadata::mutable_preferred_contact() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.preferred_contact)
  return preferred_contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_preferred_contact() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.preferred_contact)
  
  return preferred_contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_preferred_contact(::std::string* preferred_contact) {
  if (preferred_contact != NULL) {
    
  } else {
    
  }
  preferred_contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_contact);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.preferred_contact)
}

// -------------------------------------------------------------------

// AppMetadata

// string plan = 1;
inline void AppMetadata::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppMetadata::plan() const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.plan)
  return plan_.GetNoArena();
}
inline void AppMetadata::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AppMetadata.plan)
}
#if LANG_CXX11
inline void AppMetadata::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AppMetadata.plan)
}
#endif
inline void AppMetadata::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.plan)
}
inline void AppMetadata::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.plan)
}
inline ::std::string* AppMetadata::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMetadata::release_plan() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMetadata::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.plan)
}

// string pay_token = 2;
inline void AppMetadata::clear_pay_token() {
  pay_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppMetadata::pay_token() const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.pay_token)
  return pay_token_.GetNoArena();
}
inline void AppMetadata::set_pay_token(const ::std::string& value) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AppMetadata.pay_token)
}
#if LANG_CXX11
inline void AppMetadata::set_pay_token(::std::string&& value) {
  
  pay_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AppMetadata.pay_token)
}
#endif
inline void AppMetadata::set_pay_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.pay_token)
}
inline void AppMetadata::set_pay_token(const char* value, size_t size) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.pay_token)
}
inline ::std::string* AppMetadata::mutable_pay_token() {
  
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.pay_token)
  return pay_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMetadata::release_pay_token() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.pay_token)
  
  return pay_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMetadata::set_allocated_pay_token(::std::string* pay_token) {
  if (pay_token != NULL) {
    
  } else {
    
  }
  pay_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pay_token);
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.pay_token)
}

// -------------------------------------------------------------------

// Auth

// string domain = 1;
inline void Auth::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::domain() const {
  // @@protoc_insertion_point(field_get:api.Auth.domain)
  return domain_.GetNoArena();
}
inline void Auth::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.domain)
}
#if LANG_CXX11
inline void Auth::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.domain)
}
#endif
inline void Auth::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.domain)
}
inline void Auth::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.domain)
}
inline ::std::string* Auth::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_domain() {
  // @@protoc_insertion_point(field_release:api.Auth.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.domain)
}

// string client_id = 2;
inline void Auth::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::client_id() const {
  // @@protoc_insertion_point(field_get:api.Auth.client_id)
  return client_id_.GetNoArena();
}
inline void Auth::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.client_id)
}
#if LANG_CXX11
inline void Auth::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.client_id)
}
#endif
inline void Auth::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.client_id)
}
inline void Auth::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.client_id)
}
inline ::std::string* Auth::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_client_id() {
  // @@protoc_insertion_point(field_release:api.Auth.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.client_id)
}

// string client_secret = 3;
inline void Auth::clear_client_secret() {
  client_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::client_secret() const {
  // @@protoc_insertion_point(field_get:api.Auth.client_secret)
  return client_secret_.GetNoArena();
}
inline void Auth::set_client_secret(const ::std::string& value) {
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.client_secret)
}
#if LANG_CXX11
inline void Auth::set_client_secret(::std::string&& value) {
  
  client_secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.client_secret)
}
#endif
inline void Auth::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.client_secret)
}
inline void Auth::set_client_secret(const char* value, size_t size) {
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.client_secret)
}
inline ::std::string* Auth::mutable_client_secret() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.client_secret)
  return client_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_client_secret() {
  // @@protoc_insertion_point(field_release:api.Auth.client_secret)
  
  return client_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_client_secret(::std::string* client_secret) {
  if (client_secret != NULL) {
    
  } else {
    
  }
  client_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_secret);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.client_secret)
}

// string redirect = 4;
inline void Auth::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::redirect() const {
  // @@protoc_insertion_point(field_get:api.Auth.redirect)
  return redirect_.GetNoArena();
}
inline void Auth::set_redirect(const ::std::string& value) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.redirect)
}
#if LANG_CXX11
inline void Auth::set_redirect(::std::string&& value) {
  
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.redirect)
}
#endif
inline void Auth::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.redirect)
}
inline void Auth::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.redirect)
}
inline ::std::string* Auth::mutable_redirect() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_redirect() {
  // @@protoc_insertion_point(field_release:api.Auth.redirect)
  
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.redirect)
}

// string audience = 5;
inline void Auth::clear_audience() {
  audience_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth::audience() const {
  // @@protoc_insertion_point(field_get:api.Auth.audience)
  return audience_.GetNoArena();
}
inline void Auth::set_audience(const ::std::string& value) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth.audience)
}
#if LANG_CXX11
inline void Auth::set_audience(::std::string&& value) {
  
  audience_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth.audience)
}
#endif
inline void Auth::set_audience(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth.audience)
}
inline void Auth::set_audience(const char* value, size_t size) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth.audience)
}
inline ::std::string* Auth::mutable_audience() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth.audience)
  return audience_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth::release_audience() {
  // @@protoc_insertion_point(field_release:api.Auth.audience)
  
  return audience_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth::set_allocated_audience(::std::string* audience) {
  if (audience != NULL) {
    
  } else {
    
  }
  audience_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audience);
  // @@protoc_insertion_point(field_set_allocated:api.Auth.audience)
}

// repeated string scopes = 6;
inline int Auth::scopes_size() const {
  return scopes_.size();
}
inline void Auth::clear_scopes() {
  scopes_.Clear();
}
inline const ::std::string& Auth::scopes(int index) const {
  // @@protoc_insertion_point(field_get:api.Auth.scopes)
  return scopes_.Get(index);
}
inline ::std::string* Auth::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:api.Auth.scopes)
  return scopes_.Mutable(index);
}
inline void Auth::set_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.Auth.scopes)
  scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Auth::set_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.Auth.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Auth::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.Auth.scopes)
}
inline void Auth::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.Auth.scopes)
}
inline ::std::string* Auth::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:api.Auth.scopes)
  return scopes_.Add();
}
inline void Auth::add_scopes(const ::std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.Auth.scopes)
}
#if LANG_CXX11
inline void Auth::add_scopes(::std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.Auth.scopes)
}
#endif
inline void Auth::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.Auth.scopes)
}
inline void Auth::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.Auth.scopes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Auth::scopes() const {
  // @@protoc_insertion_point(field_list:api.Auth.scopes)
  return scopes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Auth::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:api.Auth.scopes)
  return &scopes_;
}

// -------------------------------------------------------------------

// Template

// string name = 1;
inline void Template::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::name() const {
  // @@protoc_insertion_point(field_get:api.Template.name)
  return name_.GetNoArena();
}
inline void Template::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Template.name)
}
#if LANG_CXX11
inline void Template::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Template.name)
}
#endif
inline void Template::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Template.name)
}
inline void Template::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Template.name)
}
inline ::std::string* Template::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.Template.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_name() {
  // @@protoc_insertion_point(field_release:api.Template.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.Template.name)
}

// string text = 2;
inline void Template::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Template::text() const {
  // @@protoc_insertion_point(field_get:api.Template.text)
  return text_.GetNoArena();
}
inline void Template::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Template.text)
}
#if LANG_CXX11
inline void Template::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Template.text)
}
#endif
inline void Template::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Template.text)
}
inline void Template::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Template.text)
}
inline ::std::string* Template::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:api.Template.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Template::release_text() {
  // @@protoc_insertion_point(field_release:api.Template.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Template::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:api.Template.text)
}

// -------------------------------------------------------------------

// Bytes

// bytes bits = 1;
inline void Bytes::clear_bits() {
  bits_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bytes::bits() const {
  // @@protoc_insertion_point(field_get:api.Bytes.bits)
  return bits_.GetNoArena();
}
inline void Bytes::set_bits(const ::std::string& value) {
  
  bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Bytes.bits)
}
#if LANG_CXX11
inline void Bytes::set_bits(::std::string&& value) {
  
  bits_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Bytes.bits)
}
#endif
inline void Bytes::set_bits(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Bytes.bits)
}
inline void Bytes::set_bits(const void* value, size_t size) {
  
  bits_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Bytes.bits)
}
inline ::std::string* Bytes::mutable_bits() {
  
  // @@protoc_insertion_point(field_mutable:api.Bytes.bits)
  return bits_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bytes::release_bits() {
  // @@protoc_insertion_point(field_release:api.Bytes.bits)
  
  return bits_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bytes::set_allocated_bits(::std::string* bits) {
  if (bits != NULL) {
    
  } else {
    
  }
  bits_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bits);
  // @@protoc_insertion_point(field_set_allocated:api.Bytes.bits)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
