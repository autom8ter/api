// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef PROTOBUF_INCLUDED_api_2eproto
#define PROTOBUF_INCLUDED_api_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2eproto 

namespace protobuf_api_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2eproto
namespace api {
class AccessToken;
class AccessTokenDefaultTypeInternal;
extern AccessTokenDefaultTypeInternal _AccessToken_default_instance_;
class AppMetadata;
class AppMetadataDefaultTypeInternal;
extern AppMetadataDefaultTypeInternal _AppMetadata_default_instance_;
class Auth0;
class Auth0DefaultTypeInternal;
extern Auth0DefaultTypeInternal _Auth0_default_instance_;
class CreateCustomerRequest;
class CreateCustomerRequestDefaultTypeInternal;
extern CreateCustomerRequestDefaultTypeInternal _CreateCustomerRequest_default_instance_;
class CreateCustomerResponse;
class CreateCustomerResponseDefaultTypeInternal;
extern CreateCustomerResponseDefaultTypeInternal _CreateCustomerResponse_default_instance_;
class IDToken;
class IDTokenDefaultTypeInternal;
extern IDTokenDefaultTypeInternal _IDToken_default_instance_;
class Paths;
class PathsDefaultTypeInternal;
extern PathsDefaultTypeInternal _Paths_default_instance_;
class RefreshToken;
class RefreshTokenDefaultTypeInternal;
extern RefreshTokenDefaultTypeInternal _RefreshToken_default_instance_;
class Tokens;
class TokensDefaultTypeInternal;
extern TokensDefaultTypeInternal _Tokens_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserMetadata;
class UserMetadataDefaultTypeInternal;
extern UserMetadataDefaultTypeInternal _UserMetadata_default_instance_;
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::AccessToken* Arena::CreateMaybeMessage<::api::AccessToken>(Arena*);
template<> ::api::AppMetadata* Arena::CreateMaybeMessage<::api::AppMetadata>(Arena*);
template<> ::api::Auth0* Arena::CreateMaybeMessage<::api::Auth0>(Arena*);
template<> ::api::CreateCustomerRequest* Arena::CreateMaybeMessage<::api::CreateCustomerRequest>(Arena*);
template<> ::api::CreateCustomerResponse* Arena::CreateMaybeMessage<::api::CreateCustomerResponse>(Arena*);
template<> ::api::IDToken* Arena::CreateMaybeMessage<::api::IDToken>(Arena*);
template<> ::api::Paths* Arena::CreateMaybeMessage<::api::Paths>(Arena*);
template<> ::api::RefreshToken* Arena::CreateMaybeMessage<::api::RefreshToken>(Arena*);
template<> ::api::Tokens* Arena::CreateMaybeMessage<::api::Tokens>(Arena*);
template<> ::api::UserInfo* Arena::CreateMaybeMessage<::api::UserInfo>(Arena*);
template<> ::api::UserMetadata* Arena::CreateMaybeMessage<::api::UserMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {

// ===================================================================

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(NULL);
  }

  UserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string given_name = 7;
  void clear_given_name();
  static const int kGivenNameFieldNumber = 7;
  const ::std::string& given_name() const;
  void set_given_name(const ::std::string& value);
  #if LANG_CXX11
  void set_given_name(::std::string&& value);
  #endif
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  ::std::string* mutable_given_name();
  ::std::string* release_given_name();
  void set_allocated_given_name(::std::string* given_name);

  // string family_name = 8;
  void clear_family_name();
  static const int kFamilyNameFieldNumber = 8;
  const ::std::string& family_name() const;
  void set_family_name(const ::std::string& value);
  #if LANG_CXX11
  void set_family_name(::std::string&& value);
  #endif
  void set_family_name(const char* value);
  void set_family_name(const char* value, size_t size);
  ::std::string* mutable_family_name();
  ::std::string* release_family_name();
  void set_allocated_family_name(::std::string* family_name);

  // string gender = 9;
  void clear_gender();
  static const int kGenderFieldNumber = 9;
  const ::std::string& gender() const;
  void set_gender(const ::std::string& value);
  #if LANG_CXX11
  void set_gender(::std::string&& value);
  #endif
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  ::std::string* mutable_gender();
  ::std::string* release_gender();
  void set_allocated_gender(::std::string* gender);

  // string birthdate = 10;
  void clear_birthdate();
  static const int kBirthdateFieldNumber = 10;
  const ::std::string& birthdate() const;
  void set_birthdate(const ::std::string& value);
  #if LANG_CXX11
  void set_birthdate(::std::string&& value);
  #endif
  void set_birthdate(const char* value);
  void set_birthdate(const char* value, size_t size);
  ::std::string* mutable_birthdate();
  ::std::string* release_birthdate();
  void set_allocated_birthdate(::std::string* birthdate);

  // string email = 11;
  void clear_email();
  static const int kEmailFieldNumber = 11;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string picture = 12;
  void clear_picture();
  static const int kPictureFieldNumber = 12;
  const ::std::string& picture() const;
  void set_picture(const ::std::string& value);
  #if LANG_CXX11
  void set_picture(::std::string&& value);
  #endif
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  ::std::string* mutable_picture();
  ::std::string* release_picture();
  void set_allocated_picture(::std::string* picture);

  // .api.UserMetadata user_metadata = 13;
  bool has_user_metadata() const;
  void clear_user_metadata();
  static const int kUserMetadataFieldNumber = 13;
  private:
  const ::api::UserMetadata& _internal_user_metadata() const;
  public:
  const ::api::UserMetadata& user_metadata() const;
  ::api::UserMetadata* release_user_metadata();
  ::api::UserMetadata* mutable_user_metadata();
  void set_allocated_user_metadata(::api::UserMetadata* user_metadata);

  // .api.AppMetadata app_metadata = 14;
  bool has_app_metadata() const;
  void clear_app_metadata();
  static const int kAppMetadataFieldNumber = 14;
  private:
  const ::api::AppMetadata& _internal_app_metadata() const;
  public:
  const ::api::AppMetadata& app_metadata() const;
  ::api::AppMetadata* release_app_metadata();
  ::api::AppMetadata* mutable_app_metadata();
  void set_allocated_app_metadata(::api::AppMetadata* app_metadata);

  // @@protoc_insertion_point(class_scope:api.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr given_name_;
  ::google::protobuf::internal::ArenaStringPtr family_name_;
  ::google::protobuf::internal::ArenaStringPtr gender_;
  ::google::protobuf::internal::ArenaStringPtr birthdate_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr picture_;
  ::api::UserMetadata* user_metadata_;
  ::api::AppMetadata* app_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.UserMetadata) */ {
 public:
  UserMetadata();
  virtual ~UserMetadata();

  UserMetadata(const UserMetadata& from);

  inline UserMetadata& operator=(const UserMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetadata(UserMetadata&& from) noexcept
    : UserMetadata() {
    *this = ::std::move(from);
  }

  inline UserMetadata& operator=(UserMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMetadata* internal_default_instance() {
    return reinterpret_cast<const UserMetadata*>(
               &_UserMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserMetadata* other);
  friend void swap(UserMetadata& a, UserMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetadata* New() const final {
    return CreateMaybeMessage<UserMetadata>(NULL);
  }

  UserMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMetadata& from);
  void MergeFrom(const UserMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string phone = 1;
  void clear_phone();
  static const int kPhoneFieldNumber = 1;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string preferred_contact = 2;
  void clear_preferred_contact();
  static const int kPreferredContactFieldNumber = 2;
  const ::std::string& preferred_contact() const;
  void set_preferred_contact(const ::std::string& value);
  #if LANG_CXX11
  void set_preferred_contact(::std::string&& value);
  #endif
  void set_preferred_contact(const char* value);
  void set_preferred_contact(const char* value, size_t size);
  ::std::string* mutable_preferred_contact();
  ::std::string* release_preferred_contact();
  void set_allocated_preferred_contact(::std::string* preferred_contact);

  // @@protoc_insertion_point(class_scope:api.UserMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr preferred_contact_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AppMetadata) */ {
 public:
  AppMetadata();
  virtual ~AppMetadata();

  AppMetadata(const AppMetadata& from);

  inline AppMetadata& operator=(const AppMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppMetadata(AppMetadata&& from) noexcept
    : AppMetadata() {
    *this = ::std::move(from);
  }

  inline AppMetadata& operator=(AppMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppMetadata* internal_default_instance() {
    return reinterpret_cast<const AppMetadata*>(
               &_AppMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AppMetadata* other);
  friend void swap(AppMetadata& a, AppMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppMetadata* New() const final {
    return CreateMaybeMessage<AppMetadata>(NULL);
  }

  AppMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppMetadata& from);
  void MergeFrom(const AppMetadata& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string plan = 1;
  void clear_plan();
  static const int kPlanFieldNumber = 1;
  const ::std::string& plan() const;
  void set_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_plan(::std::string&& value);
  #endif
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  ::std::string* mutable_plan();
  ::std::string* release_plan();
  void set_allocated_plan(::std::string* plan);

  // string pay_token = 2;
  void clear_pay_token();
  static const int kPayTokenFieldNumber = 2;
  const ::std::string& pay_token() const;
  void set_pay_token(const ::std::string& value);
  #if LANG_CXX11
  void set_pay_token(::std::string&& value);
  #endif
  void set_pay_token(const char* value);
  void set_pay_token(const char* value, size_t size);
  ::std::string* mutable_pay_token();
  ::std::string* release_pay_token();
  void set_allocated_pay_token(::std::string* pay_token);

  // @@protoc_insertion_point(class_scope:api.AppMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plan_;
  ::google::protobuf::internal::ArenaStringPtr pay_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.AccessToken) */ {
 public:
  AccessToken();
  virtual ~AccessToken();

  AccessToken(const AccessToken& from);

  inline AccessToken& operator=(const AccessToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccessToken(AccessToken&& from) noexcept
    : AccessToken() {
    *this = ::std::move(from);
  }

  inline AccessToken& operator=(AccessToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessToken* internal_default_instance() {
    return reinterpret_cast<const AccessToken*>(
               &_AccessToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AccessToken* other);
  friend void swap(AccessToken& a, AccessToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessToken* New() const final {
    return CreateMaybeMessage<AccessToken>(NULL);
  }

  AccessToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccessToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccessToken& from);
  void MergeFrom(const AccessToken& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:api.AccessToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IDToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.IDToken) */ {
 public:
  IDToken();
  virtual ~IDToken();

  IDToken(const IDToken& from);

  inline IDToken& operator=(const IDToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IDToken(IDToken&& from) noexcept
    : IDToken() {
    *this = ::std::move(from);
  }

  inline IDToken& operator=(IDToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IDToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IDToken* internal_default_instance() {
    return reinterpret_cast<const IDToken*>(
               &_IDToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IDToken* other);
  friend void swap(IDToken& a, IDToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IDToken* New() const final {
    return CreateMaybeMessage<IDToken>(NULL);
  }

  IDToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IDToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IDToken& from);
  void MergeFrom(const IDToken& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:api.IDToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.RefreshToken) */ {
 public:
  RefreshToken();
  virtual ~RefreshToken();

  RefreshToken(const RefreshToken& from);

  inline RefreshToken& operator=(const RefreshToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefreshToken(RefreshToken&& from) noexcept
    : RefreshToken() {
    *this = ::std::move(from);
  }

  inline RefreshToken& operator=(RefreshToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshToken* internal_default_instance() {
    return reinterpret_cast<const RefreshToken*>(
               &_RefreshToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RefreshToken* other);
  friend void swap(RefreshToken& a, RefreshToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefreshToken* New() const final {
    return CreateMaybeMessage<RefreshToken>(NULL);
  }

  RefreshToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefreshToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RefreshToken& from);
  void MergeFrom(const RefreshToken& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:api.RefreshToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tokens : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Tokens) */ {
 public:
  Tokens();
  virtual ~Tokens();

  Tokens(const Tokens& from);

  inline Tokens& operator=(const Tokens& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tokens(Tokens&& from) noexcept
    : Tokens() {
    *this = ::std::move(from);
  }

  inline Tokens& operator=(Tokens&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tokens& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tokens* internal_default_instance() {
    return reinterpret_cast<const Tokens*>(
               &_Tokens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Tokens* other);
  friend void swap(Tokens& a, Tokens& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tokens* New() const final {
    return CreateMaybeMessage<Tokens>(NULL);
  }

  Tokens* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tokens>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tokens& from);
  void MergeFrom(const Tokens& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tokens* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.IDToken id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::api::IDToken& _internal_id() const;
  public:
  const ::api::IDToken& id() const;
  ::api::IDToken* release_id();
  ::api::IDToken* mutable_id();
  void set_allocated_id(::api::IDToken* id);

  // .api.AccessToken access = 2;
  bool has_access() const;
  void clear_access();
  static const int kAccessFieldNumber = 2;
  private:
  const ::api::AccessToken& _internal_access() const;
  public:
  const ::api::AccessToken& access() const;
  ::api::AccessToken* release_access();
  ::api::AccessToken* mutable_access();
  void set_allocated_access(::api::AccessToken* access);

  // .api.RefreshToken refresh = 3;
  bool has_refresh() const;
  void clear_refresh();
  static const int kRefreshFieldNumber = 3;
  private:
  const ::api::RefreshToken& _internal_refresh() const;
  public:
  const ::api::RefreshToken& refresh() const;
  ::api::RefreshToken* release_refresh();
  ::api::RefreshToken* mutable_refresh();
  void set_allocated_refresh(::api::RefreshToken* refresh);

  // @@protoc_insertion_point(class_scope:api.Tokens)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::IDToken* id_;
  ::api::AccessToken* access_;
  ::api::RefreshToken* refresh_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Paths : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Paths) */ {
 public:
  Paths();
  virtual ~Paths();

  Paths(const Paths& from);

  inline Paths& operator=(const Paths& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Paths(Paths&& from) noexcept
    : Paths() {
    *this = ::std::move(from);
  }

  inline Paths& operator=(Paths&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Paths& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Paths* internal_default_instance() {
    return reinterpret_cast<const Paths*>(
               &_Paths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Paths* other);
  friend void swap(Paths& a, Paths& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Paths* New() const final {
    return CreateMaybeMessage<Paths>(NULL);
  }

  Paths* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Paths>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Paths& from);
  void MergeFrom(const Paths& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Paths* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string home = 1;
  void clear_home();
  static const int kHomeFieldNumber = 1;
  const ::std::string& home() const;
  void set_home(const ::std::string& value);
  #if LANG_CXX11
  void set_home(::std::string&& value);
  #endif
  void set_home(const char* value);
  void set_home(const char* value, size_t size);
  ::std::string* mutable_home();
  ::std::string* release_home();
  void set_allocated_home(::std::string* home);

  // string dashboard = 2;
  void clear_dashboard();
  static const int kDashboardFieldNumber = 2;
  const ::std::string& dashboard() const;
  void set_dashboard(const ::std::string& value);
  #if LANG_CXX11
  void set_dashboard(::std::string&& value);
  #endif
  void set_dashboard(const char* value);
  void set_dashboard(const char* value, size_t size);
  ::std::string* mutable_dashboard();
  ::std::string* release_dashboard();
  void set_allocated_dashboard(::std::string* dashboard);

  // string settings = 3;
  void clear_settings();
  static const int kSettingsFieldNumber = 3;
  const ::std::string& settings() const;
  void set_settings(const ::std::string& value);
  #if LANG_CXX11
  void set_settings(::std::string&& value);
  #endif
  void set_settings(const char* value);
  void set_settings(const char* value, size_t size);
  ::std::string* mutable_settings();
  ::std::string* release_settings();
  void set_allocated_settings(::std::string* settings);

  // string logout = 4;
  void clear_logout();
  static const int kLogoutFieldNumber = 4;
  const ::std::string& logout() const;
  void set_logout(const ::std::string& value);
  #if LANG_CXX11
  void set_logout(::std::string&& value);
  #endif
  void set_logout(const char* value);
  void set_logout(const char* value, size_t size);
  ::std::string* mutable_logout();
  ::std::string* release_logout();
  void set_allocated_logout(::std::string* logout);

  // string callback = 5;
  void clear_callback();
  static const int kCallbackFieldNumber = 5;
  const ::std::string& callback() const;
  void set_callback(const ::std::string& value);
  #if LANG_CXX11
  void set_callback(::std::string&& value);
  #endif
  void set_callback(const char* value);
  void set_callback(const char* value, size_t size);
  ::std::string* mutable_callback();
  ::std::string* release_callback();
  void set_allocated_callback(::std::string* callback);

  // string login = 6;
  void clear_login();
  static const int kLoginFieldNumber = 6;
  const ::std::string& login() const;
  void set_login(const ::std::string& value);
  #if LANG_CXX11
  void set_login(::std::string&& value);
  #endif
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  ::std::string* mutable_login();
  ::std::string* release_login();
  void set_allocated_login(::std::string* login);

  // string subscribe = 7;
  void clear_subscribe();
  static const int kSubscribeFieldNumber = 7;
  const ::std::string& subscribe() const;
  void set_subscribe(const ::std::string& value);
  #if LANG_CXX11
  void set_subscribe(::std::string&& value);
  #endif
  void set_subscribe(const char* value);
  void set_subscribe(const char* value, size_t size);
  ::std::string* mutable_subscribe();
  ::std::string* release_subscribe();
  void set_allocated_subscribe(::std::string* subscribe);

  // string unsubscribe = 8;
  void clear_unsubscribe();
  static const int kUnsubscribeFieldNumber = 8;
  const ::std::string& unsubscribe() const;
  void set_unsubscribe(const ::std::string& value);
  #if LANG_CXX11
  void set_unsubscribe(::std::string&& value);
  #endif
  void set_unsubscribe(const char* value);
  void set_unsubscribe(const char* value, size_t size);
  ::std::string* mutable_unsubscribe();
  ::std::string* release_unsubscribe();
  void set_allocated_unsubscribe(::std::string* unsubscribe);

  // string faq = 9;
  void clear_faq();
  static const int kFaqFieldNumber = 9;
  const ::std::string& faq() const;
  void set_faq(const ::std::string& value);
  #if LANG_CXX11
  void set_faq(::std::string&& value);
  #endif
  void set_faq(const char* value);
  void set_faq(const char* value, size_t size);
  ::std::string* mutable_faq();
  ::std::string* release_faq();
  void set_allocated_faq(::std::string* faq);

  // string support = 10;
  void clear_support();
  static const int kSupportFieldNumber = 10;
  const ::std::string& support() const;
  void set_support(const ::std::string& value);
  #if LANG_CXX11
  void set_support(::std::string&& value);
  #endif
  void set_support(const char* value);
  void set_support(const char* value, size_t size);
  ::std::string* mutable_support();
  ::std::string* release_support();
  void set_allocated_support(::std::string* support);

  // string terms = 11;
  void clear_terms();
  static const int kTermsFieldNumber = 11;
  const ::std::string& terms() const;
  void set_terms(const ::std::string& value);
  #if LANG_CXX11
  void set_terms(::std::string&& value);
  #endif
  void set_terms(const char* value);
  void set_terms(const char* value, size_t size);
  ::std::string* mutable_terms();
  ::std::string* release_terms();
  void set_allocated_terms(::std::string* terms);

  // string privacy = 12;
  void clear_privacy();
  static const int kPrivacyFieldNumber = 12;
  const ::std::string& privacy() const;
  void set_privacy(const ::std::string& value);
  #if LANG_CXX11
  void set_privacy(::std::string&& value);
  #endif
  void set_privacy(const char* value);
  void set_privacy(const char* value, size_t size);
  ::std::string* mutable_privacy();
  ::std::string* release_privacy();
  void set_allocated_privacy(::std::string* privacy);

  // string debug = 13;
  void clear_debug();
  static const int kDebugFieldNumber = 13;
  const ::std::string& debug() const;
  void set_debug(const ::std::string& value);
  #if LANG_CXX11
  void set_debug(::std::string&& value);
  #endif
  void set_debug(const char* value);
  void set_debug(const char* value, size_t size);
  ::std::string* mutable_debug();
  ::std::string* release_debug();
  void set_allocated_debug(::std::string* debug);

  // string blog = 14;
  void clear_blog();
  static const int kBlogFieldNumber = 14;
  const ::std::string& blog() const;
  void set_blog(const ::std::string& value);
  #if LANG_CXX11
  void set_blog(::std::string&& value);
  #endif
  void set_blog(const char* value);
  void set_blog(const char* value, size_t size);
  ::std::string* mutable_blog();
  ::std::string* release_blog();
  void set_allocated_blog(::std::string* blog);

  // @@protoc_insertion_point(class_scope:api.Paths)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr home_;
  ::google::protobuf::internal::ArenaStringPtr dashboard_;
  ::google::protobuf::internal::ArenaStringPtr settings_;
  ::google::protobuf::internal::ArenaStringPtr logout_;
  ::google::protobuf::internal::ArenaStringPtr callback_;
  ::google::protobuf::internal::ArenaStringPtr login_;
  ::google::protobuf::internal::ArenaStringPtr subscribe_;
  ::google::protobuf::internal::ArenaStringPtr unsubscribe_;
  ::google::protobuf::internal::ArenaStringPtr faq_;
  ::google::protobuf::internal::ArenaStringPtr support_;
  ::google::protobuf::internal::ArenaStringPtr terms_;
  ::google::protobuf::internal::ArenaStringPtr privacy_;
  ::google::protobuf::internal::ArenaStringPtr debug_;
  ::google::protobuf::internal::ArenaStringPtr blog_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Auth0 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Auth0) */ {
 public:
  Auth0();
  virtual ~Auth0();

  Auth0(const Auth0& from);

  inline Auth0& operator=(const Auth0& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Auth0(Auth0&& from) noexcept
    : Auth0() {
    *this = ::std::move(from);
  }

  inline Auth0& operator=(Auth0&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Auth0& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Auth0* internal_default_instance() {
    return reinterpret_cast<const Auth0*>(
               &_Auth0_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Auth0* other);
  friend void swap(Auth0& a, Auth0& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Auth0* New() const final {
    return CreateMaybeMessage<Auth0>(NULL);
  }

  Auth0* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Auth0>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Auth0& from);
  void MergeFrom(const Auth0& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Auth0* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string scopes = 4;
  int scopes_size() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 4;
  const ::std::string& scopes(int index) const;
  ::std::string* mutable_scopes(int index);
  void set_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scopes(int index, ::std::string&& value);
  #endif
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  ::std::string* add_scopes();
  void add_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_scopes(::std::string&& value);
  #endif
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& scopes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_scopes();

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string client_secret = 3;
  void clear_client_secret();
  static const int kClientSecretFieldNumber = 3;
  const ::std::string& client_secret() const;
  void set_client_secret(const ::std::string& value);
  #if LANG_CXX11
  void set_client_secret(::std::string&& value);
  #endif
  void set_client_secret(const char* value);
  void set_client_secret(const char* value, size_t size);
  ::std::string* mutable_client_secret();
  ::std::string* release_client_secret();
  void set_allocated_client_secret(::std::string* client_secret);

  // string redirect = 5;
  void clear_redirect();
  static const int kRedirectFieldNumber = 5;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // @@protoc_insertion_point(class_scope:api.Auth0)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> scopes_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr client_secret_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateCustomerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CreateCustomerRequest) */ {
 public:
  CreateCustomerRequest();
  virtual ~CreateCustomerRequest();

  CreateCustomerRequest(const CreateCustomerRequest& from);

  inline CreateCustomerRequest& operator=(const CreateCustomerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateCustomerRequest(CreateCustomerRequest&& from) noexcept
    : CreateCustomerRequest() {
    *this = ::std::move(from);
  }

  inline CreateCustomerRequest& operator=(CreateCustomerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCustomerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCustomerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCustomerRequest*>(
               &_CreateCustomerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CreateCustomerRequest* other);
  friend void swap(CreateCustomerRequest& a, CreateCustomerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateCustomerRequest* New() const final {
    return CreateMaybeMessage<CreateCustomerRequest>(NULL);
  }

  CreateCustomerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateCustomerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateCustomerRequest& from);
  void MergeFrom(const CreateCustomerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCustomerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.UserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 1;
  private:
  const ::api::UserInfo& _internal_user_info() const;
  public:
  const ::api::UserInfo& user_info() const;
  ::api::UserInfo* release_user_info();
  ::api::UserInfo* mutable_user_info();
  void set_allocated_user_info(::api::UserInfo* user_info);

  // @@protoc_insertion_point(class_scope:api.CreateCustomerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::UserInfo* user_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateCustomerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.CreateCustomerResponse) */ {
 public:
  CreateCustomerResponse();
  virtual ~CreateCustomerResponse();

  CreateCustomerResponse(const CreateCustomerResponse& from);

  inline CreateCustomerResponse& operator=(const CreateCustomerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateCustomerResponse(CreateCustomerResponse&& from) noexcept
    : CreateCustomerResponse() {
    *this = ::std::move(from);
  }

  inline CreateCustomerResponse& operator=(CreateCustomerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCustomerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCustomerResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCustomerResponse*>(
               &_CreateCustomerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CreateCustomerResponse* other);
  friend void swap(CreateCustomerResponse& a, CreateCustomerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateCustomerResponse* New() const final {
    return CreateMaybeMessage<CreateCustomerResponse>(NULL);
  }

  CreateCustomerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateCustomerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateCustomerResponse& from);
  void MergeFrom(const CreateCustomerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCustomerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:api.CreateCustomerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// string name = 6;
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.name)
  return name_.GetNoArena();
}
inline void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.name)
}
#if LANG_CXX11
inline void UserInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.name)
}
#endif
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.name)
}
inline ::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:api.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.name)
}

// string given_name = 7;
inline void UserInfo::clear_given_name() {
  given_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::given_name() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.given_name)
  return given_name_.GetNoArena();
}
inline void UserInfo::set_given_name(const ::std::string& value) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.given_name)
}
#if LANG_CXX11
inline void UserInfo::set_given_name(::std::string&& value) {
  
  given_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.given_name)
}
#endif
inline void UserInfo::set_given_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.given_name)
}
inline void UserInfo::set_given_name(const char* value, size_t size) {
  
  given_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.given_name)
}
inline ::std::string* UserInfo::mutable_given_name() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.given_name)
  return given_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_given_name() {
  // @@protoc_insertion_point(field_release:api.UserInfo.given_name)
  
  return given_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_given_name(::std::string* given_name) {
  if (given_name != NULL) {
    
  } else {
    
  }
  given_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), given_name);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.given_name)
}

// string family_name = 8;
inline void UserInfo::clear_family_name() {
  family_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::family_name() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.family_name)
  return family_name_.GetNoArena();
}
inline void UserInfo::set_family_name(const ::std::string& value) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.family_name)
}
#if LANG_CXX11
inline void UserInfo::set_family_name(::std::string&& value) {
  
  family_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.family_name)
}
#endif
inline void UserInfo::set_family_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.family_name)
}
inline void UserInfo::set_family_name(const char* value, size_t size) {
  
  family_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.family_name)
}
inline ::std::string* UserInfo::mutable_family_name() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.family_name)
  return family_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_family_name() {
  // @@protoc_insertion_point(field_release:api.UserInfo.family_name)
  
  return family_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_family_name(::std::string* family_name) {
  if (family_name != NULL) {
    
  } else {
    
  }
  family_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), family_name);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.family_name)
}

// string gender = 9;
inline void UserInfo::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::gender() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.gender)
  return gender_.GetNoArena();
}
inline void UserInfo::set_gender(const ::std::string& value) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.gender)
}
#if LANG_CXX11
inline void UserInfo::set_gender(::std::string&& value) {
  
  gender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.gender)
}
#endif
inline void UserInfo::set_gender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.gender)
}
inline void UserInfo::set_gender(const char* value, size_t size) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.gender)
}
inline ::std::string* UserInfo::mutable_gender() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_gender() {
  // @@protoc_insertion_point(field_release:api.UserInfo.gender)
  
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    
  } else {
    
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.gender)
}

// string birthdate = 10;
inline void UserInfo::clear_birthdate() {
  birthdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::birthdate() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.birthdate)
  return birthdate_.GetNoArena();
}
inline void UserInfo::set_birthdate(const ::std::string& value) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.birthdate)
}
#if LANG_CXX11
inline void UserInfo::set_birthdate(::std::string&& value) {
  
  birthdate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.birthdate)
}
#endif
inline void UserInfo::set_birthdate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.birthdate)
}
inline void UserInfo::set_birthdate(const char* value, size_t size) {
  
  birthdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.birthdate)
}
inline ::std::string* UserInfo::mutable_birthdate() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.birthdate)
  return birthdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_birthdate() {
  // @@protoc_insertion_point(field_release:api.UserInfo.birthdate)
  
  return birthdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_birthdate(::std::string* birthdate) {
  if (birthdate != NULL) {
    
  } else {
    
  }
  birthdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthdate);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.birthdate)
}

// string email = 11;
inline void UserInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.email)
  return email_.GetNoArena();
}
inline void UserInfo::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.email)
}
#if LANG_CXX11
inline void UserInfo::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.email)
}
#endif
inline void UserInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.email)
}
inline void UserInfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.email)
}
inline ::std::string* UserInfo::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:api.UserInfo.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.email)
}

// string picture = 12;
inline void UserInfo::clear_picture() {
  picture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::picture() const {
  // @@protoc_insertion_point(field_get:api.UserInfo.picture)
  return picture_.GetNoArena();
}
inline void UserInfo::set_picture(const ::std::string& value) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserInfo.picture)
}
#if LANG_CXX11
inline void UserInfo::set_picture(::std::string&& value) {
  
  picture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserInfo.picture)
}
#endif
inline void UserInfo::set_picture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserInfo.picture)
}
inline void UserInfo::set_picture(const char* value, size_t size) {
  
  picture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserInfo.picture)
}
inline ::std::string* UserInfo::mutable_picture() {
  
  // @@protoc_insertion_point(field_mutable:api.UserInfo.picture)
  return picture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_picture() {
  // @@protoc_insertion_point(field_release:api.UserInfo.picture)
  
  return picture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_picture(::std::string* picture) {
  if (picture != NULL) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.picture)
}

// .api.UserMetadata user_metadata = 13;
inline bool UserInfo::has_user_metadata() const {
  return this != internal_default_instance() && user_metadata_ != NULL;
}
inline void UserInfo::clear_user_metadata() {
  if (GetArenaNoVirtual() == NULL && user_metadata_ != NULL) {
    delete user_metadata_;
  }
  user_metadata_ = NULL;
}
inline const ::api::UserMetadata& UserInfo::_internal_user_metadata() const {
  return *user_metadata_;
}
inline const ::api::UserMetadata& UserInfo::user_metadata() const {
  const ::api::UserMetadata* p = user_metadata_;
  // @@protoc_insertion_point(field_get:api.UserInfo.user_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::api::UserMetadata*>(
      &::api::_UserMetadata_default_instance_);
}
inline ::api::UserMetadata* UserInfo::release_user_metadata() {
  // @@protoc_insertion_point(field_release:api.UserInfo.user_metadata)
  
  ::api::UserMetadata* temp = user_metadata_;
  user_metadata_ = NULL;
  return temp;
}
inline ::api::UserMetadata* UserInfo::mutable_user_metadata() {
  
  if (user_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::api::UserMetadata>(GetArenaNoVirtual());
    user_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserInfo.user_metadata)
  return user_metadata_;
}
inline void UserInfo::set_allocated_user_metadata(::api::UserMetadata* user_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_metadata_;
  }
  if (user_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_metadata, submessage_arena);
    }
    
  } else {
    
  }
  user_metadata_ = user_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.user_metadata)
}

// .api.AppMetadata app_metadata = 14;
inline bool UserInfo::has_app_metadata() const {
  return this != internal_default_instance() && app_metadata_ != NULL;
}
inline void UserInfo::clear_app_metadata() {
  if (GetArenaNoVirtual() == NULL && app_metadata_ != NULL) {
    delete app_metadata_;
  }
  app_metadata_ = NULL;
}
inline const ::api::AppMetadata& UserInfo::_internal_app_metadata() const {
  return *app_metadata_;
}
inline const ::api::AppMetadata& UserInfo::app_metadata() const {
  const ::api::AppMetadata* p = app_metadata_;
  // @@protoc_insertion_point(field_get:api.UserInfo.app_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::api::AppMetadata*>(
      &::api::_AppMetadata_default_instance_);
}
inline ::api::AppMetadata* UserInfo::release_app_metadata() {
  // @@protoc_insertion_point(field_release:api.UserInfo.app_metadata)
  
  ::api::AppMetadata* temp = app_metadata_;
  app_metadata_ = NULL;
  return temp;
}
inline ::api::AppMetadata* UserInfo::mutable_app_metadata() {
  
  if (app_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::api::AppMetadata>(GetArenaNoVirtual());
    app_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.UserInfo.app_metadata)
  return app_metadata_;
}
inline void UserInfo::set_allocated_app_metadata(::api::AppMetadata* app_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete app_metadata_;
  }
  if (app_metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      app_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, app_metadata, submessage_arena);
    }
    
  } else {
    
  }
  app_metadata_ = app_metadata;
  // @@protoc_insertion_point(field_set_allocated:api.UserInfo.app_metadata)
}

// -------------------------------------------------------------------

// UserMetadata

// string phone = 1;
inline void UserMetadata::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::phone() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.phone)
  return phone_.GetNoArena();
}
inline void UserMetadata::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.phone)
}
#if LANG_CXX11
inline void UserMetadata::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.phone)
}
#endif
inline void UserMetadata::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.phone)
}
inline void UserMetadata::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.phone)
}
inline ::std::string* UserMetadata::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_phone() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.phone)
}

// string preferred_contact = 2;
inline void UserMetadata::clear_preferred_contact() {
  preferred_contact_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMetadata::preferred_contact() const {
  // @@protoc_insertion_point(field_get:api.UserMetadata.preferred_contact)
  return preferred_contact_.GetNoArena();
}
inline void UserMetadata::set_preferred_contact(const ::std::string& value) {
  
  preferred_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.UserMetadata.preferred_contact)
}
#if LANG_CXX11
inline void UserMetadata::set_preferred_contact(::std::string&& value) {
  
  preferred_contact_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.UserMetadata.preferred_contact)
}
#endif
inline void UserMetadata::set_preferred_contact(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  preferred_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.UserMetadata.preferred_contact)
}
inline void UserMetadata::set_preferred_contact(const char* value, size_t size) {
  
  preferred_contact_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.UserMetadata.preferred_contact)
}
inline ::std::string* UserMetadata::mutable_preferred_contact() {
  
  // @@protoc_insertion_point(field_mutable:api.UserMetadata.preferred_contact)
  return preferred_contact_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMetadata::release_preferred_contact() {
  // @@protoc_insertion_point(field_release:api.UserMetadata.preferred_contact)
  
  return preferred_contact_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMetadata::set_allocated_preferred_contact(::std::string* preferred_contact) {
  if (preferred_contact != NULL) {
    
  } else {
    
  }
  preferred_contact_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_contact);
  // @@protoc_insertion_point(field_set_allocated:api.UserMetadata.preferred_contact)
}

// -------------------------------------------------------------------

// AppMetadata

// string plan = 1;
inline void AppMetadata::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppMetadata::plan() const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.plan)
  return plan_.GetNoArena();
}
inline void AppMetadata::set_plan(const ::std::string& value) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AppMetadata.plan)
}
#if LANG_CXX11
inline void AppMetadata::set_plan(::std::string&& value) {
  
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AppMetadata.plan)
}
#endif
inline void AppMetadata::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.plan)
}
inline void AppMetadata::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.plan)
}
inline ::std::string* AppMetadata::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMetadata::release_plan() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.plan)
  
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMetadata::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.plan)
}

// string pay_token = 2;
inline void AppMetadata::clear_pay_token() {
  pay_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppMetadata::pay_token() const {
  // @@protoc_insertion_point(field_get:api.AppMetadata.pay_token)
  return pay_token_.GetNoArena();
}
inline void AppMetadata::set_pay_token(const ::std::string& value) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AppMetadata.pay_token)
}
#if LANG_CXX11
inline void AppMetadata::set_pay_token(::std::string&& value) {
  
  pay_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AppMetadata.pay_token)
}
#endif
inline void AppMetadata::set_pay_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AppMetadata.pay_token)
}
inline void AppMetadata::set_pay_token(const char* value, size_t size) {
  
  pay_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AppMetadata.pay_token)
}
inline ::std::string* AppMetadata::mutable_pay_token() {
  
  // @@protoc_insertion_point(field_mutable:api.AppMetadata.pay_token)
  return pay_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppMetadata::release_pay_token() {
  // @@protoc_insertion_point(field_release:api.AppMetadata.pay_token)
  
  return pay_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppMetadata::set_allocated_pay_token(::std::string* pay_token) {
  if (pay_token != NULL) {
    
  } else {
    
  }
  pay_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pay_token);
  // @@protoc_insertion_point(field_set_allocated:api.AppMetadata.pay_token)
}

// -------------------------------------------------------------------

// AccessToken

// string token = 1;
inline void AccessToken::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessToken::token() const {
  // @@protoc_insertion_point(field_get:api.AccessToken.token)
  return token_.GetNoArena();
}
inline void AccessToken::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.AccessToken.token)
}
#if LANG_CXX11
inline void AccessToken::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.AccessToken.token)
}
#endif
inline void AccessToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.AccessToken.token)
}
inline void AccessToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.AccessToken.token)
}
inline ::std::string* AccessToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:api.AccessToken.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessToken::release_token() {
  // @@protoc_insertion_point(field_release:api.AccessToken.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessToken::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:api.AccessToken.token)
}

// -------------------------------------------------------------------

// IDToken

// string token = 1;
inline void IDToken::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IDToken::token() const {
  // @@protoc_insertion_point(field_get:api.IDToken.token)
  return token_.GetNoArena();
}
inline void IDToken::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.IDToken.token)
}
#if LANG_CXX11
inline void IDToken::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.IDToken.token)
}
#endif
inline void IDToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.IDToken.token)
}
inline void IDToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.IDToken.token)
}
inline ::std::string* IDToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:api.IDToken.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IDToken::release_token() {
  // @@protoc_insertion_point(field_release:api.IDToken.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IDToken::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:api.IDToken.token)
}

// -------------------------------------------------------------------

// RefreshToken

// string token = 1;
inline void RefreshToken::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefreshToken::token() const {
  // @@protoc_insertion_point(field_get:api.RefreshToken.token)
  return token_.GetNoArena();
}
inline void RefreshToken::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.RefreshToken.token)
}
#if LANG_CXX11
inline void RefreshToken::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.RefreshToken.token)
}
#endif
inline void RefreshToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.RefreshToken.token)
}
inline void RefreshToken::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.RefreshToken.token)
}
inline ::std::string* RefreshToken::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:api.RefreshToken.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefreshToken::release_token() {
  // @@protoc_insertion_point(field_release:api.RefreshToken.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefreshToken::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:api.RefreshToken.token)
}

// -------------------------------------------------------------------

// Tokens

// .api.IDToken id = 1;
inline bool Tokens::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Tokens::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::api::IDToken& Tokens::_internal_id() const {
  return *id_;
}
inline const ::api::IDToken& Tokens::id() const {
  const ::api::IDToken* p = id_;
  // @@protoc_insertion_point(field_get:api.Tokens.id)
  return p != NULL ? *p : *reinterpret_cast<const ::api::IDToken*>(
      &::api::_IDToken_default_instance_);
}
inline ::api::IDToken* Tokens::release_id() {
  // @@protoc_insertion_point(field_release:api.Tokens.id)
  
  ::api::IDToken* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::api::IDToken* Tokens::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::api::IDToken>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Tokens.id)
  return id_;
}
inline void Tokens::set_allocated_id(::api::IDToken* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:api.Tokens.id)
}

// .api.AccessToken access = 2;
inline bool Tokens::has_access() const {
  return this != internal_default_instance() && access_ != NULL;
}
inline void Tokens::clear_access() {
  if (GetArenaNoVirtual() == NULL && access_ != NULL) {
    delete access_;
  }
  access_ = NULL;
}
inline const ::api::AccessToken& Tokens::_internal_access() const {
  return *access_;
}
inline const ::api::AccessToken& Tokens::access() const {
  const ::api::AccessToken* p = access_;
  // @@protoc_insertion_point(field_get:api.Tokens.access)
  return p != NULL ? *p : *reinterpret_cast<const ::api::AccessToken*>(
      &::api::_AccessToken_default_instance_);
}
inline ::api::AccessToken* Tokens::release_access() {
  // @@protoc_insertion_point(field_release:api.Tokens.access)
  
  ::api::AccessToken* temp = access_;
  access_ = NULL;
  return temp;
}
inline ::api::AccessToken* Tokens::mutable_access() {
  
  if (access_ == NULL) {
    auto* p = CreateMaybeMessage<::api::AccessToken>(GetArenaNoVirtual());
    access_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Tokens.access)
  return access_;
}
inline void Tokens::set_allocated_access(::api::AccessToken* access) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete access_;
  }
  if (access) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      access = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    
  } else {
    
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:api.Tokens.access)
}

// .api.RefreshToken refresh = 3;
inline bool Tokens::has_refresh() const {
  return this != internal_default_instance() && refresh_ != NULL;
}
inline void Tokens::clear_refresh() {
  if (GetArenaNoVirtual() == NULL && refresh_ != NULL) {
    delete refresh_;
  }
  refresh_ = NULL;
}
inline const ::api::RefreshToken& Tokens::_internal_refresh() const {
  return *refresh_;
}
inline const ::api::RefreshToken& Tokens::refresh() const {
  const ::api::RefreshToken* p = refresh_;
  // @@protoc_insertion_point(field_get:api.Tokens.refresh)
  return p != NULL ? *p : *reinterpret_cast<const ::api::RefreshToken*>(
      &::api::_RefreshToken_default_instance_);
}
inline ::api::RefreshToken* Tokens::release_refresh() {
  // @@protoc_insertion_point(field_release:api.Tokens.refresh)
  
  ::api::RefreshToken* temp = refresh_;
  refresh_ = NULL;
  return temp;
}
inline ::api::RefreshToken* Tokens::mutable_refresh() {
  
  if (refresh_ == NULL) {
    auto* p = CreateMaybeMessage<::api::RefreshToken>(GetArenaNoVirtual());
    refresh_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.Tokens.refresh)
  return refresh_;
}
inline void Tokens::set_allocated_refresh(::api::RefreshToken* refresh) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete refresh_;
  }
  if (refresh) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      refresh = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, refresh, submessage_arena);
    }
    
  } else {
    
  }
  refresh_ = refresh;
  // @@protoc_insertion_point(field_set_allocated:api.Tokens.refresh)
}

// -------------------------------------------------------------------

// Paths

// string home = 1;
inline void Paths::clear_home() {
  home_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::home() const {
  // @@protoc_insertion_point(field_get:api.Paths.home)
  return home_.GetNoArena();
}
inline void Paths::set_home(const ::std::string& value) {
  
  home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.home)
}
#if LANG_CXX11
inline void Paths::set_home(::std::string&& value) {
  
  home_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.home)
}
#endif
inline void Paths::set_home(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.home)
}
inline void Paths::set_home(const char* value, size_t size) {
  
  home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.home)
}
inline ::std::string* Paths::mutable_home() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.home)
  return home_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_home() {
  // @@protoc_insertion_point(field_release:api.Paths.home)
  
  return home_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_home(::std::string* home) {
  if (home != NULL) {
    
  } else {
    
  }
  home_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), home);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.home)
}

// string dashboard = 2;
inline void Paths::clear_dashboard() {
  dashboard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::dashboard() const {
  // @@protoc_insertion_point(field_get:api.Paths.dashboard)
  return dashboard_.GetNoArena();
}
inline void Paths::set_dashboard(const ::std::string& value) {
  
  dashboard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.dashboard)
}
#if LANG_CXX11
inline void Paths::set_dashboard(::std::string&& value) {
  
  dashboard_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.dashboard)
}
#endif
inline void Paths::set_dashboard(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dashboard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.dashboard)
}
inline void Paths::set_dashboard(const char* value, size_t size) {
  
  dashboard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.dashboard)
}
inline ::std::string* Paths::mutable_dashboard() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.dashboard)
  return dashboard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_dashboard() {
  // @@protoc_insertion_point(field_release:api.Paths.dashboard)
  
  return dashboard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_dashboard(::std::string* dashboard) {
  if (dashboard != NULL) {
    
  } else {
    
  }
  dashboard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dashboard);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.dashboard)
}

// string settings = 3;
inline void Paths::clear_settings() {
  settings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::settings() const {
  // @@protoc_insertion_point(field_get:api.Paths.settings)
  return settings_.GetNoArena();
}
inline void Paths::set_settings(const ::std::string& value) {
  
  settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.settings)
}
#if LANG_CXX11
inline void Paths::set_settings(::std::string&& value) {
  
  settings_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.settings)
}
#endif
inline void Paths::set_settings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.settings)
}
inline void Paths::set_settings(const char* value, size_t size) {
  
  settings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.settings)
}
inline ::std::string* Paths::mutable_settings() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.settings)
  return settings_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_settings() {
  // @@protoc_insertion_point(field_release:api.Paths.settings)
  
  return settings_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_settings(::std::string* settings) {
  if (settings != NULL) {
    
  } else {
    
  }
  settings_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settings);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.settings)
}

// string logout = 4;
inline void Paths::clear_logout() {
  logout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::logout() const {
  // @@protoc_insertion_point(field_get:api.Paths.logout)
  return logout_.GetNoArena();
}
inline void Paths::set_logout(const ::std::string& value) {
  
  logout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.logout)
}
#if LANG_CXX11
inline void Paths::set_logout(::std::string&& value) {
  
  logout_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.logout)
}
#endif
inline void Paths::set_logout(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.logout)
}
inline void Paths::set_logout(const char* value, size_t size) {
  
  logout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.logout)
}
inline ::std::string* Paths::mutable_logout() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.logout)
  return logout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_logout() {
  // @@protoc_insertion_point(field_release:api.Paths.logout)
  
  return logout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_logout(::std::string* logout) {
  if (logout != NULL) {
    
  } else {
    
  }
  logout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logout);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.logout)
}

// string callback = 5;
inline void Paths::clear_callback() {
  callback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::callback() const {
  // @@protoc_insertion_point(field_get:api.Paths.callback)
  return callback_.GetNoArena();
}
inline void Paths::set_callback(const ::std::string& value) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.callback)
}
#if LANG_CXX11
inline void Paths::set_callback(::std::string&& value) {
  
  callback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.callback)
}
#endif
inline void Paths::set_callback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.callback)
}
inline void Paths::set_callback(const char* value, size_t size) {
  
  callback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.callback)
}
inline ::std::string* Paths::mutable_callback() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.callback)
  return callback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_callback() {
  // @@protoc_insertion_point(field_release:api.Paths.callback)
  
  return callback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_callback(::std::string* callback) {
  if (callback != NULL) {
    
  } else {
    
  }
  callback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callback);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.callback)
}

// string login = 6;
inline void Paths::clear_login() {
  login_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::login() const {
  // @@protoc_insertion_point(field_get:api.Paths.login)
  return login_.GetNoArena();
}
inline void Paths::set_login(const ::std::string& value) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.login)
}
#if LANG_CXX11
inline void Paths::set_login(::std::string&& value) {
  
  login_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.login)
}
#endif
inline void Paths::set_login(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.login)
}
inline void Paths::set_login(const char* value, size_t size) {
  
  login_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.login)
}
inline ::std::string* Paths::mutable_login() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.login)
  return login_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_login() {
  // @@protoc_insertion_point(field_release:api.Paths.login)
  
  return login_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_login(::std::string* login) {
  if (login != NULL) {
    
  } else {
    
  }
  login_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.login)
}

// string subscribe = 7;
inline void Paths::clear_subscribe() {
  subscribe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::subscribe() const {
  // @@protoc_insertion_point(field_get:api.Paths.subscribe)
  return subscribe_.GetNoArena();
}
inline void Paths::set_subscribe(const ::std::string& value) {
  
  subscribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.subscribe)
}
#if LANG_CXX11
inline void Paths::set_subscribe(::std::string&& value) {
  
  subscribe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.subscribe)
}
#endif
inline void Paths::set_subscribe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.subscribe)
}
inline void Paths::set_subscribe(const char* value, size_t size) {
  
  subscribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.subscribe)
}
inline ::std::string* Paths::mutable_subscribe() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.subscribe)
  return subscribe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_subscribe() {
  // @@protoc_insertion_point(field_release:api.Paths.subscribe)
  
  return subscribe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_subscribe(::std::string* subscribe) {
  if (subscribe != NULL) {
    
  } else {
    
  }
  subscribe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscribe);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.subscribe)
}

// string unsubscribe = 8;
inline void Paths::clear_unsubscribe() {
  unsubscribe_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::unsubscribe() const {
  // @@protoc_insertion_point(field_get:api.Paths.unsubscribe)
  return unsubscribe_.GetNoArena();
}
inline void Paths::set_unsubscribe(const ::std::string& value) {
  
  unsubscribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.unsubscribe)
}
#if LANG_CXX11
inline void Paths::set_unsubscribe(::std::string&& value) {
  
  unsubscribe_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.unsubscribe)
}
#endif
inline void Paths::set_unsubscribe(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unsubscribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.unsubscribe)
}
inline void Paths::set_unsubscribe(const char* value, size_t size) {
  
  unsubscribe_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.unsubscribe)
}
inline ::std::string* Paths::mutable_unsubscribe() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.unsubscribe)
  return unsubscribe_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_unsubscribe() {
  // @@protoc_insertion_point(field_release:api.Paths.unsubscribe)
  
  return unsubscribe_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_unsubscribe(::std::string* unsubscribe) {
  if (unsubscribe != NULL) {
    
  } else {
    
  }
  unsubscribe_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unsubscribe);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.unsubscribe)
}

// string faq = 9;
inline void Paths::clear_faq() {
  faq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::faq() const {
  // @@protoc_insertion_point(field_get:api.Paths.faq)
  return faq_.GetNoArena();
}
inline void Paths::set_faq(const ::std::string& value) {
  
  faq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.faq)
}
#if LANG_CXX11
inline void Paths::set_faq(::std::string&& value) {
  
  faq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.faq)
}
#endif
inline void Paths::set_faq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  faq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.faq)
}
inline void Paths::set_faq(const char* value, size_t size) {
  
  faq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.faq)
}
inline ::std::string* Paths::mutable_faq() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.faq)
  return faq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_faq() {
  // @@protoc_insertion_point(field_release:api.Paths.faq)
  
  return faq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_faq(::std::string* faq) {
  if (faq != NULL) {
    
  } else {
    
  }
  faq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), faq);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.faq)
}

// string support = 10;
inline void Paths::clear_support() {
  support_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::support() const {
  // @@protoc_insertion_point(field_get:api.Paths.support)
  return support_.GetNoArena();
}
inline void Paths::set_support(const ::std::string& value) {
  
  support_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.support)
}
#if LANG_CXX11
inline void Paths::set_support(::std::string&& value) {
  
  support_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.support)
}
#endif
inline void Paths::set_support(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  support_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.support)
}
inline void Paths::set_support(const char* value, size_t size) {
  
  support_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.support)
}
inline ::std::string* Paths::mutable_support() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.support)
  return support_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_support() {
  // @@protoc_insertion_point(field_release:api.Paths.support)
  
  return support_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_support(::std::string* support) {
  if (support != NULL) {
    
  } else {
    
  }
  support_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), support);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.support)
}

// string terms = 11;
inline void Paths::clear_terms() {
  terms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::terms() const {
  // @@protoc_insertion_point(field_get:api.Paths.terms)
  return terms_.GetNoArena();
}
inline void Paths::set_terms(const ::std::string& value) {
  
  terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.terms)
}
#if LANG_CXX11
inline void Paths::set_terms(::std::string&& value) {
  
  terms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.terms)
}
#endif
inline void Paths::set_terms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.terms)
}
inline void Paths::set_terms(const char* value, size_t size) {
  
  terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.terms)
}
inline ::std::string* Paths::mutable_terms() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.terms)
  return terms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_terms() {
  // @@protoc_insertion_point(field_release:api.Paths.terms)
  
  return terms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_terms(::std::string* terms) {
  if (terms != NULL) {
    
  } else {
    
  }
  terms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), terms);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.terms)
}

// string privacy = 12;
inline void Paths::clear_privacy() {
  privacy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::privacy() const {
  // @@protoc_insertion_point(field_get:api.Paths.privacy)
  return privacy_.GetNoArena();
}
inline void Paths::set_privacy(const ::std::string& value) {
  
  privacy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.privacy)
}
#if LANG_CXX11
inline void Paths::set_privacy(::std::string&& value) {
  
  privacy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.privacy)
}
#endif
inline void Paths::set_privacy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  privacy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.privacy)
}
inline void Paths::set_privacy(const char* value, size_t size) {
  
  privacy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.privacy)
}
inline ::std::string* Paths::mutable_privacy() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.privacy)
  return privacy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_privacy() {
  // @@protoc_insertion_point(field_release:api.Paths.privacy)
  
  return privacy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_privacy(::std::string* privacy) {
  if (privacy != NULL) {
    
  } else {
    
  }
  privacy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), privacy);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.privacy)
}

// string debug = 13;
inline void Paths::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::debug() const {
  // @@protoc_insertion_point(field_get:api.Paths.debug)
  return debug_.GetNoArena();
}
inline void Paths::set_debug(const ::std::string& value) {
  
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.debug)
}
#if LANG_CXX11
inline void Paths::set_debug(::std::string&& value) {
  
  debug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.debug)
}
#endif
inline void Paths::set_debug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.debug)
}
inline void Paths::set_debug(const char* value, size_t size) {
  
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.debug)
}
inline ::std::string* Paths::mutable_debug() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_debug() {
  // @@protoc_insertion_point(field_release:api.Paths.debug)
  
  return debug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_debug(::std::string* debug) {
  if (debug != NULL) {
    
  } else {
    
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.debug)
}

// string blog = 14;
inline void Paths::clear_blog() {
  blog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Paths::blog() const {
  // @@protoc_insertion_point(field_get:api.Paths.blog)
  return blog_.GetNoArena();
}
inline void Paths::set_blog(const ::std::string& value) {
  
  blog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Paths.blog)
}
#if LANG_CXX11
inline void Paths::set_blog(::std::string&& value) {
  
  blog_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Paths.blog)
}
#endif
inline void Paths::set_blog(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Paths.blog)
}
inline void Paths::set_blog(const char* value, size_t size) {
  
  blog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Paths.blog)
}
inline ::std::string* Paths::mutable_blog() {
  
  // @@protoc_insertion_point(field_mutable:api.Paths.blog)
  return blog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Paths::release_blog() {
  // @@protoc_insertion_point(field_release:api.Paths.blog)
  
  return blog_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Paths::set_allocated_blog(::std::string* blog) {
  if (blog != NULL) {
    
  } else {
    
  }
  blog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blog);
  // @@protoc_insertion_point(field_set_allocated:api.Paths.blog)
}

// -------------------------------------------------------------------

// Auth0

// string domain = 1;
inline void Auth0::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth0::domain() const {
  // @@protoc_insertion_point(field_get:api.Auth0.domain)
  return domain_.GetNoArena();
}
inline void Auth0::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth0.domain)
}
#if LANG_CXX11
inline void Auth0::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth0.domain)
}
#endif
inline void Auth0::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth0.domain)
}
inline void Auth0::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth0.domain)
}
inline ::std::string* Auth0::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth0.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth0::release_domain() {
  // @@protoc_insertion_point(field_release:api.Auth0.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth0::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:api.Auth0.domain)
}

// string client_id = 2;
inline void Auth0::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth0::client_id() const {
  // @@protoc_insertion_point(field_get:api.Auth0.client_id)
  return client_id_.GetNoArena();
}
inline void Auth0::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth0.client_id)
}
#if LANG_CXX11
inline void Auth0::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth0.client_id)
}
#endif
inline void Auth0::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth0.client_id)
}
inline void Auth0::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth0.client_id)
}
inline ::std::string* Auth0::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth0.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth0::release_client_id() {
  // @@protoc_insertion_point(field_release:api.Auth0.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth0::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:api.Auth0.client_id)
}

// string client_secret = 3;
inline void Auth0::clear_client_secret() {
  client_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth0::client_secret() const {
  // @@protoc_insertion_point(field_get:api.Auth0.client_secret)
  return client_secret_.GetNoArena();
}
inline void Auth0::set_client_secret(const ::std::string& value) {
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth0.client_secret)
}
#if LANG_CXX11
inline void Auth0::set_client_secret(::std::string&& value) {
  
  client_secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth0.client_secret)
}
#endif
inline void Auth0::set_client_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth0.client_secret)
}
inline void Auth0::set_client_secret(const char* value, size_t size) {
  
  client_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth0.client_secret)
}
inline ::std::string* Auth0::mutable_client_secret() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth0.client_secret)
  return client_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth0::release_client_secret() {
  // @@protoc_insertion_point(field_release:api.Auth0.client_secret)
  
  return client_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth0::set_allocated_client_secret(::std::string* client_secret) {
  if (client_secret != NULL) {
    
  } else {
    
  }
  client_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_secret);
  // @@protoc_insertion_point(field_set_allocated:api.Auth0.client_secret)
}

// repeated string scopes = 4;
inline int Auth0::scopes_size() const {
  return scopes_.size();
}
inline void Auth0::clear_scopes() {
  scopes_.Clear();
}
inline const ::std::string& Auth0::scopes(int index) const {
  // @@protoc_insertion_point(field_get:api.Auth0.scopes)
  return scopes_.Get(index);
}
inline ::std::string* Auth0::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:api.Auth0.scopes)
  return scopes_.Mutable(index);
}
inline void Auth0::set_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:api.Auth0.scopes)
  scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Auth0::set_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:api.Auth0.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Auth0::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api.Auth0.scopes)
}
inline void Auth0::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api.Auth0.scopes)
}
inline ::std::string* Auth0::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:api.Auth0.scopes)
  return scopes_.Add();
}
inline void Auth0::add_scopes(const ::std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api.Auth0.scopes)
}
#if LANG_CXX11
inline void Auth0::add_scopes(::std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api.Auth0.scopes)
}
#endif
inline void Auth0::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api.Auth0.scopes)
}
inline void Auth0::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api.Auth0.scopes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Auth0::scopes() const {
  // @@protoc_insertion_point(field_list:api.Auth0.scopes)
  return scopes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Auth0::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:api.Auth0.scopes)
  return &scopes_;
}

// string redirect = 5;
inline void Auth0::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Auth0::redirect() const {
  // @@protoc_insertion_point(field_get:api.Auth0.redirect)
  return redirect_.GetNoArena();
}
inline void Auth0::set_redirect(const ::std::string& value) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.Auth0.redirect)
}
#if LANG_CXX11
inline void Auth0::set_redirect(::std::string&& value) {
  
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.Auth0.redirect)
}
#endif
inline void Auth0::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.Auth0.redirect)
}
inline void Auth0::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.Auth0.redirect)
}
inline ::std::string* Auth0::mutable_redirect() {
  
  // @@protoc_insertion_point(field_mutable:api.Auth0.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Auth0::release_redirect() {
  // @@protoc_insertion_point(field_release:api.Auth0.redirect)
  
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Auth0::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:api.Auth0.redirect)
}

// -------------------------------------------------------------------

// CreateCustomerRequest

// .api.UserInfo user_info = 1;
inline bool CreateCustomerRequest::has_user_info() const {
  return this != internal_default_instance() && user_info_ != NULL;
}
inline void CreateCustomerRequest::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
}
inline const ::api::UserInfo& CreateCustomerRequest::_internal_user_info() const {
  return *user_info_;
}
inline const ::api::UserInfo& CreateCustomerRequest::user_info() const {
  const ::api::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:api.CreateCustomerRequest.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::api::UserInfo*>(
      &::api::_UserInfo_default_instance_);
}
inline ::api::UserInfo* CreateCustomerRequest::release_user_info() {
  // @@protoc_insertion_point(field_release:api.CreateCustomerRequest.user_info)
  
  ::api::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::api::UserInfo* CreateCustomerRequest::mutable_user_info() {
  
  if (user_info_ == NULL) {
    auto* p = CreateMaybeMessage<::api::UserInfo>(GetArenaNoVirtual());
    user_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.CreateCustomerRequest.user_info)
  return user_info_;
}
inline void CreateCustomerRequest::set_allocated_user_info(::api::UserInfo* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_info_;
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:api.CreateCustomerRequest.user_info)
}

// -------------------------------------------------------------------

// CreateCustomerResponse

// string id = 1;
inline void CreateCustomerResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCustomerResponse::id() const {
  // @@protoc_insertion_point(field_get:api.CreateCustomerResponse.id)
  return id_.GetNoArena();
}
inline void CreateCustomerResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.CreateCustomerResponse.id)
}
#if LANG_CXX11
inline void CreateCustomerResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.CreateCustomerResponse.id)
}
#endif
inline void CreateCustomerResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.CreateCustomerResponse.id)
}
inline void CreateCustomerResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.CreateCustomerResponse.id)
}
inline ::std::string* CreateCustomerResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:api.CreateCustomerResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCustomerResponse::release_id() {
  // @@protoc_insertion_point(field_release:api.CreateCustomerResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCustomerResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:api.CreateCustomerResponse.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2eproto
