// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type UserInfo struct {
	Name                 string        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	GivenName            string        `protobuf:"bytes,7,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	FamilyName           string        `protobuf:"bytes,8,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	Gender               string        `protobuf:"bytes,9,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthdate            string        `protobuf:"bytes,10,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	Email                string        `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	Picture              string        `protobuf:"bytes,12,opt,name=picture,proto3" json:"picture,omitempty"`
	UserMetadata         *UserMetadata `protobuf:"bytes,13,opt,name=user_metadata,json=userMetadata,proto3" json:"user_metadata,omitempty"`
	AppMetadata          *AppMetadata  `protobuf:"bytes,14,opt,name=app_metadata,json=appMetadata,proto3" json:"app_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetGivenName() string {
	if m != nil {
		return m.GivenName
	}
	return ""
}

func (m *UserInfo) GetFamilyName() string {
	if m != nil {
		return m.FamilyName
	}
	return ""
}

func (m *UserInfo) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UserInfo) GetBirthdate() string {
	if m != nil {
		return m.Birthdate
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

func (m *UserInfo) GetUserMetadata() *UserMetadata {
	if m != nil {
		return m.UserMetadata
	}
	return nil
}

func (m *UserInfo) GetAppMetadata() *AppMetadata {
	if m != nil {
		return m.AppMetadata
	}
	return nil
}

type UserMetadata struct {
	Phone                string   `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	PreferredContact     string   `protobuf:"bytes,2,opt,name=preferred_contact,json=preferredContact,proto3" json:"preferred_contact,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Tags                 []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserMetadata) Reset()         { *m = UserMetadata{} }
func (m *UserMetadata) String() string { return proto.CompactTextString(m) }
func (*UserMetadata) ProtoMessage()    {}
func (*UserMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *UserMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserMetadata.Unmarshal(m, b)
}
func (m *UserMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserMetadata.Marshal(b, m, deterministic)
}
func (m *UserMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMetadata.Merge(m, src)
}
func (m *UserMetadata) XXX_Size() int {
	return xxx_messageInfo_UserMetadata.Size(m)
}
func (m *UserMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UserMetadata proto.InternalMessageInfo

func (m *UserMetadata) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserMetadata) GetPreferredContact() string {
	if m != nil {
		return m.PreferredContact
	}
	return ""
}

func (m *UserMetadata) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UserMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AppMetadata struct {
	Plan                 string   `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	PayToken             string   `protobuf:"bytes,2,opt,name=pay_token,json=payToken,proto3" json:"pay_token,omitempty"`
	Delinquent           string   `protobuf:"bytes,3,opt,name=delinquent,proto3" json:"delinquent,omitempty"`
	Tags                 []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppMetadata) Reset()         { *m = AppMetadata{} }
func (m *AppMetadata) String() string { return proto.CompactTextString(m) }
func (*AppMetadata) ProtoMessage()    {}
func (*AppMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *AppMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppMetadata.Unmarshal(m, b)
}
func (m *AppMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppMetadata.Marshal(b, m, deterministic)
}
func (m *AppMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMetadata.Merge(m, src)
}
func (m *AppMetadata) XXX_Size() int {
	return xxx_messageInfo_AppMetadata.Size(m)
}
func (m *AppMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AppMetadata proto.InternalMessageInfo

func (m *AppMetadata) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

func (m *AppMetadata) GetPayToken() string {
	if m != nil {
		return m.PayToken
	}
	return ""
}

func (m *AppMetadata) GetDelinquent() string {
	if m != nil {
		return m.Delinquent
	}
	return ""
}

func (m *AppMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Auth struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	ClientId             string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret         string   `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	Redirect             string   `protobuf:"bytes,4,opt,name=redirect,proto3" json:"redirect,omitempty"`
	Audience             string   `protobuf:"bytes,5,opt,name=audience,proto3" json:"audience,omitempty"`
	Scopes               []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Auth) Reset()         { *m = Auth{} }
func (m *Auth) String() string { return proto.CompactTextString(m) }
func (*Auth) ProtoMessage()    {}
func (*Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *Auth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Auth.Unmarshal(m, b)
}
func (m *Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Auth.Marshal(b, m, deterministic)
}
func (m *Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auth.Merge(m, src)
}
func (m *Auth) XXX_Size() int {
	return xxx_messageInfo_Auth.Size(m)
}
func (m *Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_Auth.DiscardUnknown(m)
}

var xxx_messageInfo_Auth proto.InternalMessageInfo

func (m *Auth) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Auth) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Auth) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *Auth) GetRedirect() string {
	if m != nil {
		return m.Redirect
	}
	return ""
}

func (m *Auth) GetAudience() string {
	if m != nil {
		return m.Audience
	}
	return ""
}

func (m *Auth) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type Bytes struct {
	Bits                 []byte   `protobuf:"bytes,1,opt,name=bits,proto3" json:"bits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bytes) Reset()         { *m = Bytes{} }
func (m *Bytes) String() string { return proto.CompactTextString(m) }
func (*Bytes) ProtoMessage()    {}
func (*Bytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *Bytes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bytes.Unmarshal(m, b)
}
func (m *Bytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bytes.Marshal(b, m, deterministic)
}
func (m *Bytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bytes.Merge(m, src)
}
func (m *Bytes) XXX_Size() int {
	return xxx_messageInfo_Bytes.Size(m)
}
func (m *Bytes) XXX_DiscardUnknown() {
	xxx_messageInfo_Bytes.DiscardUnknown(m)
}

var xxx_messageInfo_Bytes proto.InternalMessageInfo

func (m *Bytes) GetBits() []byte {
	if m != nil {
		return m.Bits
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "api.Message")
	proto.RegisterType((*UserInfo)(nil), "api.UserInfo")
	proto.RegisterType((*UserMetadata)(nil), "api.UserMetadata")
	proto.RegisterType((*AppMetadata)(nil), "api.AppMetadata")
	proto.RegisterType((*Auth)(nil), "api.Auth")
	proto.RegisterType((*Bytes)(nil), "api.Bytes")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6a, 0x23, 0x47,
	0x10, 0x46, 0xd6, 0x8f, 0xa5, 0xd2, 0xc8, 0xc8, 0x4d, 0x70, 0x06, 0xd9, 0x89, 0xcd, 0xe4, 0x62,
	0x1c, 0xb0, 0xc0, 0x0e, 0xc6, 0xf8, 0x12, 0x14, 0x63, 0x88, 0x43, 0xe4, 0x80, 0x9d, 0x40, 0x72,
	0x12, 0xad, 0x99, 0xb2, 0xa6, 0x93, 0x51, 0x4f, 0xa7, 0xbb, 0xc7, 0x44, 0x87, 0x5c, 0xf6, 0x15,
	0x16, 0xf6, 0x39, 0x76, 0xef, 0xfb, 0x16, 0xfb, 0x0a, 0xfb, 0x20, 0x4b, 0x57, 0xcf, 0xc8, 0xb3,
	0xb0, 0x08, 0x7c, 0xeb, 0xaf, 0xbe, 0xfa, 0xbe, 0xfa, 0xa6, 0x0a, 0x09, 0x7a, 0x5c, 0x89, 0x53,
	0xa5, 0x73, 0x9b, 0xb3, 0x26, 0x57, 0x62, 0x74, 0xb0, 0xc8, 0xf3, 0x45, 0x86, 0x63, 0xae, 0xc4,
	0x98, 0x4b, 0x99, 0x5b, 0x6e, 0x45, 0x2e, 0x8d, 0x6f, 0x89, 0x0e, 0x61, 0x7b, 0x8a, 0xc6, 0xf0,
	0x05, 0xb2, 0xaf, 0xa0, 0xfd, 0xc4, 0xb3, 0x02, 0xc3, 0xc6, 0x51, 0xe3, 0xb8, 0x77, 0xef, 0x41,
	0xf4, 0x6e, 0x0b, 0xba, 0x7f, 0x18, 0xd4, 0xb7, 0xf2, 0x31, 0x67, 0x0c, 0x5a, 0x92, 0x2f, 0x31,
	0xec, 0x50, 0x07, 0xbd, 0xd9, 0x37, 0x00, 0x0b, 0xf1, 0x84, 0x72, 0x46, 0xcc, 0x36, 0x31, 0x3d,
	0xaa, 0xdc, 0x39, 0xfa, 0x10, 0xfa, 0x8f, 0x7c, 0x29, 0xb2, 0x95, 0xe7, 0xbb, 0xc4, 0x83, 0x2f,
	0x51, 0xc3, 0x1e, 0x74, 0x16, 0x28, 0x13, 0xd4, 0x61, 0x8f, 0xb8, 0x12, 0xb1, 0x03, 0xe8, 0xcd,
	0x85, 0xb6, 0x69, 0xc2, 0x2d, 0x86, 0xe0, 0x6d, 0xd7, 0x05, 0x17, 0x16, 0x97, 0x5c, 0x64, 0x61,
	0xdf, 0x87, 0x25, 0xc0, 0x42, 0xd8, 0x56, 0x22, 0xb6, 0x85, 0xc6, 0x30, 0xa0, 0x7a, 0x05, 0xd9,
	0x05, 0x0c, 0x0a, 0x83, 0x7a, 0xb6, 0x44, 0xcb, 0x13, 0x6e, 0x79, 0x38, 0x38, 0x6a, 0x1c, 0xf7,
	0xcf, 0x76, 0x4f, 0xdd, 0xb6, 0xdc, 0xf7, 0x4d, 0x4b, 0xe2, 0x3e, 0x28, 0x6a, 0x88, 0x9d, 0x43,
	0xc0, 0x95, 0x7a, 0x96, 0xed, 0x90, 0x6c, 0x48, 0xb2, 0x89, 0x52, 0x6b, 0x55, 0x9f, 0x3f, 0x83,
	0xe8, 0x7f, 0x08, 0xea, 0x96, 0x2e, 0xac, 0x4a, 0x73, 0xb9, 0xde, 0x2c, 0x01, 0xf6, 0x3d, 0xec,
	0x2a, 0x8d, 0x8f, 0xa8, 0x35, 0x26, 0xb3, 0x38, 0x97, 0x96, 0xc7, 0x36, 0xdc, 0xa2, 0x8e, 0xe1,
	0x9a, 0xb8, 0xf6, 0x75, 0xb7, 0x25, 0x63, 0xb9, 0x2d, 0x4c, 0xd8, 0xf4, 0x5b, 0xf2, 0xc8, 0x5d,
	0xc4, 0xf2, 0x85, 0x09, 0x5b, 0x47, 0x4d, 0x77, 0x11, 0xf7, 0x8e, 0x34, 0xf4, 0x6b, 0xd1, 0x5c,
	0x8b, 0xca, 0xb8, 0x2c, 0x87, 0xd3, 0x9b, 0xed, 0x43, 0x4f, 0xf1, 0xd5, 0xcc, 0xe6, 0xff, 0xa0,
	0x2c, 0x67, 0x76, 0x15, 0x5f, 0xfd, 0xee, 0x30, 0xfb, 0x16, 0x20, 0xc1, 0x4c, 0xc8, 0x7f, 0x0b,
	0x94, 0xb6, 0x9c, 0x57, 0xab, 0x7c, 0x71, 0xe6, 0xdb, 0x06, 0xb4, 0x26, 0x85, 0x4d, 0x5d, 0xd0,
	0x24, 0x5f, 0x72, 0x51, 0xcd, 0x2b, 0x91, 0x9b, 0x18, 0x67, 0x02, 0xa5, 0x9d, 0x89, 0xa4, 0x9a,
	0xe8, 0x0b, 0xb7, 0x09, 0xfb, 0x0e, 0x06, 0x25, 0x69, 0x30, 0xd6, 0x58, 0x0d, 0x0d, 0x7c, 0xf1,
	0x81, 0x6a, 0x6c, 0x04, 0x5d, 0x8d, 0x89, 0xd0, 0x18, 0xdb, 0xb0, 0xe5, 0x0d, 0x2a, 0xec, 0x38,
	0x5e, 0x24, 0x02, 0x65, 0x8c, 0x61, 0xdb, 0x73, 0x15, 0xa6, 0xd5, 0xc5, 0xb9, 0x42, 0x13, 0x76,
	0x28, 0x70, 0x89, 0xa2, 0x7d, 0x68, 0xff, 0xb4, 0xb2, 0x48, 0x3b, 0x9c, 0x0b, 0x6b, 0x28, 0x70,
	0x70, 0x4f, 0xef, 0xb3, 0x37, 0x4d, 0xe8, 0xdf, 0xc4, 0x69, 0xfe, 0x80, 0xfa, 0x49, 0xc4, 0xc8,
	0x7e, 0x80, 0x96, 0x83, 0x2c, 0xa0, 0xcb, 0x97, 0x3f, 0x99, 0xd1, 0x67, 0x28, 0x1a, 0xbe, 0xfa,
	0xf0, 0xf1, 0xf5, 0x16, 0x44, 0xed, 0x31, 0xc6, 0x69, 0x7e, 0xd5, 0x38, 0x61, 0xd7, 0xa5, 0x89,
	0xe2, 0x52, 0x98, 0x74, 0xa3, 0x38, 0x24, 0x31, 0x8b, 0x06, 0x24, 0x1e, 0x1b, 0x2f, 0xa9, 0x99,
	0x5c, 0xa7, 0x42, 0xa2, 0xc1, 0x97, 0x98, 0xc4, 0x5e, 0x52, 0x33, 0xb9, 0x91, 0x8b, 0xec, 0x85,
	0x49, 0xd0, 0x4b, 0x9c, 0xc9, 0x8f, 0xd0, 0x73, 0x26, 0x3f, 0x0b, 0x99, 0x88, 0x8d, 0x16, 0x7b,
	0x64, 0x31, 0x8c, 0xfa, 0xde, 0x22, 0x75, 0x02, 0x67, 0x30, 0x01, 0x70, 0x06, 0x13, 0xcd, 0xe7,
	0x22, 0xde, 0xe8, 0xf0, 0x35, 0x39, 0xec, 0x46, 0x81, 0x77, 0xe0, 0xa4, 0xb8, 0x6a, 0x9c, 0x9c,
	0xbd, 0x6f, 0xc0, 0xce, 0x94, 0x6b, 0x93, 0xf2, 0xac, 0xba, 0xcd, 0x25, 0xb4, 0x7e, 0x79, 0xf8,
	0xed, 0x8e, 0x01, 0x39, 0xd0, 0x4d, 0x47, 0xb5, 0x77, 0xed, 0x83, 0x96, 0x5e, 0x38, 0xfe, 0xdb,
	0xe4, 0xd2, 0xe5, 0xb9, 0x84, 0xd6, 0x5f, 0x93, 0xe9, 0xaf, 0x2f, 0x50, 0xae, 0xf8, 0x32, 0x73,
	0xca, 0x0b, 0x68, 0xfe, 0xb9, 0x41, 0xf8, 0x1c, 0xbf, 0x12, 0xfe, 0x47, 0xba, 0x79, 0x87, 0xfe,
	0x76, 0xcf, 0x3f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xf6, 0xea, 0x6b, 0xa6, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	EchoSpanish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	EchoChinese(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	EchoEnglish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	EchoHindi(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	EchoArabic(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/api.EchoService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoSpanish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/api.EchoService/EchoSpanish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoChinese(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/api.EchoService/EchoChinese", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoEnglish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/api.EchoService/EchoEnglish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoHindi(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/api.EchoService/EchoHindi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoArabic(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/api.EchoService/EchoArabic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	Echo(context.Context, *Message) (*Message, error)
	EchoSpanish(context.Context, *Message) (*Message, error)
	EchoChinese(context.Context, *Message) (*Message, error)
	EchoEnglish(context.Context, *Message) (*Message, error)
	EchoHindi(context.Context, *Message) (*Message, error)
	EchoArabic(context.Context, *Message) (*Message, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoSpanish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoSpanish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EchoService/EchoSpanish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoSpanish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoChinese_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoChinese(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EchoService/EchoChinese",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoChinese(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoEnglish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoEnglish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EchoService/EchoEnglish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoEnglish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoHindi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoHindi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EchoService/EchoHindi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoHindi(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoArabic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoArabic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EchoService/EchoArabic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoArabic(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "EchoSpanish",
			Handler:    _EchoService_EchoSpanish_Handler,
		},
		{
			MethodName: "EchoChinese",
			Handler:    _EchoService_EchoChinese_Handler,
		},
		{
			MethodName: "EchoEnglish",
			Handler:    _EchoService_EchoEnglish_Handler,
		},
		{
			MethodName: "EchoHindi",
			Handler:    _EchoService_EchoHindi_Handler,
		},
		{
			MethodName: "EchoArabic",
			Handler:    _EchoService_EchoArabic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// MarshalServiceClient is the client API for MarshalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarshalServiceClient interface {
	JSON(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*Bytes, error)
	YAML(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*Bytes, error)
	XML(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*Bytes, error)
}

type marshalServiceClient struct {
	cc *grpc.ClientConn
}

func NewMarshalServiceClient(cc *grpc.ClientConn) MarshalServiceClient {
	return &marshalServiceClient{cc}
}

func (c *marshalServiceClient) JSON(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/api.MarshalService/JSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marshalServiceClient) YAML(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/api.MarshalService/YAML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marshalServiceClient) XML(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/api.MarshalService/XML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarshalServiceServer is the server API for MarshalService service.
type MarshalServiceServer interface {
	JSON(context.Context, *Bytes) (*Bytes, error)
	YAML(context.Context, *Bytes) (*Bytes, error)
	XML(context.Context, *Bytes) (*Bytes, error)
}

func RegisterMarshalServiceServer(s *grpc.Server, srv MarshalServiceServer) {
	s.RegisterService(&_MarshalService_serviceDesc, srv)
}

func _MarshalService_JSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarshalServiceServer).JSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarshalService/JSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarshalServiceServer).JSON(ctx, req.(*Bytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarshalService_YAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarshalServiceServer).YAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarshalService/YAML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarshalServiceServer).YAML(ctx, req.(*Bytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarshalService_XML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarshalServiceServer).XML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarshalService/XML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarshalServiceServer).XML(ctx, req.(*Bytes))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarshalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MarshalService",
	HandlerType: (*MarshalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JSON",
			Handler:    _MarshalService_JSON_Handler,
		},
		{
			MethodName: "YAML",
			Handler:    _MarshalService_YAML_Handler,
		},
		{
			MethodName: "XML",
			Handler:    _MarshalService_XML_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
